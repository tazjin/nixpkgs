/* hex-packages.nix is an auto-generated file -- DO NOT EDIT! */

/* Unbuildable packages:

 * aadya_0_1_0
 * aba_cli_1_0_0
 * aba_model_1_0_0
 * abi_0_1_12
 * absinthe_1_4_0_rc_3
 * absinthe_1_4_12
 * absinthe_ecto_0_1_3
 * absinthe_metrics_0_9_0
 * absinthe_phoenix_1_4_2
 * absinthe_plug_1_0_0
 * absinthe_plug_1_4_5
 * absinthe_plug_cn_1_3_0_rc_1
 * absinthe_relay_1_4_3
 * absinthe_relay_oxo_1_2_1
 * absinthe_throttle_0_4_0
 * absinthe_websocket_0_2_0
 * accent_0_2_0
 * access_pass_0_5_3
 * access_token_2_0_0
 * access_token_extractor_0_1_1
 * account_kit_0_1_0
 * accounting_0_11_0
 * ace_http_0_5_0
 * acme_ex_0_4_1
 * acs_ex_0_3_8
 * active_0_9_0
 * activity_log_0_1_0
 * adam7_0_4_0
 * addict_0_3_0
 * address_us_0_2_1
 * admiral_stats_parser_0_1_0
 * aegis_0_2_0
 * aequitas_1_0_1
 * aerfoirt_0_0_2
 * agent_0_1_0
 * ago_times_0_1_1
 * airbax_0_0_6
 * airbrake_0_5_2
 * airbrake_plug_0_1_1
 * airbrakex_0_1_6
 * airbrakify_0_0_2
 * alarm_clock_0_1_1
 * alarm_clock_pg_0_1_2
 * alchemetrics_0_5_1
 * alchemetrics_0_5_2
 * alchemetrics_tesla_1_1_4
 * alchemetrics_web_0_6_0
 * alcove_0_28_0
 * ale_axp209_0_2_0
 * alembic_3_4_0
 * alexa_plug_0_2_0
 * alexa_request_verifier_0_1_5
 * alexa_verifier_0_1_0
 * alexa_web_0_0_2
 * algolia_0_6_5
 * alice_tielurs_heart_rate_0_0_6
 * alipay_0_0_2
 * aliqin_0_1_1
 * aliyun_1_0_11
 * allowed_hosts_0_1_0
 * alphonse_0_1_0
 * alternate_0_1_5
 * altworx_utils_0_0_5
 * amazon_product_advertising_client_0_2_1
 * amf_0_1_4
 * amp_0_1_0
 * ampex_0_1_1
 * amqp_0_1_1
 * amqp_0_1_4
 * amqp_0_2_0_pre_2
 * amqp_0_2_4
 * amqp_0_3_1
 * amqp_1_0_0_pre_4
 * amqp_1_0_3
 * amqp19_0_1_5
 * amqp_client_3_6_14
 * amqp_client_3_7_4_rc_4
 * amqp_client_3_7_7
 * amqp_director_1_1_2
 * amqp_rpc_0_0_8
 * amrita_0_4_0
 * analysis_prep_0_1_2
 * angellist_0_0_0
 * anka_ecto_0_1_0
 * ansi_to_html_0_2_0
 * antikythera_0_2_0
 * antikythera_aws_0_1_0
 * anubis_0_2_0
 * anubis_0_3_0
 * apache_passwd_md5_1_0_0
 * apartmentex_0_2_3
 * apex_0_3_7
 * api_auth_0_2_0
 * api_authentication_0_1_0
 * api_controller_0_2_0
 * api_playground_0_1_1
 * apiai_0_1_2
 * apns_0_9_4
 * apns4erl_2_2_1
 * apocryphal_0_2_8
 * apollo_tracing_0_4_1
 * apostle_0_0_3
 * apothecary_0_0_1
 * app_version_validator_0_1_0
 * appsignal_1_3_6
 * appsignal_1_7_1
 * appsignal_js_plug_0_2_1
 * apus_0_5_0
 * arangodb_ecto_0_1_0
 * arangoex_0_0_10
 * arb_0_2_2
 * arbor_1_0_5
 * arc_0_6_0
 * arc_manta_0_0_3
 * argent_0_0_1
 * arpeggiate_1_1_1
 * array_1_0_1
 * artifact_0_4_0
 * artifactory_0_0_0
 * artsy_0_1_1
 * as_nested_set_3_1_2
 * asanaficator_0_0_1
 * atlas_0_2_0
 * attest_0_1_0
 * augle_0_3_0
 * auth0_ex_0_3_0
 * auth_test_support_0_0_6
 * authable_0_8_0
 * authable_0_9_2
 * authenticator_1_0_0
 * authex_0_2_2
 * authex_blacklist_redis_0_1_2
 * authority_ecto_0_1_2
 * authsense_1_0_0
 * authtoken_0_2_2
 * auto_doc_0_0_2
 * autobots_license_0_1_0
 * autocompletex_0_1_3
 * avro_ex_0_1_0_beta_0
 * avro_ex_0_1_0_beta_5
 * aws_0_5_0
 * aws_erlang_0_1_1
 * aws_ex_ray_plug_0_1_1
 * aws_http_0_2_4
 * azalea_0_0_1
 * azure_push_client_1_0_0
 * b2_0_0_6
 * b2_client_0_0_2
 * backoff_1_1_3
 * backpack_0_4_0
 * backtrex_0_1_2
 * backwater_3_0_2
 * backy_0_0_16
 * baiji_0_7_0
 * balanced_3_1_0
 * balm_0_1_1
 * bamboo_1_0_0
 * bamboo_1_0_0_rc_3
 * bamboo_aliyun_0_2_0
 * bamboo_config_adapter_0_2_0
 * bamboo_eex_0_1_1
 * bamboo_elastic_email_0_1_0
 * bamboo_espec_0_1_0
 * bamboo_mailjet_0_0_1
 * bamboo_postageapp_0_0_1
 * bamboo_postmark_0_4_2
 * bamboo_sendcloud_0_2_0
 * bamboo_sendgrid_0_1_0
 * bamboo_sendinblue_0_1_0
 * bamboo_smtp_0_0_2
 * bamboo_smtp_1_2_1
 * bamboo_smtp_1_5_0
 * bamboo_sparkpost_1_0_0
 * band_0_5_2
 * bandwidth_1_2_1
 * banking_0_1_2
 * bard_0_0_1
 * barista_0_2_2
 * barlix_0_3_3
 * barracuda_0_4_0
 * barrel_jiffy_0_14_4
 * barrel_jiffy_0_14_5
 * bartender_0_1_0
 * base32_0_1_0
 * base_model_0_2_1
 * basehangul_0_2_1
 * basho_exometer_core_1_0_2
 * basho_exometer_core_1_0_3
 * basho_poolboy_0_8_1_p3
 * basic_auth_2_2_2
 * bastion_0_1_1
 * battlenet_0_0_3
 * battlenetex_0_1_0
 * bauer_0_1_0
 * bbsmq_0_0_6
 * bc_investiments_0_3_5
 * beagle_pru_support_0_7_1
 * beaker_1_3_0
 * beam_olympics_1_2_3
 * beam_to_ex_ast_0_3_3
 * beanstalk_0_1_0
 * beanstream_0_2_5
 * bearcat_phoenix_0_1_1
 * beersearch_0_0_8
 * bees_0_3_0
 * benchwarmer_0_0_2
 * bencode_0_3_0
 * bencoder_0_0_7
 * benx_0_1_2
 * better_params_0_5_0
 * bgg_0_1_0
 * bh_0_0_15
 * binpp_1_1_1
 * birbnest_0_1_2
 * bitbucket_api_0_0_2
 * bitcask_2_0_2
 * bitflyex_0_1_0
 * bitly_0_1_0
 * bitpay_0_2_5
 * blackbook_0_3_1
 * blaguth_1_2_3
 * blazay_1_2_0
 * blaze_cloud_0_0_1
 * blitzy_0_0_3
 * block_timer_0_0_1
 * blockchain_0_1_7
 * blogit_1_2_2
 * bloodhound_0_1_1
 * blue_bird_0_3_8
 * bodyguard_2_2_2
 * boilex_0_2_3
 * bokun_0_0_4
 * bolt_0_1_9
 * boltun_1_0_2
 * bookingsync_api_client_v3_0_0_1
 * booter_0_1_0
 * bootform_0_1_2
 * bootstrap_1_0_0
 * bootstrap_ex_0_0_1
 * bot_framework_0_2_0
 * botanist_0_1_4
 * botfuel_0_1_0
 * bottler_0_5_0
 * bouncer_0_3_0
 * bourne_1_0_1
 * bpe_2_4_0
 * brady_0_0_7
 * branca_0_2_0
 * breadcrumble_1_0_4
 * brewery_0_1_1
 * brighterx_0_0_4
 * brod_2_3_7
 * brotli_0_2_0
 * browser_0_4_1
 * brucke_1_14_7
 * brunhilde_1_6_0
 * bson_0_4_4
 * btrz_ex_auth_api_0_7_0
 * bubbles_url_0_1_2
 * bugsnag_1_6_0
 * bugsnag_erl_1_1_6
 * bugsnex_0_3_1
 * bump_0_1_0
 * bunck_0_1_5
 * bunyan_0_1_0
 * bureaucrat_0_1_4
 * bureaucrat_0_2_4
 * bus_car_0_2_13
 * businex_0_2_0
 * busytone_1_0_0
 * butler_0_6_2
 * butler_0_7_1
 * butler_cage_0_0_2
 * butler_cowsay_0_2_1
 * butler_new_0_4_3
 * butler_tableflip_0_0_3
 * byauth_client_0_1_0
 * bypass_0_8_1
 * cache_tab_1_0_14
 * calcinator_2_4_0
 * calcinator_5_0_0
 * calecto_0_16_2
 * calendar_0_12_4
 * calendar_0_13_2
 * calendar_0_14_2
 * calendar_0_16_1
 * calendar_0_17_4
 * calendar_0_8_1
 * calendar_translations_0_0_4
 * calendrical_0_1_2
 * calibex_0_1_0
 * calliope_0_4_1
 * campminder_0_1_0
 * can_0_0_4
 * canary_1_1_1
 * caramelize_0_1_2
 * carbon_0_1_3
 * carrier_1_0_4
 * carrot_1_1_0
 * cassandra_1_0_0_rc_2
 * cassandra_ecto_0_5_1
 * cassette_plug_1_1_6
 * cassius_0_0_1
 * cast_params_0_0_3
 * cbr_elixir_0_1_3
 * ccs_sdk_1_0_3
 * ccs_service_client_1_0_0
 * certifi_0_1_1
 * cesso_0_1_3
 * cet_0_3_4
 * cfg_17_12_26
 * cgolam_1_0_1
 * changeset_merger_0_3_15
 * channels_0_0_6
 * chaos_spawn_0_8_1
 * chaperon_0_2_2
 * charlotte_0_4_0
 * charm_0_0_1
 * chase_0_1_0
 * chatter_0_0_15
 * chatterbox_0_5_0
 * chatterbox_0_7_0
 * checkpoint_0_1_0
 * chercheville_0_2_0
 * chi2fit_0_8_8
 * chrome_launcher_0_0_4
 * chrome_remote_interface_0_0_6
 * chrome_remote_interface_0_1_0
 * chromecast_0_1_5
 * chromesmith_0_0_1
 * chronex_1_0_3
 * chronic_2_0_2
 * chronik_0_1_10
 * chroxy_0_4_2
 * chroxy_client_0_1_0
 * cipher_1_1_1
 * cipher_1_4_0
 * circlex_0_3_0
 * cl_wifi_0_1_1
 * claws_fcm_0_1_0
 * claws_kafka_0_4_0
 * claws_rabbitmq_0_1_0
 * claws_rest_0_1_0
 * cldr_0_0_1
 * cldrex_0_0_7
 * clickhouse_ecto_0_2_3
 * clickhouse_ecto_odbc_0_2_0
 * clicksign_0_0_2
 * clint_0_0_1
 * clique_0_3_12
 * clique_3_0_1
 * cloak_0_7_0_alpha_2
 * cloud_storage_0_3_2
 * cloud_vision_1_0_0
 * cloud_watch_0_2_6
 * cloudex_1_1_3
 * cloudi_core_1_4_0_rc_4
 * cloudi_core_1_5_4
 * cloudi_core_1_6_0
 * cloudi_core_1_7_3
 * cloudi_service_api_requests_1_7_3
 * cloudi_service_db_1_5_1
 * cloudi_service_db_cassandra_1_3_3
 * cloudi_service_db_cassandra_cql_1_5_1
 * cloudi_service_db_couchdb_1_5_1
 * cloudi_service_db_elasticsearch_1_3_3
 * cloudi_service_db_http_elli_1_6_0
 * cloudi_service_db_memcached_1_5_1
 * cloudi_service_db_mysql_1_5_4
 * cloudi_service_db_pgsql_1_7_3
 * cloudi_service_db_riak_1_3_3
 * cloudi_service_db_tokyotyrant_1_5_0
 * cloudi_service_filesystem_1_7_3
 * cloudi_service_http_client_1_7_3
 * cloudi_service_http_cowboy_1_7_3
 * cloudi_service_http_elli_1_7_3
 * cloudi_service_http_rest_1_7_3
 * cloudi_service_map_reduce_1_7_3
 * cloudi_service_monitoring_1_5_4
 * cloudi_service_null_1_7_3
 * cloudi_service_oauth1_1_7_3
 * cloudi_service_queue_1_7_3
 * cloudi_service_quorum_1_7_3
 * cloudi_service_request_rate_1_7_3
 * cloudi_service_router_1_7_3
 * cloudi_service_tcp_1_7_3
 * cloudi_service_timers_1_5_1
 * cloudi_service_udp_1_7_3
 * cloudi_service_validate_1_7_3
 * cloudi_service_zeromq_1_5_4
 * cloudinaryex_0_0_2
 * cloudinex_0_4_0
 * clox_0_2_0
 * cocktail_0_8_1
 * codecom_0_0_1
 * codelation_messenger_0_1_1
 * cogoli_1_0_1
 * coherence_0_5_0
 * coherence_assent_0_3_1
 * coinbase_0_0_1
 * collidex_0_2_0
 * comeonin_ecto_password_2_1_0
 * commanded_audit_middleware_0_3_0
 * commanded_ecto_projections_0_6_0
 * commanded_eventstore_adapter_0_4_0
 * commanded_extreme_adapter_0_5_0
 * common_device_detector_0_3_0
 * common_graphql_client_0_3_0
 * compass_0_0_3
 * complex_math_0_2_0_rc1
 * concerto_plug_0_1_3
 * concierge_0_0_1
 * conductor_0_3_0
 * conduit_0_12_2
 * conduit_amqp_0_4_6
 * conduit_amqp_0_6_1
 * conduit_appsignal_0_6_1
 * conejo_0_5_0
 * coney_0_4_3
 * conferl_0_0_1
 * conform_2_3_2
 * conform_2_5_2
 * conform_exrm_1_0_0
 * console_0_0_1
 * consolex_0_1_0
 * consul_client_0_1_6
 * contextual_1_0_0
 * core_0_14_1
 * core_data_0_1_0
 * core_utils_0_1_0
 * cors_plug_0_1_3
 * cors_plug_1_1_4
 * cors_plug_1_5_2
 * corsica_1_1_2
 * couchbeam_1_4_2
 * couchbeam_amuino_1_4_3_amuino_5
 * couchbeam_amuino_1_4_3_amuino_8
 * couchdb_client_0_2_5
 * couchdb_connector_0_5_0
 * couchex_0_8_1
 * countries_erlang_0_5_0
 * courier_0_0_3
 * courier_web_0_0_8
 * cover_my_relief_0_1_1
 * coverex_1_4_15
 * cowboy_1_0_1
 * cowboy_1_0_4
 * cowboy_1_1_2
 * cowboy_oauth_0_2_14
 * cowboy_routes_tree_0_2_0
 * cowboy_session_1_0_0
 * cowboy_swagger_1_1_0
 * cowboy_swagger_2_1_0
 * cowlib_1_0_2
 * cowlib_1_3_0
 * cpg_1_7_0
 * cpg_1_7_3
 * cpool_0_1_1
 * cps_0_4_0
 * cqrex_0_0_1
 * cqrs_0_0_7
 * cqrs_commands_0_0_6
 * craterl_0_2_3
 * crawler_1_0_0
 * crawlie_1_0_0
 * cream_0_2_0
 * crest_0_0_1_dev
 * crontab_1_1_3
 * crudex_0_0_2
 * crumb_0_0_2
 * crux_rest_0_1_4
 * crypto_ext_0_1_4
 * crypto_rsassa_pss_1_0_0
 * cryptx_0_0_3
 * css_colors_0_2_1
 * csv_reader_1_0_0
 * csvto_0_1_2
 * ctex_0_1_0
 * cth_readable_1_4_2
 * cumulus_0_2_0
 * curator_0_2_7
 * curator_0_2_8
 * curator_confirmable_0_1_0
 * curator_database_authenticatable_0_1_0
 * curator_registerable_0_1_0
 * curator_session_keeper_0_1_0
 * currencies_0_5_1
 * currency_conversion_0_3_2
 * currency_formatter_0_7_0
 * currently_0_0_3
 * curtains_0_0_1
 * customized_hdr_histogram_0_3_2
 * cuttlefish_2_0_12
 * cuttlefish_2_0_7
 * cuttlefish_2_1_4
 * dankuserservice_0_1_2
 * dataframe_0_3_1
 * dataloader_1_0_1
 * dataloader_1_0_2
 * datamusex_0_2_0
 * datatrans_helper_0_2_0
 * date_params_0_1_0
 * datomex_0_0_5
 * datomic_gen_server_2_2_5
 * dayron_0_1_1
 * db_0_9_0
 * db2kafka_0_5_0
 * dbi_1_0_0
 * dbi_1_0_2
 * dbi_1_1_0
 * dbi_1_1_3
 * dbi_mysql_0_1_1
 * dbi_pgo_0_1_0
 * dbi_pgsql_0_2_0
 * dbi_sqlite_0_1_0
 * dbus_0_7_0
 * dd_0_0_3
 * ddb_client_0_2_2
 * ddb_connection_0_1_22
 * decoratex_1_1_0
 * decorators_0_1_0
 * defql_0_1_1
 * deigma_1_0_1
 * denrei_0_2_5
 * depcache_1_4_0
 * device_1_0_0
 * dexy_lib_0_2_1
 * dflow_0_3_0
 * dgraph_ex_0_1_5
 * dh_date_1_0_0
 * dhcp_1_0_0
 * dhcp_server_0_4_0
 * di_0_1_0
 * dialyze_0_1_4
 * dicer_0_8_0
 * difficult_0_0_2
 * digitalocean_0_1_1
 * digraph_viewer_0_1_0
 * diplomat_0_10_0
 * director_17_12_7
 * director_17_9_10
 * director_18_4_29
 * discord_ex_1_1_18
 * discorelic_0_1_0
 * discount_0_7_0
 * discourse_as_sso_erlang_0_7_0
 * discourse_elixir_0_5_1
 * discovery_0_5_7
 * dispatch_compiler_1_0_0_alpha1
 * display_purposes_0_1_0
 * distance_api_matrix_2_0_1
 * distillery_packager_1_0_4
 * dna_search_0_0_1
 * doc_plug_1_0_2
 * docker_0_3_0
 * docraptorx_0_1_1
 * dogstatsde_0_8_0
 * dolla_0_3_0
 * domainr_0_0_1
 * doorman_0_6_0
 * doppler_0_1_0
 * dotenv_0_0_4
 * dotenv_elixir_0_0_2
 * double_bypass_0_0_1
 * dpd_client_0_0_6
 * dpos_0_2_1
 * dproto_0_2_8
 * dqe_0_4_15
 * dqe_fun_0_1_11
 * dqe_fun_0_2_1
 * dqe_idx_ddb_0_2_4
 * dqe_idx_pg_0_3_6
 * dqe_idx_pg_0_5_7
 * drab_0_7_7
 * drab_0_9_0
 * drab_pagination_0_1_0
 * drawille_0_0_1
 * driftwood_0_1_0
 * drivex_0_0_2
 * dropbox_0_0_7
 * druuid_0_3_0
 * dtds_0_1_0
 * duckduckgo_0_1_0
 * duo_client_0_0_1_beta_2
 * duoweb_1_0_0
 * dynamic_env_0_1_0
 * e2qc_1_2_1
 * e_quip_0_0_1
 * earmark_tag_cloud_0_1_0
 * eauthor_17_12_30
 * eavro_0_0_5
 * ecc_0_1_3
 * ecc_compact_1_0_2
 * ecdo_0_1_4
 * echo_0_2_0
 * echonest_ex_0_0_2
 * ecto_0_2_4
 * ecto_1_1_9
 * ecto_2_0_0_rc_6
 * ecto_2_1_0_rc_5
 * ecto_2_2_0_rc_1
 * ecto_2_2_10
 * ecto_as_state_machine_1_0_6
 * ecto_atom_1_0_0
 * ecto_atomized_map_0_1_0
 * ecto_audit_0_1_2
 * ecto_autoslug_field_0_5_1
 * ecto_boot_migration_0_1_1
 * ecto_cassandra_1_0_0_rc_3
 * ecto_cast_int_to_string_0_1_0
 * ecto_cast_to_string_0_1_1
 * ecto_conditionals_0_1_0
 * ecto_cursor_pagination_0_1_1
 * ecto_dot_0_1_0
 * ecto_dripper_0_1_0
 * ecto_enum_1_1_0
 * ecto_facade_0_2_2
 * ecto_factory_0_0_6
 * ecto_fields_1_1_5
 * ecto_fixtures_0_0_2
 * ecto_gettext_0_1_6
 * ecto_gss_0_1_6
 * ecto_hlclock_0_1_1
 * ecto_homoiconic_enum_0_1_2
 * ecto_hstore_0_0_1
 * ecto_identifier_0_1_0
 * ecto_instashard_0_2_1
 * ecto_interval_0_1_2
 * ecto_it_0_2_0
 * ecto_job_0_3_0
 * ecto_lazy_float_0_1_2
 * ecto_ldap_0_4_0
 * ecto_logger_json_0_1_0
 * ecto_ltree_0_1_0
 * ecto_materialized_path_0_2_0
 * ecto_merge_0_1_1
 * ecto_migrate_0_6_3
 * ecto_missing_fields_0_1_0
 * ecto_mnesia_0_9_1
 * ecto_network_0_7_0
 * ecto_ordered_0_2_0_beta1
 * ecto_paging_0_8_4
 * ecto_pg_extras_0_1_1
 * ecto_poly_1_0_3
 * ecto_postgres_enum_1_0_1
 * ecto_profiler_0_1_4
 * ecto_ranked_0_3_0
 * ecto_replay_sandbox_1_0_0
 * ecto_rut_1_2_2
 * ecto_schema_store_2_0_0
 * ecto_schema_store_2_3_2
 * ecto_sharding_0_0_8
 * ecto_shortcuts_0_1_6
 * ecto_soft_delete_0_1_0
 * ecto_south_0_1_4
 * ecto_state_machine_0_3_0
 * ecto_state_mc_0_1_3
 * ecto_timestamps_1_0_0
 * ecto_trail_0_2_4
 * ecto_translate_0_2_5
 * ecto_uk_postcode_0_2_0
 * ecto_ulid_0_1_0
 * ecto_validation_case_0_1_1
 * ectograph_0_2_0
 * ectonum_1_0_1
 * ectoo_0_2_0
 * ectophile_0_3_0
 * ectoplasm_0_2_0
 * ed209_0_1_0
 * edbg_0_1_4
 * eden_1_0_2
 * edgarex_0_0_2
 * edis_proto_0_1_0
 * eeb_0_2_0
 * efrisby_0_2_0
 * efuse_1_0_2
 * egaugex_0_1_0
 * egndf_0_2_2
 * eidetic_plug_0_3_0
 * eightyfour_0_2_1
 * eimp_1_0_6
 * eio_0_1_0
 * eipmi_2_0_1
 * ejabberd_18_6_0
 * ekstat_0_2_2
 * elastex_0_2_0
 * elastic_2_6_1
 * elastic_3_0_0
 * elastic_flow_0_1_0
 * elastic_scrivener_1_0_0
 * elasticsearch_logger_backend_0_1_0
 * elaxtic_0_0_1
 * elb_1_0_1
 * elegua_0_8_23
 * eleveldb_2_1_3
 * eleveldb_2_2_19
 * elibom_ex_0_1_3
 * elibphonenumber_1_0_1
 * elistrix_0_0_5
 * elixero_0_1_1
 * elixilorem_0_0_1
 * elixir_ale_0_5_5
 * elixir_ale_0_5_7
 * elixir_ale_dummy_0_1_1
 * elixir_cms_0_1_0
 * elixir_drawille_0_0_3
 * elixir_feed_parser_2_0_0
 * elixir_google_drive_api_0_4_1
 * elixir_google_spreadsheets_0_1_10
 * elixir_ipfs_api_0_1_0
 * elixir_kubernetes_cluster_0_1_9
 * elixir_thrift_hbase_0_0_3
 * elixir_uber_0_0_7
 * elixir_weather_data_0_2_2
 * elixirbotkit_0_5_0
 * elixometer_1_2_1
 * elli_1_0_4
 * elli_2_0_2
 * elli_3_1_0
 * elli_basicauth_0_1_0
 * elli_cache_1_0_1
 * elli_cloudfront_0_3_3
 * elli_json_0_1_0
 * elli_json_gate_keeper_0_1_1
 * elli_otter_0_2_0
 * elli_prometheus_0_1_1
 * elli_websocket_0_1_0
 * elli_xpblfe_0_2_3
 * elmdb_0_4_1
 * elmit_0_0_1
 * elogstash_1_0_0
 * elvis_0_4_2
 * elvis_core_0_3_5
 * elvis_core_0_4_0
 * elvis_core_0_4_1
 * emarkdown_0_1_0
 * emeter_18_6_13
 * eministat_0_10_1
 * eml_amf0_1_0_1
 * eml_gen_rtmp_client_0_1_0
 * eml_gen_rtmp_server_0_2_0
 * eml_rtmp_0_2_0
 * eml_rtmp_handshake_1_0_0
 * eml_rtmp_session_0_1_0
 * emojiclock_2_0_4
 * emphatis_0_2_1
 * enacl_0_17_2
 * engine_0_1_2
 * enotify_0_1_0
 * ensq_0_1_7
 * env_conf_0_3_0
 * envelope_0_4_0
 * envelope_1_1_0
 * eon_4_1_0
 * eosrpc_0_3_0
 * epam_1_0_4
 * epcap_compile_1_0_1
 * eper_0_99_1
 * epipe_1_0_0
 * eplugin_0_1_4
 * epubnub_0_1_0
 * eql_0_1_2
 * eradius_0_9_2
 * eredis_sync_0_1_2
 * ereturn_18_6_14
 * erl_base58_0_0_1
 * erl_pengine_0_1_1
 * erlang_dbus_0_2_0
 * erlang_lua_0_1_0
 * erlang_osc_1_0_1
 * erlang_rethinkdb_0_2_2
 * erlang_tls_1_0_3
 * erlang_xxhash_0_2_0
 * erlastic_search_1_3_0
 * erldocs_0_9_6
 * erldocs_other_0_9_6
 * erldyn_0_7_2
 * erlexec_1_9_1
 * erljwt_2_0_2
 * erlmld_0_1_5
 * erlogger_0_1_0
 * erlpocket_2_0_3
 * erlpop_2_3_0
 * erlsass_1_1_0
 * erltrace_0_1_6
 * erlware_commons_0_18_0
 * erlware_commons_0_20_0
 * erocksdb_0_4_1
 * errol_0_2_0
 * erwatch_0_3_0
 * es_0_0_1
 * esaml_3_4_0
 * esarch_0_1_0
 * escalus_2_6_4
 * esip_1_0_24
 * esockd_4_1_1
 * espec_phoenix_0_6_10
 * espec_phoenix_helpers_0_4_0
 * esx_0_7_0
 * etcd_0_0_2
 * etcp_17_9_10
 * eth_0_4_0
 * eth_contract_0_2_2
 * etls_1_2_0
 * ets_cas_0_1_1
 * etude_request_0_2_0
 * euler_0_0_1
 * european_vat_0_1_0
 * event_bus_metrics_0_2_4
 * event_bus_postgres_0_2_7
 * event_queues_2_0_0
 * event_source_encoder_0_0_3
 * eventstore_0_14_0
 * eventstore_0_7_1
 * everex_0_1_1
 * everything_location_0_0_1
 * eview_0_14_0
 * evil_clock_0_1_0
 * evm_0_1_14
 * ewebmachine_2_2_0
 * ewpcap_1_0_1
 * ex2ms_1_4_0
 * ex_abi_0_1_13
 * ex_activity_0_2_0
 * ex_admin_0_8_2
 * ex_admin_runtime_0_8_3_dev
 * ex_aequo_0_1_0
 * ex_aerospike_0_0_1
 * ex_aircall_0_3_3
 * ex_aliyun_ots_0_1_2
 * ex_anti_gate_0_3_3
 * ex_audit_0_4_1
 * ex_aws_1_0_0
 * ex_aws_1_0_0_rc_4
 * ex_aws_metadata_0_2_0
 * ex_bitcask_0_1_0
 * ex_blockchain_0_1_0
 * ex_celery_0_2_0
 * ex_cell_0_0_11
 * ex_chimp_0_0_3
 * ex_clacks_0_1_2
 * ex_cldr_1_6_2
 * ex_cldr_currencies_1_0_0
 * ex_cldr_dates_times_1_3_0
 * ex_cldr_languages_0_1_1
 * ex_cldr_lists_1_1_0
 * ex_cldr_numbers_1_5_0
 * ex_cldr_territories_1_3_1
 * ex_cldr_units_1_2_1
 * ex_clean_pagination_0_0_3
 * ex_cloudinary_0_3_0
 * ex_codeship_1_0_0
 * ex_conf_0_1_3
 * ex_consul_url_0_1_1
 * ex_cors_0_2_1
 * ex_css_modules_0_0_5
 * ex_csv_editor_0_2_1
 * ex_dash_0_1_5
 * ex_datadog_plug_0_5_0
 * ex_debug_toolbar_0_5_0
 * ex_dgraph_0_2_0_alpha_5
 * ex_doc_makeup_0_4_1
 * ex_dockerapi_0_0_1
 * ex_easypost_2_0_1
 * ex_edn_0_1_2
 * ex_factory_0_1_3
 * ex_fix_0_2_5
 * ex_form_0_1_0
 * ex_golos_0_11_1
 * ex_google_0_1_4
 * ex_gpgme_0_1_3
 * ex_gram_0_5_0_rc6
 * ex_heremaps_0_1_0
 * ex_hubic_0_1_0
 * ex_ical_0_2_0
 * ex_intercom_0_0_4
 * ex_iss_1_0_0
 * ex_jenkins_0_1_4
 * ex_json_logger_1_0_0
 * ex_kpl_0_1_2
 * ex_l7_0_3_0
 * ex_line_bot_sdk_0_0_8
 * ex_line_pay_0_1_0
 * ex_machina_2_2_0
 * ex_microsoftbot_2_0_0
 * ex_money_2_6_1
 * ex_mustang_0_2_0
 * ex_ncurses_0_3_1
 * ex_nrel_0_3_1
 * ex_oauth2_provider_0_4_0
 * ex_one_signal_0_1_0
 * ex_openssl_0_1_2
 * ex_operation_0_1_0
 * ex_orient_1_5_1
 * ex_ovh_0_4_0
 * ex_parsec_0_2_1
 * ex_pke_0_1_0
 * ex_plivo_0_1_1
 * ex_poloniex_0_0_4
 * ex_prometheus_io_0_0_5
 * ex_pwned_0_1_2
 * ex_queb_0_2_2
 * ex_queb_1_0_1
 * ex_rabbitmq_rpc_1_0_0
 * ex_rated_1_2_2
 * ex_raycast_0_1_0
 * ex_razorpay_0_1_1
 * ex_riak_cs_0_1_1
 * ex_saferpay_0_2_2
 * ex_server_timings_0_2_3
 * ex_sharp_0_0_6
 * ex_sieve_0_6_1
 * ex_sieve_html_0_5_0
 * ex_synapse_0_1_0
 * ex_syslogger_1_4_0
 * ex_tumblr_0_0_1
 * ex_twilio_0_5_1
 * ex_twilio_0_6_0
 * ex_twilio_bootstrap_0_1_2
 * ex_unit_emacs_0_1_2
 * ex_uptimerobot_0_4_0
 * ex_usps_0_1_0
 * ex_web_0_2_4
 * ex_wechat_0_1_8
 * ex_wemo_0_1_0
 * ex_wire_0_1_1
 * ex_xirr_1_0_0
 * ex_zendesk_0_1_0
 * ex_zoominfo_0_1_0
 * ex_zurb_foundation_0_4_0
 * exalice_0_0_6_alpha
 * exauth_0_0_1
 * exbuf_plug_0_0_6
 * excetera_0_0_3
 * excheck_0_6_0
 * excon_3_0_3
 * excountries_0_0_3
 * exdatadog_0_1_0
 * exdesk_0_2_0
 * exdets_0_6_8
 * exdjango_0_4_0
 * exdm_0_0_4
 * exdn_2_1_2
 * exdns_0_0_2
 * exdweet_0_0_1
 * exemplar_0_5_0_rc1
 * exeque_0_1_0
 * exexec_0_1_0
 * exfacebook_0_1_1
 * exfcm_0_1_0
 * exfile_0_1_5
 * exfile_0_3_6
 * exfile_b2_0_2_2
 * exfile_encryption_0_0_2
 * exfile_imagemagick_0_1_5
 * exfile_memory_0_1_0
 * exfile_s3_0_0_2
 * exfirebase_0_4_0
 * exfoaas_0_0_2
 * exfsm_0_1_3
 * exgingerapi_0_0_6
 * exgpg_0_0_3
 * exgrafana_0_1_2
 * exgrid_1_0_0
 * exhal_7_1_1
 * exhn_1_1_4
 * exintercom_0_1_6
 * exjira_0_0_1
 * exjson_0_6_0
 * exkad_0_0_2
 * exkismet_0_0_2
 * exkml_0_2_6
 * exkonsument_3_2_1
 * exlogger_0_2_0
 * exmagick_0_0_5
 * exmld_0_1_4
 * exmorph_1_1_1
 * exmud_0_0_1
 * exnumerator_1_7_2
 * exoffice_0_2_0
 * exometer_core_1_5_1
 * exometer_core_1_5_2
 * exometer_datadog_0_4_5
 * exometer_fetch_0_1_0
 * exometer_influxdb_0_5_8
 * exometer_report_graphite_1_0_1
 * exometer_report_lager_1_0_0
 * exometer_zabbix_0_1_0
 * exon_0_1_11
 * exos_1_0_0
 * exosql_0_2_63
 * exparticle_0_0_6
 * expcap_0_1_0
 * expected_0_1_1
 * explay_0_1_5
 * explay_fork_0_1_4
 * explode_1_0_0
 * expostal_0_2_0
 * expr_0_1_0
 * express_1_3_3
 * exprotobuf_1_0_2
 * exprotobuf_1_1_0
 * exprotobuf_1_2_9
 * exq_scheduler_0_4_1
 * exq_ui_0_9_0
 * exrabbit_0_0_2
 * exrabbitmq_2_11_1
 * exrecaptcha_0_0_3
 * exrequester_0_5_2
 * exrethinkdb_0_0_3
 * exrm_0_14_9
 * exrm_0_18_8
 * exrm_0_19_9
 * exrm_deb_0_0_7
 * exseed_0_0_4
 * exsentry_0_7_1
 * exshopify_0_3_0
 * exsimpleauth_1_0_0
 * exsolr_0_0_1
 * exsozu_0_4_0
 * exstatic_0_1_0
 * exsyslog_1_0_1
 * extatic_0_2_0
 * extatic_0_2_1
 * extatic_console_0_2_0
 * extatic_datadog_0_2_0
 * extatus_0_2_6
 * extensor_0_1_3
 * external_service_0_8_6
 * exth_crypto_0_1_4
 * extmpfs_0_2_195
 * extras_0_1_2
 * extreme_0_10_0
 * extreme_0_12_1
 * extreme_system_0_2_14
 * extripe_1_2_2
 * extruder_0_0_1
 * extus_0_1_0
 * exubx_0_1_0
 * exurban_0_0_1
 * exw3_0_1_4
 * exwechat_0_1_1
 * exwrapper_0_2_106
 * eye_drops_1_3_0
 * ez_calendar_0_1_6
 * ezlib_1_0_4
 * ezmodex_0_4_0
 * ezmq_0_2_0
 * facebook_0_10_0
 * facebook_messenger_0_4_0
 * fake_cas_1_3_2
 * fake_server_1_4_0
 * faker_elixir_0_0_1
 * falcon_plus_api_0_2_1
 * farmbot_6_4_1
 * fast_tls_1_0_23
 * fast_xml_1_1_24
 * fast_xml_1_1_29
 * fast_xml_1_1_32
 * fast_yaml_1_0_15
 * fastimage_1_0_0_rc2
 * favicon_0_0_7
 * fcm_0_1_0
 * fcmex_0_2_0
 * fdb_5_1_7_1
 * feedex_0_1_4
 * feedistiller_2_0_2
 * feedlex_0_0_1
 * feedme_0_0_1
 * feedraptor_0_3_0
 * fernet_ecto_1_1_0
 * fernetex_0_3_1
 * fettle_plug_1_0_0
 * ffi_0_0_1_alpha
 * fifo_db_0_2_8
 * fifo_dt_0_1_66
 * fifo_dt_0_2_26
 * fifo_lager_0_1_8
 * fifo_s3_0_2_15
 * fifo_spec_0_1_27
 * fifo_spec_0_1_34
 * fifo_utils_0_1_20
 * fifo_utils_0_1_53
 * figaro_0_1_0
 * file_system_0_1_0
 * filepreviews_1_0_1
 * filtrex_0_4_2
 * finance_0_0_4
 * finch_0_0_3
 * fintech_0_1_2
 * fintex_0_3_0
 * fire_auth_0_1_0
 * fireworks_0_7_0
 * fitbit_0_0_1
 * fitex_0_0_1
 * fitz_0_1_0
 * fixturist_0_1_1
 * flames_0_3_2
 * flashtag_0_0_1
 * flashtag_api_0_0_1
 * fleet_api_0_0_15
 * flickrex_0_7_0
 * flippant_1_0_0
 * floorplan_0_1_1
 * flower_0_1_4
 * flower_power_0_3_2
 * fly_0_1_6
 * fn_expr_0_1_1
 * foil_0_1_2
 * folsom_ddb_0_3_1
 * font_awesome_phoenix_1_0_0
 * font_awesomex_4_0_0
 * forecast_io_0_2_2
 * form_data_0_1_1
 * formex_0_6_7
 * formex_ecto_0_2_1
 * formex_vex_0_1_1
 * forms_0_0_1
 * formulator_0_1_7
 * formy_0_1_0
 * forseti_2_1_0
 * fqc_0_1_7
 * framboise_0_1_0
 * frank_0_0_3
 * freddy_0_13_1
 * freegeoip_0_0_5
 * freegeoipx_0_0_2
 * freelixir_0_1_0
 * freshbooks_api_client_0_3_1
 * fryse_0_1_0
 * fs_2_12_0
 * fs_sync_1_1_2
 * fs_sync_1_1_3
 * fswitch_1_1_4
 * fswitch_1_4_1
 * fucking_great_advice_0_0_2
 * fuentes_0_0_3
 * fugue_0_1_6
 * fun_with_flags_1_0_0
 * fun_with_flags_ui_0_4_1
 * funnel_0_4_1
 * fyyd_ex_0_2_0
 * gandalf_0_2_0
 * gauc_0_17_1
 * gc_storage_0_2_0
 * gcloud_0_0_1
 * gcloudex_0_4_4
 * gcloudex_storage_0_10_0
 * gcmex_0_0_1
 * gcp_auth_0_1_0
 * gdrive_0_2_0
 * gelf_0_1_0
 * gen_amqp_3_1_0
 * gen_cycle_1_0_2
 * gen_fw_18_6_2
 * gen_leader_0_1_0
 * gen_logger_1_2_1
 * gen_mqtt_0_4_0
 * gen_queue_task_bunny_0_1_1
 * gen_rest_client_17_12_24
 * gen_rmq_1_0_0
 * gen_rpc_2_1_0
 * gen_smtp_0_9_0
 * gen_worker_0_0_4
 * genstage_kafka_0_1_0
 * geo_0_9_3
 * geo_1_5_0
 * geo_2_1_0
 * geo_postgis_1_1_0
 * geo_postgis_2_0_0
 * geocoder_0_6_2
 * geoip_0_2_0
 * geom_1_0_0
 * get_medium_0_3_0
 * getatrex_0_1_1
 * gh_webhook_plug_0_0_5
 * gil_0_0_3
 * gimei_0_0_2
 * gimei_ex_1_0_0
 * giphy_0_1_1
 * gisla_2_0_0
 * git_status_0_1_0
 * github_trend_ex_0_2_1
 * giza_0_0_1
 * glob_0_0_9
 * gmail_0_1_20
 * gocardless_1_0_3
 * godaddy_0_4_0
 * godfist_0_5_0
 * gold_0_16_3
 * golem_0_0_1_alpha3
 * google_api_client_1_1_0
 * google_api_cloud_monitoring_0_0_1
 * google_api_cloud_user_accounts_0_0_1
 * google_api_consumer_surveys_0_0_1
 * google_api_play_movies_partner_0_0_1
 * google_api_prediction_0_0_1
 * google_api_qpx_express_0_0_1
 * google_api_resource_views_0_0_1
 * google_api_task_queue_0_0_1
 * google_auth_0_0_2
 * google_books_0_0_2
 * google_directions_generator_0_1_0
 * google_geocoding_api_0_1_3
 * google_maps_0_9_0
 * gossamer_amqp_0_1_0
 * goth_0_0_3
 * goth_0_1_6
 * goth_0_2_1
 * goth_0_4_0
 * goth_0_5_1
 * goth_0_7_2
 * goth_0_8_2
 * goth_0_9_0
 * govtrack_0_7_3
 * gpb_3_18_8
 * gpb_3_27_3
 * gpb_3_28_1
 * gpb_4_1_3
 * gpb_4_1_5
 * gpb_4_1_9
 * gpb_4_2_0
 * graffinite_0_4_0
 * graphql_parser_0_0_3
 * graphql_relay_0_5_0
 * graveyard_0_1_0
 * greenhouse_0_0_1
 * griffin_0_1_0
 * gringotts_1_1_1_rc
 * group_manager_0_0_8
 * group_me_0_1_1
 * grpc_0_3_0_alpha_2
 * grpc_lib_0_1_2
 * grpcbox_plugin_0_2_0
 * gtfs_realtime_viz_0_9_0
 * guard_gen_0_1_0
 * guardian_0_14_1
 * guardian_0_14_5
 * guardian_1_0_0_beta_1
 * guardian_1_0_1
 * guardian_1_1_0
 * guardian_backdoor_1_0_0
 * guardian_db_0_8_0
 * guardian_db_1_1_0
 * guardian_firebase_0_1_0
 * guardian_jwe_0_1_0
 * guardian_trackable_0_1_1
 * gulib_0_1_0
 * gun_1_0_0_pre_1
 * gun_1_0_0_pre_4b
 * guri_0_2_1
 * gustav_0_1_2
 * h1_2_1_1
 * hackney_1_3_1
 * hackney_1_3_2
 * hackney_1_4_10
 * hackney_1_4_4
 * hackney_1_4_8
 * hackney_1_6_1
 * hackney_1_6_6
 * hammer_plug_1_0_0
 * haphazard_0_4_0
 * hare_0_1_9
 * harfleur_0_1_0
 * harmonium_0_1_0
 * hash_ring_0_4_1
 * hash_ring_ex_1_1_2
 * hashids_erlang_1_0_5
 * hbasex_0_1_6
 * hdr_histogram_0_3_0
 * hdr_histogram_0_3_2
 * header_token_auth_1_0_0
 * health_checkup_0_1_0
 * heartcheck_0_3_0
 * hedwig_flowdock_0_1_2
 * hedwig_hipchat_0_9_4
 * hedwig_messenger_0_1_0
 * hedwig_simple_responders_0_1_2
 * hedwig_sms_0_1_0
 * hedwig_sonar_0_1_6
 * hedwig_xmpp_1_0_0
 * heimdall_0_6_8
 * heja_0_1_4
 * helf_0_0_3
 * helium_0_1_0
 * hello_world_header_0_0_1
 * heroku_crashdumps_0_1_0
 * hex_searcher_1_0_0
 * hexdocset_1_0_0
 * hexoku_0_1_0
 * hidraw_0_2_1
 * hierarch_0_1_1
 * hivent_3_0_0
 * hkdf_0_1_0
 * hlj_upyun_0_1_2
 * hmac_auth_ex_0_3_0
 * hmc5883l_0_5_0
 * hoax_0_11_2
 * holiday_japan_0_0_1
 * honeybadger_0_10_2
 * honeydew_1_1_6
 * honeydew_ecto_notify_queue_0_1_0
 * honeywell_0_1_1
 * hoover_0_1_0
 * hora_1_0_0
 * horatio_0_2_0_rc1
 * hr_0_2_2
 * hrafn_0_1_2
 * hstore_0_0_2
 * html5ever_0_1_1
 * html5ever_0_5_0
 * html5ever_0_6_1
 * htpasswd_1_0_2
 * http_basic_auth_0_1_0
 * http_client_0_1_2
 * http_event_server_0_2_6
 * http_mock_pal_0_1_0
 * http_proxy_1_3_1
 * http_router_0_10_0
 * http_sign_0_1_1
 * httparrot_1_0_2
 * httpc_aws_0_1_3
 * httpipe_adapters_hackney_0_11_0
 * httpoison_0_10_0
 * httpoison_0_7_1
 * httpoison_0_7_5
 * httpoison_0_8_0
 * httpoison_0_8_3
 * httpoison_0_9_2
 * httpotion_0_2_4
 * httpotion_2_2_2
 * hubspotex_0_0_6
 * hull_0_1_0
 * hunter_0_4_1
 * hut_1_2_0
 * hydra_0_0_1
 * hyperbuffs_0_1_0
 * hyperex_0_1_1
 * ibm_push_0_1_1
 * icalendar_0_7_0
 * icndb_0_1_0
 * iconv_1_0_8
 * idfk_0_1_0
 * ielixir_0_9_5
 * ierl_0_3_1
 * iframe_headers_0_1_0
 * iland_0_1_8
 * image_lib_0_1_0
 * image_plug_parser_1_0_0
 * inch_ex_0_5_6
 * inch_test_0_0_1
 * indiana_0_1_5
 * infinite_times_0_1_1
 * infuse_0_3_5
 * ink_0_7_4
 * inner_cotton_0_2_2
 * input_event_0_2_1
 * inquisitor_jsonapi_0_1_0
 * instamojo_0_1_0
 * instana_plug_0_1_1
 * instream_0_15_0
 * instream_0_16_0
 * instream_0_17_1
 * instruments_1_0_0
 * integer_to_ip_0_1_0
 * interactor_0_1_0
 * intercept_1_0_0
 * intercom_0_0_1
 * invoicex_1_0_0_rc_13
 * inwx_domrobot_0_1_0
 * iona_0_4_0
 * ipgeobase_0_0_1
 * irc_parser_0_1_0
 * is_auto_imported_bif_17_8_24
 * isaac_0_0_1
 * isn_2_0_0
 * iso_erlang_0_11_0
 * istype_0_2_3
 * itk_queue_0_9_8
 * itunes_0_1_0
 * ivar_0_10_0
 * ivar_0_10_1
 * ivar_httpoison_0_2_0
 * iyzico_1_6_5
 * ja_resource_0_3_1
 * ja_serializer_0_13_0
 * jabbax_0_1_0
 * jaeger_passage_0_1_11
 * jam_1_0_0
 * jamdb_oracle_0_1_4
 * janrain_0_0_1
 * japanese_holiday_0_0_2
 * jason_erl_1_0_2
 * jaws3_0_1_1
 * jaxon_0_1_2
 * jc_1_2_1
 * jchash_0_1_0
 * jeaux_0_7_0
 * jesse_1_4_0
 * jirex_0_0_3
 * joken_0_13_1
 * joken_0_16_1
 * joken_1_5_0
 * jolt_0_1_0
 * json_api_assert_0_0_2
 * json_api_query_builder_1_0_2
 * json_to_xml_0_4_1
 * json_transform_1_0_8
 * jsonapi_0_8_0
 * jsonrpc2_1_0_3
 * jsxn_0_2_1
 * jsxrecord_1_0_1
 * juicy_0_1_0
 * jun_0_1_11
 * jun_0_1_12
 * jungle_inflexor_0_1_3
 * jupyter_0_2_0
 * juspay_api_library_0_1_0
 * juspay_expresscheckout_0_1_0
 * jwks_rsa_0_1_0
 * jwt_0_1_5
 * jwt_test_utils_0_2_0
 * kaa_0_2_5
 * kaffeine_0_2_0
 * kafka_ex_mock_0_1_0
 * kafka_genstage_0_1_1
 * kafka_impl_0_5_0
 * kafka_logger_backend_0_1_10
 * kafka_protocol_0_9_1
 * kalecto_0_3_3
 * kalends_0_6_5
 * kane_0_5_0
 * kanin_0_6_0
 * kaper_0_0_6
 * kashe_1_0_1
 * katana_0_4_0
 * katana_code_0_1_0
 * katana_code_0_1_2
 * katana_test_1_0_1
 * katipo_0_7_0
 * kaufmann_ex_0_2_1_alpha
 * kavenegar_0_0_1
 * kazan_0_8_0
 * kdtree_1_0_0
 * keccak_2_0_0
 * keccakf1600_2_0_0
 * keccakf1600_orig_2_0_0
 * keelless_0_1_0
 * keenex_1_0_1
 * kerosene_0_8_0
 * keycloak_0_2_0
 * keylex_0_1_0
 * keymaster_0_0_3
 * kia11y_0_1_1
 * kickbox_0_1_0
 * kill_bill_6_0_0
 * kindred_0_0_1
 * kinesis_client_0_2_0
 * kinja_0_0_1
 * kitto_0_8_0
 * kla_0_8_0_rc4
 * komachi_heartbeat_0_2_0
 * kovacs_0_9_2
 * kronky_0_5_0
 * kronos_ecto_0_1_0
 * ku_0_1_1
 * kuberl_0_2_0
 * kulib_0_1_0
 * kunaio_ex_0_1_0
 * kvs_2_1_0
 * lab_0_2_2_dev
 * laboratory_0_0_1
 * lager_2_1_1
 * lager_exometer_backend_0_1_0
 * lager_graylog_0_1_3
 * lager_graylog_1_1_0
 * lager_humio_backend_1_2_4
 * lager_json_formatter_0_2_4
 * lager_logstash_backend_0_1_3
 * lager_watchdog_0_1_10
 * lapin_0_3_4
 * lasp_0_8_2
 * lasp_bench_0_0_1
 * lasp_pb_0_0_4
 * lasp_pg_0_1_0
 * lasp_support_0_0_3
 * lazy_integer_1_0_0
 * lazy_lists_0_1_0
 * lazyloader_2_0_2
 * lazymaru_0_2_5
 * lb_17_6_12
 * lbm_kv_0_0_2
 * lcfg_0_5_0_rc3
 * leaf_through_0_2_0
 * ledx_0_0_1
 * legato_0_2_0
 * less_verifies_alexa_0_1_0
 * lessonly_0_0_1
 * letsencrypt_0_8_1
 * levaindoc_0_7_0
 * lgtv_0_3_5
 * libchunter_0_1_52
 * libdecaf_0_0_4
 * libdecaf_amend_0_0_1
 * libex_config_0_2_0
 * libhowl_0_1_42
 * libleofs_0_1_3
 * libsalty_0_1_3
 * libsecp256k1_0_1_4
 * libsecp256k1_nif_0_0_3
 * libsnarl_0_3_40
 * libsnarl_0_3_55
 * libsniffle_0_3_71
 * libsodium_0_0_10
 * libxml_1_1_5
 * line_message_0_3_11
 * line_notify_client_0_3_0
 * link_preview_1_0_2
 * link_preview_generator_0_0_5
 * link_shrinkex_1_0_0
 * liquid_0_8_0
 * ljson_0_6_0_rc1
 * load_resource_0_4_1
 * local_0_2_0
 * locus_1_4_0
 * lodestoner_ex_1_0_0
 * logfmt_logger_0_1_0
 * logger_json_1_2_1
 * logger_json_file_backend_0_1_6
 * logger_kafka_backend_0_1_15
 * logger_logentries_backend_0_0_1
 * logger_loggly_backend_0_2_0
 * logger_logstash_backend_5_0_0
 * logger_sentry_0_1_5
 * logger_streaming_backend_0_1_0
 * logi_0_5_5
 * logi_ex_0_1_1
 * logi_prometheus_0_1_2
 * logi_stdlib_ex_0_1_0
 * logistic_map_1_1_1
 * logjam_0_5_0_rc2
 * logstash_logger_formatter_0_2_0
 * logster_0_8_0
 * loise_1_1_0_rc2
 * loqui_0_4_5
 * lric_0_3_0
 * ltest_0_10_0_rc6
 * luerl_0_3_1
 * luger_1_0_2
 * luna_0_3_0
 * lustex_0_2_0
 * lutil_0_10_0_rc6
 * lwqzx_0_0_1
 * lyn_0_0_16
 * lz4_0_2_4
 * maas_1_0_0
 * machinery_0_16_0
 * mad_0_9_0
 * maestro_0_2_0
 * magellan_microservice_0_3_0
 * magneto_0_1_3
 * mailer_1_3_0
 * mailgun_webhook_auth_1_0_0
 * mailjex_0_1_4
 * mandrag_0_6_10
 * mandrillex_0_2_0
 * mangopay_0_1_0
 * manifoldco_signature_1_0_4
 * mantle_0_3_0
 * map_diff_1_3_1
 * mapi_0_3_0
 * marco_polo_0_2_2
 * markdown_0_1_1
 * markit_0_1_2
 * markit_skill_0_0_2
 * marshal_0_9_0
 * maru_0_13_0
 * maru_0_13_1
 * maru_swagger_0_8_5
 * marvel_1_0_0
 * marvin_0_3_1
 * match_engine_1_4_0
 * materialize_0_3_1
 * matrex_0_6_7
 * maxwell_2_2_2
 * maxwell_request_id_0_1_0
 * mazurka_plug_0_1_4
 * mc_protocol_0_0_2
 * mdns_client_0_1_7
 * mdns_client_lib_0_1_33
 * mdns_client_lib_0_1_46
 * mdns_server_0_2_0
 * mdns_server_lib_0_2_3
 * medex_0_1_2
 * medium_0_2_0
 * meeseeks_0_10_0
 * meeseeks_0_9_5
 * meeseeks_html5ever_0_10_0
 * meeseeks_html5ever_0_9_0
 * mekao_0_4_3
 * melib_0_1_3
 * mellon_0_1_1
 * membrane_element_ffmpeg_swresample_0_1_0
 * membrane_element_lame_0_1_0
 * membrane_element_mad_0_1_0
 * membrane_element_portaudio_0_1_0
 * membrane_loggers_0_1_0
 * membrum_0_0_1
 * memcachex_0_4_2
 * memcachir_3_0_0
 * memhash_0_1_0
 * merkle_0_2_2
 * merkle_patricia_tree_0_2_7
 * merkletree_0_1_0
 * merry_christmas_0_1_0
 * message_pack_0_2_0
 * messenger_0_0_2
 * messenger_bot_1_0_0
 * messenger_bot_store_0_1_0_beta9
 * meta_0_1_3
 * meta_inspector_0_0_2
 * meta_pid_request_0_2_1
 * metadata_plugs_0_2_3
 * metatags_0_2_0
 * metrics_reader_0_1_13
 * metro2_0_1_1
 * metronome_0_0_2
 * mexpanel_0_1_0
 * mgmepi_0_9_0
 * microdata_0_1_2
 * microscope_1_0_0
 * midi_synth_0_1_0
 * migratrex_0_0_1
 * mimerl_1_0_0
 * minify_response_0_1_0
 * minuet_0_1_0
 * mix_apidoc_0_5_2
 * mix_phxtest_0_2_2
 * mix_test_watch_0_6_0
 * mixgraph_0_0_1
 * mixstar_0_0_1
 * mnemonics_ex_machina_0_1_0
 * mobilpay_0_1_0
 * mochicow_0_6_4
 * mochiweb_util_0_1_0
 * moip_ex_0_3_0
 * mojoauth_1_0_2
 * molasses_0_3_1
 * monad_1_0_5
 * mondo_0_2_0
 * monetized_0_5_0
 * money_1_2_1
 * money_man_1_2_4
 * mongo_0_5_4
 * mongo_ecto_0_2_0
 * mongodb_client_3_2_0
 * mongodb_ecto_0_2_0
 * mongodb_erlang_3_2_0
 * mongox_ecto_0_2_0
 * monzo_0_3_0
 * morphix_0_2_4
 * motor_hat_0_6_1
 * mouth_0_4_1
 * mpesa_elixir_0_1_1
 * mpower_1_0_1
 * mq_0_4_0
 * mqtt_sessions_1_0_0_alpha2
 * mr_roboto_1_0_0
 * ms_luis_2_0_0
 * msg91_0_1_0
 * msgpack_port_driver_0_1_1
 * msgpack_rpc_erlang_0_6_4
 * msgpax_1_1_0
 * msgpax_2_1_1
 * mssql_ecto_1_2_0
 * mstore_0_3_7
 * mstore_inspector_0_1_1
 * mt940_1_0_0
 * mt940_1_1_2
 * mtg_0_2_0
 * mtg_api_0_1_0
 * mudblood_0_0_8
 * multi_format_0_1_2
 * multiaddr_1_1_1
 * multihash_1_1_0
 * multiplex_0_1_0
 * multiverse_2_0_0
 * murdoch_0_0_1
 * musiccast_0_2_2
 * mustachex_0_0_1
 * mws_client_0_0_1
 * mynumber_1_0_0
 * myproto_0_3_2
 * myserver_0_0_3
 * n2o_4_4_0
 * nacl_0_3_0
 * nat_0_2_0
 * naughtygram_0_2_0
 * navigation_history_0_2_2
 * nba_ex_0_1_1
 * ndc_ex_sdk_0_2_30
 * nebula_0_1_1
 * neo4j_0_3_0
 * neo4j_sips_0_2_18
 * neo4j_sips_models_0_1_1
 * neotoma_1_7_3
 * nerves_1_0_0_rc_2
 * nerves_1_0_1
 * nerves_1_1_0
 * nerves_dht_0_1_0
 * nerves_firmware_http_0_4_1
 * nerves_firmware_ssh_0_3_2
 * nerves_grove_0_5_0
 * nerves_hcsr04_0_1_1
 * nerves_init_gadget_0_4_0
 * nerves_interim_wifi_0_2_0
 * nerves_io_nfc_0_1_0
 * nerves_io_pn532_0_1_0
 * nerves_io_rc522_0_1_0
 * nerves_leds_0_8_0
 * nerves_network_0_3_7_rc0
 * nerves_network_interface_0_4_4
 * nerves_networking_0_6_0
 * nerves_runtime_0_6_1
 * nerves_toolchain_aarch64_unknown_linux_gnueabi_1_0_0
 * nerves_toolchain_arm_unknown_linux_gnueabi_0_7_1
 * nerves_toolchain_arm_unknown_linux_gnueabihf_1_0_0
 * nerves_toolchain_armv5tejl_unknown_linux_musleabi_1_0_0
 * nerves_toolchain_armv6_rpi_linux_gnueabi_1_0_0
 * nerves_toolchain_ctng_1_3_1
 * nerves_toolchain_ctng_1_4_0
 * nerves_toolchain_i586_unknown_linux_gnu_1_0_0
 * nerves_toolchain_mipsel_unknown_linux_musl_1_0_0
 * nerves_toolchain_powerpc_unknown_linux_gnueabihf_0_13_1
 * nerves_toolchain_x86_64_unknown_linux_gnu_1_0_0
 * nerves_toolchain_x86_64_unknown_linux_musl_1_0_0
 * nerves_wpa_supplicant_0_3_2
 * nested_0_1_2
 * nested_set_0_0_2
 * netease_music_api_1_0_2
 * new_relic_0_1_1
 * new_relixir_0_4_7
 * newrelic_0_1_0
 * newsapi_0_1_0
 * nice_nickname_0_0_1
 * nif_libsecp256k1_0_0_2
 * nifty_0_0_3
 * nimbus_0_3_0
 * nimbusex_0_4_0
 * nio_google_authenticator_2_1_2
 * nio_google_geocoder_0_7_0
 * nitro_1_4_0
 * njord_1_0_2
 * nkferl_0_1_2
 * nlocks_1_1_2
 * noa_0_7_2_alpha
 * nomad_0_7_1
 * nomadex_0_1_0
 * normalixr_0_4_0
 * not_loaded_poison_0_1_0
 * not_qwerty123_1_2_0
 * numverify_1_0_0
 * nvim_0_4_2
 * oauth2_0_3_0
 * oauth2_0_6_0
 * oauth2_server_0_1_1
 * oauth2c_1_0_1
 * oauth2cli_0_0_4
 * oauth2ex_0_1_0
 * oauthex_0_1_0
 * obelisk_0_10_0
 * observables_0_1_9
 * observer_cli_1_3_3
 * oc_google_reporter_0_2_0
 * oceanex_0_2_3
 * octokit_0_2_0
 * ocv_photo_analyzer_1_0_1
 * odata_0_1_8
 * odometex_0_1_0
 * ofex_0_2_3
 * oidcc_1_6_0
 * oidcc_1_7_0
 * oidcc_cowboy_1_5_0
 * okta_0_0_1
 * omega_0_2_0
 * omise_0_6_1
 * omtt_util_1_1_1
 * on_maintenance_0_7_0
 * one_signal_0_0_6
 * one_time_pass_ecto_1_0_0
 * oneflow_0_2_0
 * onetime_2_0_0
 * oox_0_1_6
 * opbeat_0_4_1
 * open_api_spex_2_2_0
 * open_exchange_rates_0_3_0
 * open_graphx_0_0_2
 * opencensus_0_2_0
 * opencensus_0_5_0
 * opencensus_cowboy_0_1_1
 * opencensus_elli_0_2_0
 * opencensus_erlang_prometheus_0_3_1
 * opengraph_0_1_0
 * openmaize_2_9_0
 * openmaize_3_0_1
 * openmaize_jwt_1_0_0
 * openstack_0_0_5
 * openstax_keystone_0_1_7
 * openstax_swift_ecto_0_2_3
 * openstex_adapters_ovh_0_4_0
 * openstex_adapters_rackspace_0_3_0
 * osrm_0_1_0
 * ostip_exari_0_1_0
 * otp_passage_0_1_9
 * otp_vsn_2_3_0
 * otter_srv_0_1_0
 * overpass_0_1_1
 * ovh_0_1_0
 * p1_mysql_1_0_4
 * p1_mysql_1_0_6
 * p1_oauth2_0_6_3
 * p1_pgsql_1_1_6
 * p1_stringprep_1_0_1
 * p1_utils_1_0_0
 * p1_utils_1_0_10
 * p1_utils_1_0_11
 * p1_utils_1_0_12
 * p1_utils_1_0_3
 * p1_xml_1_1_1
 * p1_xmlrpc_1_15_1
 * packer_0_0_4
 * pact_elixir_0_4_0
 * paddle_0_1_3
 * pagarmex_0_1_1
 * pagerduty_ex_0_1_0
 * pagination_0_1_0
 * paginator_0_4_0
 * pagseguro_ex_0_1_1
 * paidy_0_2_0
 * pair2_0_1_1
 * paladin_client_0_2_2
 * panacea_0_1_0
 * paper_trail_0_7_9
 * paper_trail_0_8_0
 * parabaikElixirConverter_0_0_1
 * parameters_0_1_2
 * params_2_1_0
 * paranoid_0_1_4
 * parse_client_0_2_3
 * parse_torrent_0_2_0
 * parse_trans_2_9_0
 * parsex_0_0_2
 * partisan_1_3_3
 * partisan_1_4_1
 * partisan_2_1_0
 * paseto_0_3_0
 * paseto_plug_0_1_0
 * pass_0_3_0
 * passage_0_2_5
 * passport_0_0_4
 * password_validator_0_2_0
 * passwordless_auth_0_1_0
 * payeezy_0_1_2
 * payjp_0_1_5
 * paytm_0_7_3
 * pbkdf2_nif_0_4_0
 * pdftotext_0_0_1
 * pe4kin_0_1_2
 * pearly_0_1_1
 * peatio_client_1_5_0
 * peluquero_0_99_7
 * penelope_0_4_4
 * perf_agent_0_1_10
 * pew_0_0_0
 * pgapp_0_0_2
 * pgo_0_2_0
 * pgo_0_3_0
 * phasedb_0_0_2
 * phasedb_client_0_0_1
 * phasedb_server_0_0_1
 * phauxth_1_2_3
 * phil_columns_1_0_1
 * phoenix_0_4_1
 * phoenix_0_6_0
 * phoenix_1_0_6
 * phoenix_1_2_0_rc_1
 * phoenix_1_3_0_rc_3
 * phoenix_1_3_3
 * phoenix_active_link_0_2_1
 * phoenix_alexa_0_2_0
 * phoenix_api_docs_0_1_0
 * phoenix_api_versions_1_0_0
 * phoenix_bert_1_1_5
 * phoenix_bootstrap_form_0_1_1
 * phoenix_calendar_0_1_2
 * phoenix_client_ssl_0_3_0
 * phoenix_components_1_0_3
 * phoenix_cowboy_logging_1_0_0
 * phoenix_cowboy_remove_server_header_0_1_0
 * phoenix_custom_generators_1_0_7
 * phoenix_datatables_0_2_1
 * phoenix_default_title_0_0_2
 * phoenix_dtl_0_0_1
 * phoenix_ecto_1_2_0
 * phoenix_ecto_2_0_3
 * phoenix_ecto_3_0_0_rc_0
 * phoenix_ecto_3_1_0_rc_0
 * phoenix_ecto_3_2_3
 * phoenix_ecto_3_3_0
 * phoenix_elm_scaffold_0_2_6
 * phoenix_ember_0_0_1
 * phoenix_etag_0_1_0
 * phoenix_exceptional_1_0_1
 * phoenix_expug_0_1_1
 * phoenix_extra_generators_1_0_0
 * phoenix_facebook_messenger_0_4_0
 * phoenix_form_awesomplete_0_1_4
 * phoenix_gen_gulp_jspm_1_0_0
 * phoenix_gen_socket_client_2_1_1
 * phoenix_gon_0_4_0
 * phoenix_haml_0_2_3
 * phoenix_histo_1_0_0
 * phoenix_html_2_0_0
 * phoenix_html_2_10_5
 * phoenix_html_2_11_2
 * phoenix_html_2_5_1
 * phoenix_html_sanitizer_1_1_0
 * phoenix_html_simplified_helpers_1_3_2
 * phoenix_html_simplified_helpers_2_0_1
 * phoenix_html_simplified_helpers_super_cn_1_0_1
 * phoenix_inline_svg_1_1_2
 * phoenix_integration_0_5_2
 * phoenix_jank_0_2_0
 * phoenix_linguist_0_0_1
 * phoenix_live_reload_1_1_5
 * phoenix_locale_0_0_4
 * phoenix_markdown_1_0_1
 * phoenix_microsoftbot_1_0_0
 * phoenix_mjml_0_2_0
 * phoenix_mtm_0_5_1
 * phoenix_oauth2_provider_0_4_0
 * phoenix_octicons_0_3_0
 * phoenix_pagination_0_5_1
 * phoenix_pubsub_conduit_amqp_0_1_0
 * phoenix_pubsub_postgres_0_0_2
 * phoenix_pubsub_rabbitmq_0_0_1
 * phoenix_ratchet_0_5_1
 * phoenix_react_0_1_0
 * phoenix_reactor_0_1_0
 * phoenix_rest_0_6_0
 * phoenix_route_documenter_0_1_0
 * phoenix_routes_js_0_1_1
 * phoenix_session_redis_0_1_2
 * phoenix_simple_form_0_0_2
 * phoenix_slim_0_4_1
 * phoenix_slime_0_10_1
 * phoenix_swagger_0_8_1
 * phoenix_swoosh_0_2_0
 * phoenix_timex_1_0_1
 * phoenix_token_auth_0_4_0
 * phoenix_token_plug_0_3_1
 * phoenix_vue_helpers_0_1_0
 * phone_number_0_2_1
 * phubme_0_5_4
 * phx_admin_0_9_3
 * picosat_0_1_0
 * pigeon_1_2_2
 * pin_elixir_0_0_1
 * ping_plug_0_2_0
 * pinger_0_1_1
 * pinglix_1_1_3
 * pinterex_0_2_3
 * pipeline_0_1_0
 * pixie_0_3_9
 * pixie_ets_1_0_0
 * pl_18_1_31
 * placid_0_3_0
 * plaid_0_0_1
 * plain_sitemap_0_0_1
 * plasm_1_1_0
 * please_stop_1_0_1
 * pleroma_0_9_0_develop_2dcded20
 * plexy_0_1_1
 * plists_1_1_1
 * plivo_0_0_1
 * plotka_0_1_0
 * plug_0_7_0
 * plug_1_1_6
 * plug_1_2_0_rc_0
 * plug_1_2_6
 * plug_1_4_0_rc_0
 * plug_1_5_0_rc_2
 * plug_1_5_1
 * plug_1_6_1
 * plug_abort_2_1_1
 * plug_accept_language_0_1_1
 * plug_accesslog_0_14_0
 * plug_and_play_0_7_0
 * plug_assign_1_0_1
 * plug_attack_0_3_1
 * plug_auth_1_1_0
 * plug_basic_auth_1_1_0
 * plug_byte_serve_0_3_2
 * plug_cache_0_1_1_rc1
 * plug_ccsauth_1_0_1
 * plug_checkup_0_4_0
 * plug_cloudflare_1_3_0
 * plug_content_security_policy_0_1_1
 * plug_contrib_0_1_2
 * plug_cors_0_8_2
 * plug_devise_session_0_1_0
 * plug_ets_cache_0_2_0
 * plug_exception_handler_0_0_4
 * plug_forwarded_peer_0_0_2
 * plug_geoip2_0_4_2
 * plug_graphql_0_3_1
 * plug_health_check_0_0_1
 * plug_heartbeat_0_2_0
 * plug_hyper_auth_1_0_1
 * plug_instrumenter_0_1_2
 * plug_ip_whitelist_1_3_0
 * plug_json_parser_0_0_6
 * plug_jwt_0_7_1
 * plug_letsencrypt_0_1_0
 * plug_logger_json_0_6_0
 * plug_maintenance_0_1_0
 * plug_media_type_router_0_0_3
 * plug_metrics_0_1_2
 * plug_micropub_0_1_0
 * plug_newrelic_0_0_8
 * plug_offline_0_0_3
 * plug_opentracing_0_0_1
 * plug_pagecache_0_2_0
 * plug_password_0_3_3
 * plug_prayer_flag_1_0_0
 * plug_protobufs_0_1_0
 * plug_proxy_0_3_0
 * plug_rails_cookie_session_store_0_2_0
 * plug_rate_limit_redis_0_1_0
 * plug_recaptcha_0_2_0
 * plug_redirect_0_1_2
 * plug_redirect_https_0_0_7
 * plug_require_header_0_8_1
 * plug_response_cache_0_1_1
 * plug_response_header_0_2_1
 * plug_rest_0_13_0
 * plug_ribbon_0_2_1
 * plug_robots_0_1_0
 * plug_runtime_1_0_0
 * plug_secex_0_1_2
 * plug_secure_headers_0_0_1
 * plug_server_timing_0_0_2
 * plug_session_memcached_0_3_3
 * plug_session_mnesia_0_1_2
 * plug_set_request_raw_data_0_1_0
 * plug_sigaws_0_1_1
 * plug_static_index_html_1_0_0
 * plug_static_ls_0_6_1
 * plug_statsd_0_4_2
 * plug_test_helpers_0_1_0
 * plug_url_redirector_0_1_0
 * plug_utm_0_0_2
 * plug_validator_0_1_0
 * plug_wait1_0_2_3
 * plug_x_forwarded_proto_0_1_0
 * plugs_0_1_1
 * plugsnag_1_3_0
 * plumtree_0_5_0
 * pmbag_1_0_0
 * pmod_transform_1_0_0
 * png_0_1_1
 * pocketeer_0_1_5
 * poe_api_0_2_2
 * poison_1_2_0
 * poison_1_2_1
 * pokemon_1_0_2
 * pokemon_tcg_sdk_1_0_11
 * policy_1_0_0
 * policy_wonk_1_0_0_rc_0
 * poly_partition_0_1_3
 * polygot_0_1_2
 * pool_0_0_2
 * pooler_1_4_0
 * pooler_1_5_3
 * population_0_1_2
 * portal_0_0_1
 * porterstemmer_0_0_1
 * portmidi_5_1_1
 * posix_0_1_6
 * posix_errno_0_1_1
 * postgrex_0_6_0
 * postgrex_1_0_0_rc_1
 * posthaste_18_5_19
 * pp_record_0_1_2
 * pre_commit_hook_1_2_0
 * pre_plug_1_0_1
 * premailex_0_2_3
 * presto_0_1_2
 * pricing_0_0_1
 * primal_ex_0_2_0
 * priq_0_2_0
 * procket_0_9_3
 * procore_0_0_1
 * productive_0_4_0
 * proj_0_2_2
 * prometheus_3_0_1
 * prometheus_3_1_1
 * prometheus_ecto_1_0_3
 * prometheus_ex_1_0_0_alpha1
 * prometheus_phoenix_1_2_1
 * prometheus_plugs_1_1_5
 * prometheus_process_collector_1_3_1
 * proper_1_1_0
 * proper_case_0_1_3
 * proper_case_1_2_0
 * protego_0_1_0
 * protein_0_11_0
 * proto_response_0_4_1
 * protobuffs_0_8_2
 * protobuffs_0_8_4
 * protofy_test_1_0_0
 * proxy_0_0_1
 * prx_0_9_0
 * prx_auth_0_0_1
 * pryin_1_5_1
 * public_suffex_0_0_1
 * pubnub_ex_0_0_2
 * pulse_libs_1_0_0
 * pummpcomm_2_5_1
 * push_hub_0_1_0
 * pushex_0_2_2
 * pushito_0_1_1
 * pylon_alexa_request_verifier_0_1_6
 * pynchon_0_5_0
 * qdate_0_4_3
 * qsp_0_1_0
 * quantum_2_0_0_beta_1
 * quantum_2_2_7
 * que_0_4_1
 * query_0_1_7
 * quickbooks_0_1_1
 * quiet_logger_0_1_0
 * quinn_0_0_4
 * rabbit_common_3_6_14
 * rabbit_common_3_7_0_rc_2
 * rabbit_common_3_7_4_rc_4
 * rabbit_common_3_7_7
 * rabbitmq_fabric_0_0_1
 * rabbitmq_receiver_0_1_6
 * rabbitmq_sender_0_1_8
 * rackla_1_2_1
 * radex_0_1_0
 * radius_0_0_13
 * radpath_0_0_5
 * raft_0_2_1
 * rails_4_2_0
 * rain_0_1_5
 * rak_0_1_2
 * ralitobu_plug_0_1_0
 * rampart_1_0_1
 * random_gib_0_0_8
 * random_user_api_1_2_1
 * rankmatcher_0_1_6
 * rapid_api_1_0_2
 * rapidax_0_0_6
 * rapport_0_6_5
 * rasstaggregator_1_0_0_beta2
 * ratchet_0_4_1
 * raven_0_0_5
 * raven_erlang_0_4_0
 * ravenex_0_0_10
 * ravenx_1_0_0
 * ravenx_chat_0_1_0
 * ravenx_email_0_1_0
 * ravenx_pusher_0_2_1
 * ravenx_slack_0_1_0
 * ravenx_telegram_0_1_1
 * raxx_cowboy_0_2_0
 * raygun_0_3_2
 * rbmq_0_4_0
 * rbmq19_0_4_0
 * re2_1_8_4
 * react_phoenix_0_6_0
 * react_phoenix_seer_0_5_2
 * reactive_0_0_1
 * reaxt_1_0_1
 * rebar3_abnfc_plugin_0_1_0
 * rebar3_archive_plugin_0_0_1
 * rebar3_auto_0_3_2
 * rebar3_auto_applications_1_0_0
 * rebar3_autotdd_0_0_2
 * rebar3_autotest_0_1_1
 * rebar3_cuttlefish_0_16_0
 * rebar3_diameter_compiler_0_5_0
 * rebar3_edata_plugin_0_1_11
 * rebar3_efene_0_1_1
 * rebar3_efene_compile_0_1_9
 * rebar3_efene_compile_0_2_0
 * rebar3_efene_ct_0_1_2
 * rebar3_efene_shell_0_1_2
 * rebar3_elixir_0_2_3
 * rebar3_elixir_compile_1_1_0
 * rebar3_elixirc_0_1_0
 * rebar3_elvis_plugin_0_0_4
 * rebar3_eqc_0_0_10
 * rebar3_erlesy_1_0_0
 * rebar3_exunit_0_1_1
 * rebar3_fmt_1_1_0
 * rebar3_git_vsn_1_1_1
 * rebar3_gpb_plugin_2_2_6
 * rebar3_gpb_plugin_2_3_0
 * rebar3_gpb_rpc_plugin_1_0_0
 * rebar3_grisp_1_1_5
 * rebar3_hex_4_1_0
 * rebar3_idl_compiler_0_5_0
 * rebar3_jorel_0_0_1
 * rebar3_lfe_clean_0_4_0_rc2
 * rebar3_lfe_compile_0_8_0_rc3
 * rebar3_lfe_test_0_4_0_rc4
 * rebar3_lfe_version_0_5_0_rc2
 * rebar3_lint_0_1_10
 * rebar3_live_0_1_3
 * rebar3_neotoma_plugin_0_2_0
 * rebar3_proper_0_10_4
 * rebar3_proper_plugin_0_1_0
 * rebar3_protobuffs_0_2_0
 * rebar3_raw_deps_2_0_0
 * rebar3_run_0_2_0
 * rebar3_shellrpc_0_1_0
 * rebar3_tsung_0_1_4
 * rebar3_vendor_0_3_1
 * rebar3_yang_plugin_0_2_1
 * rebar_alias_0_2_0
 * rebar_cmd_0_2_5
 * rebar_covertool_1_2_0
 * rebar_edown_plugin_0_6_0
 * rebar_eqc_0_1_0
 * rebar_erl_vsn_0_2_2
 * rebar_protobuffs_0_1_0
 * rebar_prv_mlfe_0_3_0
 * rebind_0_1_3
 * reblog_0_0_1
 * rec_struct_0_2_0
 * recaptcha_2_3_0
 * recase_0_3_0
 * receipt_decoder_0_3_0
 * receipt_verifier_0_10_0
 * recipe_0_4_4
 * recon_2_3_2
 * recon_2_3_5
 * recon_2_3_6
 * recon_ex_0_9_1
 * record_translator_0_0_3
 * recordset_0_1_0
 * recurly_0_2_2
 * recurrencex_0_1_0
 * recurring_events_0_3_0
 * recursion_schemes_0_2_0
 * recursive_selective_match_0_2_2
 * red_0_2_0
 * red_alert_0_2_1
 * red_black_tree_1_2_0
 * redbird_0_4_0
 * redbug_1_2_1
 * reddhl_0_0_1
 * redelix_0_0_4
 * redis_bloomfilter_0_1_2
 * redis_connection_pool_0_1_6
 * redis_logger_0_1_1
 * redis_mutex_0_1_0
 * redis_pool_0_2_6
 * redis_poolex_0_0_6
 * redis_queue_reader_0_1_0
 * redis_session_plug_0_1_1
 * redis_sessions_0_2_3
 * redis_unique_queue_0_1_4
 * redis_z_0_1_0
 * redisank_0_1_3
 * redix_0_6_1
 * redix_0_7_1
 * redix_cluster_0_0_1
 * redix_pool_0_1_0
 * redix_pubsub_0_4_2
 * redix_pubsub_fastlane_0_3_4
 * redix_sentinel_0_6_0
 * redix_sharding_0_1_1
 * redix_stream_0_1_1
 * redlock_1_0_2
 * redo_2_0_1
 * redshift_ecto_0_2_0
 * redtube_1_0_0
 * ref_inspector_0_19_0
 * refinery_0_2_1
 * reg_helper_0_1_4
 * regdom_0_0_4
 * relation_0_1_10
 * relax_0_3_0
 * relax_lib_0_1_1
 * relax_site_0_1_0
 * relax_yaml_0_1_4
 * relflow_1_0_6
 * relief_0_0_1
 * relisa_0_1_0
 * reloader_0_1_0
 * relocker_0_0_8
 * reltool_util_1_5_2
 * reltool_util_1_5_4
 * reltool_util_1_6_0
 * reltool_util_1_7_3
 * relx_3_13_0
 * relx_3_23_1
 * relx_3_26_0
 * remap_0_1_0
 * remix_0_0_2
 * remodel_0_0_4
 * remote_dockers_1_3_0
 * remote_file_streamer_0_1_0
 * remote_ip_0_1_4
 * remote_ip_2_logger_0_2_0
 * remote_ip_rewriter_0_1_0
 * remote_monitor_1_0_0
 * remote_shell_executor_0_1_1
 * remove_emoji_1_0_1
 * rename_0_1_0
 * rendezvous_0_0_1
 * repg2_0_0_4
 * repo_0_7_2
 * repo_example_1_1_0
 * repoquery_0_0_2
 * reporter_0_7_0
 * reprise_0_5_1
 * reproject_0_1_8
 * request_trace_id_0_1_1
 * requisito_0_0_1
 * resin_0_4_1
 * resonator_0_1_0
 * response_snapshot_1_0_0
 * rest_1_5_0
 * rest_api_builder_0_6_0
 * rest_api_builder_essp_0_6_1
 * rest_auth_1_1_1
 * rest_client_0_0_1
 * restarter_0_1_0
 * restc_0_4_1
 * result_1_1_1
 * rethinkdb_0_4_0
 * rethinkdb_changefeed_0_0_1
 * rethinkdb_ecto_0_7_0
 * retim_0_2_3
 * retort_2_7_0
 * retrieval_0_9_1
 * retry_0_10_0
 * retry_0_6_1
 * retryable_0_3_0
 * retryable_ex_1_0_0
 * return_0_0_2
 * reup_0_1_0
 * reverse_proxy_0_3_1
 * review_3_4_0
 * revision_plate_ex_0_3_1
 * revisionair_0_13_2
 * revisionair_ecto_1_0_2
 * revolver_0_1_0
 * rex_0_1_0_alpha4
 * rexbug_1_0_0
 * rexjs_0_1_0
 * rexy_0_1_0
 * rfc3339_0_2_2
 * rfc3339_0_9_0
 * rfc5646_0_1_0
 * rfm69_0_2_0
 * rgg_1_0_0
 * riak_core_ng_3_1_1
 * riak_core_ng_up_2_2_9
 * riak_dt_2_1_1
 * riak_ensemble_2_1_3
 * riak_ensemble_ng_2_2_0
 * riak_ensemble_ng_2_4_4
 * riak_sysmon_2_1_7
 * riboflavin_0_0_2
 * riemann_0_1_5
 * riemannx_4_0_8
 * rifle_0_1_0
 * rig_1_0_0
 * rihanna_0_6_0
 * ring_logger_0_4_1
 * ringbahn_0_1_0
 * ripper_0_1_3
 * river_0_0_7
 * river_place_0_0_3
 * river_place_client_0_0_6
 * riverside_1_1_1
 * rl_0_1_2
 * rlist_0_0_2
 * rlp_1_1_0
 * rmpc_18_5_9
 * roads_0_1_2
 * robotex_0_0_1
 * rock_0_1_0
 * rocket_chat_0_0_1
 * rocksdb_0_13_0
 * rocksdb_0_13_1
 * rocksdb_0_19_0
 * rodeo_0_3_0
 * roger_2_0_0_pre_2
 * roger_2_0_1
 * roger_ui_0_1_9
 * rogger_0_1_0
 * roku_iap_0_1_1
 * rollbax_0_9_2
 * rollbax_toniq_0_1_0
 * rollex_0_4_0
 * roman_numerals_1_0_2
 * romanex_0_1_0
 * romeo_0_7_0
 * rondo_0_1_7
 * rondo_server_0_1_4
 * ronglian_0_2_0
 * ronglianyun_0_1_0
 * roombex_0_2_0
 * rop_0_5_3
 * ropex_0_1_2
 * rose_tree_0_2_0
 * roster_3_4_0
 * rotating_file_writer_0_1_0
 * rotor_0_2_2
 * roulette_1_0_4
 * route_1_0_0
 * routemaster_client_0_3_0
 * router_1_0_3
 * rox_2_2_1
 * rprel_1_1_5
 * rpsls_1_0_0
 * rquote_0_0_1
 * rs_compile_0_1_0
 * rsa_0_0_1
 * rsa_ex_0_3_0
 * rss_0_2_1
 * rss_flow_0_1_1
 * rss_sync_0_2_1
 * rstats_1_0_2
 * rtc_ds3231_0_1_2
 * rtmpmsg_0_2_15
 * rtpengineclient_0_1_6
 * rubber_0_9_0
 * rubix_0_0_2
 * ruid_0_1_0
 * rulex_0_2_0
 * rummage_ecto_1_3_0_rc_0
 * rummage_phoenix_1_2_0
 * rundown_0_1_8
 * runtime_config_0_1_0
 * rushie_0_1_1
 * russian_0_1_0
 * rustler_0_10_1
 * rustler_0_16_0
 * rustler_0_17_1
 * rustler_0_18_0
 * rustler_0_8_0
 * rxp_hpp_0_1_0
 * ryal_0_0_1
 * ryal_core_0_0_1
 * s3_direct_upload_0_1_3
 * s76_stripe_0_1_4
 * safe_exec_env_0_2_5
 * safeio_0_1_3
 * safetybox_0_1_2
 * safetyvalve_2_5_2
 * sagan_0_1_2
 * sage_0_4_0
 * saj_0_1_0_alpha_1
 * salemove_hare_0_2_2
 * salemove_http_client_0_1_6
 * salsa20_1_0_1
 * salt_0_1_2
 * saltie_0_3_2
 * saltpack_1_1_5
 * sam_0_1_0
 * samly_0_9_2
 * sammal_0_1_0
 * samson_secret_puller_0_1_0
 * sanitize_file_0_1_0
 * sanitizer_0_0_2
 * sans_password_1_0_0
 * sap_0_1_0
 * sasl_ex_0_1_0
 * sass_1_0_20
 * sass_elixir_0_0_1
 * satori_0_2_1
 * satoshi_ex_0_1_5
 * saul_0_1_0
 * savory_0_0_2
 * saxon_0_1_0
 * saxy_0_6_0
 * sbroker_1_0_0
 * sbroker_1_0_0_beta_5
 * scaffold_0_0_5
 * scaleway_0_1_8
 * scatter_swap_0_1_0
 * sched_ex_1_0_1
 * schedule_0_1_0
 * schemex_0_1_1
 * schizo_0_0_1
 * sci_0_0_3
 * scientist_0_2_0
 * scientist_ex_0_1_0
 * scope_1_0_0
 * scotty_0_0_1
 * scout_apm_0_4_6
 * scrape_1_2_7
 * scrape_2_0_0
 * scraper_0_1_1
 * scrapex_0_1_0
 * scrc_0_5_2
 * screamer_0_1_2
 * screenshotter_0_1_1
 * scribe_0_8_0
 * scrivener_0_2_2
 * scrivener_1_1_4
 * scrivener_2_5_0
 * scrivener_ecto_1_1_3
 * scrivener_ecto_1_2_3
 * scrivener_ecto_1_3_0
 * scrivener_elastic_1_1_0
 * scrivener_esx_0_2_1
 * scrivener_headers_3_1_1
 * scrivener_headers_json_1_0_0
 * scrivener_html_1_7_1
 * scrivener_list_1_0_1
 * sd_notify_ex_0_1_1
 * seams_0_1_0
 * search_ex_0_0_1_alpha_1
 * searchex_0_0_4
 * searchql_2_1_2
 * seasonal_0_3_0
 * seat_json_0_0_18
 * sec_cik_ticker_mapper_0_0_2
 * sec_company_filings_rss_feed_parser_0_0_2
 * sec_recent_filings_rss_feed_parser_0_0_6
 * secp256k1_0_1_0
 * secure_0_1_0
 * secure_client_0_1_0
 * secure_compare_0_0_2
 * secure_compare_0_1_0
 * secure_headers_0_0_1
 * secure_log_formatter_1_2_0
 * secure_password_0_6_0
 * secure_random_0_4_0
 * secure_random_0_5_1
 * secure_server_0_1_0
 * seedex_0_1_4
 * seek_0_0_1
 * seg_seg_0_0_1
 * seg_seg_0_1_1
 * segment_0_1_1
 * select_0_0_1
 * selenium_1_1_2
 * selfie_1_0_0
 * semaphore_1_0_0
 * semver_0_1_2
 * semver_elixir_0_0_1
 * sendgrid_1_8_0
 * sendinc_api_client_0_1_0
 * sensor_0_1_7
 * sentient_0_0_2
 * sentinel_2_0_1
 * sentix_1_0_3
 * sentry_6_0_5
 * sentry_6_2_1
 * sentry_6_4_0
 * sentry_elixir_0_0_4
 * sentry_logger_backend_0_1_4
 * sequences_1_2_0
 * serial_0_1_2
 * serial_framing_protocol_1_1_0
 * sersock_0_1_2
 * serv_0_1_3
 * serve_this_1_0_1
 * server_sent_event_0_3_1
 * server_sent_event_stage_0_2_0
 * server_timing_0_1_6
 * server_utils_0_3_3
 * service_1_5_1
 * service_watcher_sup_0_2_6
 * servicex_0_0_5
 * servito_0_0_10
 * sesame_0_2_5
 * sesamex_0_2_1
 * session_header_plug_0_1_1
 * session_server_store_0_1_0
 * set_locale_0_2_4
 * setaria_0_2_0
 * sets_0_1_0
 * settings_0_1_0
 * setup_1_8_2
 * setup_1_8_4
 * setup_2_0_2
 * setup_tag_0_1_2
 * sext_1_4_1
 * sf_transform_0_3_0
 * sfmt_0_10_1
 * sfmt_0_13_0
 * sfsobject_0_0_3
 * sftp_0_2_3
 * sftp_ex_0_2_6
 * sgi_0_6_0
 * sh_1_1_2
 * sha3_2_0_0
 * shackle_0_5_0
 * shackle_0_5_1
 * shackle_0_5_4
 * shadowsocks_0_3_6
 * shake_n_bake_0_1_0
 * shameless_plug_1_0_0
 * shape_0_0_2
 * shards_0_5_1
 * sheldon_0_1_4
 * shell_executor_0_1_5
 * shell_stream_0_0_1
 * shenu_0_1_0
 * sheriff_1_0_0
 * shield_0_7_2
 * shield_notifier_0_2_0
 * shiphawk_0_1_0
 * shipit_0_2_3
 * shippex_0_6_11
 * shipstation_0_3_7
 * shoehorn_0_3_1
 * shopbuilder_api_0_1_16
 * shopify_0_2_0
 * short_0_0_3
 * short_maps_0_1_2
 * shorter_maps_2_2_4
 * shorter_maps_2_2_5
 * shortest_vertex_last_coloring_1_0_0
 * shorthand_0_0_3
 * shortuuid_1_0_1
 * shotgun_0_3_0
 * shouldi_0_3_2
 * shoutcast_0_1_1
 * shove_0_0_1
 * shrivel_0_0_3
 * sht31gs_0_1_1
 * sht3x_0_1_0
 * siariwyd_0_2_0
 * side_effect_0_1_0
 * sidejob_2_1_0
 * sideshow_0_0_2
 * sidetask_1_1_2
 * sidewalk_0_3_4
 * sift_ex_0_1_0
 * siftsciex_0_3_1
 * siftsciex_plug_0_1_0
 * sig_auth_0_1_5
 * sigaws_0_7_2
 * sigaws_quickstart_provider_0_1_1
 * sigil_f_0_1_0
 * sigma_1_0_6
 * sign_0_0_1
 * sign_xml_1_0_6
 * signalex_0_0_1
 * signaturex_1_3_0
 * signed_overpunch_0_2_0
 * signed_request_0_1_0
 * silent_video_0_3_0
 * simetric_0_2_0
 * simhash_0_1_2
 * simplates_0_5_0
 * simple_agent_0_0_7
 * simple_auth_1_6_1
 * simple_bar_0_0_7
 * simple_bayes_1_0_0
 * simple_cache_1_1_3
 * simple_can_1_0_0
 * simple_docker_0_1_0
 * simple_ecto_state_machine_0_3_0
 * simple_format_0_1_0
 * simple_jwt_authentication_0_1_1
 * simple_markdown_0_5_3
 * simple_markdown_extension_blueprint_0_2_0
 * simple_markdown_extension_cli_0_1_4
 * simple_markdown_extension_highlight_js_0_1_0
 * simple_markdown_extension_svgbob_0_0_2
 * simple_mem_cache_1_0_0
 * simple_pool_0_1_4
 * simple_queue_0_1_1
 * simple_repo_1_1_3
 * simple_schema_1_1_4
 * simple_secrets_1_0_0
 * simple_server_0_0_2
 * simple_slack_1_0_0
 * simple_statistics_0_0_1
 * simple_token_0_1_0
 * simple_token_authentication_0_2_0
 * simplehttp_0_4_1
 * simpler_0_2_1
 * simpler_slack_0_0_6
 * simplestatex_0_1_3
 * simplex_0_4_0
 * simplify_0_2_1
 * simpre_0_1_0
 * singleton_1_2_0
 * siphash_3_1_3
 * siphash_3_2_0
 * sippet_0_6_0
 * sippet_proxy_0_1_1
 * sips_downloader_0_2_2
 * sitemap_1_0_3
 * sitesx_0_11_0
 * size_0_1_0
 * sizeable_1_0_2
 * skills_0_0_1
 * skogsra_0_2_1
 * skoll_0_0_1
 * skooma_0_2_0
 * skroutz_0_1_0
 * sky_0_2_0
 * skycluster_1_1_5
 * slack_0_11_0
 * slack_0_12_0
 * slack_0_14_0
 * slack_0_6_0
 * slack_0_7_1
 * slack_0_9_3
 * slack_command_0_1_0
 * slack_ex_0_1_0
 * slack_interactive_0_1_1
 * slack_logger_0_1_1
 * slack_logger_backend_0_1_20
 * slack_notifier_0_1_0
 * slack_throttle_0_2_0
 * slack_webhook_0_1_0
 * slacker_0_0_3
 * slackex_0_0_1
 * slackjack_0_1_0
 * slef_0_1_0
 * slender_channel_0_1_1
 * slim_fast_0_10_0
 * slime_1_1_0
 * slippers_0_1_0
 * slog_0_1_0
 * slogger_0_1_6
 * slp_0_0_2
 * slug_0_1_1
 * slugerl_1_0_0
 * slugger_0_2_0
 * slugger_0_3_0
 * slugify_1_1_0
 * sma_0_1_0
 * small_ints_0_1_0
 * smallex_0_1_4
 * smallex_0_1_8
 * smart_websocket_client_0_1_0
 * smerl_0_0_1
 * smex_0_0_1
 * smile_0_1_0
 * smoke_test_0_1_1
 * smokkfiskur_0_1_4
 * smoothie_3_1_2
 * smppex_2_2_7
 * sms_0_0_2
 * sms506_0_2_0
 * sms_blitz_0_2_0
 * smurf_0_1_3
 * snappiest_1_2_0
 * snappy_1_1_1
 * snappyer_1_2_0
 * snappyer_1_2_1
 * snappyer_1_2_3
 * snapshot_0_1_1
 * snapshots_0_1_0
 * snatch_0_1_0
 * snatch_0_2_1
 * snatch_0_3_0
 * snatch_0_4_3
 * snatch_test_framework_0_6_3
 * sneeze_1_1_0
 * sniff_0_1_4
 * snowcone_0_1_1
 * snowflake_1_0_3
 * snowflake_client_0_1_1
 * snowflakex_1_1_0
 * snowplow_tracker_0_1_0
 * sntp_0_2_0
 * soap_0_1_1
 * sobelow_0_7_0
 * social_parser_2_0_0
 * sockerl_17_9_10
 * socket_0_3_11
 * socket_0_3_13
 * socket_address_0_2_0
 * socket_proxy_0_1_2
 * socket_tcp_bridge_0_1_0
 * socketio_emitter_0_1_2
 * soda_0_2_0
 * sogou_translate_0_1_0
 * solage_0_0_1
 * solar_0_1_0
 * solextria_0_1_4
 * solid_0_0_2
 * sombrero_0_1_0
 * sonic_0_1_3
 * sorted_set_1_1_0
 * sorted_ttl_list_1_1_1
 * soundcloud_0_1_0
 * soundcloud_ex_0_0_1
 * soxe_0_1_1
 * space_ex_0_8_0
 * spaceapi_0_1_2
 * spaced_repetitions_0_0_1
 * spacerace_0_1_0
 * spacesaving_0_0_3
 * spaghetti_pool_0_1_0
 * spandex_2_0_0_rc2
 * sparkel_0_1_0
 * sparkline_0_1_0
 * sparkpost_0_5_2
 * sparql_0_1_0
 * sparql_client_0_1_0
 * sparqlex_0_1_0
 * spartan_0_0_1
 * spatial_hash_0_1_5
 * spawndir_0_1_1
 * speak_0_1_0
 * speak_ex_0_3_0
 * spec_0_1_3
 * spect_0_3_0
 * speechmatex_0_1_1
 * spell_0_1_0
 * spellbook_2_0_1
 * spex_0_1_2
 * spf_0_0_1
 * spherical_0_0_1
 * sphinx_0_1_2
 * sphinxsearch_giza_0_0_2
 * spirit_0_0_1
 * spirit_fingers_0_1_2
 * splay_tree_1_0_1
 * sponge_0_1_0
 * sports_radar_0_1_0
 * spotifex_0_0_2
 * spotify_ex_2_0_9
 * spotify_web_api_0_4_0
 * spotter_0_4_1
 * spout_0_0_1
 * spreedly_2_0_4
 * spudnik_0_1_1
 * sputnik_0_2_0
 * spy_0_1_0
 * spyanator_0_0_4
 * sqitch_0_1_0
 * sql_dust_0_3_10
 * sqlcx_1_1_0
 * sqlite3_1_1_6
 * sqlite_ecto_0_5_0
 * sqlite_ecto_1_0_2
 * sqlite_ecto_1_1_0
 * sqlite_ecto2_2_2_3
 * sqlitex_0_0_2
 * sqlitex_0_8_3
 * sqlitex_1_4_2
 * sqlmig_0_1_5
 * sqlparser_0_2_0
 * sqlparser_0_3_1
 * sqrl_0_3_0
 * square_elixir_0_1_1
 * ssdb_0_3_1
 * ssdb_elixir_0_2_2
 * ssdp_0_2_1
 * ssdp_auto_connect_0_1_0
 * sse_0_1_4
 * ssh_client_key_api_0_1_1
 * ssh_echo_0_3_0
 * ssh_tunnel_0_1_3
 * sshex_1_1_0
 * sshex_2_1_0
 * sshex_2_2_1
 * sshkit_0_0_3
 * ssl_checker_0_1_0
 * ssl_verify_fun_1_1_0
 * ssl_verify_fun_1_1_1
 * ssl_verify_fun_1_1_3
 * ssl_verify_hostname_1_0_0
 * ssl_verify_hostname_1_0_5
 * ssl_verify_hostname_1_0_6
 * sslcerts_0_2_4
 * st_commons_1_2_1
 * stache_0_2_1
 * stackd_0_0_1
 * stacktrace_compat_1_0_1
 * stampery_0_2_0
 * starling_0_4_0
 * starling_elixir_0_4_0
 * stash_1_0_0
 * stash_exchange_0_1_0
 * stat_buffer_0_1_3
 * state_mc_0_1_0
 * stateful_agents_0_1_0
 * stathat_0_0_3
 * static_map_0_1_1
 * stationary_1_0_0
 * statistics_0_4_1
 * statistics_0_5_1
 * statix_1_0_1
 * statix_1_1_0
 * statman_0_5_0
 * stats_0_1_1
 * stats_doggo_0_4_3
 * statsderl_0_5_2
 * status_0_0_1_pre1
 * status_ku_1_0_1
 * std_json_io_0_1_0
 * std_json_io_2_0_2_0
 * steady_vector_1_0_0
 * steam_ex_0_2_0_alpha
 * steamex_0_0_9
 * steemex_0_14_2
 * stellar_0_2_2
 * stem_ex_0_0_2
 * stemex_0_1_1
 * stemmer_1_0_2
 * steroids_0_1_0
 * stex_0_2_5
 * stifle_0_1_0
 * stillir_1_0_0
 * stillir_1_1_0
 * stmd_0_0_2
 * stockastic_0_0_2
 * stockfighter_0_0_1
 * stomp_client_0_1_1
 * stone_0_2_0
 * stop_floating_0_1_0
 * stopwatch_0_0_7
 * storage_0_2_0
 * storebrand_0_1_1
 * stout_1_0_0
 * stoxir_0_1_3
 * strand_0_5_0
 * strap_0_1_1
 * strava_0_6_0
 * straw_hat_0_4_1
 * straw_hat_graphql_0_2_1
 * straw_hat_mailer_1_1_0
 * straw_hat_map_1_2_1
 * stream_0_1_0
 * stream_data_0_4_2
 * stream_gzip_0_2_4
 * stream_hash_0_1_1
 * stream_perlin_0_1_1
 * stream_runner_1_1_0
 * stream_split_0_1_2
 * stream_weaver_0_0_2
 * stream_x_0_0_1
 * streamex_0_3_0
 * strftimerl_0_1_2
 * strict_comparison_0_0_1
 * string_compat_0_0_1
 * string_naming_0_5_0
 * stringify_0_1_1
 * stringprep_1_0_12
 * strinx_0_2_1
 * strip_heredoc_0_8_0
 * strip_js_0_9_0
 * stripe_0_0_1
 * stripe_callbacks_0_6_1
 * stripe_client_0_0_3
 * stripe_elixir_0_8_0
 * stripe_eventex_1_0_0
 * stripe_post_0_4_3
 * stripex_0_1_0
 * stripi_0_1_1
 * stripity_stripe_2_1_0
 * stripy_1_2_0
 * struct_1_0_0
 * struct_access_1_0_0
 * struct_assert_0_5_2
 * struct_constructor_0_1_1
 * struct_fields_0_3_0
 * structure_0_2_2
 * structured_io_1_5_0
 * structurez_0_0_1
 * stub_alias_0_1_2
 * stubby_0_4_0
 * stubr_1_5_1
 * stun_1_0_23
 * styledown_0_0_3
 * styledown2_source_2_0_0_pre12
 * sub_db_0_1_3
 * subg_rfspy_2_0_0
 * sublocator_0_1_0
 * submarine_0_0_2
 * subscribex_0_8_1
 * subsets_0_1_1
 * subtitles_0_1_3
 * subtree_0_1_0
 * sudoku_1_0_1
 * sudokumotron_0_1_0
 * sugar_0_5_0
 * summary_formatter_0_1_0
 * sumo_db_0_6_1
 * sumo_db_0_6_4
 * sumo_db_0_7_1
 * sumo_db_0_7_7
 * sumo_db_mysql_0_0_2
 * sumo_db_pgsql_0_2_0
 * sumo_rest_0_3_4
 * sun_times_0_1_2
 * sunta_1_0_0_alpha_1
 * super_plug_2_0_0
 * supermemo_1_0_0
 * superscrape_0_1_0
 * supervisor3_1_1_5
 * supervisor3_1_1_6
 * supervisord_0_1_0
 * supool_1_5_4
 * supool_1_6_0
 * supool_1_7_3
 * suptree_0_1_0
 * surge_0_0_1
 * surgex_2_24_1
 * svalinn_0_0_4
 * svg_1_1_2
 * svgbobex_0_0_2
 * swab_1_0_4
 * swaggerdoc_0_0_1
 * swap_1_1_0
 * swapi_1_0_0
 * swappy_0_0_2
 * swarm_3_3_1
 * swarm_dynamic_supervisor_0_1_0
 * swarm_game_0_1_0
 * swear_1_0_0
 * sweet_xml_0_6_5
 * sweetener_0_1_0
 * switchboard_0_3_2
 * swoosh_0_11_0
 * swoosh_0_15_0
 * syn_1_6_1
 * syn_1_6_3
 * syn_osc_0_1_0
 * sync_0_1_3
 * sync_m_0_1_1
 * synex_1_0_0
 * synq_elixir_0_0_2
 * syntactic_0_0_2
 * synthex_0_1_0
 * syringe_1_1_1
 * syscall_0_1_0
 * syslog_1_0_6
 * syslog_app_3_4_2
 * syslog_socket_1_7_3
 * system_env_loader_0_1_0
 * system_registry_0_7_0
 * system_registry_0_8_0
 * system_registry_term_storage_0_1_1
 * syts_0_2_0
 * t_digest_0_1_1
 * table_0_0_5
 * table_flipper_0_1_0
 * table_rex_0_10_0
 * table_rex_2_0_0
 * tableize_0_1_0
 * tabula_2_2_2
 * tachometer_0_1_1
 * tachometer_0_2_0
 * taco_0_1_0
 * taex_0_1_3
 * taggart_0_1_5
 * taglet_0_6_0
 * taglib_0_2_1
 * tagplay_0_1_0
 * tai_0_0_3
 * tail_1_0_1
 * takeoff_0_2_2
 * talib_ex_1_1_1
 * talibex_0_1_0
 * tally_0_0_1
 * tane_0_3_1
 * tanegashima_0_0_11
 * tanga_0_7_0
 * tanuki_0_2_1
 * tap_0_1_5
 * tapex_0_1_1
 * tapper_0_3_6
 * tapper_absinthe_plug_0_2_1
 * tapper_plug_0_3_0
 * tarantool_0_0_2
 * tarearbol_0_7_0
 * task_after_1_1_0
 * task_awaiter_0_1_1
 * task_bunny_0_3_3
 * task_bunny_rollbar_0_2_0_rc_1
 * task_bunny_sentry_0_1_2
 * taskforce_1_2_1
 * tau_0_0_6
 * taxjar_0_1_1
 * taxon_search_0_0_1
 * tcs34725_0_0_1
 * tdata_1_1_3
 * tdiff_0_1_2
 * tdlib_0_0_2
 * tds_1_0_18
 * tds_1_1_4
 * tds_ecto_2_2_1
 * tea_crypto_1_0_0
 * teacup_0_3_4
 * teacup_nats_0_4_1
 * teal_0_1_1
 * teamcity_exunit_formatter_0_4_0
 * telebot_0_1_2
 * telegram_0_0_3
 * telegram_bot_1_0_1
 * telegram_mt_0_1_1_alpha
 * telegram_tl_0_2_1
 * telehashname_1_0_0
 * telephonist_0_1_2
 * teleport_0_6_2
 * telex_0_0_2
 * telix_0_1_0
 * tellex_0_1_2
 * temp_0_4_5
 * tempdir_0_0_1
 * tempfile_0_1_0
 * template_compiler_1_0_0_alpha8
 * templaterl_0_2_4
 * templates_0_0_5
 * temporal_0_3_0
 * temporary_env_2_0_1
 * tensor_1_2_0
 * tensor_2_1_0
 * tensortastic_0_0_3
 * tentabucket_0_0_1
 * tentacat_0_7_2
 * tentacat_0_9_0
 * tentacat_1_0_0
 * tentahook_0_1_1
 * term_table_0_0_2
 * termcap_0_1_0
 * termsize_1_0_1
 * terraform_1_0_1
 * tesla_0_10_0
 * tesla_0_5_2
 * tesla_0_6_0
 * tesla_0_7_2
 * tesla_0_8_0
 * tesla_0_9_0
 * tesla_1_0_0
 * tesla_1_0_0_beta_1
 * tesla_api_1_0_0
 * tesla_cache_0_1_1
 * tesla_replay_0_1_2
 * tesla_request_id_0_2_0
 * tesla_statsd_0_2_0
 * tesla_timeout_0_1_1
 * tesourex_6_6_6
 * tesseract_ecs_0_3_1
 * tesseract_ext_0_1_3
 * tesseract_geometry_0_2_2
 * tesseract_ocr_0_1_0
 * tesseract_trees_0_2_1
 * test_async_0_1_2
 * test_cluster_task_0_3_0
 * test_match_1_2_2
 * test_probe_0_0_2
 * test_selector_0_2_0
 * test_that_json_0_6_0
 * test_that_json_espec_0_7_0
 * test_times_1_0_0
 * test_watch_template_0_3_0
 * texas_1_0_0
 * text_2_sign_0_1_0
 * text_delta_1_4_0
 * text_local_0_1_3
 * textex_0_2_2
 * textgain_0_1_3
 * tfidf_0_1_2
 * tg_client_0_3_0
 * thank_you_stars_0_1_0
 * the_end_1_1_0
 * the_fuzz_0_3_0
 * the_fuzz_0_4_0
 * theater_0_1_0
 * theriac_0_0_1
 * thermex_0_1_0
 * thesis_0_3_0
 * thetvdb_1_1_1
 * thing_0_0_1
 * thoth_0_0_5
 * thrash_0_3_3
 * thrift_1_3_2
 * thrift_protocol_0_1_2
 * throttle_0_1_2
 * throttled_queue_0_4_0_dev
 * throttlex_0_0_8
 * throwdown_0_2_1
 * thumbnex_0_3_0
 * thumbor_client_0_4_0
 * thumbox_0_1_0
 * thunk_0_3_1
 * tic_tac_toe_1_1_3
 * tic_tac_toe_math3v_1_0_2
 * ticker_0_0_4
 * tidy_0_0_1
 * tidy_ex_0_1_0_dev
 * tile38_0_1_0
 * tiled_map_0_0_1
 * timber_logfmt_2_0_0
 * time_ago_words_0_0_2
 * time_compat_0_0_1
 * time_distance_0_0_1
 * time_log_1_0_1
 * time_machinex_0_2_0
 * time_seer_0_0_6
 * timeanator_0_0_1
 * timelier_0_9_2
 * timely_0_3_0
 * timeout_0_3_0
 * timer_job_0_1_7
 * timeularex_0_1_1
 * timex_3_0_8
 * timex_3_1_25
 * timex_3_2_2
 * timex_3_3_0
 * timex_ecto_0_5_0
 * timex_ecto_3_3_0
 * timex_interval_0_6_0
 * timex_poison_0_2_0
 * timezone_0_2_2
 * tinify_0_0_2
 * tiny_1_0_1
 * tiny_blog_0_1_0
 * tiny_util_0_1_2
 * tinymt_0_3_2
 * tipalti_0_4_0
 * tipo_0_0_6
 * tirerl_1_0_2
 * tirexs_0_8_15
 * tirexs_0_8_5
 * tjson_0_1_0
 * tl_23_0_0_beta
 * tl_57_2_0_rc
 * tlv_0_1_0
 * tlv8_0_1_0
 * tm_mercury_0_5_2
 * tmdb_0_0_6
 * to_struct_0_1_2
 * todo_1_3_0
 * todoist_0_1_0
 * together_0_5_1
 * togglex_0_2_0
 * toglx_0_0_2
 * token_0_1_1
 * token_bucket_0_1_0
 * toki_0_1_0
 * tokoonline_0_1_0
 * tokumei_0_9_1
 * tokumei_router_0_3_0
 * toml_elixir_2_0_1
 * tomlex_0_0_5
 * tonic_0_0_2
 * tonic_0_1_0
 * toniq_1_2_3
 * toolbelt_0_3_1
 * toolbox_0_1_0
 * toolchain_extras_0_2_0
 * toolchain_extras_pru_cgt_3_0_1
 * topo_0_1_2
 * toprox_0_1_2
 * torch_2_0_0_rc_1
 * torex_0_1_0
 * torrex_0_1_2
 * tortoise_0_4_2
 * totpex_0_1_2
 * towel_0_2_1
 * toxiproxy_0_4_0
 * tp_link_hs100_0_1_0
 * tplink_0_0_1
 * tqdm_0_0_2
 * tql_1_0_0
 * tracer_0_1_1
 * tracing_helper_0_0_3
 * trackable_anonymous_0_1_0
 * tracker_client_0_1_1
 * tracker_request_0_0_4
 * trackline_0_0_1
 * trackstar_0_0_1
 * tractor_0_1_0
 * tracy_0_1_0
 * tracy_web_0_0_1_rc_1
 * tradie_0_0_1
 * trailing_format_plug_0_0_7
 * trails_0_2_0
 * trails_2_1_0
 * traitify_elixir_0_1_1
 * trans_2_0_2
 * transducer_0_1_0
 * transform_map_1_0_2
 * translator_0_0_1
 * translecto_0_3_2
 * translit_0_1_0
 * transmap_0_4_0
 * traverse_0_1_6
 * travis_0_0_1
 * travis_ex_0_0_2
 * trello_1_3_0
 * trex_0_5_1
 * tributary_0_2_1
 * trie_1_5_3
 * trie_1_5_4
 * trie_1_6_0
 * trie_1_7_3
 * trilean_1_0_1
 * trimet_web_services_0_1_0
 * tripcode_1_0_3
 * triple_des_1_0_0
 * triplex_1_2_0
 * triq_1_2_0
 * triton_0_2_3
 * trooper_0_2_0
 * trot_0_6_1
 * tru_face_0_1_2
 * true_story_0_1_0
 * truncate_html_0_1_0
 * trusted_proxy_rewriter_0_1_0
 * ts_chatterbox_0_6_2
 * tsuru_1_4_1
 * ttf_auth_0_0_1
 * ttl_cache_0_1_0
 * ttt_core_0_2_0
 * tub_0_8_0
 * tub_ex_0_2_2
 * tube_0_1_1
 * tuber_0_0_2
 * tubex_0_0_7
 * tubo_0_1_0
 * tuco_tuco_0_8_1
 * tunnerl_1_1_0
 * turbolinks_0_3_4
 * turbolinks_plug_1_0_2
 * turn_the_page_0_2_6
 * tus_0_1_3
 * tus_cache_redis_0_1_0
 * tusk_0_1_2
 * tvdb_0_0_1
 * tvmaze_wrapper_0_1_4
 * twilex_0_0_2
 * twilight_informant_0_1_0
 * twilio_auth_0_3_0
 * twilixir_1_0_0
 * twittertex_0_2_0
 * twittex_0_3_6
 * type_0_0_2
 * type_class_1_2_5
 * type_struct_0_1_0
 * typed_struct_0_1_1
 * typeformx_0_0_1
 * typeracer_0_1_2
 * types_0_1_8
 * typetalk_0_1_2
 * typex_0_1_0
 * tz_world_0_1_0
 * tzdata_0_5_17
 * tzdata_0_5_6
 * u2f_0_1_5
 * u_token_0_0_2
 * ua_classifier_1_0_0
 * ua_inspector_0_17_0
 * ua_parser_1_4_0
 * ua_parser2_0_0_2
 * uap_elixir_0_1_0
 * uber_0_1_0
 * uberauth_twitch_0_1_1
 * uci_data_loader_0_1_6
 * ucol_2_0_0
 * ucol_nif_1_1_5
 * uderzo_0_6_1
 * udev_0_1_0
 * udia_0_1_3
 * udpflux_0_0_2
 * ueberauth_0_4_0
 * ueberauth_0_5_0
 * ueberauth_active_directory_0_1_0
 * ueberauth_adfs_0_1_0
 * ueberauth_auth0_0_3_0
 * ueberauth_bitbucket_1_0_0
 * ueberauth_bnet_0_1_0
 * ueberauth_bungie_0_1_2
 * ueberauth_cas_1_1_0
 * ueberauth_coding_0_1_1
 * ueberauth_discord_0_3_1
 * ueberauth_dropbox_0_1_1
 * ueberauth_esi_0_0_2
 * ueberauth_facebook_0_3_2
 * ueberauth_facebook_0_7_0
 * ueberauth_fitbit_0_2_3
 * ueberauth_flickr_0_2_1
 * ueberauth_foursquare_0_1_3
 * ueberauth_freeagent_0_1_1
 * ueberauth_github_0_7_0
 * ueberauth_gitlab_0_1_0
 * ueberauth_gitlab_strategy_0_2_0
 * ueberauth_goodreads_0_1_0
 * ueberauth_google_0_7_0
 * ueberauth_heroku_0_2_0
 * ueberauth_identity_0_2_3
 * ueberauth_instagram_0_2_0
 * ueberauth_jawbone_1_0_2
 * ueberauth_khanacademy_0_0_4
 * ueberauth_line_0_1_1
 * ueberauth_linkedin_0_3_2
 * ueberauth_microsoft_0_3_0
 * ueberauth_ok_0_1_1
 * ueberauth_okta_0_1_0
 * ueberauth_paypal_0_2_0
 * ueberauth_pinterest_0_0_1
 * ueberauth_pocket_1_0_2
 * ueberauth_procore_0_1_0
 * ueberauth_qiita_0_1_0
 * ueberauth_reddit_0_1_0
 * ueberauth_runkeeper_1_0_0
 * ueberauth_shopify_0_1_2
 * ueberauth_slack_0_4_1
 * ueberauth_spotify_0_0_2
 * ueberauth_spotify_oauth_0_0_1
 * ueberauth_stackoverflow_0_0_2
 * ueberauth_steam_0_1_0
 * ueberauth_strava_0_1_1
 * ueberauth_stripe_0_1_0
 * ueberauth_testing_1_0_0
 * ueberauth_token_0_1_0
 * ueberauth_twitch_tv_0_3_0
 * ueberauth_twitter_0_2_4
 * ueberauth_vk_0_3_1
 * ueberauth_vkontakte_0_1_0
 * ueberauth_wechat_0_0_1
 * ueberauth_weibo_0_0_3
 * ueberauth_withings_1_0_4
 * uelli_0_1_0
 * ui_0_1_1
 * ui_faces_0_1_8
 * uikit_0_1_0
 * uk_postcode_0_3_0
 * uk_postcode_1_0_0
 * ulid_0_2_0
 * ulitos_0_4_0
 * ultra_plug_2_4_0
 * ultradark_core_0_1_3
 * umbrella_stage_0_1_1
 * undocumented_0_1_0
 * unicode_1_0_0
 * unicode_char_0_6_0
 * unicode_data_0_7_0
 * unicode_util_compat_0_2_0
 * unicode_util_compat_0_3_1
 * unicode_util_compat_0_4_1
 * unidecode_0_0_1
 * union_find_0_1_1
 * unit_fun_0_6_1
 * unite_0_3_1
 * units_1_0_0
 * unittest_0_1_0
 * univerex_0_0_1
 * unsafe_1_0_0
 * unsplash_1_0_0
 * untappd_0_0_1
 * until_then_0_0_1
 * updown_0_1_1
 * uploadcare_ex_0_1_4
 * ups_0_2_0
 * upyun_0_0_1
 * urania_0_1_0
 * uri_0_1_0
 * uri_decoder_plug_0_1_0
 * uri_query_0_1_2
 * uri_template_1_2_1
 * urilib_0_5_0
 * url_1_0_0
 * url_info_0_1_0
 * url_parser_0_1_0
 * url_tincture_1_0_10
 * url_unroller_0_0_3
 * urlixurl_0_1_0
 * urlpreview_0_0_3
 * urn_0_1_0
 * urna_0_2_5
 * usefulness_0_0_7
 * useless_0_1_0
 * user_agent_parser_1_0_1
 * user_manager_0_2_0
 * userfs_1_0_3
 * usir_0_2_0
 * utilex_0_1_0
 * utility_belt_0_2_0
 * utils_0_1_0
 * uuid_1_1_4
 * uuid_1_1_8
 * uuid5_1_1_2
 * uuid_erl_1_4_0
 * uuid_erl_1_5_1
 * uuid_erl_1_5_2
 * uuid_erl_1_5_2_rc1
 * uuid_erl_1_5_4
 * uuid_erl_1_6_0
 * uuid_erl_1_7_3
 * uule_grabber_0_1_0
 * vagrant_0_0_1
 * valid_field_0_6_1
 * valid_url_0_1_2
 * validate_vat_0_2_0
 * validator_0_3_0
 * validerl_2_0_1
 * validex_0_5_0
 * valve_0_2_0
 * valvex_0_3_1
 * vapor_0_1_0
 * varint_1_1_0
 * varpool_1_5_4
 * varpool_1_6_0
 * varpool_1_7_3
 * vaultex_0_6_2
 * ve_0_1_8
 * veb_0_2_1
 * vector_0_2_2
 * vector_0_3_0
 * vector_1_0_0
 * vector_clock_0_1_0
 * vegrandis_3_1_1
 * veil_0_1_6
 * velixir_0_0_7
 * velkoz_1_2_0
 * velocy_pack_0_0_6
 * velocy_stream_0_0_1
 * vent_0_4_2
 * verbnet_0_3_0
 * verbs_0_5_4
 * verex_0_2_0
 * verhoeff_0_1_2
 * verify_origin_0_1_0
 * veritaserum_0_2_0
 * veriumd_0_1_0
 * verk_1_4_0
 * verk_web_1_4_0
 * version_check_0_1_2
 * version_tasks_0_11_0
 * version_tasks_0_11_1
 * versionary_0_2_0
 * verx_0_5_4
 * vessel_0_8_0
 * vex_0_5_5
 * vex_0_6_0
 * vex_0_8_0
 * viacepex_0_0_2
 * vice_0_0_2
 * viex_0_1_0
 * viktor_0_2_0
 * vimeo_0_0_2
 * vincenty_1_0_0
 * vipex_0_1_0
 * vips_0_1_0
 * virtuoso_0_0_21
 * virus_total_0_0_2
 * vivid_0_4_3
 * vivid_png_0_1_1
 * vkreq_0_0_1
 * vmq_commons_1_0_0
 * vmq_commons_fb_1_0_2
 * vmstats_2_3_1
 * vmstats_ex_0_2_1
 * vobject_0_5_0
 * volt_gen_0_1_0
 * volter_0_0_2
 * voodoo_mfg_1_0_0
 * voorhees_0_1_1
 * voxbone_0_1_4
 * voxpop_0_0_3
 * vsn_1_1_0
 * vultr_0_3_0
 * wabbit_0_4_0
 * wait_for_it_1_1_1
 * wakanda_name_generator_0_1_0
 * wakaway_0_5_0
 * wakeonlan_0_1_0
 * wallaby_0_20_0
 * wallaby_fill_form_0_1_0
 * wand_0_3_0
 * wand_core_0_3_1
 * wanikani_0_1_0
 * want_0_4_0
 * wargaming_0_1_0
 * warp_0_0_1
 * warpex_1_1_8
 * warren_0_1_0
 * wasm_0_0_1
 * watch_0_2_2
 * watchdog_0_1_2
 * watcher_1_1_0
 * water_0_1_1
 * wavex_0_14_1
 * wayback_0_1_0
 * wayback_archiver_0_0_1
 * we_whisper_0_1_3
 * weasel_0_1_1
 * weather_report_0_2_0
 * weatherex_0_1_3
 * weave_4_0_0
 * weaver_0_1_0
 * web_money_0_1_0
 * web_push_encryption_0_2_1
 * web_socket_0_1_0
 * web_spell_0_4_0
 * webassembly_0_6_1
 * webdriver_0_8_1
 * weber_0_1_0
 * webern_0_1_0
 * webfinger_0_1_0
 * webmentions_0_3_4
 * webpack_static_plug_0_2_0
 * webpage_1_0_0
 * webpay_0_0_4
 * websocket_client_1_2_4
 * websocket_client_1_3_0
 * websockex_0_4_1
 * wechat_0_3_7
 * wechat_applet_0_1_0
 * wechat_check_signature_0_0_1
 * wechat_mp_auth_0_0_3
 * wechat_pay_0_6_0
 * wechatex_0_0_1
 * wedeploy_0_1_0
 * weebo_0_1_2
 * weekday_0_0_3
 * weepub_0_1_0
 * weiboex_0_1_0
 * weighted_random_0_1_0
 * wemo_0_1_4
 * what3words_2_0_0
 * whatwasit_0_2_1
 * whippet_0_1_0
 * white_bread_4_1_1
 * whois_0_1_1
 * whoppex_0_1_0
 * wideact_0_0_3
 * wiex_0_1_0
 * wifi_0_2_0
 * wiki_search_0_1_0
 * wildcard_0_2_1
 * win_notify_0_0_4
 * wire_0_2_0
 * wit_0_0_1
 * witaixir_0_0_1
 * witchcraft_1_0_1
 * witha_0_1_1
 * wizard_0_1_0
 * wizardry_0_0_2
 * wobserver_0_1_8
 * wobserverfork_0_1_9
 * woody_0_1_6
 * woolly_0_1_2
 * word_filter_0_1_2
 * word_finder_0_1_0
 * word_smith_0_1_2
 * word_util_0_1_2
 * wordpress_ex_0_1_1
 * work_queue_0_0_3
 * worker_pool_2_0_1
 * worker_pool_2_1_0
 * worker_pool_2_2_3
 * worker_pool_3_1_0
 * worker_pool_3_1_1
 * workex_0_10_0
 * workflow_0_2_0
 * workshop_0_5_1
 * world_json_0_1_6
 * worldly_0_1_2
 * wormhole_2_2_0
 * wpa_supplicant_0_2_0
 * wrappex_0_0_1
 * ws_0_0_1
 * wts_0_3_0
 * wunderground_0_0_9
 * wx_utils_0_0_2
 * wykop_api_0_1_1
 * x509_0_1_1
 * xain_0_6_1
 * xandra_0_9_2
 * xarango_0_6_1
 * xattr_0_3_0
 * xbacon_0_1_0
 * xbank_0_1_1
 * xdr_0_1_2
 * xe_0_0_1
 * xeethemescript_0_3_0
 * xema_0_4_0
 * xend_0_6_2
 * xenium_0_1_0
 * xepcache_1_0_1
 * xfighter_0_2_1
 * xgps_0_4_1
 * xjs_0_1_1
 * xkcd_0_0_3
 * xlsx_parser_0_0_10
 * xlsx_stream_0_2_0
 * xlsxir_1_6_2
 * xmap_0_2_4
 * xmart_things_0_1_1
 * xml_builder_2_1_0
 * xml_builder_plus_0_0_4
 * xml_mapper_1_2_1
 * xml_parsec_0_1_0
 * xml_parser_0_1_1
 * xml_plug_parser_0_0_1
 * xml_stream_0_2_0
 * xml_to_keyword_0_0_3
 * xmlixer_0_1_1
 * xmlrpc_0_9_1
 * xmlrpc_1_1_0
 * xmlx_0_1_0
 * xmpp_1_2_2
 * xoauth2_0_0_3
 * xpath_1_0_2
 * xprof_2_0_0_rc_1
 * xprof_core_2_0_0_rc_1
 * xprof_gui_2_0_0_rc_1
 * xref_runner_1_1_1
 * xslt_0_1_1
 * xslt_ex_0_1_0
 * xtea_0_1_2
 * xxhash_0_2_0
 * xyz_0_1_1
 * y18n_1_0_0
 * y_process_0_2_2
 * yabko_0_2_3
 * yacto_1_2_5
 * yahoo_finance_elixir_0_1_0
 * yahoo_finanza_0_3_0
 * yahoo_fx_0_2_0
 * yajwt_1_0_2
 * yalo_message_0_1_2
 * yamerl_0_3_3
 * yamerl_0_4_0
 * yamerl_0_7_0
 * yamerl_the_fork_0_3_3
 * yaml_elixir_1_3_2
 * yaml_elixir_1_4_0
 * yaml_elixir_2_1_0
 * yaml_encoder_0_0_2
 * yaml_front_matter_0_3_0
 * yamlex_0_1_0
 * yams_0_2_2
 * yandex_translator_0_9_0
 * yar_0_1_0
 * yatapp_0_1_2
 * yelp_ex_0_2_0
 * yes_msg_0_1_0
 * yesql_0_2_0
 * yexdl_0_1_0
 * yggdrasil_3_3_3
 * yocingo_0_0_3
 * yodlee_0_1_4
 * yodlee_elixir_0_1_2
 * yomel_0_5_0
 * yotsuba_1_0_0
 * youtrack_logger_backend_0_1_15
 * yt_potion_0_1_3
 * ytx_0_0_5
 * yubico_0_1_5
 * yuri_1_0_0
 * yyid_0_1_2
 * zanox_0_0_1
 * zarex_0_5_0
 * zbar_0_1_0
 * zbase32_2_0_0
 * zeam_0_0_5
 * zen_ex_0_3_3
 * zencoder_1_0_1
 * zendex_0_8_1
 * zigzag_0_0_1
 * zillow_1_0_0
 * zip_stream_0_1_0
 * zipcloudx_0_0_2
 * zipcode_to_timezone_0_1_0
 * zipflow_0_0_2
 * zipper_1_0_1
 * zipper_list_1_1_1
 * zipper_tree_0_1_1
 * zippy_0_0_1
 * zlist_1_1_1
 * zlists_0_0_4
 * zoho_0_0_2
 * zohomail_api_0_0_2
 * zombie_0_1_1
 * zotonic_mod_acl_user_groups_1_0_0_dev
 * zotonic_stdlib_1_0_0
 * zotonic_stdlib_1_0_0_alpha2
 * zotonic_stdlib_1_0_0_alpha3
 * zset_0_1_0
 * zstd_0_2_0
 * zstream_0_2_0
 * zuck_0_1_0
 * zuppler_elixir_0_0_13
 * zuppler_users_client_0_0_5
 * zwarm_0_1_0
 * zx24ht_1_0_0

*/
{ stdenv, pkgs, callPackage, overrides ? (self: super: {}) }:

let
  packages = self: rec {
    a_message_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "a_message";
            version = "1.0.0";
            src = fetchHex {
              pkg = "a_message";
              version = "1.0.0";
              sha256 =
                "ec687e0e71e08cc2dc9546dd726877008f580b5aaa13b2a66f1639b246989b2c";
            };

            meta = {
              description = ''\"A message\" struct w/ four required keys: from,
                            to, subject, body'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/a_message";
            };
          } // packageOverrides)
      ) {};

    a_message = a_message_1_0_0;

    aatree_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aatree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aatree";
              version = "0.1.0";
              sha256 =
                "ad20d61126e5440dd7443773c74564d1280daffb7265c154d89aa6d71aec80dd";
            };

            meta = {
              description = ''AA Tree in Pure Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rickyhan/aatree";
            };
          } // packageOverrides)
      ) {};

    aatree = aatree_0_1_0;

    aba_api_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "aba_api";
            version = "1.0.0";
            src = fetchHex {
              pkg = "aba_api";
              version = "1.0.0";
              sha256 =
                "76dbd5049bb9df4ea0f0b6e84a26f6a99faee24b597d265243dbd98cc927a8fc";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''AbaAPI is an Elixir wrapper for the HOTS API
                            (https://hotsapi.net/).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jscheel42/aba_api";
            };
          } // packageOverrides)
      ) {};

    aba_api = aba_api_1_0_0;

    abacus_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "abacus";
            version = "0.4.2";
            src = fetchHex {
              pkg = "abacus";
              version = "0.4.2";
              sha256 =
                "2e7bd7c0ba2a594808d42c1b946f11c47bf8254506403031958b58054c807986";
            };

            meta = {
              longDescription = ''Mathematical expression parser and evaluator
                                in Elixir. Tags: math, parse, parser, eval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/narrowtux/abacus";
            };
          } // packageOverrides)
      ) {};

    abacus = abacus_0_4_2;

    abacus_sm_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "abacus_sm";
            version = "1.0.0";
            src = fetchHex {
              pkg = "abacus_sm";
              version = "1.0.0";
              sha256 =
                "e62629984798c9d6169607bf8d1e16d8c710f75a9651628128e35d03b86f5c2b";
            };

            meta = {
              longDescription = ''Abacus is a module for transforming other
                                modules into metric systems. These modules
                                (metric systems) make it possible to use
                                functions to create values enclosed in a metric
                                system and functions to manipulate these
                                values.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/abacus";
            };
          } // packageOverrides)
      ) {};

    abacus_sm = abacus_sm_1_0_0;

    abnf_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "abnf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "abnf";
              version = "0.0.1";
              sha256 =
                "81e263f061ba677bda3e0d7f8884730eb51c14d7bc6526647c46cce659f1b054";
            };

            meta = {
              description = ''ABNF parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vanstee/abnf";
            };
          } // packageOverrides)
      ) {};

    abnf = abnf_0_0_1;

    abnf2_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "abnf2";
            version = "0.1.2";
            src = fetchHex {
              pkg = "abnf2";
              version = "0.1.2";
              sha256 =
                "2b42a6b8317c85dabb933637dff80d7c95955a2e9373ef691d87cfeb4196229a";
            };

            meta = {
              description = ''An ABNF parser generator updated from the
                            original developed by @vanstee.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kipcole9/abnf";
            };
          } // packageOverrides)
      ) {};

    abnf2 = abnf2_0_1_2;

    absinthe_1_4_0_beta_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "absinthe";
            version = "1.4.0-beta.4";
            src = fetchHex {
              pkg = "absinthe";
              version = "1.4.0-beta.4";
              sha256 =
                "249cb88efa15db7dfe208a5ac3631143ccbe6a9f127962e6041351f5a1935a3f";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''GraphQL for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/absinthe-graphql/absinthe";
            };
          } // packageOverrides)
      ) {};

    accept_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "accept";
            version = "0.3.0";
            src = fetchHex {
              pkg = "accept";
              version = "0.3.0";
              sha256 =
                "3bf5e702fb0e1cedda86b11fb5cc56ecaef48f0575c7598a2e92773419a5bdeb";
            };

            buildPlugins  = [ coveralls ];


            meta = {
              description = ''Accept header(s) for Erlang/Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/accept";
            };
          } // packageOverrides)
      ) {};

    accept_0_3_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "accept";
            version = "0.3.3";
            src = fetchHex {
              pkg = "accept";
              version = "0.3.3";
              sha256 =
                "9df23358b4d0c62d058fb84281aae5e7a850dcc923d4907d12b938b189e20208";
            };

            meta = {
              description = ''Accept header(s) for Erlang/Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/accept";
            };
          } // packageOverrides)
      ) {};

    accept = accept_0_3_3;

    acceptor_pool_1_0_0_rc_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "acceptor_pool";
            version = "1.0.0-rc.0";
            src = fetchHex {
              pkg = "acceptor_pool";
              version = "1.0.0-rc.0";
              sha256 =
                "8552d92e7bc2252c4f2e6a440c8307c447e96a89d9739c093a8a913fed3914c4";
            };

            meta = {
              description = ''A tcp acceptor pool library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/acceptor_pool";
            };
          } // packageOverrides)
      ) {};

    acceptor_pool = acceptor_pool_1_0_0_rc_0;

    accessible_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "accessible";
            version = "0.2.0";
            src = fetchHex {
              pkg = "accessible";
              version = "0.2.0";
              sha256 =
                "0f4086555301591dd5dc370f1f8052a84b8d32c98e80d0f2e75a17dc0d9add08";
            };

            meta = {
              description = ''Dead-simple Access behaviour for custom
                            structs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/accessible";
            };
          } // packageOverrides)
      ) {};

    accessible = accessible_0_2_0;

    accesslog_parser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "accesslog_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "accesslog_parser";
              version = "0.1.0";
              sha256 =
                "4732f65a7cb8c047e0d93ba389a87e7cab0689c42ab51a210286d14afcfb2355";
            };

            meta = {
              description = ''Access Log Parser'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixytics/accesslog_parser";
            };
          } // packageOverrides)
      ) {};

    accesslog_parser = accesslog_parser_0_1_0;

    accomplice_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "accomplice";
            version = "0.2.0";
            src = fetchHex {
              pkg = "accomplice";
              version = "0.2.0";
              sha256 =
                "6ac259e481790d53eabacd9c7bca6bae059b5266fcf99578fc90d64c14ed6b52";
            };

            meta = {
              longDescription = ''Accomplice is a library for grouping members
                                of a list with a respect to a number of
                                constraints.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbramson/accomplice";
            };
          } // packageOverrides)
      ) {};

    accomplice = accomplice_0_2_0;

    ace_0_16_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hpack_erl_0_2_3,
          raxx_0_15_4
        }:
          buildMix ({
            name = "ace";
            version = "0.16.6";
            src = fetchHex {
              pkg = "ace";
              version = "0.16.6";
              sha256 =
                "e29a95e96d5ca70b625ca1cc100e066b44919b532550804d4f0cf7defd846813";
            };
            beamDeps  = [ hpack_erl_0_2_3 raxx_0_15_4 ];

            meta = {
              description = ''HTTP web server and client, supports http1 and
                            http2'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/crowdhailer/ace";
            };
          } // packageOverrides)
      ) {};

    ace = ace_0_16_6;

    ace_0_9_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ace";
            version = "0.9.3";
            src = fetchHex {
              pkg = "ace";
              version = "0.9.3";
              sha256 =
                "459320bb22e39f37e18afaac411b8c77d5df2393882d2b3b3c55abbec4571fcf";
            };

            meta = {
              description = ''HTTP web server and client, supports http1 and
                            http2'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/crowdhailer/ace";
            };
          } // packageOverrides)
      ) {};

    acme_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          jose_1_8_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "acme";
            version = "0.5.1";
            src = fetchHex {
              pkg = "acme";
              version = "0.5.1";
              sha256 =
                "207ad4effac72f552722484690f880df733b7bbfcc6da2fbc92b7c6088d747e0";
            };
            beamDeps  = [ hackney_1_13_0 jose_1_8_4 poison_3_1_0 ];

            meta = {
              description = ''Acme (Let`s Encrypt) Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sikanhe/acme";
            };
          } // packageOverrides)
      ) {};

    acme = acme_0_5_1;

    active_jorb_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          redix_0_7_1,
          sidewalk_0_3_4,
          uuid_1_1_8
        }:
          buildMix ({
            name = "active_jorb";
            version = "0.1.2";
            src = fetchHex {
              pkg = "active_jorb";
              version = "0.1.2";
              sha256 =
                "5c6b89a03e949522db21eae5a55302293c0c3fc0b92d92b8d151f1a580bb29b9";
            };
            beamDeps  = [ redix_0_7_1 sidewalk_0_3_4 uuid_1_1_8 ];

            meta = {
              longDescription = ''A library to enqueue jobs with your Active
                                Job job processor. You may want this when
                                strangling your Rails project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PrecisionNutrition/active_jorb";
            };
          } // packageOverrides)
      ) {};

    active_jorb = active_jorb_0_1_2;

    activity_pub_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "activity_pub";
            version = "0.1.0";
            src = fetchHex {
              pkg = "activity_pub";
              version = "0.1.0";
              sha256 =
                "913e8078a4d274e5023db6dfac4de368506aa201f6788c95184b4acaed84d180";
            };

            meta = {
              description = ''ActivityPub is a decentralized social networking
                            protocol'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coryodaniel/activity_pub";
            };
          } // packageOverrides)
      ) {};

    activity_pub = activity_pub_0_1_0;

    activity_streams_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          proper_case_1_0_2
        }:
          buildMix ({
            name = "activity_streams";
            version = "0.1.2";
            src = fetchHex {
              pkg = "activity_streams";
              version = "0.1.2";
              sha256 =
                "a1aa3495f16023c6ab3af1fed80bed1477545140421aa213506d5bc005f42f54";
            };
            beamDeps  = [ poison_3_1_0 proper_case_1_0_2 ];

            meta = {
              longDescription = ''ActivityStreams is a data format for encoding
                                and transferring activity/event metadata'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coryodaniel/activity_streams";
            };
          } // packageOverrides)
      ) {};

    activity_streams = activity_streams_0_1_2;

    acx_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_5_0,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "acx";
            version = "0.0.2";
            src = fetchHex {
              pkg = "acx";
              version = "0.0.2";
              sha256 =
                "ec2cfec59d29f2b93da6d351b6b62319409dd11f576b1b68baecad9391197452";
            };
            beamDeps  = [ decimal_1_5_0 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A Elixir wrap for API of Acx.io exchange.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/2pd/acx-elixir";
            };
          } // packageOverrides)
      ) {};

    acx = acx_0_0_2;

    adap_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "adap";
            version = "0.0.1";
            src = fetchHex {
              pkg = "adap";
              version = "0.0.1";
              sha256 =
                "10679369764e2aa68560008c1f8bea40d5c715389e27e10b35b1ceda3fedadbb";
            };

            meta = {
              longDescription = '' Create a data stream across your information
                                systems to query, augment and transform data
                                according to Elixir matching rules. '';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/awetzel/adap";
            };
          } // packageOverrides)
      ) {};

    adap = adap_0_0_1;

    adapt_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "adapt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "adapt";
              version = "0.1.0";
              sha256 =
                "ede602cf413a5947f1e01dc0ecbc4dc0a157dd04d9b21ca1a5ed33dafbbc40e0";
            };
            beamDeps  = [ poison_2_2_0 porcelain_2_0_3 ];

            meta = {
              longDescription = ''A wrapper of the Adapt Python Project. It
                                allows the processing of user input to extract
                                intentions in a machine readable way.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/bka9/elixir-adapt";
            };
          } // packageOverrides)
      ) {};

    adapt = adapt_0_1_0;

    addressBook_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "addressBook";
            version = "0.1.1";
            src = fetchHex {
              pkg = "addressBook";
              version = "0.1.1";
              sha256 =
                "35525566e6449015641058e1b4f85a237008207db5c0d7f0adfc7c72fb827a45";
            };

            meta = {
              description = ''Simple package for managing address book.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/maxiwoj/AddressBook";
            };
          } // packageOverrides)
      ) {};

    addressBook = addressBook_0_1_1;

    ads_client_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "ads_client";
            version = "1.0.2";
            src = fetchHex {
              pkg = "ads_client";
              version = "1.0.2";
              sha256 =
                "96a594cdf8c37f8e192427d1ceeee223f94f470a60e59ca3ddab3dc6b35270e5";
            };
            beamDeps  = [ jsx_2_8_3 poison_3_1_0 ];

            meta = {
              description = ''a simple ams/ads implementation'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    ads_client = ads_client_1_0_2;

    ads_server_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ads_client_1_0_2,
          distillery_1_5_3,
          gproc_0_6_1,
          jsx_2_9_0,
          ranch_1_3_2
        }:
          buildMix ({
            name = "ads_server";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ads_server";
              version = "0.1.4";
              sha256 =
                "4dc5d0869b45c130c493a3b322c4fc4183ca0e71a95add9e5af6b3d10efbc7a5";
            };
            beamDeps  = [
                          ads_client_1_0_2
                          distillery_1_5_3
                          gproc_0_6_1
                          jsx_2_9_0
                          ranch_1_3_2
                        ];

            meta = {
              description = ''a ads server implementation in elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/binder-lukas/elixir_ads_server";
            };
          } // packageOverrides)
      ) {};

    ads_server = ads_server_0_1_4;

    adt_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "adt";
            version = "0.0.2";
            src = fetchHex {
              pkg = "adt";
              version = "0.0.2";
              sha256 =
                "a5b310b1ed8093b0f786ca4facdd0c9ff073acf3e47db6a9771005b77e0d7259";
            };

            meta = {
              description = ''A light ADT module for Elixir.'';

            };
          } // packageOverrides)
      ) {};

    adt = adt_0_0_2;

    advent_of_code_helper_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_3_0_3 }:
          buildMix ({
            name = "advent_of_code_helper";
            version = "0.1.2";
            src = fetchHex {
              pkg = "advent_of_code_helper";
              version = "0.1.2";
              sha256 =
                "d41107ee3b8cfd420f33085cb34f6d275155872e98e69ceeb886f9cc3acc559e";
            };
            beamDeps  = [ httpotion_3_0_3 ];

            meta = {
              longDescription = ''Package to allow you to get input for all
                                advent of code puzzles, rather than pasting them
                                in manually.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ejhobbs/Advent-Of-Code";
            };
          } // packageOverrides)
      ) {};

    advent_of_code_helper = advent_of_code_helper_0_1_2;

    aeacus_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, comeonin_1_6_0 }:
          buildMix ({
            name = "aeacus";
            version = "0.3.0";
            src = fetchHex {
              pkg = "aeacus";
              version = "0.3.0";
              sha256 =
                "3cc138cfc7c508cfd85afddd0881632dde2e663d222c9e3749fae8c80ebb2c0b";
            };
            beamDeps  = [ comeonin_1_6_0 ];

            meta = {
              longDescription = ''A simple, secure, and highly configurable
                                Elixir identity [username | email | id |
                                etc.]/password authentication module; Compatible
                                with Ecto.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/zmoshansky/aeacus";
            };
          } // packageOverrides)
      ) {};

    aeacus = aeacus_0_3_0;

    aes256_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aes256";
            version = "0.5.1";
            src = fetchHex {
              pkg = "aes256";
              version = "0.5.1";
              sha256 =
                "e6840fd80f00dbd68486b715f2818693fe56d4d38d1355928bb4ed7af30ff658";
            };

            meta = {
              description = ''Secure AES256 CBC mode implementation in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/izelnakri/aes256";
            };
          } // packageOverrides)
      ) {};

    aes256 = aes256_0_5_1;

    aes_ctr_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aes_ctr";
            version = "0.2.0";
            src = fetchHex {
              pkg = "aes_ctr";
              version = "0.2.0";
              sha256 =
                "1f1f87ea9b73de61286fa6864132c945314c650dcec2c456facb7c7cc1d78db0";
            };

            meta = {
              description = ''AES cipher in CTR mode.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/anoskov/aes-ctr-ex";
            };
          } // packageOverrides)
      ) {};

    aes_ctr = aes_ctr_0_2_0;

    aescmac_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aescmac";
            version = "0.0.1";
            src = fetchHex {
              pkg = "aescmac";
              version = "0.0.1";
              sha256 =
                "8ded8ed61cb3a6a1185274836eb689005c423acb87240c1399879ab601146693";
            };

            meta = {
              description = ''AES CMAC (rfc 4493) in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kleinernik/elixir-aes-cmac";
            };
          } // packageOverrides)
      ) {};

    aescmac = aescmac_0_0_1;

    affine_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, matrix_0_3_2 }:
          buildMix ({
            name = "affine";
            version = "0.1.0";
            src = fetchHex {
              pkg = "affine";
              version = "0.1.0";
              sha256 =
                "6edcb7db8cd24bec96727d1e62b7d4b08c0482b204fabda2ea529d9b550e07ff";
            };
            beamDeps  = [ matrix_0_3_2 ];

            meta = {
              description = ''Affine Transform Library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bengtson/affine";
            };
          } // packageOverrides)
      ) {};

    affine = affine_0_1_0;

    affirm_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "affirm";
            version = "0.1.1";
            src = fetchHex {
              pkg = "affirm";
              version = "0.1.1";
              sha256 =
                "49d33164d24ec62226d0bbd2418d69bec829a15fa84937f076658a5e14adedd5";
            };
            beamDeps  = [ httpoison_0_13_0 jason_1_1_1 ];

            meta = {
              description = ''Affirm API library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/revzilla/affirm";
            };
          } // packageOverrides)
      ) {};

    affirm = affirm_0_1_1;

    agala_2_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "agala";
            version = "2.0.5";
            src = fetchHex {
              pkg = "agala";
              version = "2.0.5";
              sha256 =
                "adf2192c4717212321184015cdbe7fba827d8b41936f1d2b935d1b9b5e0d3556";
            };

            meta = {
              description = ''Full featured messaging bot framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/agalaframework/agala";
            };
          } // packageOverrides)
      ) {};

    agala = agala_2_0_5;

    agala_telegram_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          agala_2_0_5,
          construct_1_1_0,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "agala_telegram";
            version = "0.1.2";
            src = fetchHex {
              pkg = "agala_telegram";
              version = "0.1.2";
              sha256 =
                "5ece712a08758b0fda7cdec4cda0bdddacbd750cb51a3447737be309261dd9da";
            };
            beamDeps  = [
                          agala_2_0_5
                          construct_1_1_0
                          httpoison_0_13_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''Telegram provider for Agala framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/agalaframework/agala_telegram";
            };
          } // packageOverrides)
      ) {};

    agala_telegram = agala_telegram_0_1_2;

    agala_vk_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          agala_2_0_5,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "agala_vk";
            version = "0.1.4";
            src = fetchHex {
              pkg = "agala_vk";
              version = "0.1.4";
              sha256 =
                "7745567a422b95fe8ffe050e74d1d0619a06d642a940b34dedbb733c9dba1f4d";
            };
            beamDeps  = [ agala_2_0_5 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Vk provider for Agala framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/agalaframework/agala_vk";
            };
          } // packageOverrides)
      ) {};

    agala_vk = agala_vk_0_1_4;

    agent_check_0_2_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "agent_check";
            version = "0.2.8";
            src = fetchHex {
              pkg = "agent_check";
              version = "0.2.8";
              sha256 =
                "6a3ddb73ece3472b2bbe585f5f72bdd9278e548ce67f5763b753e76b61714e70";
            };

            meta = {
              longDescription = ''HAProxy Agent Check protocol implementation
                                for Elixir/Phoenix apps. Allows for easy rolling
                                restarts and dynamic backpressure to your
                                HAProxy loadbalancer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/betacooperation/agent_check";
            };
          } // packageOverrides)
      ) {};

    agent_check = agent_check_0_2_8;

    agent_map_0_9_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "agent_map";
            version = "0.9.9";
            src = fetchHex {
              pkg = "agent_map";
              version = "0.9.9";
              sha256 =
                "7a4e7d10059dac9ed01a786264d3bbcb7be34f273107bd0f56ed9dbd8765ed83";
            };

            meta = {
              longDescription = ''`AgentMap` is a `GenServer` that holds `Map`
                                and provides concurrent access via `Agent` API
                                for operations made on different keys.
                                Basically, it can be used as a cache,
                                memoization and computational framework or,
                                sometimes, as a `GenServer` replacement.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zergera/agent_map";
            };
          } // packageOverrides)
      ) {};

    agent_map = agent_map_0_9_9;

    agentex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amnesia_0_2_7,
          gen_stage_0_14_0,
          json_2_0_0_SNAPSHOT,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "agentex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "agentex";
              version = "0.2.0";
              sha256 =
                "901797ff6c748f03565db6163eb67c8f277251a0b9c6adee247010d900d09e1b";
            };
            beamDeps  = [
                          amnesia_0_2_7
                          gen_stage_0_14_0
                          json_2_0_0_SNAPSHOT
                          poolboy_1_5_1
                        ];

            meta = {
              longDescription = ''Distributed `Agent` implementation, providing
                                multi-node agents on top of Mnesia.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/agentex";
            };
          } // packageOverrides)
      ) {};

    agentex = agentex_0_2_0;

    aggregate_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aggregate";
            version = "0.0.5";
            src = fetchHex {
              pkg = "aggregate";
              version = "0.0.5";
              sha256 =
                "477730a79a0453fe2589c0f72b812edfbed244ca0497892eb839c4733a351f6f";
            };

            meta = {
              description = ''Aggregate from DDD. Perfect fit with Extreme
                            project'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/burmajam/gen_aggregate";
            };
          } // packageOverrides)
      ) {};

    aggregate = aggregate_0_0_5;

    agile_crm_1_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "agile_crm";
            version = "1.0.7";
            src = fetchHex {
              pkg = "agile_crm";
              version = "1.0.7";
              sha256 =
                "fef2a17dfd8b9e95ac0d1abc2d1b3e48b4d58dd5718509f3a329d462048d2b11";
            };
            beamDeps  = [ httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              description = ''An elixir client for AgileCRM`s REST API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://gitlab.alfred.yavende.com/opensource/agilecrm";
            };
          } // packageOverrides)
      ) {};

    agile_crm = agile_crm_1_0_7;

    ahab_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ahab";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ahab";
              version = "0.1.1";
              sha256 =
                "c981c2f62dccd15a055083f9bc088aa0e4a029625ef9aa45104c4ba0ead12bd2";
            };

            meta = {
              description = ''A lightweight, low latency TCP acceptor pool for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jquadrin/ahab";
            };
          } // packageOverrides)
      ) {};

    ahab = ahab_0_1_1;

    aho_corasick_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aho_corasick";
            version = "0.0.1";
            src = fetchHex {
              pkg = "aho_corasick";
              version = "0.0.1";
              sha256 =
                "c4ed4600688d6246a2abde2313fe1c686b153a09be0b622a44b6e669098adf95";
            };

            meta = {
              longDescription = ''Aho-Corasick algorithm, implemented in Elixir
                                using Erlang`s :digraph for the graph
                                structure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffgran/aho_corasick.ex";
            };
          } // packageOverrides)
      ) {};

    aho_corasick = aho_corasick_0_0_1;

    ailuropoda_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gb2260_0_6_1 }:
          buildMix ({
            name = "ailuropoda";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ailuropoda";
              version = "0.2.0";
              sha256 =
                "d2edb0ecf70c49ac5c06db378a04de6a9ae2dcf4891a34d8d136b628ca9e3e74";
            };
            beamDeps  = [ gb2260_0_6_1 ];

            meta = {
              description = ''Ailuropoda is Chinese Personal ID Card Validator
                            for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ritou/elixir-ailuropoda";
            };
          } // packageOverrides)
      ) {};

    ailuropoda = ailuropoda_0_2_0;

    airports_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "airports";
            version = "0.1.0";
            src = fetchHex {
              pkg = "airports";
              version = "0.1.0";
              sha256 =
                "3399542a4e00553e759f802bb7b64bbeb5d994dd2df833d2055ebe26d3227a32";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              longDescription = ''Airports is a collection of all known
                                airports. Data source is
                                https://openflights.org/data.html'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nerds-and-company/airports";
            };
          } // packageOverrides)
      ) {};

    airports = airports_0_1_0;

    akd_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distillery_1_5_3,
          simple_docker_0_1_0
        }:
          buildMix ({
            name = "akd";
            version = "0.2.1";
            src = fetchHex {
              pkg = "akd";
              version = "0.2.1";
              sha256 =
                "b39f808e230fc376da53ebce30e78ac136198c83ead93f9aaca332efd3795bff";
            };
            beamDeps  = [ distillery_1_5_3 simple_docker_0_1_0 ];

            meta = {
              description = ''An configurable (but easy to set up) Elixir
                            Deployment Automation library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annkissam/akd";
            };
          } // packageOverrides)
      ) {};

    akd = akd_0_2_1;

    alambic_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alambic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alambic";
              version = "0.1.0";
              sha256 =
                "04dc4cc88d56539ec4006a84668186501be9be4c369f145af6a606bb63d97ce0";
            };

            meta = {
              longDescription = ''A collection of small elixir utilities.
                                Semaphore: quick way of limiting access to a
                                resource CountDown: quick way of counting fan
                                in/out events'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sdanzan/alambic";
            };
          } // packageOverrides)
      ) {};

    alambic = alambic_0_1_0;

    alchemic_avatar_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alchemic_avatar";
            version = "0.1.3";
            src = fetchHex {
              pkg = "alchemic_avatar";
              version = "0.1.3";
              sha256 =
                "b3c5ba7774ba4c9514f832f375f498184f8925b936850c3ce43522850771746e";
            };

            meta = {
              description = ''Creating letter avatar from user`s name(or any
                            other strong / character).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhangsoledad/alchemic_avatar";
            };
          } // packageOverrides)
      ) {};

    alchemic_avatar = alchemic_avatar_0_1_3;

    alchemic_pinyin_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alchemic_pinyin";
            version = "0.1.2";
            src = fetchHex {
              pkg = "alchemic_pinyin";
              version = "0.1.2";
              sha256 =
                "1fbd8300984699370b4a97ab10b64023494d2f9755eddf0abe1dcd9a5f2498c6";
            };

            meta = {
              description = ''中文汉字转拼音.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhangsoledad/alchemic_pinyin";
            };
          } // packageOverrides)
      ) {};

    alchemic_pinyin = alchemic_pinyin_0_1_2;

    alchemist_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alchemist";
            version = "0.0.2";
            src = fetchHex {
              pkg = "alchemist";
              version = "0.0.2";
              sha256 =
                "095ad9b47258b2d482b782a5794ed800df1c4024abbc126f347738be72a1aa51";
            };

            meta = {
              description = ''Carefully refactor critical paths'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/alchemist";
            };
          } // packageOverrides)
      ) {};

    alchemist = alchemist_0_0_2;

    alchemy_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "alchemy";
            version = "0.0.1";
            src = fetchHex {
              pkg = "alchemy";
              version = "0.0.1";
              sha256 =
                "109ce3f83d596a6ab9a947f472516f87da7b0df823fe2d91e27bc6594a305c3d";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''Perform experiments in production'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/alchemy";
            };
          } // packageOverrides)
      ) {};

    alchemy = alchemy_0_0_1;

    ale8583_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ale8583";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ale8583";
              version = "0.1.0";
              sha256 =
                "14895df42883b2b385d0821c1eb2655eccbd9654505a7da9dedf3fb96b1f08a5";
            };

            meta = {
              description = ''ISO8583(MasterC and PROSA) parser for ELIXIR
                            language.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/alejandroerik/ale8583";
            };
          } // packageOverrides)
      ) {};

    ale8583 = ale8583_0_1_0;

    aleppo_0_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "aleppo";
            version = "0.9.0";
            src = fetchHex {
              pkg = "aleppo";
              version = "0.9.0";
              sha256 =
                "2f360631d64da53f40621714e157fd33805a95d0160d5c62fcfb3e132986ce71";
            };

            meta = {
              description = ''Aleppo: ALternative Erlang Pre-ProcessOr'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/ErlyORM/aleppo";
            };
          } // packageOverrides)
      ) {};

    aleppo = aleppo_0_9_0;

    alexa_0_1_15 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "alexa";
            version = "0.1.15";
            src = fetchHex {
              pkg = "alexa";
              version = "0.1.15";
              sha256 =
                "1e9ff2601f6158f84791c72110daec33873985c47de01a3c61a3db0c9a5dcba8";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Framework for implementing an Amazon Alexa
                            Skill.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/alexa";
            };
          } // packageOverrides)
      ) {};

    alexa = alexa_0_1_15;

    alfred_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "alfred";
            version = "0.3.1";
            src = fetchHex {
              pkg = "alfred";
              version = "0.3.1";
              sha256 =
                "89f648931cb42ab8e86196a19aa22e7f2a029f04b87a6d5c4892ded3a18a01f7";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Library for integrating with Alfred:
                            http://www.alfredapp.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/alfred-ex";
            };
          } // packageOverrides)
      ) {};

    alfred = alfred_0_3_1;

    algae_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          quark_2_3_0,
          type_class_1_2_5,
          witchcraft_1_0_1
        }:
          buildMix ({
            name = "algae";
            version = "1.2.0";
            src = fetchHex {
              pkg = "algae";
              version = "1.2.0";
              sha256 =
                "5cb7b643025d267566efe117e71f2cdb9bc6ebbfa334820450b476a7b67cfb45";
            };
            beamDeps  = [ quark_2_3_0 type_class_1_2_5 witchcraft_1_0_1 ];

            meta = {
              description = ''Bootstrapped algebraic data types for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/algae";
            };
          } // packageOverrides)
      ) {};

    algae = algae_1_2_0;

    alice_0_3_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          poolboy_1_5_1,
          redix_0_6_1,
          slack_0_12_0
        }:
          buildMix ({
            name = "alice";
            version = "0.3.7";
            src = fetchHex {
              pkg = "alice";
              version = "0.3.7";
              sha256 =
                "3643875f0725c994f723c931249d354fbaad4981fce0f5fc6a84c2737d650588";
            };
            beamDeps  = [ poison_3_1_0 poolboy_1_5_1 redix_0_6_1 slack_0_12_0
                      ];

            meta = {
              description = ''A Slack bot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice";
            };
          } // packageOverrides)
      ) {};

    alice = alice_0_3_7;

    alice_against_humanity_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_7 }:
          buildMix ({
            name = "alice_against_humanity";
            version = "0.1.3";
            src = fetchHex {
              pkg = "alice_against_humanity";
              version = "0.1.3";
              sha256 =
                "248c494fcb7fb546954d6337b63cec3f1bced53e98079a4774e4a28acd799d91";
            };
            beamDeps  = [ alice_0_3_7 ];

            meta = {
              description = ''A handler for the Alice Slack bot. Play Cards
                            Against Humanity with Alice.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alice-bot/alice_against_humanity";
            };
          } // packageOverrides)
      ) {};

    alice_against_humanity = alice_against_humanity_0_1_3;

    alice_doge_me_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_7 }:
          buildMix ({
            name = "alice_doge_me";
            version = "0.1.1";
            src = fetchHex {
              pkg = "alice_doge_me";
              version = "0.1.1";
              sha256 =
                "cabb1d05ab0887c46e7e88803d5bc9234158629daae60677f04cb6512d7e920d";
            };
            beamDeps  = [ alice_0_3_7 ];

            meta = {
              description = ''This handler will allow Alice to create Doge
                            images with user input.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alice-bot/alice_doge_me/";
            };
          } // packageOverrides)
      ) {};

    alice_doge_me = alice_doge_me_0_1_1;

    alice_eats_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_7 }:
          buildMix ({
            name = "alice_eats";
            version = "0.1.1";
            src = fetchHex {
              pkg = "alice_eats";
              version = "0.1.1";
              sha256 =
                "e88dc38c18a0233764f16e90415c3a18fad7742f912f4677161d3e00a789c19d";
            };
            beamDeps  = [ alice_0_3_7 ];

            meta = {
              longDescription = ''A handler for the Alice Slack bot. Suggest
                                where to eat from self-curated lists of
                                restaurants.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alice-bot/alice_eats";
            };
          } // packageOverrides)
      ) {};

    alice_eats = alice_eats_0_1_1;

    alice_google_images_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_7 }:
          buildMix ({
            name = "alice_google_images";
            version = "0.1.4";
            src = fetchHex {
              pkg = "alice_google_images";
              version = "0.1.4";
              sha256 =
                "83d0b7cb8d94a6681725a8e8754fece3551f79216184184cafedcbdbb4df39f4";
            };
            beamDeps  = [ alice_0_3_7 ];

            meta = {
              description = ''A handler for the Alice Slack bot. Get random
                            images from Google'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/adamzaninovich/alice_google_images";
            };
          } // packageOverrides)
      ) {};

    alice_google_images = alice_google_images_0_1_4;

    alice_karma_0_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_7 }:
          buildMix ({
            name = "alice_karma";
            version = "0.3.5";
            src = fetchHex {
              pkg = "alice_karma";
              version = "0.3.5";
              sha256 =
                "0c51c6e4c1a786e34dc0c1de90778afa50e0be715e7a6dd8ec03afc7ff7ea035";
            };
            beamDeps  = [ alice_0_3_7 ];

            meta = {
              longDescription = ''A handler for the Alice Slack bot. Allows
                                Alice to keep track of karma points for
                                arbitrary terms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice_karma";
            };
          } // packageOverrides)
      ) {};

    alice_karma = alice_karma_0_3_5;

    alice_personable_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_7 }:
          buildMix ({
            name = "alice_personable";
            version = "0.0.2";
            src = fetchHex {
              pkg = "alice_personable";
              version = "0.0.2";
              sha256 =
                "fb80938b27c3ae374b3d0bf284de9902d65e85dd8da2d4c80238a03b819b8aad";
            };
            beamDeps  = [ alice_0_3_7 ];

            meta = {
              description = ''A plugin for the Alice chat bot to make her seem
                            a bit more human.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattr-/alice_personable";
            };
          } // packageOverrides)
      ) {};

    alice_personable = alice_personable_0_0_2;

    alice_reddit_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_7,
          readit_0_1_0
        }:
          buildMix ({
            name = "alice_reddit";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alice_reddit";
              version = "0.1.0";
              sha256 =
                "58696952cb23a77ac09249c6f45cf55fc41e27b6d0adf6e918b912621861b5c6";
            };
            beamDeps  = [ alice_0_3_7 readit_0_1_0 ];

            meta = {
              description = ''Alice does Reddit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice_reddit";
            };
          } // packageOverrides)
      ) {};

    alice_reddit = alice_reddit_0_1_0;

    alice_shizzle_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_7,
          gizoogle_0_0_3
        }:
          buildMix ({
            name = "alice_shizzle";
            version = "0.1.3";
            src = fetchHex {
              pkg = "alice_shizzle";
              version = "0.1.3";
              sha256 =
                "034d23f690994ad6bbd64802eb0759193322dd880e9a5feff354ddb2b010abb6";
            };
            beamDeps  = [ alice_0_3_7 gizoogle_0_0_3 ];

            meta = {
              longDescription = ''A handlez fo` tha Alice Slack bot fo` realz.
                                Uses Gizoogle ta allow you ta drop a rhyme like
                                a thug n` retrieve links fo` translated sitez'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/notdevinclark/alice_shizzle";
            };
          } // packageOverrides)
      ) {};

    alice_shizzle = alice_shizzle_0_1_3;

    alice_weather_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_7,
          geocodex_0_1_0,
          json_2_0_0_SNAPSHOT
        }:
          buildMix ({
            name = "alice_weather";
            version = "0.2.2";
            src = fetchHex {
              pkg = "alice_weather";
              version = "0.2.2";
              sha256 =
                "8ccc158112293bbb68ca3835c562c599432f75b0a2b7d869662c463db7852ab6";
            };
            beamDeps  = [ alice_0_3_7 geocodex_0_1_0 json_2_0_0_SNAPSHOT ];

            meta = {
              longDescription = ''A handler for the Alice Slack bot. Allows
                                Alice to provide the weather forecast of a given
                                location.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mushfick/alice_weather";
            };
          } // packageOverrides)
      ) {};

    alice_weather = alice_weather_0_2_2;

    alice_wiki_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_7 }:
          buildMix ({
            name = "alice_wiki";
            version = "1.0.1";
            src = fetchHex {
              pkg = "alice_wiki";
              version = "1.0.1";
              sha256 =
                "e335e2c1f63f3fc02a048feef6cf79aea0ab267fe043a695559c6756269f4c2d";
            };
            beamDeps  = [ alice_0_3_7 ];

            meta = {
              description = ''Handler for Alice that returns a requested
                            Wikipedia article'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hlcfan/alice_wiki";
            };
          } // packageOverrides)
      ) {};

    alice_wiki = alice_wiki_1_0_1;

    alice_xkcd_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_7,
          xkcd_0_0_3
        }:
          buildMix ({
            name = "alice_xkcd";
            version = "0.0.5";
            src = fetchHex {
              pkg = "alice_xkcd";
              version = "0.0.5";
              sha256 =
                "f7df54435de1274223b596c3e0de6cab7cb23acf67ed1d9cf349b9404c4e7949";
            };
            beamDeps  = [ alice_0_3_7 xkcd_0_0_3 ];

            meta = {
              longDescription = ''A handler for the Alice Slack bot. Retrieves
                                latest, specific and random XKCD comics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/notdevinclark/alice_xkcd";
            };
          } // packageOverrides)
      ) {};

    alice_xkcd = alice_xkcd_0_0_5;

    alphabetify_1_0_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alphabetify";
            version = "1.0.9";
            src = fetchHex {
              pkg = "alphabetify";
              version = "1.0.9";
              sha256 =
                "c63ec040344dc7f158307110da7a9692a6019e35e449cd97f7cebdc952f204d9";
            };

            meta = {
              longDescription = ''Create an alphabetical hash. Taking an
                                existing alphabetic hash (of any length), will
                                return the next hash in sequence. If all
                                characters in hash are rolled over, will append
                                a new char (increase the length by 1.) eg.
                                `ZZZZ` -> `AAAAA` eg. `AAAZ` -> `AABA`'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/supersimple/alphabetify-ex";
            };
          } // packageOverrides)
      ) {};

    alphabetify = alphabetify_1_0_9;

    alphanumeric_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alphanumeric";
            version = "0.1.1";
            src = fetchHex {
              pkg = "alphanumeric";
              version = "0.1.1";
              sha256 =
                "4657f02dfc136c309e251c86bb5190cb1460aa9989da767425b39cb6d3a06445";
            };

            meta = {
              description = ''Convert 62 decimal number tools. Integer to
                            String and String to Integer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirocaster/alphanumeric";
            };
          } // packageOverrides)
      ) {};

    alphanumeric = alphanumeric_0_1_1;

    altstd_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "altstd";
            version = "0.0.1";
            src = fetchHex {
              pkg = "altstd";
              version = "0.0.1";
              sha256 =
                "dea502d30b233d6dc31a3dd9ea74bde1813d364e69aee951d8884f03855bf0a5";
            };

            meta = {
              description = ''Complementary data structures and algorithms for
                            the standard lib.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ertgl/altstd";
            };
          } // packageOverrides)
      ) {};

    altstd = altstd_0_0_1;

    am_saml_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sweet_xml_0_6_5 }:
          buildMix ({
            name = "am_saml";
            version = "0.4.0";
            src = fetchHex {
              pkg = "am_saml";
              version = "0.4.0";
              sha256 =
                "a1af439eef05d706917b0f54c649846316ea8a25a02d8af92e8b2db9c3dae189";
            };
            beamDeps  = [ sweet_xml_0_6_5 ];

            meta = {
              description = ''SAML interface for authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ascential/am-saml";
            };
          } // packageOverrides)
      ) {};

    am_saml = am_saml_0_4_0;

    amazon_books_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          aws_sign_url_0_1_0,
          httpoison_0_13_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "amazon_books";
            version = "0.2.0";
            src = fetchHex {
              pkg = "amazon_books";
              version = "0.2.0";
              sha256 =
                "69af66eb40e513cc8741543b902c7e6f97d3defc8cd440dccf8bd003ebcd72e1";
            };
            beamDeps  = [ aws_sign_url_0_1_0 httpoison_0_13_0 sweet_xml_0_6_5
                      ];

            meta = {
              description = ''Fetch book information from Amazon API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/amazon_books";
            };
          } // packageOverrides)
      ) {};

    amazon_books = amazon_books_0_2_0;

    amittest_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_5,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "amittest";
            version = "0.1.0";
            src = fetchHex {
              pkg = "amittest";
              version = "0.1.0";
              sha256 =
                "8e2f3c18f8409de8b6242c4051e4ce54d39ba75729eb79aa2cf1d5357ecec850";
            };
            beamDeps  = [ earmark_1_2_5 ex_doc_0_18_3 ];

            meta = {
              description = ''Library for manipulating and validating IBAN
                            account numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kkempin/exiban";
            };
          } // packageOverrides)
      ) {};

    amittest = amittest_0_1_0;

    amlapio_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "amlapio";
            version = "0.2.0";
            src = fetchHex {
              pkg = "amlapio";
              version = "0.2.0";
              sha256 =
                "f916d333b924e6d645447de98d5fb220512a9e32574a31affc8c2c7d3c617c5b";
            };

            meta = {
              longDescription = ''Amlapio: Adding a Map API to a GenServer or
                                Module with Agent-held State A use macro to add
                                a Map API (e.g. get, put, pop, etc) to a
                                GenServer`s state or a module`s state held in an
                                Agent.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/amlapio";
            };
          } // packageOverrides)
      ) {};

    amlapio = amlapio_0_2_0;

    amnesia_0_2_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exquisite_0_1_8 }:
          buildMix ({
            name = "amnesia";
            version = "0.2.7";
            src = fetchHex {
              pkg = "amnesia";
              version = "0.2.7";
              sha256 =
                "c2b86204ef8d5cfacadc7b42782c92f620610c84731c34fcbb3280dd8a11e33d";
            };
            beamDeps  = [ exquisite_0_1_8 ];

            meta = {
              description = ''mnesia wrapper for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/amnesia";
            };
          } // packageOverrides)
      ) {};

    amnesia = amnesia_0_2_7;

    anagram_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anagram";
            version = "1.0.0";
            src = fetchHex {
              pkg = "anagram";
              version = "1.0.0";
              sha256 =
                "8c41013b8b586728adbf821fe809c277e30f99323138b8e8ccff2311317c8fac";
            };

            meta = {
              longDescription = ''Find anagrams of words and \"words that can
                                be made with a set of letters\" (sort of a sub
                                anagram)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir-anagram";
            };
          } // packageOverrides)
      ) {};

    anagram = anagram_1_0_0;

    analytics_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "analytics";
            version = "0.6.0";
            src = fetchHex {
              pkg = "analytics";
              version = "0.6.0";
              sha256 =
                "20d7046b69dc9151c4b87f49f233dfcdc028e270af46e2c3e6624dd0d6fba49e";
            };
            beamDeps  = [ hackney_1_13_0 jason_1_1_1 ];

            meta = {
              description = ''Universal analytics client, currently only
                            supports Mixpanel and Segment.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/contractbook/analytics";
            };
          } // packageOverrides)
      ) {};

    analytics = analytics_0_6_0;

    analyze_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          credo_0_9_3,
          dialyxir_1_0_0_rc_3,
          ex_doc_0_18_3,
          excoveralls_0_9_1,
          hackney_1_13_0,
          tidy_0_0_1
        }:
          buildMix ({
            name = "analyze";
            version = "0.1.1";
            src = fetchHex {
              pkg = "analyze";
              version = "0.1.1";
              sha256 =
                "8d32b052d09f908d77f8336e2763f39001d3032ec9c0969d00698531a6db9562";
            };
            beamDeps  = [
                          credo_0_9_3
                          dialyxir_1_0_0_rc_3
                          ex_doc_0_18_3
                          excoveralls_0_9_1
                          hackney_1_13_0
                          tidy_0_0_1
                        ];

            meta = {
              description = ''Mix task to analyze and report Elixir code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IanLuites/analyze";
            };
          } // packageOverrides)
      ) {};

    analyze = analyze_0_1_1;

    analyze_elixir_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          recase_0_3_0
        }:
          buildMix ({
            name = "analyze_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "analyze_elixir";
              version = "0.1.1";
              sha256 =
                "abff38378cddb60af1a63f9c391932398592ef60de391726076e85fc399e0629";
            };
            beamDeps  = [ poison_2_2_0 recase_0_3_0 ];

            meta = {
              description = ''Tool to gather stats about module imports in
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackdahila/analyze_elixir";
            };
          } // packageOverrides)
      ) {};

    analyze_elixir = analyze_elixir_0_1_1;

    anansi_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anansi";
            version = "0.0.3";
            src = fetchHex {
              pkg = "anansi";
              version = "0.0.3";
              sha256 =
                "c8f1269524a8b9f2ba588c4cf86bb9b895c0ee87038cb4cb1ef3207e31b836c9";
            };

            meta = {
              description = ''Command the terminal from a high-level with ANSI
                            control codes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christhekeele/anansi";
            };
          } // packageOverrides)
      ) {};

    anansi = anansi_0_0_3;

    anaphora_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anaphora";
            version = "0.1.2";
            src = fetchHex {
              pkg = "anaphora";
              version = "0.1.2";
              sha256 =
                "fb60a214b2be57d7a08aa8237cd7afb009b637563d64ed5e6ec486e36c484001";
            };

            meta = {
              description = ''The anaphoric macro collection for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sviridov/anaphora-elixir";
            };
          } // packageOverrides)
      ) {};

    anaphora = anaphora_0_1_2;

    anchor_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, shackle_0_5_0 }:
          buildRebar3 ({
            name = "anchor";
            version = "0.3.1";
            src = fetchHex {
              pkg = "anchor";
              version = "0.3.1";
              sha256 =
                "8f807ebc3dbd224623525891273c0998652578427a80fafff6286f4fc042df4f";
            };

            beamDeps  = [ shackle_0_5_0 ];

            meta = {
              description = ''High-Performance Erlang Memcached Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/anchor";
            };
          } // packageOverrides)
      ) {};

    anchor = anchor_0_3_1;

    angle_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "angle";
            version = "0.2.1";
            src = fetchHex {
              pkg = "angle";
              version = "0.2.1";
              sha256 =
                "1e798b8cffc3d9d96f81e17a831793043f6d7aceb128f1ed36122bc7a22fa20d";
            };

            meta = {
              longDescription = ''Tired of forever converting back and forwards
                                between degrees and radians? Well worry no more;
                                Angle is here to make your life simple!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://gitlab.com/jimsy/angle";
            };
          } // packageOverrides)
      ) {};

    angle = angle_0_2_1;

    anilixir_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "anilixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "anilixir";
              version = "1.0.0";
              sha256 =
                "ee5c6dfa7e5250d8ec5c9b04910e3202788ceeba231cb3ff8b22e479cc64f1c3";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              description = ''Anilist API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/anilixir";
            };
          } // packageOverrides)
      ) {};

    anilixir = anilixir_1_0_0;

    anka_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, altstd_0_0_1 }:
          buildMix ({
            name = "anka";
            version = "0.1.0";
            src = fetchHex {
              pkg = "anka";
              version = "0.1.0";
              sha256 =
                "6dc4735f3e309acf7adc90c7121ddf1a1f1ab59e104d4f6ce00cefd07594363c";
            };
            beamDeps  = [ altstd_0_0_1 ];

            meta = {
              longDescription = ''Anka and its binding projects provide base
                                model and macros to increase modularity of
                                Elixir projects with DRY principle.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixir-anka/anka";
            };
          } // packageOverrides)
      ) {};

    anka = anka_0_1_0;

    ankh_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hpack_1_0_3 }:
          buildMix ({
            name = "ankh";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ankh";
              version = "0.3.1";
              sha256 =
                "a1ad6d6b2a58f535a1c4ec85c4cefa013f7c75aad9f92d4eb0c64147a257a596";
            };
            beamDeps  = [ hpack_1_0_3 ];

            meta = {
              description = ''Pure Elixir HTTP/2 implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucacorti/ankh";
            };
          } // packageOverrides)
      ) {};

    ankh = ankh_0_3_1;

    annon_ktl_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          progress_bar_1_6_1,
          table_0_0_5,
          yamerl_0_3_3,
          yaml_elixir_1_4_0,
          yaml_encoder_0_0_2
        }:
          buildMix ({
            name = "annon_ktl";
            version = "0.3.0";
            src = fetchHex {
              pkg = "annon_ktl";
              version = "0.3.0";
              sha256 =
                "4462aaa4719e5407c2c4bd2a83c77c8ec3a50e1da1f292c3ce8e5179d6b1c555";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          poison_3_1_0
                          progress_bar_1_6_1
                          table_0_0_5
                          yamerl_0_3_3
                          yaml_elixir_1_4_0
                          yaml_encoder_0_0_2
                        ];

            meta = {
              description = ''annonktl is an escript that controls the Annon
                            API Gateway cluster.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/annon_ktl";
            };
          } // packageOverrides)
      ) {};

    annon_ktl = annon_ktl_0_3_0;

    annotatable_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "annotatable";
            version = "0.1.2";
            src = fetchHex {
              pkg = "annotatable";
              version = "0.1.2";
              sha256 =
                "908ce0150bea70dbf201b57b62ea00a1134018265b1a13a20a59fb9f45c3a416";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/chrisjowen/annotatable";
            };
          } // packageOverrides)
      ) {};

    annotatable = annotatable_0_1_2;

    annotations_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "annotations";
            version = "0.1.0";
            src = fetchHex {
              pkg = "annotations";
              version = "0.1.0";
              sha256 =
                "ea2f63b3c28b59610399f464637171d0e5e47fcbfe1893400f40a13d57bc7b0f";
            };

            meta = {
              description = ''String Annotation Package'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/openapi-ro/annotations";
            };
          } // packageOverrides)
      ) {};

    annotations = annotations_0_1_0;

    antani_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "antani";
            version = "0.0.1";
            src = fetchHex {
              pkg = "antani";
              version = "0.0.1";
              sha256 =
                "aa2c815de3ec509532938c71f41247359a17a4c635d7bebd930a578484e61ba7";
            };

            meta = {
              description = ''Come se fosse antani'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    antani = antani_0_0_1;

    anybar_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anybar";
            version = "0.4.0";
            src = fetchHex {
              pkg = "anybar";
              version = "0.4.0";
              sha256 =
                "5f4ab0d21b01bd642ed511b9b8a19f7c752a718e1bfcc2e8dd2ed5f1a64c735a";
            };

            meta = {
              description = ''Elixir interface to AnyBar app'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/buccolo/anybar";
            };
          } // packageOverrides)
      ) {};

    anybar = anybar_0_4_0;

    apex_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apex";
            version = "0.5.2";
            src = fetchHex {
              pkg = "apex";
              version = "0.5.2";
              sha256 =
                "222c65076ea71e108a5e9d5a0f04a7a4e44f2858089139a3701e6155e5d52c32";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          } // packageOverrides)
      ) {};

    apex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "apex";
              version = "1.0.0";
              sha256 =
                "64bc3f7e3a9f528b188650d5e975be9427c681000ea0174dbb8e284f02d04de1";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          } // packageOverrides)
      ) {};

    apex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "apex";
              version = "1.1.0";
              sha256 =
                "af4ab590d7f2631e9a29fbd9f691a03d61f4269f4095544f5476a9f3b1cc928c";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          } // packageOverrides)
      ) {};

    apex_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apex";
            version = "1.2.0";
            src = fetchHex {
              pkg = "apex";
              version = "1.2.0";
              sha256 =
                "7052779a299ae9c044ff6e8d1317b7b3abfef609e96b5e8bc2d4c9a3402f3651";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          } // packageOverrides)
      ) {};

    apex = apex_1_2_0;

    api_doc_0_0_1_pro1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "api_doc";
            version = "0.0.1-pro1";
            src = fetchHex {
              pkg = "api_doc";
              version = "0.0.1-pro1";
              sha256 =
                "3079b9d550cf6eb02325e91ce11e9598465de651b1205f3c59acc25e9eb100da";
            };

            meta = {
              description = ''API documentation generator for Elixir.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    api_doc = api_doc_0_0_1_pro1;

    apix_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apix";
            version = "0.1.1";
            src = fetchHex {
              pkg = "apix";
              version = "0.1.1";
              sha256 =
                "70bdaaa625f8dac506b5af4f437d362589b0ec7f86fa77bd9daabbbc7676323e";
            };

            meta = {
              longDescription = ''Simple convention and DSL for transformation
                                of elixir functions to a documented and ready
                                for validation API.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liveforeverx/apix";
            };
          } // packageOverrides)
      ) {};

    apix = apix_0_1_1;

    app_config_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "app_config";
            version = "0.4.1";
            src = fetchHex {
              pkg = "app_config";
              version = "0.4.1";
              sha256 =
                "4723cb5c00ab396cbd14f0871874a792fcc7fc581b1d76043c0c596cda9c6511";
            };

            meta = {
              description = ''Elixir configuration module that simplifies
                            access to environment variables'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/app_config";
            };
          } // packageOverrides)
      ) {};

    app_config = app_config_0_4_1;

    apple_pay_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "apple_pay";
            version = "0.1.0";
            src = fetchHex {
              pkg = "apple_pay";
              version = "0.1.0";
              sha256 =
                "f07ce06c103bbaffdda3ade27c860bb7a03073d4f5b68480aebae70d2c5c21ed";
            };
            beamDeps  = [ httpoison_0_13_0 jason_1_1_1 ];

            meta = {
              description = ''Apple Pay Session Initializer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jshmrtn/ex-apple-pay";
            };
          } // packageOverrides)
      ) {};

    apple_pay = apple_pay_0_1_0;

    apportion_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "apportion";
            version = "0.0.1";
            src = fetchHex {
              pkg = "apportion";
              version = "0.0.1";
              sha256 =
                "86914319ddd9c06a28c5274b4dfd05722018e59c92e12e44c9306e61a937c6b1";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Elixir implementation for apportionment'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/apportion_ex";
            };
          } // packageOverrides)
      ) {};

    apportion = apportion_0_0_1;

    approximate_histogram_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "approximate_histogram";
            version = "0.1.1";
            src = fetchHex {
              pkg = "approximate_histogram";
              version = "0.1.1";
              sha256 =
                "6cce003d09656efbfe80b4a50f19e6c1f8eaf1424f08e4a96036b340fc67019d";
            };

            meta = {
              description = ''Approximate Histograms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cschneid/approximate_histogram";
            };
          } // packageOverrides)
      ) {};

    approximate_histogram = approximate_histogram_0_1_1;

    appstore_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "appstore";
            version = "0.1.0";
            src = fetchHex {
              pkg = "appstore";
              version = "0.1.0";
              sha256 =
                "5e07883874a980286c355003e04f0342dc14fb4977fa791673669adaed91ba7c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Itune App Store crawler and scraper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/icaroponce/appstore";
            };
          } // packageOverrides)
      ) {};

    appstore = appstore_0_1_0;

    aprs_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aprs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aprs";
              version = "0.1.0";
              sha256 =
                "e5066a0538445a96139e90f7cc9acccbb19a1957d8d0a8adbf12494c5c7dec95";
            };

            meta = {
              description = ''Elixir library for dealing with amateur radio
                            APRS'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/gmcintire/aprs";
            };
          } // packageOverrides)
      ) {};

    aprs = aprs_0_1_0;

    ar2ecto_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ar2ecto";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ar2ecto";
              version = "0.1.2";
              sha256 =
                "a32322d39f1c0cff335b05b5c2252e531091565c3cf754811087edd2e115a718";
            };

            meta = {
              description = ''Ar2ecto is a set of mix tasks to help you migrate
                            from ActiveRecord to Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aforward/ar2ecto";
            };
          } // packageOverrides)
      ) {};

    ar2ecto = ar2ecto_0_1_2;

    arango_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_0_2,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "arango";
            version = "0.0.1";
            src = fetchHex {
              pkg = "arango";
              version = "0.0.1";
              sha256 =
                "58dcfb6b19823f994ff7d6a4b71edc14a2284d49354baed2d28c1ab929467704";
            };
            beamDeps  = [ exconstructor_1_0_2 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Low-level driver for ArangoDB'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ijcd/arangoex";
            };
          } // packageOverrides)
      ) {};

    arango = arango_0_0_1;

    arcgis_geocode_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "arcgis_geocode";
            version = "0.3.0";
            src = fetchHex {
              pkg = "arcgis_geocode";
              version = "0.3.0";
              sha256 =
                "72037a4340edaa3aa379dd10c2434bdaed77dd97aabc6cc8f3f177a82b108c77";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''An Elixir client library for interacting with the
                            ArcGIS geocoding APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rynam0/arcgis_geocode";
            };
          } // packageOverrides)
      ) {};

    arcgis_geocode = arcgis_geocode_0_3_0;

    archytax_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_1_0_0
        }:
          buildMix ({
            name = "archytax";
            version = "0.1.2";
            src = fetchHex {
              pkg = "archytax";
              version = "0.1.2";
              sha256 =
                "3cb4e708e38c1132ed6335fb9b5b51f2882e958b619cc9aae40522020a6f14b9";
            };
            beamDeps  = [ nerves_uart_1_0_0 ];

            meta = {
              description = ''An implementation of the Firmata protocol for
                            elixir.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/hanselmw/archytax";
            };
          } // packageOverrides)
      ) {};

    archytax = archytax_0_1_2;

    area58check_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "area58check";
            version = "0.1.1";
            src = fetchHex {
              pkg = "area58check";
              version = "0.1.1";
              sha256 =
                "5f099ab717b2e78107e8a9ddf21e99ab80f731d36d1fe8e99095bd222c14e8b3";
            };

            meta = {
              longDescription = ''Base58check library to encode binary data or
                                decode encoded strings. It`s used in Bitcoin
                                whenever there is a need for a user to read or
                                transcribe a number, such a bitcoin adresses,
                                encrypted key, private key, or script hash.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ihinojal/area58check";
            };
          } // packageOverrides)
      ) {};

    area58check = area58check_0_1_1;

    argon2_elixir_1_3_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "argon2_elixir";
            version = "1.3.1";
            src = fetchHex {
              pkg = "argon2_elixir";
              version = "1.3.1";
              sha256 =
                "916719ba29aff80673ee3e92cc8bd288fc502592f297bae7f0e2ddca0f910b48";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Argon2 password hashing algorithm for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/riverrun/argon2_elixir";
            };
          } // packageOverrides)
      ) {};

    argon2_elixir = argon2_elixir_1_3_1;

    argument_parser_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "argument_parser";
            version = "0.1.3";
            src = fetchHex {
              pkg = "argument_parser";
              version = "0.1.3";
              sha256 =
                "2c56a6c9dfa9790aabdb8f9268ac501404376ffb13396ff515e66f1ebf64817d";
            };

            meta = {
              description = ''More powerful argument parser for creating nice
                            scripts'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jisaacstone/ex_argument_parser";
            };
          } // packageOverrides)
      ) {};

    argument_parser = argument_parser_0_1_3;

    arguments_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "arguments";
            version = "0.1.0";
            src = fetchHex {
              pkg = "arguments";
              version = "0.1.0";
              sha256 =
                "084ade7b0083d5466a833181eab4bc90e339ee8cca92295b30f1846ac1631987";
            };

            meta = {
              longDescription = ''Arguments parses command line arguments to a
                                map with a declarative, simple setup'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/wilwade/arguments";
            };
          } // packageOverrides)
      ) {};

    arguments = arguments_0_1_0;

    ark_elixir_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ark_elixir";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ark_elixir";
              version = "0.1.4";
              sha256 =
                "39b0d2a2b0b028088c6ef4b6af42d5c04384ee962b8f0b801c42c9bf61ce3cf7";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Ark API Wrapper in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Highjhacker/Ark-Elixir";
            };
          } // packageOverrides)
      ) {};

    ark_elixir = ark_elixir_0_1_4;

    array_vector_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "array_vector";
            version = "0.3.0";
            src = fetchHex {
              pkg = "array_vector";
              version = "0.3.0";
              sha256 =
                "743a15b97df26fe83a11f093d8a3b9308c2a13e2f286e537d37c978269a3a2a2";
            };

            meta = {
              description = ''An array-backed vector providing fast random
                            access'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ckampfe/vector";
            };
          } // packageOverrides)
      ) {};

    array_vector = array_vector_0_3_0;

    arrays_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          extractable_0_2_0,
          fun_land_0_9_2,
          insertable_0_2_0
        }:
          buildMix ({
            name = "arrays";
            version = "0.1.0";
            src = fetchHex {
              pkg = "arrays";
              version = "0.1.0";
              sha256 =
                "1dd8148baeae761a78512011795128cde3c1c40ef909382b9b38b096dba0091d";
            };
            beamDeps  = [ extractable_0_2_0 fun_land_0_9_2 insertable_0_2_0
                      ];

            meta = {
              longDescription = ''Well-structured Arrays with fast
                                random-element-access for Elixir, offering a
                                common interface with multiple implementations
                                with varying performance guarantees that can be
                                switched in your configuration.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Qqwy/elixir-arrays";
            };
          } // packageOverrides)
      ) {};

    arrays = arrays_0_1_0;

    artificery_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "artificery";
            version = "0.2.5";
            src = fetchHex {
              pkg = "artificery";
              version = "0.2.5";
              sha256 =
                "6e3bd226a0a8204cc41eec75ce62445dc021c06b617a55545d717f38decd4d32";
            };

            meta = {
              description = ''A toolkit for terminal user interfaces in
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bitwalker/artificery";
            };
          } // packageOverrides)
      ) {};

    artificery = artificery_0_2_5;

    aruspex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exyz_1_0_0,
          zipper_tree_0_1_1
        }:
          buildMix ({
            name = "aruspex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aruspex";
              version = "0.1.0";
              sha256 =
                "2effd16e1081a7af2e5ade9c58cdf4c4d90e2095749ccf733332be2924a6d771";
            };
            beamDeps  = [ exyz_1_0_0 zipper_tree_0_1_1 ];

            meta = {
              description = ''A configurable constraint solver with an API
                            based on JSR 331.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/dkendal/aruspex";
            };
          } // packageOverrides)
      ) {};

    aruspex = aruspex_0_1_0;

    as_fsm_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "as_fsm";
            version = "0.1.3";
            src = fetchHex {
              pkg = "as_fsm";
              version = "0.1.3";
              sha256 =
                "4f3443ba3f20eb87b123b7e2471682c3b772de285062fba59130accf6bbeaa1d";
            };

            meta = {
              description = ''An Finite state machine implementation for
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bluzky/as_fsm";
            };
          } // packageOverrides)
      ) {};

    as_fsm = as_fsm_0_1_3;

    ashes_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ashes";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ashes";
              version = "0.0.3";
              sha256 =
                "2178ab8c0fa1cf53b6d6152773ae79ca6100c80861d59e55e5fa06c5979b042b";
            };

            meta = {
              description = ''A code generation tool for the phoenix web
                            framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nickgartmann/ashes";
            };
          } // packageOverrides)
      ) {};

    ashes = ashes_0_0_3;

    asinine_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "asinine";
            version = "0.1.0";
            src = fetchHex {
              pkg = "asinine";
              version = "0.1.0";
              sha256 =
                "f476c2224e7c9dab0c85efd2045e06457b49f7b14d5c2863b3b01e02a4d4cbf3";
            };

            meta = {
              longDescription = ''_The Amazon Standard Identification Number
                                (ASIN) is a 10-character alphanumeric unique
                                identifier assigned by Amazon.com and its
                                partners for product identification within the
                                Amazon organization._ Asinine is an ASIN parser
                                for Amazon product URLs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wangbus/asinine";
            };
          } // packageOverrides)
      ) {};

    asinine = asinine_0_1_0;

    asn_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "asn";
            version = "0.2.1";
            src = fetchHex {
              pkg = "asn";
              version = "0.2.1";
              sha256 =
                "f414cc808669a573dee08e6133daf151646835b88f1a0c0c7b0316c93fe50a8c";
            };

            meta = {
              description = ''IP-to-AS-to-ASname lookup for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/ephe-meral/asn";
            };
          } // packageOverrides)
      ) {};

    asn = asn_0_2_1;

    asn1_compiler_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "asn1_compiler";
            version = "0.1.1";
            src = fetchHex {
              pkg = "asn1_compiler";
              version = "0.1.1";
              sha256 =
                "c250d24c22f1a3f305d88864400f9ac2df55c6886e1e3a030e2946efeb94695e";
            };

            meta = {
              description = ''A mix compiler for the ASN.1 format leveraging
                            Erlang`s `:asn1_ct`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/omt-tech/asn1_compiler";
            };
          } // packageOverrides)
      ) {};

    asn1_compiler = asn1_compiler_0_1_1;

    aspire_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aspire";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aspire";
              version = "0.1.0";
              sha256 =
                "e150f225278dc055f39c4d3a4850ccf6fad08254669e45421c79906f78e17a57";
            };

            meta = {
              longDescription = ''Each function performs type conversion if it
                                is 100% safe. Else it returns first argument as
                                is.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/timCF/aspire";
            };
          } // packageOverrides)
      ) {};

    aspire = aspire_0_1_0;

    aspis_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aspis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aspis";
              version = "0.1.0";
              sha256 =
                "6027bf532b28ba8a3aba7ae7d747eb42138f0a8b281a34d322f5b9fce45261d0";
            };

            meta = {
              longDescription = ''Aspis is a tool that verifies that your
                                project`s hex dependencies contain only the code
                                they have listed on their GitHub.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nietaki/aspis";
            };
          } // packageOverrides)
      ) {};

    aspis = aspis_0_1_0;

    assembla_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "assembla_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "assembla_api";
              version = "0.1.0";
              sha256 =
                "b4a3898de536e4820702c0f119993fd2804e91e2525d1e7eba57d8744983ef24";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              description = ''Assembla API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Assembla/ex_assembla_api";
            };
          } // packageOverrides)
      ) {};

    assembla_api = assembla_api_0_1_0;

    assembly_line_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gproc_0_6_1 }:
          buildMix ({
            name = "assembly_line";
            version = "1.0.0";
            src = fetchHex {
              pkg = "assembly_line";
              version = "1.0.0";
              sha256 =
                "3b687890bf750cd893e8a73c261710c1014ba4d5b2247f695f7730b2a84a5473";
            };
            beamDeps  = [ gproc_0_6_1 ];

            meta = {
              description = ''A light-weight job queue (think DAG) manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LeakyBucket/assembly_line";
            };
          } // packageOverrides)
      ) {};

    assembly_line = assembly_line_1_0_0;

    assert_diff_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assert_diff";
            version = "0.0.5";
            src = fetchHex {
              pkg = "assert_diff";
              version = "0.0.5";
              sha256 =
                "ad53a2819c33d39ad2f71404a964625691e9d6bf3d63dbc28442acda71109426";
            };

            meta = {
              description = ''assert_diff which fallbacks to git diff'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ske77/assert_diff";
            };
          } // packageOverrides)
      ) {};

    assert_diff = assert_diff_0_0_5;

    assert_functional_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assert_functional";
            version = "0.1.0";
            src = fetchHex {
              pkg = "assert_functional";
              version = "0.1.0";
              sha256 =
                "9ac763e0c27e2b628bde05465166538e6fdc1cc502364001aa7e5577d89f78be";
            };

            meta = {
              description = ''Functional and composable assertions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/assert_functional";
            };
          } // packageOverrides)
      ) {};

    assert_functional = assert_functional_0_1_0;

    assert_url_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assert_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "assert_url";
              version = "0.1.0";
              sha256 =
                "ca6257bcc093a37d6471ab650856cf1f6bd8ffadd422bfd8751cdde606fd31b0";
            };

            meta = {
              description = ''Collection of functions to test URLs'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    assert_url = assert_url_0_1_0;

    assert_value_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assert_value";
            version = "0.9.2";
            src = fetchHex {
              pkg = "assert_value";
              version = "0.9.2";
              sha256 =
                "4779b2acd3ee574cba7804ba2aa684b2ea584ed521a7cf7e0ac25006c862f056";
            };

            meta = {
              description = ''ExUnit`s assert on steroids that writes and
                            updates tests for you'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/assert-value/assert_value_elixir";
            };
          } // packageOverrides)
      ) {};

    assert_value = assert_value_0_9_2;

    assignment_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assignment";
            version = "0.2.0";
            src = fetchHex {
              pkg = "assignment";
              version = "0.2.0";
              sha256 =
                "641a11a69e4c2153d13bb6d92dc7cb970133822325eb815f11a98d43ba741e4c";
            };

            meta = {
              longDescription = ''generic library for assigning things using
                                various strategies (e.g. round robin, cached
                                round robin)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wistia/assignment_ex";
            };
          } // packageOverrides)
      ) {};

    assignment = assignment_0_2_0;

    ast_walk_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ast_walk";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ast_walk";
              version = "0.3.0";
              sha256 =
                "6cdb381ae3ca4a61d56368a9c2d6ec2333cfa6620c6c77cddad303449ad59adc";
            };

            meta = {
              longDescription = ''An Erlang library to walk the Erlang AST with
                                the ability to mutate it and keep state during
                                transversal'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/marianoguerra/ast_walk";
            };
          } // packageOverrides)
      ) {};

    ast_walk = ast_walk_0_3_0;

    async_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "async";
            version = "2.0.0";
            src = fetchHex {
              pkg = "async";
              version = "2.0.0";
              sha256 =
                "0eda124ab9e26a2d7903b30870675b1e6d5fdb1f1472ee69a1a63182296b569c";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              longDescription = ''Async consists on a worker pool for
                                asynchronous execution of tasks (i.e.
                                functions).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aruki-delivery/async";
            };
          } // packageOverrides)
      ) {};

    async = async_2_0_0;

    async_with_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "async_with";
            version = "0.3.0";
            src = fetchHex {
              pkg = "async_with";
              version = "0.3.0";
              sha256 =
                "f8f0d95c3e1739400fb39c8959b0615cbde4769e9c3adeb050eaef9ec2ed40aa";
            };

            meta = {
              longDescription = ''The asynchronous version of Elixir`s
                                \"with\", resolving the dependency graph and
                                executing the clauses in the most performant way
                                possible!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fertapric/async_with";
            };
          } // packageOverrides)
      ) {};

    async_with = async_with_0_3_0;

    atadura_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atadura";
            version = "0.2.1";
            src = fetchHex {
              pkg = "atadura";
              version = "0.2.1";
              sha256 =
                "f528f255654b69f432881a1b73685a3c65dd961376d9ed976909074c6b9b7b9f";
            };

            meta = {
              description = ''Helper tiny module to provide easy binding
                            support as `bind_quoted` does.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/am-kantox/atadura";
            };
          } // packageOverrides)
      ) {};

    atadura = atadura_0_2_1;

    athena_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "athena";
            version = "0.2.0";
            src = fetchHex {
              pkg = "athena";
              version = "0.2.0";
              sha256 =
                "daa7d96a5d424923cd7da06d6fb416951625b0f00317bdc5f7044f2965689327";
            };

            meta = {
              description = ''An ANSI to HTML converter. Built for the usage of
                            Cucumber output.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    athena = athena_0_2_0;

    atmo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atmo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "atmo";
              version = "0.1.0";
              sha256 =
                "31821e2cb74d91076d9440f80bef93e6a0163333c3645a742862cecdeaacdaaf";
            };

            meta = {
              longDescription = ''A single, flexible interface for reading
                                configuration from environment variables or
                                `Mix.Config` with parsing and defaults.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vinli/atmo_ex";
            };
          } // packageOverrides)
      ) {};

    atmo = atmo_0_1_0;

    atom_enforcer_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          predicate_sigil_0_1_0,
          shorter_maps_2_2_5
        }:
          buildMix ({
            name = "atom_enforcer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "atom_enforcer";
              version = "0.1.0";
              sha256 =
                "35e7980ff4a9eb0c1ee88be9e14f3b5cecad57a5ea058f36015969153e3bc55b";
            };
            beamDeps  = [ predicate_sigil_0_1_0 shorter_maps_2_2_5 ];

            meta = {
              description = ''Compile-time checking of atoms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/elixir_atom_enforcer";
            };
          } // packageOverrides)
      ) {};

    atom_enforcer = atom_enforcer_0_1_0;

    atomex_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xml_builder_2_1_0
        }:
          buildMix ({
            name = "atomex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "atomex";
              version = "0.3.0";
              sha256 =
                "025dbc3a3e99380894791a093019f535d0ef6cf1916f6ec1b778ac107fcfc3e4";
            };
            beamDeps  = [ xml_builder_2_1_0 ];

            meta = {
              longDescription = ''ATOM feed builder with a focus on standards
                                compliance, security and extensibility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Betree/atomex";
            };
          } // packageOverrides)
      ) {};

    atomex = atomex_0_3_0;

    atomic_map_0_9_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atomic_map";
            version = "0.9.3";
            src = fetchHex {
              pkg = "atomic_map";
              version = "0.9.3";
              sha256 =
                "c237babf301bd2435bd85b96cffc973022b4cbb7721537059ee0dd3bb74938d2";
            };

            meta = {
              longDescription = ''A small utility to convert deep Elixir maps
                                with mixed string/atom keys to atom-only keyed
                                maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/atomic_map";
            };
          } // packageOverrides)
      ) {};

    atomic_map = atomic_map_0_9_3;

    atomize_keys_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atomize_keys";
            version = "1.0.0";
            src = fetchHex {
              pkg = "atomize_keys";
              version = "1.0.0";
              sha256 =
                "e94981df7a23d8890fb992b68d2102f883201bfa2d863d23def107edac732a64";
            };

            meta = {
              description = ''A tool to convert string map keys to atoms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ukchukx/atomize_keys";
            };
          } // packageOverrides)
      ) {};

    atomize_keys = atomize_keys_1_0_0;

    attempt_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "attempt";
            version = "0.6.0";
            src = fetchHex {
              pkg = "attempt";
              version = "0.6.0";
              sha256 =
                "48ed86d5f8242d281eefb299df401525a6f8ae975015c47ce27f99b3e4cca106";
            };

            meta = {
              description = ''Implements a retry budget and token bucket for
                            retriable function execution'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kipcole9/attempt";
            };
          } // packageOverrides)
      ) {};

    attempt = attempt_0_6_0;

    attribute_server_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "attribute_server";
            version = "0.1.0";
            src = fetchHex {
              pkg = "attribute_server";
              version = "0.1.0";
              sha256 =
                "6f5214a8122f0568eae0f54449f00aef5cedfc9222e3734695f7fb2b5b33bc85";
            };

            meta = {
              description = ''genserver for globally storing attributes'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MishaConway/elixir-attribute-server";
            };
          } // packageOverrides)
      ) {};

    attribute_server = attribute_server_0_1_0;

    authentic_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "authentic";
            version = "0.0.1";
            src = fetchHex {
              pkg = "authentic";
              version = "0.0.1";
              sha256 =
                "2fba6e1efde9fef4866d17499907811a3957ded8c07866c7b34474f0f0d59e29";
            };

            meta = {
              description = ''Auth for Phoenix'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    authentic = authentic_0_0_1;

    authority_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "authority";
            version = "0.3.0";
            src = fetchHex {
              pkg = "authority";
              version = "0.3.0";
              sha256 =
                "f20e0fa08d16ff6ed3baba9bd926047ebc13141d270cb8a81c67790b0ffff341";
            };

            meta = {
              description = ''Flexible authentication without frameworks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/authority";
            };
          } // packageOverrides)
      ) {};

    authority = authority_0_3_0;

    authorize_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "authorize";
            version = "0.3.1";
            src = fetchHex {
              pkg = "authorize";
              version = "0.3.1";
              sha256 =
                "9f59b90eff470f165ecbd2457e9160adaf457b3396e07bb4e4b8c8ad42af7ada";
            };

            meta = {
              description = ''Rule based authorization for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/authorize";
            };
          } // packageOverrides)
      ) {};

    authorize = authorize_0_3_1;

    authy_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "authy";
            version = "0.1.1";
            src = fetchHex {
              pkg = "authy";
              version = "0.1.1";
              sha256 =
                "92d6a69cf09c9c71262b994dea2850de866852ce94cf9230ad4f944ee486524b";
            };

            meta = {
              description = ''[DEPRECATED] Please use bodyguard instead.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schrockwell/bodyguard";
            };
          } // packageOverrides)
      ) {};

    authy = authy_0_1_1;

    auto_api_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "auto_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "auto_api";
              version = "0.1.0";
              sha256 =
                "7b1ef27e4a0398f435d98be6e0fbfab65a9735203417adcef073686909f28d07";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''AutoApi is able to parse and execute Auto API
                            binary data'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/highmobility/hm-auto-api-elixir";
            };
          } // packageOverrides)
      ) {};

    auto_api = auto_api_0_1_0;

    auto_error_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "auto_error";
            version = "0.1.0";
            src = fetchHex {
              pkg = "auto_error";
              version = "0.1.0";
              sha256 =
                "5a8c8745957142167021f3d25c08667626980f933bc967c5971dd9855cc43d5e";
            };

            meta = {
              longDescription = ''AutoError helps you to pipe between functions
                                returning {:ok, _} or {:error, _} easily.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/longlongh4/AutoError";
            };
          } // packageOverrides)
      ) {};

    auto_error = auto_error_0_1_0;

    auto_linker_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "auto_linker";
            version = "0.2.2";
            src = fetchHex {
              pkg = "auto_linker";
              version = "0.2.2";
              sha256 =
                "a36c2b19e682185ebfb8a2de29d9762044b49df49b3dac491b8ea1c6818bcbdb";
            };

            meta = {
              description = ''AutoLinker is a basic package for turning website
                            names into links.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/auto_linker";
            };
          } // packageOverrides)
      ) {};

    auto_linker = auto_linker_0_2_2;

    auto_process_registry_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "auto_process_registry";
            version = "0.1.0";
            src = fetchHex {
              pkg = "auto_process_registry";
              version = "0.1.0";
              sha256 =
                "c616713637ab1a23260a7b47838021208a3c905bc9083600399aab45fb100ef8";
            };

            meta = {
              description = ''A simple process registry that can instantiate
                            new processes on the fly'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cdegroot/auto_process_registry";
            };
          } // packageOverrides)
      ) {};

    auto_process_registry = auto_process_registry_0_1_0;

    automaton_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "automaton";
            version = "0.1.1";
            src = fetchHex {
              pkg = "automaton";
              version = "0.1.1";
              sha256 =
                "0b5ea327b70ff75f8a7d0475e10cca11abde8ab36cf9d6239913164eb8efd15c";
            };

            meta = {
              longDescription = ''Automaton is an Elixir library that manages
                                the conversation between your chat bot and the
                                user by maintaining the messages and context in
                                a GenServer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flexnode/automaton";
            };
          } // packageOverrides)
      ) {};

    automaton = automaton_0_1_1;

    avex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "avex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "avex";
              version = "0.2.0";
              sha256 =
                "e63970026cc566e9aa9c24c261f43843a7553835d2009b16e838217644ded815";
            };

            meta = {
              description = ''Awesome validations for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonhkr/avex";
            };
          } // packageOverrides)
      ) {};

    avex = avex_0_2_0;

    avlizer_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, erlavro_2_6_3 }:
          buildRebar3 ({
            name = "avlizer";
            version = "0.2.3";
            src = fetchHex {
              pkg = "avlizer";
              version = "0.2.3";
              sha256 =
                "f991e134fc5cb41ba0e4b3d9e4560d09e6723010c69550974618c591252b3ba0";
            };

            beamDeps  = [ erlavro_2_6_3 ];

            meta = {
              description = ''Avro Serializer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/avlizer";
            };
          } // packageOverrides)
      ) {};

    avlizer = avlizer_0_2_3;

    avocado_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "avocado";
            version = "0.0.1";
            src = fetchHex {
              pkg = "avocado";
              version = "0.0.1";
              sha256 =
                "53f6bd4e5b84d300e7419c102dc77350703aec67674899240917eb8cdf48c307";
            };

            meta = {
              description = ''A graph domain library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/avocado";
            };
          } // packageOverrides)
      ) {};

    avocado = avocado_0_0_1;

    avro_rpc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_avro_0_2_0 }:
          buildMix ({
            name = "avro_rpc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "avro_rpc";
              version = "0.1.0";
              sha256 =
                "d166c497b9ff9195e113ea86e2fe929c645232339d30c219e6b517a22cd81dcb";
            };
            beamDeps  = [ ex_avro_0_2_0 ];

            meta = {
              description = ''An Elixir package for making `AvroRPC` calls over
                            TCP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cafreeman/avro_rpc";
            };
          } // packageOverrides)
      ) {};

    avro_rpc = avro_rpc_0_1_0;

    avrolixr_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "avrolixr";
            version = "0.3.0";
            src = fetchHex {
              pkg = "avrolixr";
              version = "0.3.0";
              sha256 =
                "d9bbbd84e7b1d520242bb87137294094f91db160dbcbf3863cfaec094d3ef8b5";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''An Elixir wrapper for the `erlavro` Avro
                            package.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/avrolixr";
            };
          } // packageOverrides)
      ) {};

    avrolixr = avrolixr_0_3_0;

    aws_auth_0_6_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aws_auth";
            version = "0.6.4";
            src = fetchHex {
              pkg = "aws_auth";
              version = "0.6.4";
              sha256 =
                "b05602dd955b4582cb93fa48ac49fc1b9fac020df9c1899dc9ec9df19fd0ddcd";
            };

            meta = {
              description = ''AWS Signature Version 4 Signing Library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/aws_auth";
            };
          } // packageOverrides)
      ) {};

    aws_auth_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aws_auth";
            version = "0.7.1";
            src = fetchHex {
              pkg = "aws_auth";
              version = "0.7.1";
              sha256 =
                "9faed07da3871c38b6d86c9cdefcb443e5b2c0450208a474fe99ed6e1d9a6d65";
            };

            meta = {
              description = ''AWS Signature Version 4 Signing Library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/aws_auth";
            };
          } // packageOverrides)
      ) {};

    aws_auth = aws_auth_0_7_1;

    aws_cli_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, erlexec_1_1_0 }:
          buildRebar3 ({
            name = "aws_cli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aws_cli";
              version = "0.1.0";
              sha256 =
                "14fd91c4752a5eb5b2c781c4843589824b35750d7785b57e0460ba6d96bfe8c1";
            };

            beamDeps  = [ erlexec_1_1_0 ];

            meta = {
              description = ''AWS cli wrapper for Erlang'';

              homepage = "https://github.com/fyler/aws_cli";
            };
          } // packageOverrides)
      ) {};

    aws_cli = aws_cli_0_1_0;

    aws_ex_ray_0_1_12 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          poolboy_1_5_1,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "aws_ex_ray";
            version = "0.1.12";
            src = fetchHex {
              pkg = "aws_ex_ray";
              version = "0.1.12";
              sha256 =
                "a9854de866586054752f1d06def2286032f1232acedc5b3c6a31c31733e6e2d7";
            };
            beamDeps  = [ poison_3_1_0 poolboy_1_5_1 secure_random_0_5_1 ];

            meta = {
              description = ''AWS X-Ray reporter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lyokato/aws_ex_ray";
            };
          } // packageOverrides)
      ) {};

    aws_ex_ray = aws_ex_ray_0_1_12;

    aws_ex_ray_ecto_0_1_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, aws_ex_ray_0_1_12
        }:
          buildMix ({
            name = "aws_ex_ray_ecto";
            version = "0.1.3";
            src = fetchHex {
              pkg = "aws_ex_ray_ecto";
              version = "0.1.3";
              sha256 =
                "b67882366d0d17324ac891711f231fed197c72e68b27fc8afb619231e83cafa0";
            };
            beamDeps  = [ aws_ex_ray_0_1_12 ];

            meta = {
              description = ''AWS X-Ray reporter Ecto support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lyokato/aws_ex_ray_ecto";
            };
          } // packageOverrides)
      ) {};

    aws_ex_ray_ecto = aws_ex_ray_ecto_0_1_3;

    aws_ex_ray_httpoison_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          aws_ex_ray_0_1_12,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "aws_ex_ray_httpoison";
            version = "0.1.4";
            src = fetchHex {
              pkg = "aws_ex_ray_httpoison";
              version = "0.1.4";
              sha256 =
                "7d5cb01bf33cdcbac11ea0454dffae4d178733d5b7eb0139b91791924c265325";
            };
            beamDeps  = [ aws_ex_ray_0_1_12 httpoison_1_2_0 ];

            meta = {
              description = ''AWS X-Ray reporter HTTPoison support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lyokato/aws_ex_ray_httpoison";
            };
          } // packageOverrides)
      ) {};

    aws_ex_ray_httpoison = aws_ex_ray_httpoison_0_1_4;

    aws_sign_url_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aws_sign_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aws_sign_url";
              version = "0.1.0";
              sha256 =
                "09bf67c86d8d2147dfd081be4179962606b2cce8e7b6229dd670e3a114baa391";
            };

            meta = {
              description = ''Provides a function to sign Amazon REST API
                            request URLs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/aws-sign-url";
            };
          } // packageOverrides)
      ) {};

    aws_sign_url = aws_sign_url_0_1_0;

    axe_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "axe";
            version = "0.1.0";
            src = fetchHex {
              pkg = "axe";
              version = "0.1.0";
              sha256 =
                "daaf8ae2f6948398cbf19e59a726cf83a9483e4141068bed9ee6713dc560e942";
            };

            meta = {
              description = ''The access sigil'';
              license = stdenv.lib.licenses.mpl20;
            };
          } // packageOverrides)
      ) {};

    axe = axe_0_1_0;

    b64fast_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "b64fast";
            version = "0.2.1";
            src = fetchHex {
              pkg = "b64fast";
              version = "0.2.1";
              sha256 =
                "8ec983eb80674c4b15c6616660d2e7e7d763afaf8a8179027e517b4c23098bf3";
            };
            compilePorts = true;

            meta = {
              longDescription = ''This NIF complements Erlang with a fast and
                                optimized way of encoding and decoding bulk
                                Base64 data. Compliant with RFC4648 - The
                                Base16, Base32, and Base64 Data Encodings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zuckschwerdt/b64fast";
            };
          } // packageOverrides)
      ) {};

    b64fast = b64fast_0_2_1;

    backoff_1_1_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "backoff";
            version = "1.1.6";
            src = fetchHex {
              pkg = "backoff";
              version = "1.1.6";
              sha256 =
                "cf0cfff8995fb20562f822e5cc47d8ccf664c5ecdc26a684cbe85c225f9d7c39";
            };

            meta = {
              description = ''Exponential backoffs library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/backoff";
            };
          } // packageOverrides)
      ) {};

    backoff = backoff_1_1_6;

    backports_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "backports";
            version = "0.2.0";
            src = fetchHex {
              pkg = "backports";
              version = "0.2.0";
              sha256 =
                "4de05a3296a84fbac33195afd8c30873345a1042a813d37674740f66bbadb70c";
            };

            meta = {
              description = ''Precompiler to make new code work with old Elixir
                            versions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leifg/backports";
            };
          } // packageOverrides)
      ) {};

    backports = backports_0_2_0;

    bad_seed_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bad_seed";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bad_seed";
              version = "0.1.1";
              sha256 =
                "8030256c5b0a8d6d628240ab52352a393f34e525e467ec659ae8712b029f691e";
            };

            meta = {
              description = ''Stores and reuses ExUnit seeds from failing test
                            runs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffkreeftmeijer/bad_seed";
            };
          } // packageOverrides)
      ) {};

    bad_seed = bad_seed_0_1_1;

    bag_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bag";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bag";
              version = "0.1.0";
              sha256 =
                "2192c6ae21379a6bd152f399671548206d408a398119c5289c835050c5fb97c5";
            };

            meta = {
              description = ''A collection of structured data bags, in the form
                            of structs.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amorphid/bag-elixir";
            };
          } // packageOverrides)
      ) {};

    bag = bag_0_1_0;

    bahn_ex_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "bahn_ex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bahn_ex";
              version = "1.0.1";
              sha256 =
                "d64834c5da96ad2f66a8266615afc2abbe9bccf24444608980de232c2534be28";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir wrapper for the Deutsche Bahn (DB)
                            Fahrplan API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pfitz/bahn_ex";
            };
          } // packageOverrides)
      ) {};

    bahn_ex = bahn_ex_1_0_1;

    balalaika_bear_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "balalaika_bear";
            version = "0.1.2";
            src = fetchHex {
              pkg = "balalaika_bear";
              version = "0.1.2";
              sha256 =
                "96d60704a6dc1e155538355a13eeff05da994c26e964de87ab2f49a84fbcbea6";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''VK API wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ayrat555/balalaika_bear";
            };
          } // packageOverrides)
      ) {};

    balalaika_bear = balalaika_bear_0_1_2;

    balanced_tree_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "balanced_tree";
            version = "0.2.2";
            src = fetchHex {
              pkg = "balanced_tree";
              version = "0.2.2";
              sha256 =
                "40164e31487cf18dff274e2fae13a4731507ed0a4807df2bc834f9c37c5ba9d4";
            };

            meta = {
              description = ''AA Tree implementation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fracek/balanced_tree";
            };
          } // packageOverrides)
      ) {};

    balanced_tree = balanced_tree_0_2_2;

    bamboohr_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboohr_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bamboohr_ex";
              version = "0.1.0";
              sha256 =
                "9819e5fa19761affc268829ca7946ff80a530ceeb66828eb207489a369d3f0d9";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir wrapper around the BambooHR API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annkissam/bamboohr_ex";
            };
          } // packageOverrides)
      ) {};

    bamboohr_ex = bamboohr_ex_0_1_0;

    bang_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bang";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bang";
              version = "0.1.1";
              sha256 =
                "089fa32034cfe6eccbcd9f6cb8fb2d154f9089e4adbc679000ea75d7c5f08443";
            };

            meta = {
              longDescription = ''Bang simply adds dynamic bang! functions to
                                your existing module functions with
                                after-callback.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/bang";
            };
          } // packageOverrides)
      ) {};

    bang = bang_0_1_1;

    bank_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bucs_1_0_16 }:
          buildMix ({
            name = "bank";
            version = "0.2.2";
            src = fetchHex {
              pkg = "bank";
              version = "0.2.2";
              sha256 =
                "e1166c8fd1d6969dfaebf71b7403d60bef1160ce93fc09cfa0c71e12c94daf50";
            };
            beamDeps  = [ bucs_1_0_16 ];

            meta = {
              description = ''Erlang/Elixir module to manipulate bank data'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/bank";
            };
          } // packageOverrides)
      ) {};

    bank = bank_0_2_2;

    bank_card_info_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "bank_card_info";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bank_card_info";
              version = "1.0.0";
              sha256 =
                "c9acb579b9cfe03e8d708cf9ff0fbfd402f903979a2d48f369c0496a70840634";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_1_0 ];

            meta = {
              description = ''Get brand, card type and country by first digits
                            of a bank card.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vredniy/elixir-bank-card-info";
            };
          } // packageOverrides)
      ) {};

    bank_card_info = bank_card_info_1_0_0;

    bankster_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bankster";
            version = "0.3.1";
            src = fetchHex {
              pkg = "bankster";
              version = "0.3.1";
              sha256 =
                "51ac5aee8f170b239232986a01a75fb2a0dbe5aac7366763ecbeb8575002a181";
            };

            meta = {
              description = ''Bankster is an IBAN and BIC validation tool for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/railsmechanic/bankster";
            };
          } // packageOverrides)
      ) {};

    bankster = bankster_0_3_1;

    banner_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "banner";
            version = "0.1.0";
            src = fetchHex {
              pkg = "banner";
              version = "0.1.0";
              sha256 =
                "309a752cd592bd8dda3526865d050b1e20a953baed8b7480d0489001688f7a0f";
            };

            meta = {
              description = ''It is Elixir sysvbanner port from
                            https://github.com/uffejakobsen/sysvbanner.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/winebarrel/elixir-sysvbanner";
            };
          } // packageOverrides)
      ) {};

    banner = banner_0_1_0;

    barenboim_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "barenboim";
            version = "0.3.1";
            src = fetchHex {
              pkg = "barenboim";
              version = "0.3.1";
              sha256 =
                "13d027a7e1c61e49e0041601e6f57a2b8941c9434495e176237ba48cf1325723";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''Barenboim helps you with data streaming
                            dependencies in concurrent flows'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/barenboim";
            };
          } // packageOverrides)
      ) {};

    barenboim = barenboim_0_3_1;

    barrel_ex_http_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_1_1,
          jason_1_1_1,
          morphix_0_3_0
        }:
          buildMix ({
            name = "barrel_ex_http";
            version = "0.2.0";
            src = fetchHex {
              pkg = "barrel_ex_http";
              version = "0.2.0";
              sha256 =
                "3af4d9a55e5b3772e938bc37051253972da6d818fa86052a4e412a5ff1ec4c1b";
            };
            beamDeps  = [ httpoison_1_1_1 jason_1_1_1 morphix_0_3_0 ];

            meta = {
              description = ''HTTP REST client for interacting with a BarrelDB
                            node'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    barrel_ex_http = barrel_ex_http_0_2_0;

    barrel_ibrowse_4_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_ibrowse";
            version = "4.3.1";
            src = fetchHex {
              pkg = "barrel_ibrowse";
              version = "4.3.1";
              sha256 =
                "3775418fa5031c99cf46bc665be4898cf7df72530c69c3355c8377646899512d";
            };

            meta = {
              description = ''Erlang HTTP client application'';
              license = with stdenv.lib.licenses; [ bsd3 free ];
              homepage = "https://github.com/barrel-db/ibrowse";
            };
          } // packageOverrides)
      ) {};

    barrel_ibrowse = barrel_ibrowse_4_3_1;

    barrel_oauth_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_oauth";
            version = "1.6.0";
            src = fetchHex {
              pkg = "barrel_oauth";
              version = "1.6.0";
              sha256 =
                "b2a800b771d45f32a9a55d416054b3bdfab3a925b62e8000f2c08b719390d4dd";
            };

            meta = {
              description = ''An Erlang OAuth 1.0 implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/erlang-oauth";
            };
          } // packageOverrides)
      ) {};

    barrel_oauth = barrel_oauth_1_6_0;

    barrel_unofficial_2_15_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_unofficial";
            version = "2.15.0";
            src = fetchHex {
              pkg = "barrel_unofficial";
              version = "2.15.0";
              sha256 =
                "be52e600bf8f2377f017734c31b60eb8bf85722c61a6e4977a9a77703812a1a1";
            };

            meta = {
              description = ''MochiMedia Web Server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mochi/mochiweb";
            };
          } // packageOverrides)
      ) {};

    barrel_unofficial = barrel_unofficial_2_15_0;

    base16_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "base16";
            version = "1.0.0";
            src = fetchHex {
              pkg = "base16";
              version = "1.0.0";
              sha256 =
                "02afd0827e61a7b07093873e063575ca3a2b07520567c7f8cec7c5d42f052d76";
            };

            meta = {
              description = ''Base16 encoding and decoding'';
              license = with stdenv.lib.licenses; [ bsd3 free ];
              homepage = "https://github.com/goj/base16";
            };
          } // packageOverrides)
      ) {};

    base16 = base16_1_0_0;

    base32_crockford_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "base32_crockford";
            version = "1.0.0";
            src = fetchHex {
              pkg = "base32_crockford";
              version = "1.0.0";
              sha256 =
                "dc9dcb816ae40e7878aa771b33bcbf49059d77fd1e1bfb7d206b5fd4b6ee206d";
            };

            meta = {
              description = ''An Elixir Implementation of Douglas Crockford`s
                            Base32 Encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/voldy/base32_crockford";
            };
          } // packageOverrides)
      ) {};

    base32_crockford = base32_crockford_1_0_0;

    base36_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, custom_base_0_2_1
        }:
          buildMix ({
            name = "base36";
            version = "1.0.0";
            src = fetchHex {
              pkg = "base36";
              version = "1.0.0";
              sha256 =
                "6022d73272ebd0a6f600248da05b47576b94f064c6444dd0401df67e717c189e";
            };
            beamDeps  = [ custom_base_0_2_1 ];

            meta = {
              description = ''Base36 encoder/decoder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nscyclone/base36";
            };
          } // packageOverrides)
      ) {};

    base36 = base36_1_0_0;

    base58_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "base58";
            version = "0.1.0";
            src = fetchHex {
              pkg = "base58";
              version = "0.1.0";
              sha256 =
                "e9746b7fa618f15d22e3098e06b35083977aff8fe0594628baae282769a2ceff";
            };

            meta = {
              description = ''Base58 encoding/decoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jrdnull/base58";
            };
          } // packageOverrides)
      ) {};

    base58 = base58_0_1_0;

    base58check_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "base58check";
            version = "0.1.0";
            src = fetchHex {
              pkg = "base58check";
              version = "0.1.0";
              sha256 =
                "29617beb2aaffe27ef40d7232a60beb5ad208667df4f2b619552367698cd4ca4";
            };

            meta = {
              description = ''Elixir implementation of Base58Check encoding
                            meant for Bitcoin '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gjaldon/base58check";
            };
          } // packageOverrides)
      ) {};

    base58check = base58check_0_1_0;

    base62_1_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, custom_base_0_2_1
        }:
          buildMix ({
            name = "base62";
            version = "1.2.1";
            src = fetchHex {
              pkg = "base62";
              version = "1.2.1";
              sha256 =
                "3b29948de2013d3f93aa898c884a9dff847e7aec75d9d6d8c1dc4c61c2716c42";
            };
            beamDeps  = [ custom_base_0_2_1 ];

            meta = {
              description = ''Base62 encoder/decoder in pure Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/base62";
            };
          } // packageOverrides)
      ) {};

    base62 = base62_1_2_1;

    base62_uuid_1_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          base62_1_2_1,
          uuid_1_1_8
        }:
          buildMix ({
            name = "base62_uuid";
            version = "1.2.3";
            src = fetchHex {
              pkg = "base62_uuid";
              version = "1.2.3";
              sha256 =
                "7a12947d7d15249984abad098f902f04a9eae6cd5abc096df307e205551c394b";
            };
            beamDeps  = [ base62_1_2_1 uuid_1_1_8 ];

            meta = {
              description = ''A library for creating Base62-encoded UUIDs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usecanvas/base62_uuid";
            };
          } // packageOverrides)
      ) {};

    base62_uuid = base62_uuid_1_2_3;

    base64url_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "base64url";
            version = "0.0.1";
            src = fetchHex {
              pkg = "base64url";
              version = "0.0.1";
              sha256 =
                "fab09b20e3f5db886725544cbcf875b8e73ec93363954eb8a1a9ed834aa8c1f9";
            };

            meta = {
              description = ''URL safe base64-compatible codec'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dvv/base64url";
            };
          } // packageOverrides)
      ) {};

    base64url = base64url_0_0_1;

    basex_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "basex";
            version = "1.0.2";
            src = fetchHex {
              pkg = "basex";
              version = "1.0.2";
              sha256 =
                "b112c5cc22e8004938dcf7480a4e6da1f085f8264c7443f79cdb738da177b8dc";
            };

            meta = {
              description = ''BaseX - arbitrary alphabet encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/basex_ex";
            };
          } // packageOverrides)
      ) {};

    basex = basex_1_0_2;

    basho_folsom_0_7_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bear_0_8_3 }:
          buildRebar3 ({
            name = "basho_folsom";
            version = "0.7.5";
            src = fetchHex {
              pkg = "basho_folsom";
              version = "0.7.5";
              sha256 =
                "1ba55ede42f7527fc7a1e74e28389839e8ce2edca5af7e2f210346f8230eaca8";
            };

            beamDeps  = [ bear_0_8_3 ];

            meta = {
              description = ''Folsom metrics library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/project-fifo/folsom";
            };
          } // packageOverrides)
      ) {};

    basho_folsom = basho_folsom_0_7_5;

    basho_hamcrest_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "basho_hamcrest";
            version = "0.4.1";
            src = fetchHex {
              pkg = "basho_hamcrest";
              version = "0.4.1";
              sha256 =
                "26974025bc61bc09ef5b13be5dce5035ca11bf37bf4a865e9d86c455c942298f";
            };

            meta = {
              description = ''Erlang port of Hamcrest'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/hamcrest-erlang";
            };
          } // packageOverrides)
      ) {};

    basho_hamcrest = basho_hamcrest_0_4_1;

    basho_poolboy_0_8_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          gen_fsm_compat_0_3_0
        }:
          buildRebar3 ({
            name = "basho_poolboy";
            version = "0.8.4";
            src = fetchHex {
              pkg = "basho_poolboy";
              version = "0.8.4";
              sha256 =
                "82be45389afe823486a8cb83598c6cad046b5904156969d962aef1639584c591";
            };

            buildPlugins  = [ rebar_erl_vsn ];

            beamDeps  = [ gen_fsm_compat_0_3_0 ];

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/Kyorai/poolboy";
            };
          } // packageOverrides)
      ) {};

    basho_poolboy = basho_poolboy_0_8_4;

    basho_stats_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "basho_stats";
            version = "1.0.3";
            src = fetchHex {
              pkg = "basho_stats";
              version = "1.0.3";
              sha256 =
                "d739e733b1c8afcaa467289fca50221753fc8cde6e7b53a79b67f98a2a261f5a";
            };

            meta = {
              description = ''Basic Erlang statistics library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/basho_stats";
            };
          } // packageOverrides)
      ) {};

    basho_stats = basho_stats_1_0_3;

    basis_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "basis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "basis";
              version = "0.1.0";
              sha256 =
                "95bd2676cf723859597b84797dc0edeba541c14dee2364242566864030d82c07";
            };

            meta = {
              description = ''A tool to generate the api sdk'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h1u2i3/basis";
            };
          } // packageOverrides)
      ) {};

    basis = basis_0_1_0;

    batch_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "batch";
            version = "0.2.0";
            src = fetchHex {
              pkg = "batch";
              version = "0.2.0";
              sha256 =
                "bfe0235368fec0e688787c6f1eaadb2b7464de067b71e4d4a7bc64762fae191c";
            };

            meta = {
              longDescription = ''Batches are processes meant to execute
                                several functions asynchronously, collecting
                                their return values or returning the error of
                                the first failure (fail-fast).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fertapric/batch";
            };
          } // packageOverrides)
      ) {};

    batch = batch_0_2_0;

    batch_please_0_4_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "batch_please";
            version = "0.4.4";
            src = fetchHex {
              pkg = "batch_please";
              version = "0.4.4";
              sha256 =
                "4d23420f3b14aa6ef5c73d65a2c5ff840470717c3277707f06adf4bbe52e9d8c";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A library for collecting and processing batches
                            of data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/batch_please";
            };
          } // packageOverrides)
      ) {};

    batch_please = batch_please_0_4_4;

    batch_stage_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_12_2 }:
          buildMix ({
            name = "batch_stage";
            version = "0.1.0";
            src = fetchHex {
              pkg = "batch_stage";
              version = "0.1.0";
              sha256 =
                "4643eb7ee545ea935e27e070e7efb6ab352975f6cbce08f1448af2b8bb1836ac";
            };
            beamDeps  = [ gen_stage_0_12_2 ];

            meta = {
              description = ''Elixir GenStage that batches events together so
                            they are not sent one-by-one'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/narrowtux/batch_stage";
            };
          } // packageOverrides)
      ) {};

    batch_stage = batch_stage_0_1_0;

    batched_communication_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, croma_0_9_3 }:
          buildMix ({
            name = "batched_communication";
            version = "0.1.3";
            src = fetchHex {
              pkg = "batched_communication";
              version = "0.1.3";
              sha256 =
                "481721ef2533a421821136cdfbc129f9ffd1fe0a2586279758b64fcd386b7668";
            };
            beamDeps  = [ croma_0_9_3 ];

            meta = {
              description = ''Mostly-transparent batching of remote messages in
                            Erlang/Elixir cluster'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    batched_communication = batched_communication_0_1_3;

    batcher_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "batcher";
            version = "0.0.1";
            src = fetchHex {
              pkg = "batcher";
              version = "0.0.1";
              sha256 =
                "738a930f809603dc21e6612c1df38cbc452887ddf34670d20f05e136231f3671";
            };

            meta = {
              longDescription = ''Process a backlog of items after it has grown
                                to a certain size or a defined time has
                                passed'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/behe/batcher";
            };
          } // packageOverrides)
      ) {};

    batcher = batcher_0_0_1;

    batiscaph_probe_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "batiscaph_probe";
            version = "0.1.1";
            src = fetchHex {
              pkg = "batiscaph_probe";
              version = "0.1.1";
              sha256 =
                "0072b0f315d4b23a4fa4fb2e77a5ad6ccbb9750fb44e3bd243f5e3ea9dad3249";
            };

            meta = {
              description = ''Client part for Batiscaph seeing tool'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    batiscaph_probe = batiscaph_probe_0_1_1;

    battleship_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "battleship";
            version = "0.1.0";
            src = fetchHex {
              pkg = "battleship";
              version = "0.1.0";
              sha256 =
                "7830d2fe230b9bb4b011bed9093952fcfd1cccee4cae6619f72fb4d32729f666";
            };

            meta = {
              longDescription = ''This library is a multiplayer game of the
                                classic battleship board or paper game.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ihinojal/btctool";
            };
          } // packageOverrides)
      ) {};

    battleship = battleship_0_1_0;

    baud_0_5_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          modbus_0_3_7,
          sniff_0_1_4
        }:
          buildMix ({
            name = "baud";
            version = "0.5.4";
            src = fetchHex {
              pkg = "baud";
              version = "0.5.4";
              sha256 =
                "4b4dc1aec048153c849b863318dea3fcd6e27d500382f3c154901366c8078d42";
            };
            beamDeps  = [ modbus_0_3_7 sniff_0_1_4 ];

            meta = {
              description = ''Elixir Serial Port with Modbus RTU.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/baud/";
            };
          } // packageOverrides)
      ) {};

    baud = baud_0_5_4;

    bayesic_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bayesic";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bayesic";
              version = "0.1.1";
              sha256 =
                "74f0d251bcc93d750627070fa68144f71b878948a46977697e1329fb6bff8fee";
            };

            meta = {
              longDescription = ''A probablistic string matcher similar to
                                Naive Bayes, but optimized for many classes with
                                small documents'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/bayesic";
            };
          } // packageOverrides)
      ) {};

    bayesic = bayesic_0_1_1;

    bbmustache_1_0_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bbmustache";
            version = "1.0.4";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.0.4";
              sha256 =
                "03b0d47db66e86df993896dce7578d7e4aae5f84636809b45fa8a3e34ee59b12";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          } // packageOverrides)
      ) {};

    bbmustache_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bbmustache";
            version = "1.1.0";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.1.0";
              sha256 =
                "aa22469836bb8a9928ad741bdd2038d49116228bfbe0c2d6c792e1bdd4b256d9";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          } // packageOverrides)
      ) {};

    bbmustache_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bbmustache";
            version = "1.4.0";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.4.0";
              sha256 =
                "fe81d16d19be23499efcef967459b7e5d7d06bf53625387285bb671fca2087ab";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          } // packageOverrides)
      ) {};

    bbmustache_1_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bbmustache";
            version = "1.5.0";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.5.0";
              sha256 =
                "ed074fb6e94e1a6f6e098f98a403638aba593f59a5542bc6ce2e62d829c9e375";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          } // packageOverrides)
      ) {};

    bbmustache = bbmustache_1_5_0;

    bcrypt_0_5_0_p3a = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bcrypt";
            version = "0.5.0-p3a";
            src = fetchHex {
              pkg = "bcrypt";
              version = "0.5.0-p3a";
              sha256 =
                "492decdc633399b356a3bbfe8279c10a49b1040fc082c8cbf2d30b41ff88f310";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''An Erlang wrapper (NIF or port program) for the
                            OpenBSD password scheme, bcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlangpack/bcrypt";
            };
          } // packageOverrides)
      ) {};

    bcrypt_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bcrypt";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bcrypt";
              version = "1.0.0";
              sha256 =
                "a0482a53dfad083e72fad3228303db6ce20675b2ce2e3b3bd82cf1dbb6b75897";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''An Erlang wrapper (NIF or port program) for the
                            OpenBSD password scheme, bcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlangpack/bcrypt";
            };
          } // packageOverrides)
      ) {};

    bcrypt_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bcrypt";
            version = "1.0.2";
            src = fetchHex {
              pkg = "bcrypt";
              version = "1.0.2";
              sha256 =
                "bb33ddea6e5fb1718080a23469589d5e1281627d4d58d24ff61ac0e8c3336521";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''An Erlang wrapper (NIF or port program) for the
                            OpenBSD password scheme, bcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlangpack/bcrypt";
            };
          } // packageOverrides)
      ) {};

    bcrypt = bcrypt_1_0_2;

    bcrypt_elixir_1_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "bcrypt_elixir";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bcrypt_elixir";
              version = "1.0.1";
              sha256 =
                "ae53efcfc5b85bbfc99b4a33b8f5e77e2224355a6e37340f952251a302b963b5";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Bcrypt password hashing algorithm for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/bcrypt_elixir";
            };
          } // packageOverrides)
      ) {};

    bcrypt_elixir_1_0_8 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "bcrypt_elixir";
            version = "1.0.8";
            src = fetchHex {
              pkg = "bcrypt_elixir";
              version = "1.0.8";
              sha256 =
                "baaef971391c533ab07681600b240c7210384e9fc5073a03cf899316908e9a08";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Bcrypt password hashing algorithm for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/bcrypt_elixir";
            };
          } // packageOverrides)
      ) {};

    bcrypt_elixir = bcrypt_elixir_1_0_8;

    beacon_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "beacon";
            version = "1.1.0";
            src = fetchHex {
              pkg = "beacon";
              version = "1.1.0";
              sha256 =
                "67daba60211b7dd92afab39f8c82af0ed1538bde386041ae1c0b26ca5f903c80";
            };

            meta = {
              description = ''A Process that periodically reaches a target at a
                            fixed interval.'';
              license = stdenv.lib.licenses.gpl3;
            };
          } // packageOverrides)
      ) {};

    beacon = beacon_1_1_0;

    beagle_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hound_1_0_4 }:
          buildMix ({
            name = "beagle";
            version = "0.1.0";
            src = fetchHex {
              pkg = "beagle";
              version = "0.1.0";
              sha256 =
                "94fb9971f6f38be1dbf392ce71755e2002c60f6fff640b8ab8d353b7248a19be";
            };
            beamDeps  = [ hound_1_0_4 ];

            meta = {
              description = ''Add-ons for Hound, the integration testing and
                            browser automation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrblueblue/beagle";
            };
          } // packageOverrides)
      ) {};

    beagle = beagle_0_1_0;

    beagle_pru_interface_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "beagle_pru_interface";
            version = "0.1.2";
            src = fetchHex {
              pkg = "beagle_pru_interface";
              version = "0.1.2";
              sha256 =
                "09923c3c3d83a5a794239ad6b327428ccc77d9bcc23e09af05384f73c70ec792";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              longDescription = ''Pure Elixir library to control and async
                                communicate with the PRU-ICSS cores on
                                BeagleBone Boards.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elcritch/beagle_pru_interface";
            };
          } // packageOverrides)
      ) {};

    beagle_pru_interface = beagle_pru_interface_0_1_2;

    beam_analyzer_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "beam_analyzer";
            version = "0.0.3";
            src = fetchHex {
              pkg = "beam_analyzer";
              version = "0.0.3";
              sha256 =
                "acfb7b4d92c1147401f2de8e0fe5ad33236814a57fdcfbcb184e9292e43c7d27";
            };

            meta = {
              description = ''Get information about Erlang/Elixir modules and
                            BEAM files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/beam_analyzer";
            };
          } // packageOverrides)
      ) {};

    beam_analyzer = beam_analyzer_0_0_3;

    beam_homunculus_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "beam_homunculus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "beam_homunculus";
              version = "0.1.0";
              sha256 =
                "6e4d0e669b31d16c2c41ce03704e536eeb47b94b302a1c2836e3be91fe122bf7";
            };

            meta = {
              description = ''A bot framework for ErlangVM(beam)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/beam_homunculus";
            };
          } // packageOverrides)
      ) {};

    beam_homunculus = beam_homunculus_0_1_0;

    beam_inspect_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "beam_inspect";
            version = "0.1.1";
            src = fetchHex {
              pkg = "beam_inspect";
              version = "0.1.1";
              sha256 =
                "8a85192c98c909c8506b5061d4277783e329f0c77c83e1027a58cf445c9d3944";
            };

            meta = {
              description = ''Inspect how your elixir module looks like in
                            erlang / core erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appunite/beam_inspect";
            };
          } // packageOverrides)
      ) {};

    beam_inspect = beam_inspect_0_1_1;

    bear_0_8_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bear";
            version = "0.8.3";
            src = fetchHex {
              pkg = "bear";
              version = "0.8.3";
              sha256 =
                "0a04ce4702e00e0a43c0fcdd63e38c9c7d64dceb32b27ffed261709e7c3861ad";
            };

            meta = {
              description = ''A set of statistics functions for erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/folsom-project/bear";
            };
          } // packageOverrides)
      ) {};

    bear_0_8_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bear";
            version = "0.8.5";
            src = fetchHex {
              pkg = "bear";
              version = "0.8.5";
              sha256 =
                "a2ffa70b82c3002df30d01cb78b9b03d7524cd23008a0264962de62c97f7aed4";
            };

            meta = {
              description = ''A set of statistics functions for erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/folsom-project/bear";
            };
          } // packageOverrides)
      ) {};

    bear_0_8_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bear";
            version = "0.8.7";
            src = fetchHex {
              pkg = "bear";
              version = "0.8.7";
              sha256 =
                "534217dce6a719d59e54fb0eb7a367900dbfc5f85757e8c1f94269df383f6d9b";
            };

            meta = {
              description = ''A set of statistics functions for erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/folsom-project/bear";
            };
          } // packageOverrides)
      ) {};

    bear = bear_0_8_7;

    behaves_like_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "behaves_like";
            version = "0.2.0";
            src = fetchHex {
              pkg = "behaves_like";
              version = "0.2.0";
              sha256 =
                "abd9a863ddac1d090857081f6574e818410f5d931f5d7324a3f0fa16bbcf010a";
            };

            meta = {
              description = ''Automatically creates a behaviour from a module`s
                            specs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/behaves_like";
            };
          } // packageOverrides)
      ) {};

    behaves_like = behaves_like_0_2_0;

    behavior_tree_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_zipper_0_1_3 }:
          buildMix ({
            name = "behavior_tree";
            version = "0.3.0";
            src = fetchHex {
              pkg = "behavior_tree";
              version = "0.3.0";
              sha256 =
                "1ba029d209de616d4969fc470a06bb86c6b2d5bc7833e46c547b651223634a74";
            };
            beamDeps  = [ ex_zipper_0_1_3 ];

            meta = {
              description = ''A library for building AI`s via composable
                            behavior trees.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jschomay/elixir-behavior-tree";
            };
          } // packageOverrides)
      ) {};

    behavior_tree = behavior_tree_0_3_0;

    belixir_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "belixir";
            version = "0.2.0";
            src = fetchHex {
              pkg = "belixir";
              version = "0.2.0";
              sha256 =
                "1d4cea63bf593f8ccdbad32270158704d65aa6f88ee2df48422aced2566465e3";
            };

            meta = {
              longDescription = ''Benchmark ips tool for elixir-lang. Runs
                                given codes in given seconds and compares
                                them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meinac/belixir";
            };
          } // packageOverrides)
      ) {};

    belixir = belixir_0_2_0;

    belvedere_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "belvedere";
            version = "0.0.1";
            src = fetchHex {
              pkg = "belvedere";
              version = "0.0.1";
              sha256 =
                "b222f5c3ab855655b7950681542e2c3941c52533bd8b6cbb08be60f91427113e";
            };

            meta = {
              description = ''An example Elixir project with CircleCI, Docker,
                            Dialyzer integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://nirvana.io";
            };
          } // packageOverrides)
      ) {};

    belvedere = belvedere_0_0_1;

    benchee_0_12_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, deep_merge_0_1_1 }:
          buildMix ({
            name = "benchee";
            version = "0.12.1";
            src = fetchHex {
              pkg = "benchee";
              version = "0.12.1";
              sha256 =
                "2a1577860a01e4c81e72e4a89c5e378162098ba200109267d31c769a8ec82705";
            };
            beamDeps  = [ deep_merge_0_1_1 ];

            meta = {
              longDescription = ''Versatile (micro) benchmarking that is
                                extensible. Get statistics such as: average,
                                iterations per second, standard deviation and
                                the median.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee";
            };
          } // packageOverrides)
      ) {};

    benchee_0_13_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, deep_merge_0_1_1 }:
          buildMix ({
            name = "benchee";
            version = "0.13.1";
            src = fetchHex {
              pkg = "benchee";
              version = "0.13.1";
              sha256 =
                "2094f743918e1c3822b0a8c265eb7ae8118936dd4e0f04c62bb9bdf3676dce4d";
            };
            beamDeps  = [ deep_merge_0_1_1 ];

            meta = {
              longDescription = ''Versatile (micro) benchmarking that is
                                extensible. Get statistics such as: average,
                                iterations per second, standard deviation and
                                the median.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee";
            };
          } // packageOverrides)
      ) {};

    benchee = benchee_0_13_1;

    benchee_csv_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchee_0_13_1,
          csv_2_1_1
        }:
          buildMix ({
            name = "benchee_csv";
            version = "0.8.0";
            src = fetchHex {
              pkg = "benchee_csv";
              version = "0.8.0";
              sha256 =
                "74f5f5b5fe50f05ee29023d35a4d7d543230d63fa15c67076a36ad46e2b040d8";
            };
            beamDeps  = [ benchee_0_13_1 csv_2_1_1 ];

            meta = {
              description = ''Get CSV from your benchee benchmarks to turn them
                            into graphs or whatever!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee_csv";
            };
          } // packageOverrides)
      ) {};

    benchee_csv = benchee_csv_0_8_0;

    benchee_html_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchee_0_13_1,
          benchee_json_0_5_0
        }:
          buildMix ({
            name = "benchee_html";
            version = "0.5.0";
            src = fetchHex {
              pkg = "benchee_html";
              version = "0.5.0";
              sha256 =
                "eddb1a5d3b4d7b2351a12680896ec7928d06dd4f30a30f4ee58b4297cdf2416f";
            };
            beamDeps  = [ benchee_0_13_1 benchee_json_0_5_0 ];

            meta = {
              longDescription = ''HTML formatter with pretty graphs for the
                                (micro) benchmarking library benchee. Also
                                allows export as PNG image!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee_html";
            };
          } // packageOverrides)
      ) {};

    benchee_html = benchee_html_0_5_0;

    benchee_json_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchee_0_13_1,
          jason_1_1_1
        }:
          buildMix ({
            name = "benchee_json";
            version = "0.5.0";
            src = fetchHex {
              pkg = "benchee_json";
              version = "0.5.0";
              sha256 =
                "e976e61468d1c9a16ac4bbf9f6e31c4e9a0da68e57c94c5e739f8b7dee580f3a";
            };
            beamDeps  = [ benchee_0_13_1 jason_1_1_1 ];

            meta = {
              description = ''JSON formatter for the (micro) benchmarking
                            library benchee.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee_json";
            };
          } // packageOverrides)
      ) {};

    benchee_json = benchee_json_0_5_0;

    benchfella_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "benchfella";
            version = "0.3.3";
            src = fetchHex {
              pkg = "benchfella";
              version = "0.3.3";
              sha256 =
                "f95ad87f2689695b9227c1601f0d96b9058ad1028c59cd47e33a1acd08888a94";
            };

            meta = {
              description = ''Microbenchmarking tool for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/benchfella";
            };
          } // packageOverrides)
      ) {};

    benchfella_0_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "benchfella";
            version = "0.3.5";
            src = fetchHex {
              pkg = "benchfella";
              version = "0.3.5";
              sha256 =
                "23f27cbc482cbac03fc8926441eb60a5e111759c17642bac005c3225f5eb809d";
            };

            meta = {
              description = ''Microbenchmarking tool for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/benchfella";
            };
          } // packageOverrides)
      ) {};

    benchfella = benchfella_0_3_5;

    benchmark_ips_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "benchmark_ips";
            version = "0.2.0";
            src = fetchHex {
              pkg = "benchmark_ips";
              version = "0.2.0";
              sha256 =
                "7c55c4317dae5b8dae6a655e25a7aa491acd076e36efb9c9852a789a3592b703";
            };

            meta = {
              description = ''A tool to run benchmarks to determine iteration
                            per second.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mxhold/benchmark_ips";
            };
          } // packageOverrides)
      ) {};

    benchmark_ips = benchmark_ips_0_2_0;

    bencode_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eqc_ex_1_2_4 }:
          buildMix ({
            name = "bencode";
            version = "0.3.2";
            src = fetchHex {
              pkg = "bencode";
              version = "0.3.2";
              sha256 =
                "6abf5adace62d6e105b17d50faa8bdce84dea18c947ecb0bb81b6b2a3582dae7";
            };
            beamDeps  = [ eqc_ex_1_2_4 ];

            meta = {
              longDescription = ''A complete and correct Bencode encoder and
                                decoder written in pure Elixir. The decoder will
                                return the info hash with along with the decoded
                                data, and the encoder is implemented as a
                                protocol, allowing any data structure to be
                                bcode encoded.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/bencode";
            };
          } // packageOverrides)
      ) {};

    bencode = bencode_0_3_2;

    bencodex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bencodex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bencodex";
              version = "1.0.0";
              sha256 =
                "a70c319eed907d4d0520bf2ed6eedc77cbf1312274b144341dc4ecc74136124d";
            };

            meta = {
              description = ''Encoder and decoder for the bencode format'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/patrickgombert/bencodex";
            };
          } // packageOverrides)
      ) {};

    bencodex = bencodex_1_0_0;

    bendy_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bendy";
            version = "0.1.7";
            src = fetchHex {
              pkg = "bendy";
              version = "0.1.7";
              sha256 =
                "fe7e5221dc50de6715c2f4209aa9a7ba0186f0b58fb74f986242cf7d80b61e94";
            };

            meta = {
              description = ''A small bencode library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Zanadar/benlixir";
            };
          } // packageOverrides)
      ) {};

    bendy = bendy_0_1_7;

    bento_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "bento";
            version = "0.9.2";
            src = fetchHex {
              pkg = "bento";
              version = "0.9.2";
              sha256 =
                "8be4312c4eacf57ef0c319f5ddd0b31872b510dc8ca02c64206ee648ec0f91d1";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''An incredibly fast, pure Elixir Bencoding
                            library.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/folz/bento";
            };
          } // packageOverrides)
      ) {};

    bento = bento_0_9_2;

    bepaid_ex_0_9_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          nanoid_1_0_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "bepaid_ex";
            version = "0.9.1";
            src = fetchHex {
              pkg = "bepaid_ex";
              version = "0.9.1";
              sha256 =
                "9c5bacf11c7084a6b8659947368098b95f741801b9301158bb6814af602be3f5";
            };
            beamDeps  = [ httpoison_0_13_0 nanoid_1_0_1 poison_3_1_0 ];

            meta = {
              description = ''Elixir library for bePaid API (payment processing
                            gateway)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paveltyk/bepaid_ex";
            };
          } // packageOverrides)
      ) {};

    bepaid_ex = bepaid_ex_0_9_1;

    berg_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "berg";
            version = "1.1.0";
            src = fetchHex {
              pkg = "berg";
              version = "1.1.0";
              sha256 =
                "20e663c2a858d5895d5574037cc2b2df10e5b1edb585048ef65dfd58b319ea09";
            };

            meta = {
              description = ''Berg is a Minimum Heap just for Integers'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/Dzol/berg/";
            };
          } // packageOverrides)
      ) {};

    berg = berg_1_1_0;

    bert_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bert";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bert";
              version = "0.1.0";
              sha256 =
                "2a561521ec3529b248658a3e2d3d4bfe6729b0ab8291c701bf15ef413eda1506";
            };

            meta = {
              description = ''BERT Encoder/Decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/bert.erl";
            };
          } // packageOverrides)
      ) {};

    bert = bert_0_1_0;

    bertex_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bertex";
            version = "1.3.0";
            src = fetchHex {
              pkg = "bertex";
              version = "1.3.0";
              sha256 =
                "0a5d5e478bb5764b7b7bae37cae1ca491200e58b089df121a2fe1c223d8ee57a";
            };

            meta = {
              description = ''Elixir BERT encoder/decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/bertex";
            };
          } // packageOverrides)
      ) {};

    bertex = bertex_1_3_0;

    bf_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, optimus_0_1_8 }:
          buildMix ({
            name = "bf";
            version = "1.2.0";
            src = fetchHex {
              pkg = "bf";
              version = "1.2.0";
              sha256 =
                "52f5762dbcc48e38035424d1d3d9c45e4272e2cf9a06e9f322370b78379ea113";
            };
            beamDeps  = [ optimus_0_1_8 ];

            meta = {
              longDescription = ''bf is a simple Brainfuck interpreter written
                                in Elixir. It uses leex and yecc for lexing and
                                parsing.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukad/bf";
            };
          } // packageOverrides)
      ) {};

    bf = bf_1_2_0;

    bheap_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bheap";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bheap";
              version = "1.0.0";
              sha256 =
                "ce2a32df30e742485d95d6925bfd4f88b891180b2518debef32b60d0f81980da";
            };

            meta = {
              description = ''Binomial heap in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/bheap";
            };
          } // packageOverrides)
      ) {};

    bheap = bheap_1_0_0;

    bibtex_elixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bibtex_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bibtex_elixir";
              version = "0.0.1";
              sha256 =
                "49719ec673915de22d71fd9c323e70dbd200920793c49b664316771c32fc7735";
            };

            meta = {
              description = ''A pure Elixir BibTeX parser inspired by
                            Poison.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jackweinbender/bibtex-elixir";
            };
          } // packageOverrides)
      ) {};

    bibtex_elixir = bibtex_elixir_0_0_1;

    big_brother_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "big_brother";
            version = "0.1.0";
            src = fetchHex {
              pkg = "big_brother";
              version = "0.1.0";
              sha256 =
                "fe3993d71974e12e1ca4ca57b817e55af947e00f5318fb3f102df4d4b018e1b6";
            };

            meta = {
              longDescription = ''BigBrother is an Elixir library for
                                performing validation and lookups on ABA routing
                                numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whitepaperclip/BigBrother";
            };
          } // packageOverrides)
      ) {};

    big_brother = big_brother_0_1_0;

    big_query_0_0_13 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          jose_1_8_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "big_query";
            version = "0.0.13";
            src = fetchHex {
              pkg = "big_query";
              version = "0.0.13";
              sha256 =
                "5e7a4749e751cf3787c23ec38194c2e8e3f2de88fded8a273537d4188d3158c1";
            };
            beamDeps  = [ httpoison_0_11_2 jose_1_8_4 poison_3_1_0 ];

            meta = {
              description = ''A Google BigQuery API client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/companykitchen/big_query";
            };
          } // packageOverrides)
      ) {};

    big_query = big_query_0_0_13;

    bigflake_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, base62_1_2_1 }:
          buildMix ({
            name = "bigflake";
            version = "0.5.0";
            src = fetchHex {
              pkg = "bigflake";
              version = "0.5.0";
              sha256 =
                "930d3cd6cfc990be77736f033bee241f7cf7a1b5e0f545771ffc00691c533ec1";
            };
            beamDeps  = [ base62_1_2_1 ];

            meta = {
              description = ''128-bit, k-ordered, conflict-free IDs Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevedomin/bigflake";
            };
          } // packageOverrides)
      ) {};

    bigflake = bigflake_0_5_0;

    bijective_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bijective";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bijective";
              version = "0.0.2";
              sha256 =
                "4db496330cd0b61f326ca75c4547e5b015c5b3030e2ccac12a3b229237b80c8d";
            };

            meta = {
              description = ''Generate a unique sentence for a given number and
                            vice-versa'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wdalmut/ex-bijective";
            };
          } // packageOverrides)
      ) {};

    bijective = bijective_0_0_2;

    billiards_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "billiards";
            version = "0.0.1";
            src = fetchHex {
              pkg = "billiards";
              version = "0.0.1";
              sha256 =
                "5b8d8eab12e35c0c7eff5be02a4adf0a7aa4cf10688a5faeec9b10f2c2f04046";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    billiards = billiards_0_0_1;

    bimap_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bimap";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bimap";
              version = "0.1.1";
              sha256 =
                "838fc41466ef53c32e25c75ad10ef61afb427145574b7b277e04a7d9e39b4641";
            };

            meta = {
              description = ''Elixir implementation of bidirectional map and
                            multimap'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mkaput/elixir-bimap";
            };
          } // packageOverrides)
      ) {};

    bimap = bimap_0_1_1;

    bin_format_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bin_format";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bin_format";
              version = "0.0.1";
              sha256 =
                "f73b9d1691499964d248b4a19b56284b2c51652015a63b77c2688b92cb55d66a";
            };

            meta = {
              longDescription = ''Automatically generate the boilerplate to
                                convert between binaries and Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willpenington/bin_format";
            };
          } // packageOverrides)
      ) {};

    bin_format = bin_format_0_0_1;

    binance_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "binance";
            version = "0.5.0";
            src = fetchHex {
              pkg = "binance";
              version = "0.5.0";
              sha256 =
                "7380e6e6c450a133f9f741d4b6f3c9f05518ce7d961247ca7520792b9c336f43";
            };
            beamDeps  = [ exconstructor_1_1_0 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the Binance public API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dvcrn/binance.ex";
            };
          } // packageOverrides)
      ) {};

    binance = binance_0_5_0;

    binary_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "binary";
            version = "0.0.4";
            src = fetchHex {
              pkg = "binary";
              version = "0.0.4";
              sha256 =
                "a2faf5d5c22caec3efacf95370d8b050c003f48e03c221c37e0d1e2dd515b970";
            };

            meta = {
              description = ''Toolkit for handling binaries in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/comboy/elixir-binary";
            };
          } // packageOverrides)
      ) {};

    binary_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "binary";
            version = "0.0.5";
            src = fetchHex {
              pkg = "binary";
              version = "0.0.5";
              sha256 =
                "ee1e9ebcab703a4e24db554957fbb540642fe9327eb9e295cb3f07dd7c11ddb2";
            };

            meta = {
              description = ''Toolkit for handling binaries in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/comboy/elixir-binary";
            };
          } // packageOverrides)
      ) {};

    binary = binary_0_0_5;

    binaryen_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "binaryen";
            version = "0.1.0";
            src = fetchHex {
              pkg = "binaryen";
              version = "0.1.0";
              sha256 =
                "f3a40f958e6a3069a68997ce65659ecbf3cb19e438c06668c24dad5bf87e1256";
            };

            meta = {
              description = ''Nif bindings to
                            [Binaryen](https://github.com/WebAssembly/binaryen)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/masonforest/elixir-binaryen";
            };
          } // packageOverrides)
      ) {};

    binaryen = binaryen_0_1_0;

    binder_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "binder";
            version = "0.1.0";
            src = fetchHex {
              pkg = "binder";
              version = "0.1.0";
              sha256 =
                "a4a0a72a462d8dacd02031f5ebf50eb58afb16230aba77e6660cb966c1f585d9";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Either and Maybe monadic interface around the
                            standard return types'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shterrett/binder";
            };
          } // packageOverrides)
      ) {};

    binder = binder_0_1_0;

    bing_translator_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpoison_1_2_0,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "bing_translator";
            version = "2.0.0";
            src = fetchHex {
              pkg = "bing_translator";
              version = "2.0.0";
              sha256 =
                "501186be000f4f787f47308e65041febe180d34c3b1dedd67996acdbc160bb4c";
            };
            beamDeps  = [ floki_0_20_3 httpoison_1_2_0 xml_builder_2_1_0 ];

            meta = {
              longDescription = ''Translate strings using the Bing HTTP API.
                                Requires that you have a Client ID and Secret.
                                See README.md for information.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/bing_translator";
            };
          } // packageOverrides)
      ) {};

    bing_translator = bing_translator_2_0_0;

    binlist_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "binlist";
            version = "0.1.0";
            src = fetchHex {
              pkg = "binlist";
              version = "0.1.0";
              sha256 =
                "2b511f5d8714b34a5fec10ac86d004b5466e60852b294d3197ca7a4e0eda8085";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir client library for the Binlist.net
                            service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/javierjulio/binlist-elixir";
            };
          } // packageOverrides)
      ) {};

    binlist = binlist_0_1_0;

    binstructor_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "binstructor";
            version = "0.0.1";
            src = fetchHex {
              pkg = "binstructor";
              version = "0.0.1";
              sha256 =
                "ab6e619628d4308a47744dcf9dd0c9ff48f4a5cc5e00ce6bb3852d92e654ba74";
            };

            meta = {
              longDescription = ''Automatically generate the boilerplate to
                                convert between binaries and Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willpenington/binstructor";
            };
          } // packageOverrides)
      ) {};

    binstructor = binstructor_0_0_1;

    biometrics_facade_1_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "biometrics_facade";
            version = "1.3.1";
            src = fetchHex {
              pkg = "biometrics_facade";
              version = "1.3.1";
              sha256 =
                "ddf508a0be9d6b98fab402078de3ce7d23476c3063c0cc82987c1aaff3f6f709";
            };
            beamDeps  = [ httpotion_3_1_0 poison_2_2_0 ];

            meta = {
              description = ''An API facade for a private biometrics
                            service.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    biometrics_facade = biometrics_facade_1_3_1;

    bip0173_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bip0173";
            version = "0.1.2";
            src = fetchHex {
              pkg = "bip0173";
              version = "0.1.2";
              sha256 =
                "6e12dfe7baacf9b4c422cae8f9cc6bbd791bf5ec3e9055fa3f418071b799b0db";
            };

            meta = {
              description = ''Elixir implementation of Bitcoin`s address format
                            for native SegWit outputs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stampery/elixir-bip0173";
            };
          } // packageOverrides)
      ) {};

    bip0173 = bip0173_0_1_2;

    bisect_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bisect";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bisect";
              version = "0.1.0";
              sha256 =
                "9cc90485d7b0bf441e9b016ce5a92c89da3a81d54a2d7ac445d41a37a5febffc";
            };

            meta = {
              description = ''Bisection algorithms ported from Python.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ertgl/bisect";
            };
          } // packageOverrides)
      ) {};

    bisect = bisect_0_1_0;

    bit_field_set_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bit_field_set";
            version = "1.2.1";
            src = fetchHex {
              pkg = "bit_field_set";
              version = "1.2.1";
              sha256 =
                "2ce12469f0c68b84c3c1cf52e96f2b95f9a2d73c522d095690c907db9d6ebeee";
            };

            meta = {
              longDescription = ''Store and manipulate a set of bit flags,
                                mostly used for syncing the state between peers
                                in a peer to peer network, such as
                                BitTorrent.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/bit_field_set";
            };
          } // packageOverrides)
      ) {};

    bit_field_set = bit_field_set_1_2_1;

    bitcoin_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          binary_0_0_4,
          reagent_0_1_14
        }:
          buildMix ({
            name = "bitcoin";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bitcoin";
              version = "0.0.2";
              sha256 =
                "a4f22e7ff0da6446c5dc01d608b3e2ffad7e568ae045942d0b684b455a92d87e";
            };
            beamDeps  = [ binary_0_0_4 reagent_0_1_14 ];

            meta = {
              description = ''Bitcoin tools and full node implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/comboy/bitcoin-elixir";
            };
          } // packageOverrides)
      ) {};

    bitcoin = bitcoin_0_0_2;

    bitcoin_de_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "bitcoin_de";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bitcoin_de";
              version = "0.3.0";
              sha256 =
                "3aeb749a350d5d31f61cbb3f952d98ede72dadd675600565851e82eaaf72a98e";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir API wrapper for www.bitcoin.de an online
                            bitcoin marketplace.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/balugege/bitcoin-de-elixir";
            };
          } // packageOverrides)
      ) {};

    bitcoin_de = bitcoin_de_0_3_0;

    bitcoin_price_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "bitcoin_price";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bitcoin_price";
              version = "0.1.1";
              sha256 =
                "a2a3ec597953ac7527cba9c57486fd20164601007b1bcd388996e0d78a6f5223";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A simple wrapper for providing bitcoin info
                            including the current price'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    bitcoin_price = bitcoin_price_0_1_1;

    bitcoin_rpc_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "bitcoin_rpc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bitcoin_rpc";
              version = "0.1.0";
              sha256 =
                "4d11e8604f3211524151db664d9b8bb0c35649904caf8378829cca9f40734e30";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Interact with a Bitcoin node through JSON-RPC
                                and get notifications on configured events like
                                incomming transactions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/around25/bitcoin_rpc";
            };
          } // packageOverrides)
      ) {};

    bitcoin_rpc = bitcoin_rpc_0_1_0;

    bitfield_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bitfield";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bitfield";
              version = "1.0.0";
              sha256 =
                "0f1ca3f3e9f8661cc2686561717c326309541f95e4f82f7b7d927e150f5f7b5a";
            };

            meta = {
              description = ''Simple bitfields for erlang/elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/bitfield.erl";
            };
          } // packageOverrides)
      ) {};

    bitfield = bitfield_1_0_0;

    bitmap_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bitmap";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bitmap";
              version = "1.0.1";
              sha256 =
                "341a29908d005b2414ecd214623733caccf9d65c94a50911046d89a365c9805f";
            };

            meta = {
              longDescription = ''Package to help you create and work with
                                bitmaps
                                (https://en.wikipedia.org/wiki/Bitmap)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hashd/bitmap-elixir";
            };
          } // packageOverrides)
      ) {};

    bitmap = bitmap_1_0_1;

    bitmex_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0,
          websocket_client_1_2_4,
          websockex_0_4_1
        }:
          buildMix ({
            name = "bitmex";
            version = "0.2.2";
            src = fetchHex {
              pkg = "bitmex";
              version = "0.2.2";
              sha256 =
                "fa7468bdc21ef8187d80fc85a1c7ea965d89281e8095a59b4f41b6f6e28cacfb";
            };
            beamDeps  = [
                          httpoison_0_13_0
                          poison_3_1_0
                          websocket_client_1_2_4
                          websockex_0_4_1
                        ];

            meta = {
              description = ''BitMEX client library for Elixir'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    bitmex = bitmex_0_2_2;

    bitstamp_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "bitstamp";
            version = "0.6.0";
            src = fetchHex {
              pkg = "bitstamp";
              version = "0.6.0";
              sha256 =
                "9e0617756eef5e3a40b2f599db94b325a145f809454802725ceff2c27ea80fef";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir API wrapper for bitstamp.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/balugege/bitstamp_elixir";
            };
          } // packageOverrides)
      ) {};

    bitstamp = bitstamp_0_6_0;

    bittrex_0_5_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "bittrex";
            version = "0.5.4";
            src = fetchHex {
              pkg = "bittrex";
              version = "0.5.4";
              sha256 =
                "47bbecba6f88b516845180594878119a0d5c3f66d368a14cfe87914e03ebcd09";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Client for Bittrex (https://bittrex.com)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/straw-hat-team/bittrex";
            };
          } // packageOverrides)
      ) {};

    bittrex = bittrex_0_5_4;

    bittrex_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "bittrex_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bittrex_api";
              version = "0.1.0";
              sha256 =
                "8e5ac7196d917f1146eab30720e70db0df446f1d7761d2fcc9be97300392e59c";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A simple API wrapper for Bittrex'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/geaz/bittrex_api";
            };
          } // packageOverrides)
      ) {};

    bittrex_api = bittrex_api_0_1_0;

    black_box_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_xml_to_map_0_1_2,
          httpotion_3_1_0
        }:
          buildMix ({
            name = "black_box";
            version = "0.1.0";
            src = fetchHex {
              pkg = "black_box";
              version = "0.1.0";
              sha256 =
                "50cc7eb04a0093d0994854ccf956734204a85050984c6065bbb882bcb811d5b3";
            };
            beamDeps  = [ elixir_xml_to_map_0_1_2 httpotion_3_1_0 ];

            meta = {
              description = ''Simple API wrapper for http://blackbox.co.ke'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/johninvictus/black_box";
            };
          } // packageOverrides)
      ) {};

    black_box = black_box_0_1_0;

    blacksmith_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, faker_0_10_0 }:
          buildMix ({
            name = "blacksmith";
            version = "0.2.1";
            src = fetchHex {
              pkg = "blacksmith";
              version = "0.2.1";
              sha256 =
                "9d8b6e283de72424ebcd6a5245dc0331612556fa12bcfabb577f3308bc6407cf";
            };
            beamDeps  = [ faker_0_10_0 ];

            meta = {
              description = ''Elixir fake data generation for testing and
                            development'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/blacksmith";
            };
          } // packageOverrides)
      ) {};

    blacksmith = blacksmith_0_2_1;

    blake2_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blake2";
            version = "1.0.1";
            src = fetchHex {
              pkg = "blake2";
              version = "1.0.1";
              sha256 =
                "25cf551d244f393bd70402ac71cac86468683465a377c316409ff77b9d4b3466";
            };

            meta = {
              description = ''BLAKE2 hash functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/blake2_ex";
            };
          } // packageOverrides)
      ) {};

    blake2 = blake2_1_0_1;

    blanka_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blanka";
            version = "0.1.0";
            src = fetchHex {
              pkg = "blanka";
              version = "0.1.0";
              sha256 =
                "f8cd5feb0e027e9d53fa00cf608aaded6fbabc9ccd0eda37f188b2e848c9effd";
            };

            meta = {
              description = ''Blanka - Abinsthe Authorization'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/morochena/blanka";
            };
          } // packageOverrides)
      ) {};

    blanka = blanka_0_1_0;

    blankable_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blankable";
            version = "0.0.1";
            src = fetchHex {
              pkg = "blankable";
              version = "0.0.1";
              sha256 =
                "9d12554df14f50b410b54c911d6e34abcdd314df18fe75809378a71c02279e31";
            };

            meta = {
              longDescription = ''Implementation of `blank?` in Elixir. Aims to
                                work in a practically identical fashion to
                                ActiveSupport`s #blank? method.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sampdavies/blankable";
            };
          } // packageOverrides)
      ) {};

    blankable = blankable_0_0_1;

    blanket_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blanket";
            version = "1.0.0";
            src = fetchHex {
              pkg = "blanket";
              version = "1.0.0";
              sha256 =
                "1bd9d7b49bb30a3e787d0d6415db6c27525c959c210f22aa7c721dc7678b8b2b";
            };

            meta = {
              description = ''Don`t loose your ETS tables with Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/blanket";
            };
          } // packageOverrides)
      ) {};

    blanket = blanket_1_0_0;

    blast_furnace_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blast_furnace";
            version = "0.0.1";
            src = fetchHex {
              pkg = "blast_furnace";
              version = "0.0.1";
              sha256 =
                "361bff3352803779f481ce56662228825c74ef45d34d05c79df5f56a37a2adb2";
            };

            meta = {
              description = ''Elixir port of invaluable blast furnace
                            functionality'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/markryall/blast_furnace_exs";
            };
          } // packageOverrides)
      ) {};

    blast_furnace = blast_furnace_0_0_1;

    blazon_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blazon";
            version = "0.2.3";
            src = fetchHex {
              pkg = "blazon";
              version = "0.2.3";
              sha256 =
                "576ba30d9be9b765542ee560afdd0ccbbf095ff33edec32a1e2b0d29aa8f13ea";
            };

            meta = {
              description = ''Declarative abstract serializers.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/mtwilliams/blazon";
            };
          } // packageOverrides)
      ) {};

    blazon = blazon_0_2_3;

    blockchain_info_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "blockchain_info";
            version = "0.0.3";
            src = fetchHex {
              pkg = "blockchain_info";
              version = "0.0.3";
              sha256 =
                "252f25c345eb35b2e1e6fa50b788bd07dc66a50cf0a840978227282bece4b8cc";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              longDescription = ''WIP BlockchainInfo API wrapper for Elixir.
                                Provides access to bitcoin blockchain data.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/blockchain_info_ex";
            };
          } // packageOverrides)
      ) {};

    blockchain_info = blockchain_info_0_0_3;

    blockchain_parser_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blockchain_parser";
            version = "0.0.1";
            src = fetchHex {
              pkg = "blockchain_parser";
              version = "0.0.1";
              sha256 =
                "94ddd590e4e5b3145efd6042ec7c0c80cb5c5885148600c48218d11408123897";
            };

            meta = {
              description = ''A Bitcoin blockchain parser written in elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/natonnelier/blockchain_parser";
            };
          } // packageOverrides)
      ) {};

    blockchain_parser = blockchain_parser_0_0_1;

    blocking_queue_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blocking_queue";
            version = "1.3.0";
            src = fetchHex {
              pkg = "blocking_queue";
              version = "1.3.0";
              sha256 =
                "10f2b942a29f83c3bfef6285096d7f42028201c89f317c731e708b528a7fc17d";
            };

            meta = {
              longDescription = ''BlockingQueue is a simple queue implemented
                                as a GenServer. It has a fixed maximum length
                                established when it is created.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joekain/BlockingQueue";
            };
          } // packageOverrides)
      ) {};

    blocking_queue = blocking_queue_1_3_0;

    bloom_filter_1_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, fnv_0_3_2, math_0_3_0
        }:
          buildMix ({
            name = "bloom_filter";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bloom_filter";
              version = "1.0.1";
              sha256 =
                "324d819a3901c0318e9cea51cc4a5555cc15ad6243c7150676e6e1b76d7aa081";
            };
            beamDeps  = [ fnv_0_3_2 math_0_3_0 ];

            meta = {
              longDescription = ''Bloom Filter implementation in Elixir. Bloom
                                filters are probabilistic data structures
                                designed to efficiently tell you whether an
                                element is present in a set.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Leventhan/bloom_filter";
            };
          } // packageOverrides)
      ) {};

    bloom_filter = bloom_filter_1_0_1;

    bloomex_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bloomex";
            version = "1.0.3";
            src = fetchHex {
              pkg = "bloomex";
              version = "1.0.3";
              sha256 =
                "d4899ba63ca79b612cafba28cbfa765ef42991ed9cd06dce75fb12b78406157f";
            };

            meta = {
              description = ''Bloomex is a pure Elixir implementation of
                            Scalable Bloom Filters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/bloomex";
            };
          } // packageOverrides)
      ) {};

    bloomex = bloomex_1_0_3;

    blue_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blue";
            version = "0.1.1";
            src = fetchHex {
              pkg = "blue";
              version = "0.1.1";
              sha256 =
                "e73fbe0909b8ce831525aa5928d867f79aa65f5d6a4ca67f6e7f375cdead2c99";
            };

            meta = {
              description = ''Minimalist LISP abusing Elixir block syntax'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vic/blue";
            };
          } // packageOverrides)
      ) {};

    blue = blue_0_1_1;

    bluepay_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "bluepay";
            version = "0.4.1";
            src = fetchHex {
              pkg = "bluepay";
              version = "0.4.1";
              sha256 =
                "20d1df3353f666ff4b94a661fe9dc2e3f26651d2be68c77187df7d99344501e8";
            };
            beamDeps  = [ httpotion_3_1_0 uuid_1_1_8 ];

            meta = {
              description = ''Unofficial Elixir client for processing payments
                            through Bluepay.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SoundPays/bluepay-elixir";
            };
          } // packageOverrides)
      ) {};

    bluepay = bluepay_0_4_1;

    blueprint_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          graphvix_0_5_0,
          simple_markdown_0_5_3,
          simple_markdown_extension_cli_0_1_4
        }:
          buildMix ({
            name = "blueprint";
            version = "0.3.1";
            src = fetchHex {
              pkg = "blueprint";
              version = "0.3.1";
              sha256 =
                "3cbf3f4579caa1c5dd38d2341c3fb5c8bf60aeb219180f29b0e5d5965487fa0e";
            };
            beamDeps  = [
                          graphvix_0_5_0
                          simple_markdown_0_5_3
                          simple_markdown_extension_cli_0_1_4
                        ];

            meta = {
              description = ''A library to visualize various aspects of your
                            application'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/Blueprint";
            };
          } // packageOverrides)
      ) {};

    blueprint = blueprint_0_3_1;

    blume_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "blume";
            version = "0.1.1";
            src = fetchHex {
              pkg = "blume";
              version = "0.1.1";
              sha256 =
                "c9fc424593158b4b09b79307a590e061995e4f465d0ff6483c8ee0f280f86e7a";
            };

            meta = {
              description = ''Pure erlang bloom Filters'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Kyorai/blume";
            };
          } // packageOverrides)
      ) {};

    blume = blume_0_1_1;

    bmark_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bmark";
            version = "1.0.3";
            src = fetchHex {
              pkg = "bmark";
              version = "1.0.3";
              sha256 =
                "243b04d2e2431d01d93f442896d5e6ee52396782c161ef0a0e4f51a353393d93";
            };

            meta = {
              longDescription = ''A benchmarking tool for Elixir with a focus
                                on comparing results with confidence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joekain/bmark";
            };
          } // packageOverrides)
      ) {};

    bmark = bmark_1_0_3;

    bmfont_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tonic_0_0_2 }:
          buildMix ({
            name = "bmfont";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bmfont";
              version = "0.0.2";
              sha256 =
                "91e0f9c6e2838fec23feebde190c19f760914dc86add3e873232e66d6ef2ced3";
            };
            beamDeps  = [ tonic_0_0_2 ];

            meta = {
              description = ''A BMFont file format parser'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/BMFontEx";
            };
          } // packageOverrides)
      ) {};

    bmfont = bmfont_0_0_2;

    bno055_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_ale_0_7_0,
          gproc_0_8_0
        }:
          buildMix ({
            name = "bno055";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bno055";
              version = "0.0.1";
              sha256 =
                "07f97909748be55dc7e3f31b9fbf708c5b43e9ba229f82b674aaa0ad57f35ef6";
            };
            beamDeps  = [ elixir_ale_0_7_0 gproc_0_8_0 ];

            meta = {
              longDescription = ''OTP application for reading the BNO-055
                                absolute orientation sensor. Euler angles are
                                read at 20hz and published to a configured local
                                `gproc` property.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TattdCodeMonkey/bno055";
            };
          } // packageOverrides)
      ) {};

    bno055 = bno055_0_0_1;

    boardgamegeek_client_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exml_0_1_1,
          floki_0_17_2,
          html_sanitize_ex_1_3_0,
          httpotion_3_0_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "boardgamegeek_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "boardgamegeek_client";
              version = "0.1.0";
              sha256 =
                "4977e244d12437b3b967428fdd062e183c1163d485425593d486049211addda7";
            };
            beamDeps  = [
                          exml_0_1_1
                          floki_0_17_2
                          html_sanitize_ex_1_3_0
                          httpotion_3_0_3
                          poison_2_2_0
                        ];

            meta = {
              longDescription = ''An Elixir wrapper around the BoardGameGeek
                                XML API. Also scrapes some of the BoardGameGeek
                                HTML.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ElixirCLE/boardgamegeek_client";
            };
          } // packageOverrides)
      ) {};

    boardgamegeek_client = boardgamegeek_client_0_1_0;

    bom_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bom";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bom";
              version = "0.1.1";
              sha256 =
                "b77ad74dfb52ad333c335f0ea7c57ef51b36b0643c4306b3ef47daef6877fc15";
            };

            meta = {
              description = ''An elixir library for working with BOM (byte
                            order mark).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shufo/bom";
            };
          } // packageOverrides)
      ) {};

    bom = bom_0_1_1;

    bookish_spork_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bookish_spork";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bookish_spork";
              version = "0.1.0";
              sha256 =
                "e621a79c2291a4a7b37426280bfb00bc14b7b0e8f147c33ec48ab9f7aaa6f934";
            };

            meta = {
              description = ''Library for stubbing and setting expectations on
                            HTTP requests in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tank-bohr/bookish_spork";
            };
          } // packageOverrides)
      ) {};

    bookish_spork = bookish_spork_0_1_0;

    bootleg_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ssh_client_key_api_0_1_1,
          sshkit_0_0_3
        }:
          buildMix ({
            name = "bootleg";
            version = "0.7.0";
            src = fetchHex {
              pkg = "bootleg";
              version = "0.7.0";
              sha256 =
                "d24a235ff4fc6cff8b4f078063345ea6998c107b1aa6bc02fd6eab801f95aa71";
            };
            beamDeps  = [ ssh_client_key_api_0_1_1 sshkit_0_0_3 ];

            meta = {
              description = ''Simple deployment and server automation for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/labzero/bootleg";
            };
          } // packageOverrides)
      ) {};

    bootleg = bootleg_0_7_0;

    bootleg_phoenix_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bootleg_0_7_0 }:
          buildMix ({
            name = "bootleg_phoenix";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bootleg_phoenix";
              version = "0.2.0";
              sha256 =
                "509efd26216f3f89903d7fe60dc4470666e0fd1a6480173ede97024a707bf283";
            };
            beamDeps  = [ bootleg_0_7_0 ];

            meta = {
              description = ''Provides Phoenix-specific Bootleg tasks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/labzero/bootleg_phoenix";
            };
          } // packageOverrides)
      ) {};

    bootleg_phoenix = bootleg_phoenix_0_2_0;

    bootloader_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "bootloader";
            version = "0.1.3";
            src = fetchHex {
              pkg = "bootloader";
              version = "0.1.3";
              sha256 =
                "7d3727f37ae6bafe77d4ec038f9c82c95730716e538267082b151216a3dcbded";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              description = ''Bootloader for the Erlang VM'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/bootloader";
            };
          } // packageOverrides)
      ) {};

    bootloader = bootloader_0_1_3;

    borscht_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "borscht";
            version = "0.0.1";
            src = fetchHex {
              pkg = "borscht";
              version = "0.0.1";
              sha256 =
                "4d200599b90daad5d5b0a1bb5c6d50cb5e1be7ad8da4bb0ee460e78536c4cfb3";
            };
            beamDeps  = [ httpoison_1_2_0 jason_1_1_1 ];

            meta = {
              description = ''Plugin based exception reporting for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlueHotDog/borscht";
            };
          } // packageOverrides)
      ) {};

    borscht = borscht_0_0_1;

    botan_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "botan";
            version = "0.2.0";
            src = fetchHex {
              pkg = "botan";
              version = "0.2.0";
              sha256 =
                "e34d70e935e4a61b1e634f44566dc467529e039dfccdbb9ce8e9580a108ac264";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for Botan.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendab1e/exBotan";
            };
          } // packageOverrides)
      ) {};

    botan = botan_0_2_0;

    bowfish_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bowfish";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bowfish";
              version = "0.1.0";
              sha256 =
                "fcf3cccddd5d39adf5c5aceae924854d500f99bb45af97e118695db1cb633f67";
            };

            meta = {
              longDescription = ''A fun, positional pipe operator macro >>> for
                                when piping to the first arg just won`t cut
                                it.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coconaut/bowfish";
            };
          } // packageOverrides)
      ) {};

    bowfish = bowfish_0_1_0;

    bpmn_0_1_0_dev = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bpmn";
            version = "0.1.0-dev";
            src = fetchHex {
              pkg = "bpmn";
              version = "0.1.0-dev";
              sha256 =
                "8f040154d555a0a49d79dbe742ed239835debcd21c876de77c585d363528f90e";
            };

            meta = {
              description = ''A BPMN engine for elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/around25/hashiru-bpmn";
            };
          } // packageOverrides)
      ) {};

    bpmn = bpmn_0_1_0_dev;

    brainfux_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brainfux";
            version = "0.2.5";
            src = fetchHex {
              pkg = "brainfux";
              version = "0.2.5";
              sha256 =
                "8ab9d0767669e5afddc11c08ba47c1a0c9878604b754175098a5b8ced05c4144";
            };

            meta = {
              description = ''Brainfux enables you to define brainfuck function
                            in elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/SekiT/brainfux";
            };
          } // packageOverrides)
      ) {};

    brainfux = brainfux_0_2_5;

    braintree_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "braintree";
            version = "0.9.0";
            src = fetchHex {
              pkg = "braintree";
              version = "0.9.0";
              sha256 =
                "1175491242f3578df7bc1dad43484a2a974b44f513ffc6c2fd92c7c5f2d7003e";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Native Braintree client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sorentwo/braintree-elixir";
            };
          } // packageOverrides)
      ) {};

    braintree = braintree_0_9_0;

    braise_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_7_0,
          poison_1_3_1
        }:
          buildMix ({
            name = "braise";
            version = "0.4.0";
            src = fetchHex {
              pkg = "braise";
              version = "0.4.0";
              sha256 =
                "b5ea0c5148e1e25f8addb909d04b698ab2c297e5359c95624ca5ad48148329c4";
            };
            beamDeps  = [ inflex_1_7_0 poison_1_3_1 ];

            meta = {
              description = ''A library that converts JSON Schema into ember
                            models/adapters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IoraHealth/braise";
            };
          } // packageOverrides)
      ) {};

    braise = braise_0_4_0;

    brando_villain_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brando_villain";
            version = "0.1.1";
            src = fetchHex {
              pkg = "brando_villain";
              version = "0.1.1";
              sha256 =
                "d0aac919270633a147ad844bd55a8167c7dd2cd2efa877f09a2211637595936e";
            };

            meta = {
              description = ''Package for including Villain in Brando projects
                            through NPM.'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    brando_villain = brando_villain_0_1_1;

    brcpfcnpj_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brcpfcnpj";
            version = "0.1.0";
            src = fetchHex {
              pkg = "brcpfcnpj";
              version = "0.1.0";
              sha256 =
                "19ba4d572c93c70d571a36d6ada2fca4d03330d8f96c6b7d8e4c47fa9f809c90";
            };

            meta = {
              longDescription = ''Valida Cpf/Cnpj e Formatar em String caso
                                necessario Number format and Validate, to the
                                documents brazilians (CPF/CNPJ)'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/williamgueiros/Brcpfcnpj";
            };
          } // packageOverrides)
      ) {};

    brcpfcnpj = brcpfcnpj_0_1_0;

    breaker_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_3_0_3 }:
          buildMix ({
            name = "breaker";
            version = "1.0.0";
            src = fetchHex {
              pkg = "breaker";
              version = "1.0.0";
              sha256 =
                "f56ef1ebb80072be41a4864a19a4261ec7a815a612bb823de2def4945681aa73";
            };
            beamDeps  = [ httpotion_3_0_3 ];

            meta = {
              description = ''A circuit breaker for HTTP requests to external
                            services in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awochna/breaker";
            };
          } // packageOverrides)
      ) {};

    breaker = breaker_1_0_0;

    brex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "brex";
              version = "0.1.0";
              sha256 =
                "9cb1c7dfa7c9774feb14131122b0efb3efff09e05617c345964935f9fd5004cb";
            };

            meta = {
              description = ''A Specification Pattern implementation in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Zeeker/brex";
            };
          } // packageOverrides)
      ) {};

    brex = brex_0_1_0;

    briefly_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "briefly";
            version = "0.3.0";
            src = fetchHex {
              pkg = "briefly";
              version = "0.3.0";
              sha256 =
                "c6ebf8fc3dcd4950dd10c03e953fb4f553a8bcf0ff4c8c40d71542434cd7e046";
            };

            meta = {
              description = ''Simple, robust temporary file support'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/CargoSense/briefly";
            };
          } // packageOverrides)
      ) {};

    briefly = briefly_0_3_0;

    bristow_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bristow";
            version = "0.2.2";
            src = fetchHex {
              pkg = "bristow";
              version = "0.2.2";
              sha256 =
                "13dcfc7dd9c47796edfd0fe1e95c22cd509beee4ce64ab8d7cf487fbfc415a11";
            };

            meta = {
              description = ''Create function`s alias'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/bristow";
            };
          } // packageOverrides)
      ) {};

    bristow = bristow_0_2_2;

    brod_2_4_1 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_0_9_2,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "2.4.1";
            src = fetchHex {
              pkg = "brod";
              version = "2.4.1";
              sha256 =
                "a8400515f599f11991e1525901e9d390e2a836eebcaec59bbd754d803a027b3a";
            };
            beamDeps  = [ kafka_protocol_0_9_2 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod_2_5_0 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_0_9_2,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "2.5.0";
            src = fetchHex {
              pkg = "brod";
              version = "2.5.0";
              sha256 =
                "e1a8eeaeedabb8a091f592a285420fe657b2cbc2d5604878d8ef11a2605c866b";
            };
            beamDeps  = [ kafka_protocol_0_9_2 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod_3_0_0 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_1_0_0,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "3.0.0";
            src = fetchHex {
              pkg = "brod";
              version = "3.0.0";
              sha256 =
                "55460809b59254813c1d2d37048e373506cb9b524c31cb72aaa14c53e6111c53";
            };
            beamDeps  = [ kafka_protocol_1_0_0 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod_3_3_4 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_1_1_1,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "3.3.4";
            src = fetchHex {
              pkg = "brod";
              version = "3.3.4";
              sha256 =
                "980dab238de274927d0f3cabd37f2fa657d43d056004b327e21d226d9f549ad9";
            };
            beamDeps  = [ kafka_protocol_1_1_1 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod_3_4_0 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_1_1_2,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "3.4.0";
            src = fetchHex {
              pkg = "brod";
              version = "3.4.0";
              sha256 =
                "ba555fc1dc3324c7f705c07e0785b395f9a1254089b064e88107462ca5b94f9d";
            };
            beamDeps  = [ kafka_protocol_1_1_2 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod_3_5_1 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_1_1_2,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "3.5.1";
            src = fetchHex {
              pkg = "brod";
              version = "3.5.1";
              sha256 =
                "661be6a0f1bc6857b5e41e11560ce29cc2e05deabf82d37eeeb215125b2bd73f";
            };
            beamDeps  = [ kafka_protocol_1_1_2 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod = brod_3_5_1;

    brod_ex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, brod_3_0_0 }:
          buildMix ({
            name = "brod_ex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "brod_ex";
              version = "0.1.2";
              sha256 =
                "0da771801d156a442049e8b4c43c21bb80bdf355ec63955189292c089ae53f55";
            };
            beamDeps  = [ brod_3_0_0 ];

            meta = {
              description = ''Brod wrapper for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/moranmathias/brod_ex";
            };
          } // packageOverrides)
      ) {};

    brod_ex = brod_ex_0_1_2;

    brotorift_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ranch_1_5_0 }:
          buildMix ({
            name = "brotorift";
            version = "0.3.3";
            src = fetchHex {
              pkg = "brotorift";
              version = "0.3.3";
              sha256 =
                "b0417a48d0dbfb1b6e4b55fd9fef7534c8477fe312ec06b922ae12f415fe2dd2";
            };
            beamDeps  = [ ranch_1_5_0 ];

            meta = {
              description = ''Server Brotorift runtime for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CDR2003/BrotoriftElixir";
            };
          } // packageOverrides)
      ) {};

    brotorift = brotorift_0_3_3;

    browser_lang_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "browser_lang";
            version = "0.1.0";
            src = fetchHex {
              pkg = "browser_lang";
              version = "0.1.0";
              sha256 =
                "26d82ea1f457218b63ef457dba8c215e664c5bb87eb1fedacb453776d2eeb4e2";
            };

            meta = {
              description = ''Http language and locale headers parse
                            functions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/h8/browser_lang";
            };
          } // packageOverrides)
      ) {};

    browser_lang = browser_lang_0_1_0;

    brute_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brute";
            version = "0.1.0";
            src = fetchHex {
              pkg = "brute";
              version = "0.1.0";
              sha256 =
                "22cbdb0c8ef1796626554824dbf3177b7670961f4c41a85bf3786eacb2755868";
            };

            meta = {
              longDescription = ''Brute is a package that generates various
                                combinations for a provided character-set.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/uri/brute";
            };
          } // packageOverrides)
      ) {};

    brute = brute_0_1_0;

    bson_erlang_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bson_erlang";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bson_erlang";
              version = "0.3.0";
              sha256 =
                "aa205cb4a245c52c09c8ae68d49ead09e0ef78662303bdd963444f10592b6571";
            };

            meta = {
              longDescription = ''BSON are JSON-like objects with a standard
                                binary serialization. See bsonspec.org'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/filmor/bson-erlang";
            };
          } // packageOverrides)
      ) {};

    bson_erlang = bson_erlang_0_3_0;

    bsoneach_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bsoneach";
            version = "0.4.1";
            src = fetchHex {
              pkg = "bsoneach";
              version = "0.4.1";
              sha256 =
                "f2fa746808e41198375c364af5d77f48af0cd0444fd81e42ad907a557a05573b";
            };

            meta = {
              description = ''Applies a function to each document in a BSON
                            file.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/bsoneach";
            };
          } // packageOverrides)
      ) {};

    bsoneach = bsoneach_0_4_1;

    bstr_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bstr";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bstr";
              version = "0.3.0";
              sha256 =
                "0fb4e05619663d48dabcd21023915741277ba392f2a5710dde7ab6034760284d";
            };

            meta = {
              description = ''Erlang library that uses binaries as strings'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/jcomellas/bstr";
            };
          } // packageOverrides)
      ) {};

    bstr = bstr_0_3_0;

    btctool_0_7_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, area58check_0_1_1
        }:
          buildMix ({
            name = "btctool";
            version = "0.7.0";
            src = fetchHex {
              pkg = "btctool";
              version = "0.7.0";
              sha256 =
                "43df393d6252519f4b1d88c5ab1de18101f2249af165533ee76ac9f42beb5d5d";
            };
            beamDeps  = [ area58check_0_1_1 ];

            meta = {
              longDescription = ''Bitcoin utils related to Elliptic curve
                                cryptography (ECC) algorithms used in bitcoin to
                                create addresses or public keys from private
                                keys, brainwallets, WIFs, etc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ihinojal/btctool";
            };
          } // packageOverrides)
      ) {};

    btctool = btctool_0_7_0;

    btrz_ex_health_checker_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          postgrex_0_13_5
        }:
          buildMix ({
            name = "btrz_ex_health_checker";
            version = "0.2.1";
            src = fetchHex {
              pkg = "btrz_ex_health_checker";
              version = "0.2.1";
              sha256 =
                "496c486f77d6973026442f520e7d84136be4387ba2ed043bf633a4ed570f3fb5";
            };
            beamDeps  = [ httpoison_1_2_0 postgrex_0_13_5 ];

            meta = {
              description = ''Elixir health checker for checking the status of
                            your services'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Betterez/btrz_ex_health_checker";
            };
          } // packageOverrides)
      ) {};

    btrz_ex_health_checker = btrz_ex_health_checker_0_2_1;

    btrz_webhooks_denied_fields_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "btrz_webhooks_denied_fields";
            version = "0.1.1";
            src = fetchHex {
              pkg = "btrz_webhooks_denied_fields";
              version = "0.1.1";
              sha256 =
                "9a61b75e0be587bef889665338400050839460cb578717a01a28ccf96583d3d9";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Denied fields for Betterez webhooks'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Betterez/btrz_webhooks_denied_fields";
            };
          } // packageOverrides)
      ) {};

    btrz_webhooks_denied_fields = btrz_webhooks_denied_fields_0_1_1;

    bucs_1_0_16 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bucs";
            version = "1.0.16";
            src = fetchHex {
              pkg = "bucs";
              version = "1.0.16";
              sha256 =
                "ff6a5c72a500ad7aec1ee3ba164ae3c450eadee898b0d151e1faca18ac8d0d62";
            };

            meta = {
              description = ''Bots Unit Commons'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/bucs";
            };
          } // packageOverrides)
      ) {};

    bucs = bucs_1_0_16;

    buffer_0_3_12 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "buffer";
            version = "0.3.12";
            src = fetchHex {
              pkg = "buffer";
              version = "0.3.12";
              sha256 =
                "7fb96b3a56122736648405a31fa4e689a7881040f70bafcec1203bb25c11b60e";
            };

            meta = {
              description = ''Provide read and write buffers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/buffer";
            };
          } // packageOverrides)
      ) {};

    buffer = buffer_0_3_12;

    bufu_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "bufu";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bufu";
              version = "0.2.0";
              sha256 =
                "fcba1f7cafa327e4ba811092844e96e0542906ea8d34d28ac11d10672fc3d17d";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_1_0 ];

            meta = {
              description = ''Giant Bomb API client library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulfri/bufu";
            };
          } // packageOverrides)
      ) {};

    bufu = bufu_0_2_0;

    bugsnag_elixir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "bugsnag_elixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bugsnag_elixir";
              version = "0.1.0";
              sha256 =
                "145b6d0eaa3c2a7c9ad3e04d6a4ad4c34eb36b14b12da69e1c922290060388d9";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Error reporter for Bugsnag API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukkor/bugsnag-elixir";
            };
          } // packageOverrides)
      ) {};

    bugsnag_elixir = bugsnag_elixir_0_1_0;

    build_client_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "build_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "build_client";
              version = "0.0.1";
              sha256 =
                "ee28ca64db404b76316fa578f30888b7725cbde91d6f89fa7dfc384a32b9c095";
            };

            meta = {
              description = ''AX Deployment Client'';

              homepage = "https://github.com/dapdizzy/build_client";
            };
          } // packageOverrides)
      ) {};

    build_client = build_client_0_0_1;

    bun2_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bun2";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bun2";
              version = "0.1.0";
              sha256 =
                "b045e772aabaaf0a313ecf82e5e0d8f1d2adc1ab2c99167fe180578c58540f22";
            };

            meta = {
              description = ''A Bot Framework written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jit-y/bun2";
            };
          } // packageOverrides)
      ) {};

    bun2 = bun2_0_1_0;

    bundler_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bundler";
            version = "0.6.0";
            src = fetchHex {
              pkg = "bundler";
              version = "0.6.0";
              sha256 =
                "c3c8c78c50b487c69b3895e3266314c314878fd733f59d1fda10fe09dca632fa";
            };

            meta = {
              longDescription = ''Build releases of your Mix projects with
                                ease! WARNING: This package is an experimental
                                replacement for exrm, use at your own risk!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/bundler";
            };
          } // packageOverrides)
      ) {};

    bundler = bundler_0_6_0;

    bundlex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, porcelain_2_0_3 }:
          buildMix ({
            name = "bundlex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bundlex";
              version = "0.1.1";
              sha256 =
                "b1a18541f666c1b2467684ea5c92f3c3e2b87eb06c13b7e079490ece04c7c3f1";
            };
            beamDeps  = [ porcelain_2_0_3 ];

            meta = {
              description = ''Bundlex Multi-Platform build system for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/membraneframework/bundlex";
            };
          } // packageOverrides)
      ) {};

    bundlex = bundlex_0_1_1;

    bungee_1_0_0_alpha6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          poison_3_1_0,
          tesla_0_9_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "bungee";
            version = "1.0.0-alpha6";
            src = fetchHex {
              pkg = "bungee";
              version = "1.0.0-alpha6";
              sha256 =
                "1e702e00c78ef3b7d629a964112732668e4f421f04ce4aa06d4f65d41249de1b";
            };
            beamDeps  = [ hackney_1_13_0 poison_3_1_0 tesla_0_9_0 uuid_1_1_8
                      ];

            meta = {
              description = ''Elasticsearch Client with Repository
                            implementation'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    bungee = bungee_1_0_0_alpha6;

    bunny_2_4_2018 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, benchee_0_13_1 }:
          buildMix ({
            name = "bunny";
            version = "2.4.2018";
            src = fetchHex {
              pkg = "bunny";
              version = "2.4.2018";
              sha256 =
                "62bf672938f47c83544f5cd6e312bf4356e1913b8c127eb426c1cc671e967b61";
            };
            beamDeps  = [ benchee_0_13_1 ];

            meta = {
              longDescription = ''This was an april`s fools joke of a
                                benchmarking library. It`ll remain functional
                                though.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/bunny";
            };
          } // packageOverrides)
      ) {};

    bunny = bunny_2_4_2018;

    bunq_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bunq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bunq";
              version = "0.0.1";
              sha256 =
                "4b7f06a7b252bd3c8e40128be6763b8f8f1036161e81f4c3365245a4b3da249c";
            };

            meta = {
              description = ''Placeholder package'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    bunq = bunq_0_0_1;

    bunt_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bunt";
            version = "0.1.6";
            src = fetchHex {
              pkg = "bunt";
              version = "0.1.6";
              sha256 =
                "4fb7b2f7b04af13cf210b132f8d10db52d4a57d36cb974e8025d7fdb12ca97fc";
            };

            meta = {
              description = ''256 color ANSI coloring in the terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/bunt";
            };
          } // packageOverrides)
      ) {};

    bunt_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bunt";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bunt";
              version = "0.2.0";
              sha256 =
                "7af5c7e09fe1d40f76c8e4f9dd2be7cebd83909f31fee7cd0e9eadc567da8353";
            };

            meta = {
              description = ''256 color ANSI coloring in the terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/bunt";
            };
          } // packageOverrides)
      ) {};

    bunt = bunt_0_2_0;

    buoy_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, shackle_0_5_1 }:
          buildRebar3 ({
            name = "buoy";
            version = "0.1.2";
            src = fetchHex {
              pkg = "buoy";
              version = "0.1.2";
              sha256 =
                "b070bb79e7b0299dfd1ce8734068ccc0832d4fabc28a5676e9a70f333c6070df";
            };

            beamDeps  = [ shackle_0_5_1 ];

            meta = {
              description = ''High Performance Erlang HTTP 1.1 Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/buoy";
            };
          } // packageOverrides)
      ) {};

    buoy = buoy_0_1_2;

    bupe_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bupe";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bupe";
              version = "0.3.0";
              sha256 =
                "138e9eb64bf82d2b0878e6b0aac9b69a6f5eba972812614f508c827958064f6a";
            };

            meta = {
              description = ''EPUB Generator and Parser'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/milmazz/bupe";
            };
          } // packageOverrides)
      ) {};

    bupe = bupe_0_3_0;

    burnex_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "burnex";
            version = "1.0.3";
            src = fetchHex {
              pkg = "burnex";
              version = "1.0.3";
              sha256 =
                "e453c1710cfccdbccda0981babb2365ed763a1e097c01fcee1ac5eee365d3564";
            };

            meta = {
              description = ''Elixir burner email (temporary address)
                            detector'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Betree/burnex";
            };
          } // packageOverrides)
      ) {};

    burnex = burnex_1_0_3;

    bus_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bus";
            version = "0.1.4";
            src = fetchHex {
              pkg = "bus";
              version = "0.1.4";
              sha256 =
                "c3251e42c530021d2df7f11bef2b46d93f294646ccff45734959e0f0ee693e85";
            };

            meta = {
              longDescription = ''Bus is Mqtt client written in elixir. It aims
                                to be dafecto mqtt client for elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/i-m-v-j/Bus";
            };
          } // packageOverrides)
      ) {};

    bus = bus_0_1_4;

    bus_bar_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bus_bar";
            version = "0.0.4";
            src = fetchHex {
              pkg = "bus_bar";
              version = "0.0.4";
              sha256 =
                "931af0b55b5a9e77c3d0c86a7ca6da6e9af6024aabac9809d242825b674d8214";
            };

            meta = {
              description = ''A simple event bus.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonRowe/busbar";
            };
          } // packageOverrides)
      ) {};

    bus_bar = bus_bar_0_0_4;

    bus_car_dsl_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bus_car_dsl";
            version = "0.1.4";
            src = fetchHex {
              pkg = "bus_car_dsl";
              version = "0.1.4";
              sha256 =
                "0e0fdcf1eba7c4a670b150177e9c34290276b8b9ac5c2ff33615e68d09bd8414";
            };

            meta = {
              longDescription = ''A Domain Specific Language for composing
                                ElasticSearch queries without all the
                                nesting.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/bus_car_dsl";
            };
          } // packageOverrides)
      ) {};

    bus_car_dsl = bus_car_dsl_0_1_4;

    cabbage_0_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gherkin_1_6_0 }:
          buildMix ({
            name = "cabbage";
            version = "0.3.5";
            src = fetchHex {
              pkg = "cabbage";
              version = "0.3.5";
              sha256 =
                "835710217991549eed6bafdda11b8ae6ab82c5bed52128a55b9c313642837cf9";
            };
            beamDeps  = [ gherkin_1_6_0 ];

            meta = {
              description = ''Story BDD tool for executing elixir in ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabbage-ex/cabbage";
            };
          } // packageOverrides)
      ) {};

    cabbage = cabbage_0_3_5;

    cabo_cha_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_20_3 }:
          buildMix ({
            name = "cabo_cha";
            version = "1.0.1";
            src = fetchHex {
              pkg = "cabo_cha";
              version = "1.0.1";
              sha256 =
                "e30591dbbd50ccc71c028cc6cf1577ef0b6b6edc7955bccf1220f6f098e09d1b";
            };
            beamDeps  = [ floki_0_20_3 ];

            meta = {
              description = ''Elixir bindings for CaboCha, a Japanese
                            dependency structure analyzer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sa2taka/CaboCha-Elixir";
            };
          } // packageOverrides)
      ) {};

    cabo_cha = cabo_cha_1_0_1;

    cache_2_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cache";
            version = "2.2.0";
            src = fetchHex {
              pkg = "cache";
              version = "2.2.0";
              sha256 =
                "3e7d6706de5df76c4d71c895b4be62b01c3de6edb63197035e465c3bce63f19b";
            };

            meta = {
              description = ''in-memory cache'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/fogfish/cache";
            };
          } // packageOverrides)
      ) {};

    cache = cache_2_2_0;

    cache_money_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_6_1 }:
          buildMix ({
            name = "cache_money";
            version = "0.3.0";
            src = fetchHex {
              pkg = "cache_money";
              version = "0.3.0";
              sha256 =
                "469c03cedeb7fb8aa0037c13f5c19246b097e429ddf0630fce7e244ba2b88fe1";
            };
            beamDeps  = [ redix_0_6_1 ];

            meta = {
              description = ''ETS or Redis based caching for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sgtpepper43/cache_money";
            };
          } // packageOverrides)
      ) {};

    cache_money = cache_money_0_3_0;

    cachex_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eternal_1_2_0 }:
          buildMix ({
            name = "cachex";
            version = "2.1.0";
            src = fetchHex {
              pkg = "cachex";
              version = "2.1.0";
              sha256 =
                "20de7299ff4383bab07f06b0b228762041454935d1e25ca5cc2088876a5a2044";
            };
            beamDeps  = [ eternal_1_2_0 ];

            meta = {
              description = ''Powerful in-memory key/value storage for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whitfin/cachex";
            };
          } // packageOverrides)
      ) {};

    cachex_3_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eternal_1_2_0,
          unsafe_1_0_0
        }:
          buildMix ({
            name = "cachex";
            version = "3.0.2";
            src = fetchHex {
              pkg = "cachex";
              version = "3.0.2";
              sha256 =
                "9ad2eaca8e7b0fb3df5b9eac595c7cd7614d6f3655dcb0bd156f632f3714b07c";
            };
            beamDeps  = [ eternal_1_2_0 unsafe_1_0_0 ];

            meta = {
              description = ''Powerful in-memory key/value storage for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whitfin/cachex";
            };
          } // packageOverrides)
      ) {};

    cachex = cachex_3_0_2;

    caffeine_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "caffeine";
            version = "1.2.0";
            src = fetchHex {
              pkg = "caffeine";
              version = "1.2.0";
              sha256 =
                "a8a19778ab8865f93eb600cef62e206c386af4078b2056a738e382cc0cc128d7";
            };

            meta = {
              description = ''A stream library with an emphasis on
                            simplicity'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/Dzol/caffeine/";
            };
          } // packageOverrides)
      ) {};

    caffeine = caffeine_1_2_0;

    calc_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "calc";
            version = "1.0.0";
            src = fetchHex {
              pkg = "calc";
              version = "1.0.0";
              sha256 =
                "7ae75a88edf51902cacf1f2bed241d5be07605516b3d14f9d6a401d4ad2b3139";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Calculator'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Cappuccinuo/Elixir-and-Phoenix/tree/master/calc";
            };
          } // packageOverrides)
      ) {};

    calc = calc_1_0_0;

    calendar_espec_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, espec_1_5_1 }:
          buildMix ({
            name = "calendar_espec";
            version = "0.1.1";
            src = fetchHex {
              pkg = "calendar_espec";
              version = "0.1.1";
              sha256 =
                "83235857dcf122ce5023963398fca1bd72d5486733bc543f3a562a2e7d54a928";
            };
            beamDeps  = [ espec_1_5_1 ];

            meta = {
              description = ''Assertions for date/time types.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bozydar/calendar_espec";
            };
          } // packageOverrides)
      ) {};

    calendar_espec = calendar_espec_0_1_1;

    callbackex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "callbackex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "callbackex";
              version = "0.1.1";
              sha256 =
                "770b38c8a16faa0263b1438486cdfc4dcd68a6bb9b95978440128bda254a3eb5";
            };

            meta = {
              description = ''Define and execute callbacks with ease in
                            Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/secretworry/callbackex";
            };
          } // packageOverrides)
      ) {};

    callbackex = callbackex_0_1_1;

    calliope_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "calliope";
            version = "0.3.0";
            src = fetchHex {
              pkg = "calliope";
              version = "0.3.0";
              sha256 =
                "0a0ccf87616459c36ff1f1551701da38485eb601500e74cffd7e42fe9862f74d";
            };

            meta = {
              description = ''An Elixir library for parsing haml templates.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/calliope";
            };
          } // packageOverrides)
      ) {};

    calliope_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "calliope";
            version = "0.4.2";
            src = fetchHex {
              pkg = "calliope";
              version = "0.4.2";
              sha256 =
                "3e355b0057ce52e402172e3f37f739765450b9c7ec18bf84c56c12007363283c";
            };

            meta = {
              description = ''An Elixir library for parsing haml templates.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/calliope";
            };
          } // packageOverrides)
      ) {};

    calliope = calliope_0_4_2;

    campaigner_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_1_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "campaigner";
            version = "0.1.2";
            src = fetchHex {
              pkg = "campaigner";
              version = "0.1.2";
              sha256 =
                "86066599870a31ace00b42eb5184feacbd2c92831d48c84a03e1668201556ed2";
            };
            beamDeps  = [ httpoison_1_1_1 poison_2_2_0 ];

            meta = {
              description = ''Campaigner REST API Wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sidcpatel/campaigner";
            };
          } // packageOverrides)
      ) {};

    campaigner = campaigner_0_1_2;

    can_i_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "can_i";
            version = "0.1.1";
            src = fetchHex {
              pkg = "can_i";
              version = "0.1.1";
              sha256 =
                "55aeb8e021b2db522c24fbd3868e1337aab0e1a15c1d19cba8a50f09e8d2bedd";
            };

            meta = {
              description = ''A small and simple authorization system for
                            Elixir based applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wizardone/can_i.git";
            };
          } // packageOverrides)
      ) {};

    can_i = can_i_0_1_1;

    canada_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "canada";
            version = "1.0.2";
            src = fetchHex {
              pkg = "canada";
              version = "1.0.2";
              sha256 =
                "4269f74153fe89583fe50bd4d5de57bfe01f31258a6b676d296f3681f1483c68";
            };

            meta = {
              description = ''A DSL for declarative permissions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/canada";
            };
          } // packageOverrides)
      ) {};

    canada = canada_1_0_2;

    canada_sin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "canada_sin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "canada_sin";
              version = "0.1.0";
              sha256 =
                "0d027354d08bbd6f2d9562020cb7174ac8918fa85f2c8ee693c90ba5d7749f84";
            };

            meta = {
              description = ''Elixir package that validates a Canadian SIN and
                            can get the SIN`s province'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicklayb/canada_sin";
            };
          } // packageOverrides)
      ) {};

    canada_sin = canada_sin_0_1_0;

    canvas_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, wx_utils_0_0_2 }:
          buildMix ({
            name = "canvas";
            version = "0.0.1";
            src = fetchHex {
              pkg = "canvas";
              version = "0.0.1";
              sha256 =
                "79701ec91af3f427c6c28522ca19fcc930fd955bd48458d6d316e19b7b0cd2be";
            };
            beamDeps  = [ wx_utils_0_0_2 ];

            meta = {
              description = ''A library for building simple GUI canvases to
                            draw on.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JEG2/canvas";
            };
          } // packageOverrides)
      ) {};

    canvas = canvas_0_0_1;

    canvas_native_1_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "canvas_native";
            version = "1.1.4";
            src = fetchHex {
              pkg = "canvas_native";
              version = "1.1.4";
              sha256 =
                "5cacfe28ef8c09a3444a196a38ec4c2541de7096ebcb4c6268939819632c93a2";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              longDescription = ''CanvasNative is a format used to describe
                                documents on the canvas platform. This library
                                provides modules for parsing and formatting the
                                CanvasNative format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usecanvas/canvas-native-ex";
            };
          } // packageOverrides)
      ) {};

    canvas_native = canvas_native_1_1_4;

    captcha_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "captcha";
            version = "0.1.0";
            src = fetchHex {
              pkg = "captcha";
              version = "0.1.0";
              sha256 =
                "40a18e1ce2ed9464cbd2c938f35534f8a5b1a0b6bf5a6682c4ceb92ecba762eb";
            };

            meta = {
              longDescription = ''This is a Elixir lib for generating captcha.
                                No dependencies. It drawing captcha image with C
                                code. No ImageMagick, No RMagick.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davidqhr/elixir-captcha";
            };
          } // packageOverrides)
      ) {};

    captcha = captcha_0_1_0;

    capture_child_io_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "capture_child_io";
            version = "0.1.0";
            src = fetchHex {
              pkg = "capture_child_io";
              version = "0.1.0";
              sha256 =
                "95824da786ca5962b547c33b5e1b13269bc8fe6c322a31543d8ce874b625454e";
            };

            meta = {
              description = ''Capture child processes` :stdio in tests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/capture_child_io";
            };
          } // packageOverrides)
      ) {};

    capture_child_io = capture_child_io_0_1_0;

    capuli_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_19_3 }:
          buildMix ({
            name = "capuli";
            version = "0.3.0";
            src = fetchHex {
              pkg = "capuli";
              version = "0.3.0";
              sha256 =
                "9340548b34ccc0d7298695dbbccd8748bb02f84b7493b11932ed0fcafc595a22";
            };
            beamDeps  = [ floki_0_19_3 ];

            meta = {
              description = ''Declarative XML parsing library backed by
                            Floki'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/merongivian/capuli";
            };
          } // packageOverrides)
      ) {};

    capuli = capuli_0_3_0;

    carafe_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_3_5 }:
          buildMix ({
            name = "carafe";
            version = "0.2.0";
            src = fetchHex {
              pkg = "carafe";
              version = "0.2.0";
              sha256 =
                "e30a6b82e88debb22940432d6dc77c39b115806624d5d9060828fc8abb03eb48";
            };
            beamDeps  = [ distillery_1_3_5 ];

            meta = {
              description = ''Deployment for Elixir applications, using
                            capistrano'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schnittchen/carafe";
            };
          } // packageOverrides)
      ) {};

    carafe = carafe_0_2_0;

    caravan_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, libcluster_2_5_0 }:
          buildMix ({
            name = "caravan";
            version = "0.6.0";
            src = fetchHex {
              pkg = "caravan";
              version = "0.6.0";
              sha256 =
                "8b16c60eeed84799c4bd5568df35a3cb50584285677103250ec848e940d42c72";
            };
            beamDeps  = [ libcluster_2_5_0 ];

            meta = {
              description = ''Tools for running Distributed Elixir with Nomad
                            and Consul'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uberbrodt/caravan";
            };
          } // packageOverrides)
      ) {};

    caravan = caravan_0_6_0;

    cards_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "cards";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cards";
              version = "0.1.0";
              sha256 =
                "cc636f1266326d9187add200f1a5e9a7b8c27ce74bee183870a0b4af2180e626";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              longDescription = ''My first elixir code for developing cards
                                module that include functions that create and
                                handle deck cards'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/msalahz/elixir-cards";
            };
          } // packageOverrides)
      ) {};

    cards = cards_0_1_0;

    carla_test_helper_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "carla_test_helper";
            version = "0.1.7";
            src = fetchHex {
              pkg = "carla_test_helper";
              version = "0.1.7";
              sha256 =
                "a280c1f90f95d11e99198330465e38ebe738c97cf759358610f0ddc884eb7a9a";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''This repo contains a testing library used in
                                Carla end-to-end tests. It provides a library to
                                describe and test conversations.'';

              homepage = "https://github.com/Revmaker/carla-test-helper";
            };
          } // packageOverrides)
      ) {};

    carla_test_helper = carla_test_helper_0_1_7;

    carlabs_test_helper_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "carlabs_test_helper";
            version = "0.1.2";
            src = fetchHex {
              pkg = "carlabs_test_helper";
              version = "0.1.2";
              sha256 =
                "09c81e5e50fe8b180b83eb0041b65e7dd48239d224d7e02ad28d7c8d3f2ddcd1";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''This repo contains a testing library used in
                                Carla end-to-end tests. It provides a library to
                                describe and test conversations.'';

              homepage = "https://github.com/Revmaker/carla-test-helper";
            };
          } // packageOverrides)
      ) {};

    carlabs_test_helper = carlabs_test_helper_0_1_2;

    carselector_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "carselector";
            version = "0.1.1";
            src = fetchHex {
              pkg = "carselector";
              version = "0.1.1";
              sha256 =
                "769cc086ad289aaa9434be911e0d1b743253a433fe3b34a2b9916a14f626e40f";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A client for the CarSelector API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/fewlinesco/carselector_client-elixir";
            };
          } // packageOverrides)
      ) {};

    carselector = carselector_0_1_1;

    cartel_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_2_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "cartel";
            version = "0.7.0";
            src = fetchHex {
              pkg = "cartel";
              version = "0.7.0";
              sha256 =
                "bf036940ff5195d7d87412afaf4e9c6def4737c66fee34790389aa5e3ebf766b";
            };
            beamDeps  = [ httpotion_3_0_3 poison_2_2_0 poolboy_1_5_1 ];

            meta = {
              description = ''Multi platform, multi app push notifications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucacorti/cartel";
            };
          } // packageOverrides)
      ) {};

    cartel = cartel_0_7_0;

    cartel_http_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "cartel_http";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cartel_http";
              version = "0.1.1";
              sha256 =
                "7acedb56c4e28392afa346637231fb2c81aa8688425715f7b0ca2f464ca260f7";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Elixir HTTP client forked from HTTPoison'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryanwinchester/cartel";
            };
          } // packageOverrides)
      ) {};

    cartel_http = cartel_http_0_1_1;

    cartograf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cartograf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cartograf";
              version = "0.1.0";
              sha256 =
                "3191c876a152c5ec1fb5fd70ed6b66252083f2b9d1fe673795e79852f680fe5e";
            };

            meta = {
              description = ''A set of macros to help facilitate
                            struct-to-struct field mapping.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Herlitzd/cartograf";
            };
          } // packageOverrides)
      ) {};

    cartograf = cartograf_0_1_0;

    cartographer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cartographer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cartographer";
              version = "0.0.1";
              sha256 =
                "8f070615ca221b94a22e846303a3b9cc7ae31c2dea5c3d8f39a116f0d8c4b18f";
            };

            meta = {
              description = ''Geohash algorithm implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/afronski/cartographer";
            };
          } // packageOverrides)
      ) {};

    cartographer = cartographer_0_0_1;

    cashier_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_11_0,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "cashier";
            version = "0.4.0";
            src = fetchHex {
              pkg = "cashier";
              version = "0.4.0";
              sha256 =
                "def98d081c745d87065c022a4b600110205dcd84d23f2b080cffa779d24191f3";
            };
            beamDeps  = [ gen_stage_0_11_0 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''Cashier is an Elixir library that aims to be
                                an easy to use payment gateway, whilst offering
                                the fault tolerance and scalability benefits of
                                being built on top of Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swelham/cashier";
            };
          } // packageOverrides)
      ) {};

    cashier = cashier_0_4_0;

    caspax_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "caspax";
            version = "0.1.1";
            src = fetchHex {
              pkg = "caspax";
              version = "0.1.1";
              sha256 =
                "274913b29f28ca108ab2b854d46f99330954c021aa5ca6123a7564750fab833a";
            };

            meta = {
              description = ''An Elixir implementation of the CASPaxos
                            distributed compare-and-set KV.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericentin/caspax";
            };
          } // packageOverrides)
      ) {};

    caspax = caspax_0_1_1;

    cassandra_0_1_1_pre = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          uuid_1_1_8
        }:
          buildMix ({
            name = "cassandra";
            version = "0.1.1-pre";
            src = fetchHex {
              pkg = "cassandra";
              version = "0.1.1-pre";
              sha256 =
                "e08f054ca370b743447a08229ca5bbfaf4e552fe99ecc69a46ebaf6fde1433b8";
            };
            beamDeps  = [ connection_1_0_4 uuid_1_1_8 ];

            meta = {
              description = ''A pure Elixir driver for Apache Cassandra'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cafebazaar/elixir-cassandra";
            };
          } // packageOverrides)
      ) {};

    cassandrex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cassandrex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cassandrex";
              version = "0.1.0";
              sha256 =
                "d81ef97a525bc25fbde538f0deb1c66868bb111aa67762ff8683996ab1a2b1e5";
            };

            meta = {
              description = ''Cassandra driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vintikzzz/cassandrex";
            };
          } // packageOverrides)
      ) {};

    cassandrex = cassandrex_0_1_0;

    cassette_1_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_6_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "cassette";
            version = "1.4.1";
            src = fetchHex {
              pkg = "cassette";
              version = "1.4.1";
              sha256 =
                "17019849b5e23a0806de4c789cba54f06fa0b4cb15425217e4629989bd092e68";
            };
            beamDeps  = [ httpoison_0_6_2 sweet_xml_0_6_5 ];

            meta = {
              description = ''A CAS client and validation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/locaweb/elixir-cassette";
            };
          } // packageOverrides)
      ) {};

    cassette = cassette_1_4_1;

    castile_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_2,
          httpoison_0_6_2
        }:
          buildMix ({
            name = "castile";
            version = "1.0.0";
            src = fetchHex {
              pkg = "castile";
              version = "1.0.0";
              sha256 =
                "0db6470af1a1340c6313a3645671481e371fbc435d8f50a77b8147371aae8363";
            };
            beamDeps  = [ erlsom_1_4_2 httpoison_0_6_2 ];

            meta = {
              description = ''Castile is a modern Elixir SOAP API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/polyfox/castile";
            };
          } // packageOverrides)
      ) {};

    castile = castile_1_0_0;

    catalog_api_0_0_13 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "catalog_api";
            version = "0.0.13";
            src = fetchHex {
              pkg = "catalog_api";
              version = "0.0.13";
              sha256 =
                "170c24ff892519bc6c686e7b63bfcf2cae34510ab680c83bdcbcf54535755b5b";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 uuid_1_1_8 ];

            meta = {
              description = ''CatalogApi is a client for the catalogapi.com
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbramson/catalog_api";
            };
          } // packageOverrides)
      ) {};

    catalog_api = catalog_api_0_0_13;

    catalyst_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "catalyst";
            version = "0.2.1";
            src = fetchHex {
              pkg = "catalyst";
              version = "0.2.1";
              sha256 =
                "7d6969041f686ee7d1965c397e42d05ac94d86209cce50e8fac541d08f25aaae";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Elixir webdav client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slavone/catalyst";
            };
          } // packageOverrides)
      ) {};

    catalyst = catalyst_0_2_1;

    cauldron_0_1_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          datastructures_0_2_8,
          httprot_0_2_2,
          reagent_0_1_14
        }:
          buildMix ({
            name = "cauldron";
            version = "0.1.10";
            src = fetchHex {
              pkg = "cauldron";
              version = "0.1.10";
              sha256 =
                "35cb8c37d5574553b6d3fecc0bfa573d03df9eac7a585127a6506a13dcbaa00b";
            };
            beamDeps  = [ datastructures_0_2_8 httprot_0_2_2 reagent_0_1_14
                      ];

            meta = {
              description = ''Web server library written in Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/cauldron";
            };
          } // packageOverrides)
      ) {};

    cauldron = cauldron_0_1_10;

    caylir_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          poison_3_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "caylir";
            version = "0.7.0";
            src = fetchHex {
              pkg = "caylir";
              version = "0.7.0";
              sha256 =
                "9a931a74208173d005fa9592202dcf4f951355a73a04fc20a1480b878a1d7a91";
            };
            beamDeps  = [ hackney_1_13_0 poison_3_1_0 poolboy_1_5_1 ];

            meta = {
              description = ''Cayley driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/caylir";
            };
          } // packageOverrides)
      ) {};

    caylir = caylir_0_7_0;

    cbor_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cbor";
            version = "0.1.3";
            src = fetchHex {
              pkg = "cbor";
              version = "0.1.3";
              sha256 =
                "2475f5bfb9bcb9069b9e9905e114bd7625477146a15a752ee464b18513a95b51";
            };

            meta = {
              description = ''RFC 7049 Concise Binary Object Representation
                            (CBOR)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/masonforest/elixir-cbor";
            };
          } // packageOverrides)
      ) {};

    cbor = cbor_0_1_3;

    cbuf_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cbuf";
            version = "0.6.0";
            src = fetchHex {
              pkg = "cbuf";
              version = "0.6.0";
              sha256 =
                "b8b3786f900163ca516c5c6f2044e2e06514e6981dac22c618db8abeb107d1b8";
            };

            meta = {
              description = ''A circular buffer backed by a map or ETS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ckampfe/cbuf";
            };
          } // packageOverrides)
      ) {};

    cbuf = cbuf_0_6_0;

    cc_validation_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cc_validation";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cc_validation";
              version = "0.1.1";
              sha256 =
                "cf205307c268269c789f0bab10ebb924d31de48bb1ad6ec4530f85d029e0da10";
            };

            meta = {
              longDescription = ''Validate credit card number format using Luhn
                                Algorithm and allows for checking test card
                                numbers.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    cc_validation = cc_validation_0_1_1;

    ccc_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ccc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ccc";
              version = "0.0.2";
              sha256 =
                "cb976cf81c8497a271d3c6a4b20be4d0e569d5a0db3a60a227e1e8a13ee6abf7";
            };

            meta = {
              description = ''Character Code Converter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/ccc";
            };
          } // packageOverrides)
      ) {};

    ccc = ccc_0_0_2;

    cclock_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, columbo_2_0_0 }:
          buildMix ({
            name = "cclock";
            version = "2.0.0";
            src = fetchHex {
              pkg = "cclock";
              version = "2.0.0";
              sha256 =
                "75693e27e8b3a99ee7fc4bfed8a767689c386fc71a62017a48b2cbf17246c2fa";
            };
            beamDeps  = [ columbo_2_0_0 ];

            meta = {
              description = ''Cluster clock'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aruki-delivery/cclock";
            };
          } // packageOverrides)
      ) {};

    cclock = cclock_2_0_0;

    cee_log_formatter_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "cee_log_formatter";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cee_log_formatter";
              version = "0.2.0";
              sha256 =
                "330d6c5827338fecc9b4bab15095917ca776127526c0453d514a1306ef5cf9fb";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A log formatter for the CEE format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/cee_log_formatter";
            };
          } // packageOverrides)
      ) {};

    cee_log_formatter = cee_log_formatter_0_2_0;

    census_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "census";
            version = "0.1.4";
            src = fetchHex {
              pkg = "census";
              version = "0.1.4";
              sha256 =
                "05aa5c30fa9c5672f9f600ebf4cb4c738a2dd24f0a23ff3d77e85a59e56b9718";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir library for interacting with
                            api.census.gov'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rockwood/census";
            };
          } // packageOverrides)
      ) {};

    census = census_0_1_4;

    cep_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_13_0,
          poison_3_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "cep";
            version = "0.0.2";
            src = fetchHex {
              pkg = "cep";
              version = "0.0.2";
              sha256 =
                "dfbfac060ad7dd1034f25a5fb02a20e5ca6bd446a44eaea227cfa2476954ccef";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_0_13_0
                          poison_3_1_0
                          sweet_xml_0_6_5
                        ];

            meta = {
              longDescription = ''A package to query Brazilian CEP codes. Has
                                support for multiple source APIs (Correios,
                                ViaCep, Postmon, etc). It can query one specific
                                source or query until one source returns a valid
                                result.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/douglascamata/cep";
            };
          } // packageOverrides)
      ) {};

    cep = cep_0_0_2;

    cerberus_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cerberus";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cerberus";
              version = "0.0.1";
              sha256 =
                "6f20f468490dc5d2abced0683adff3ab30db4b79b575cbce36cc846da7c2cffa";
            };

            meta = {
              description = ''WIP'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/matthewsecrist/cerberus";
            };
          } // packageOverrides)
      ) {};

    cerberus = cerberus_0_0_1;

    cert_cache_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cert_cache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cert_cache";
              version = "0.1.0";
              sha256 =
                "db13d34e67ad62344b39359313d6da09f05a2c9de6dd4487765a47bbc0097892";
            };

            meta = {
              description = ''A certificate cache for Elixir / Pheonix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mlilley/cert_cache";
            };
          } // packageOverrides)
      ) {};

    cert_cache = cert_cache_0_1_0;

    certifi_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "0.3.0";
            src = fetchHex {
              pkg = "certifi";
              version = "0.3.0";
              sha256 =
                "42ae85fe91c038a634a5fb8d0c77f4fc581914c508f087c7138e9366a1517f6a";
            };

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "0.4.0";
            src = fetchHex {
              pkg = "certifi";
              version = "0.4.0";
              sha256 =
                "1cc233bee2d6990e7b0ff4c5824d7f401edda8a3cfad04d3328e35ad97de7611";
            };

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "0.7.0";
            src = fetchHex {
              pkg = "certifi";
              version = "0.7.0";
              sha256 =
                "f7182e85b4ece9d1371c46699793dd3dee8f2c55be3f6967a6b84b8c02bab7d2";
            };

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "1.0.0";
            src = fetchHex {
              pkg = "certifi";
              version = "1.0.0";
              sha256 =
                "44a5aa4261490a7d7fa6909ab4bcf14bff928a4fef49e80fc1e7a8fdb7b45f79";
            };

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "1.1.0";
            src = fetchHex {
              pkg = "certifi";
              version = "1.1.0";
              sha256 =
                "766db7fae3104ac598216658a8e851fc61df89761ca841952a24a5a70613257c";
            };

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_1_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "1.2.1";
            src = fetchHex {
              pkg = "certifi";
              version = "1.2.1";
              sha256 =
                "54afd282e544833fbafbe2e845333132b5f092aee19dfae3a8fd970f67e0f2e6";
            };

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "2.0.0";
            src = fetchHex {
              pkg = "certifi";
              version = "2.0.0";
              sha256 =
                "fdc6066ceeccb3aa14049ab6edf0b9af3b64ae1b0db2a92d5c52146f373bbb1c";
            };

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_2_3_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, parse_trans_3_2_0
        }:
          buildRebar3 ({
            name = "certifi";
            version = "2.3.1";
            src = fetchHex {
              pkg = "certifi";
              version = "2.3.1";
              sha256 =
                "e12d667d042c11d130594bae2b0097e63836fe8b1e6d6b2cc48f8bb7a2cf7d68";
            };

            beamDeps  = [ parse_trans_3_2_0 ];

            meta = {
              description = ''CA bundle adapted from Mozilla by
                            http://certifi.io'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi = certifi_2_3_1;

    cf_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cf";
            version = "0.1.2";
            src = fetchHex {
              pkg = "cf";
              version = "0.1.2";
              sha256 =
                "c86f56bca74dd3616057b28574d920973fe665ecb064aa458dc6a2447f3f4924";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/cf";
            };
          } // packageOverrides)
      ) {};

    cf_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cf";
            version = "0.2.1";
            src = fetchHex {
              pkg = "cf";
              version = "0.2.1";
              sha256 =
                "baee9aa7ec2dfa3cb4486b67211177caa293f876780f0b313b45718edef6a0a5";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/cf";
            };
          } // packageOverrides)
      ) {};

    cf_0_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cf";
            version = "0.2.2";
            src = fetchHex {
              pkg = "cf";
              version = "0.2.2";
              sha256 =
                "48283b3019bc7fad56e7b23028a5da4d3e6cd598a553ab2a99a2153bf5f19b21";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/cf";
            };
          } // packageOverrides)
      ) {};

    cf_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cf";
            version = "0.3.1";
            src = fetchHex {
              pkg = "cf";
              version = "0.3.1";
              sha256 =
                "315e8d447d3a4b02bcdbfa397ad03bbb988a6e0aa6f44d3add0f4e3c3bf97672";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/cf";
            };
          } // packageOverrides)
      ) {};

    cf = cf_0_3_1;

    cf_client_0_1_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cre_0_1_6,
          getopt_1_0_1,
          lib_conf_0_1_4
        }:
          buildRebar3 ({
            name = "cf_client";
            version = "0.1.5";
            src = fetchHex {
              pkg = "cf_client";
              version = "0.1.5";
              sha256 =
                "b328013af5194b803b65f9750f66023ddf9aedefe12566b740361f001046c6d2";
            };

            beamDeps  = [ cre_0_1_6 getopt_1_0_1 lib_conf_0_1_4 ];

            meta = {
              description = ''A Cuneiform client implementation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/cf_client/";
            };
          } // packageOverrides)
      ) {};

    cf_client = cf_client_0_1_5;

    cf_env_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "cf_env";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cf_env";
              version = "0.2.0";
              sha256 =
                "fb8e66c14d98725a66d827e923abddad90b0979053e94513c08c84ea35e8dc96";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''A helper application for fetching and parsing
                                CloudFoundry service bindings, and application
                                information.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matthewoden/CFEnv";
            };
          } // packageOverrides)
      ) {};

    cf_env = cf_env_0_2_0;

    cf_worker_0_1_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cre_0_1_6,
          effi_0_1_5,
          getopt_1_0_1,
          lib_conf_0_1_4
        }:
          buildRebar3 ({
            name = "cf_worker";
            version = "0.1.4";
            src = fetchHex {
              pkg = "cf_worker";
              version = "0.1.4";
              sha256 =
                "ddf89d9c03967f0ca1e454c0e698efc096bf0cda2d9a43e7fad8d60d40385e1d";
            };

            beamDeps  = [ cre_0_1_6 effi_0_1_5 getopt_1_0_1 lib_conf_0_1_4 ];

            meta = {
              description = ''A Cuneiform worker implementation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/cf_worker/";
            };
          } // packageOverrides)
      ) {};

    cf_worker_0_1_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cre_0_1_6,
          effi_0_1_5,
          getopt_1_0_1,
          lib_conf_0_1_4
        }:
          buildRebar3 ({
            name = "cf_worker";
            version = "0.1.5";
            src = fetchHex {
              pkg = "cf_worker";
              version = "0.1.5";
              sha256 =
                "c9f12361e4bd477b60930db23977db2874a2228e0fd95b937a8d7c24b5fce5e8";
            };

            beamDeps  = [ cre_0_1_6 effi_0_1_5 getopt_1_0_1 lib_conf_0_1_4 ];

            meta = {
              description = ''A Cuneiform worker implementation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/cf_worker/";
            };
          } // packageOverrides)
      ) {};

    cf_worker = cf_worker_0_1_5;

    cfxxl_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "cfxxl";
            version = "0.3.0";
            src = fetchHex {
              pkg = "cfxxl";
              version = "0.3.0";
              sha256 =
                "c12099e5bea3a53cf6f13f6cd44396ef6e24ef29aa25042065b54ff3f47d5751";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''CFSSL API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Ispirata/cfxxl";
            };
          } // packageOverrides)
      ) {};

    cfxxl = cfxxl_0_3_0;

    cgroups_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cgroups";
            version = "1.7.3";
            src = fetchHex {
              pkg = "cgroups";
              version = "1.7.3";
              sha256 =
                "2d3fd020465c7328471aeb801120041c49fe4c97f337e5d5fb4966cc5fe6cc6a";
            };

            meta = {
              description = ''Erlang native cgroups interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/cgroups";
            };
          } // packageOverrides)
      ) {};

    cgroups = cgroups_1_7_3;

    chacha20_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chacha20";
            version = "0.3.6";
            src = fetchHex {
              pkg = "chacha20";
              version = "0.3.6";
              sha256 =
                "40bc6b1f4816661c07a3244d46d74640f108f69eb61f96d2dd22dcba0e7fca38";
            };

            meta = {
              description = ''Chacha20 symmetric stream cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/chacha20_ex";
            };
          } // packageOverrides)
      ) {};

    chacha20_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chacha20";
            version = "1.0.1";
            src = fetchHex {
              pkg = "chacha20";
              version = "1.0.1";
              sha256 =
                "37ba186925129e57cfe20f22952a3a84a04a30286c2104e14cf411cb779d0ef3";
            };

            meta = {
              description = ''Chacha20 symmetric stream cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/chacha20_ex";
            };
          } // packageOverrides)
      ) {};

    chacha20 = chacha20_1_0_1;

    chameleon_2_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chameleon";
            version = "2.2.0";
            src = fetchHex {
              pkg = "chameleon";
              version = "2.2.0";
              sha256 =
                "7df4053da2da521bef95c996f0833587bb46e0f80627d40a2076a3fe2284917b";
            };

            meta = {
              longDescription = ''Chameleon is a utility for converting colors
                                from one color model to another. Conversions can
                                be made to/from RGB, CMYK, Hex, HSL, Pantone,
                                and even Keywords. For example: \"FFFFFF\" ->
                                %{c: 0, m: 0, y: 0, k: 0}'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/supersimple/chameleon";
            };
          } // packageOverrides)
      ) {};

    chameleon = chameleon_2_2_0;

    changed_reloader_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "changed_reloader";
            version = "0.1.3";
            src = fetchHex {
              pkg = "changed_reloader";
              version = "0.1.3";
              sha256 =
                "13d6c9e2f98d1c32252956cefc63655ceff65d5241a638303f34c58975be0c55";
            };

            meta = {
              longDescription = ''auto recompile a modified elixir file to the
                                lib directory. base on Remix
                                (https://github.com/AgilionApps/remix)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AgilionApps/remix";
            };
          } // packageOverrides)
      ) {};

    changed_reloader = changed_reloader_0_1_3;

    changeset_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, defmemo_0_1_1 }:
          buildMix ({
            name = "changeset";
            version = "1.0.0";
            src = fetchHex {
              pkg = "changeset";
              version = "1.0.0";
              sha256 =
                "34cc4c986bfba93d4a2a85910bef05b53a6538485b520fb89fe9f6b8cbe067e7";
            };
            beamDeps  = [ defmemo_0_1_1 ];

            meta = {
              description = ''A package for calculating between-list edit
                            distances.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erwald/elixir-changeset";
            };
          } // packageOverrides)
      ) {};

    changeset = changeset_1_0_0;

    changex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "changex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "changex";
              version = "0.1.1";
              sha256 =
                "e087a4c3cc8eb3e94eba6050c5b1cc24dba3427eb4e4e15cebdb4000582c9851";
            };

            meta = {
              description = ''Automatically generate a CHANGELOG.md file based
                            on git commit history. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gazler/changex";
            };
          } // packageOverrides)
      ) {};

    changex = changex_0_1_1;

    channel_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "channel";
            version = "0.1.0";
            src = fetchHex {
              pkg = "channel";
              version = "0.1.0";
              sha256 =
                "aeddc6c9b923e4476d7bb6c8211a7984a8e221574afa73d50d1642647571e432";
            };

            meta = {
              description = ''Erlang channel library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/masateruk/erchannel";
            };
          } // packageOverrides)
      ) {};

    channel = channel_0_1_0;

    channel_lock_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "channel_lock";
            version = "0.1.0";
            src = fetchHex {
              pkg = "channel_lock";
              version = "0.1.0";
              sha256 =
                "9427a2af26e9b98b3b64f70891cc68859ef1c869036a1bbf7c66b5010389bda4";
            };

            meta = {
              description = ''Enables the ability to create channels with
                            process synchronization'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aaruel/channel_lock";
            };
          } // packageOverrides)
      ) {};

    channel_lock = channel_lock_0_1_0;

    chartkick_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "chartkick";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chartkick";
              version = "0.1.0";
              sha256 =
                "677f18de7d18318441f205dc24a7ef3b85e0d0e83aacc3065c3eb4faf5ad4af3";
            };
            beamDeps  = [ poison_3_1_0 uuid_1_1_8 ];

            meta = {
              description = ''Create beautiful JavaScript charts with one line
                            of Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/buren/chartkick-ex";
            };
          } // packageOverrides)
      ) {};

    chartkick = chartkick_0_1_0;

    chartreuse_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chartreuse";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chartreuse";
              version = "0.1.0";
              sha256 =
                "040d0c0d68215c0fcd695fbf74beb80b952d9bd8928c2f99503265feb7f42406";
            };

            meta = {
              description = ''string, list, map, etc. extensions for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MishaConway/chartreuse";
            };
          } // packageOverrides)
      ) {};

    chartreuse = chartreuse_0_1_0;

    chash_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "chash";
            version = "0.1.2";
            src = fetchHex {
              pkg = "chash";
              version = "0.1.2";
              sha256 =
                "4dd80889da8fcf3953062508790ca54f149fe553fcd37a4d95438fb5efa3addf";
            };

            meta = {
              description = ''Riaks CHash implementation'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fifo/chash";
            };
          } // packageOverrides)
      ) {};

    chash = chash_0_1_2;

    chatbase_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_1_0_0_beta_1
        }:
          buildMix ({
            name = "chatbase";
            version = "0.0.3";
            src = fetchHex {
              pkg = "chatbase";
              version = "0.0.3";
              sha256 =
                "88d4d04b07c18161b30461f326fe7fc8570be72cc8047212b1b8f41fb7f90edf";
            };
            beamDeps  = [ poison_3_1_0 tesla_1_0_0_beta_1 ];

            meta = {
              longDescription = ''Elixir based client that provides helper
                                methods to log data to Chatbase Bot Analytics
                                API. Note: This is not an official Google
                                product.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    chatbase = chatbase_0_0_3;

    chatty_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chatty";
            version = "0.5.0";
            src = fetchHex {
              pkg = "chatty";
              version = "0.5.0";
              sha256 =
                "38760fea220d1f19a18d4400c464decae2689b653564f84ff211a4372653b2fb";
            };

            meta = {
              description = ''A basic IRC client that is most useful for
                            writing a bot.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/chatty";
            };
          } // packageOverrides)
      ) {};

    chatty = chatty_0_5_0;

    chatwork_ex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "chatwork_ex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "chatwork_ex";
              version = "0.0.1";
              sha256 =
                "b6af9c6107cdcb936153f418e7b7f92d3eab84618ab4f15321039c2fa9533abb";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''ChatWork API Interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eiel/chatwork_ex";
            };
          } // packageOverrides)
      ) {};

    chatwork_ex = chatwork_ex_0_0_1;

    checksum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "checksum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "checksum";
              version = "0.1.0";
              sha256 =
                "465d6ceb61f32bfed35d2be3fdad3e2432a653e93fe530efc0516c748f9088e4";
            };

            meta = {
              description = ''Checksum library allows checksum calculations,
                            like CRC....'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danseid/checksum";
            };
          } // packageOverrides)
      ) {};

    checksum = checksum_0_1_0;

    chemist_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "chemist";
            version = "0.4.0";
            src = fetchHex {
              pkg = "chemist";
              version = "0.4.0";
              sha256 =
                "af6e045a06cd70e78def5d936e2168e3465b0444d933cb856fb9f80861b76605";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Chemist is an Elixir wrapper for the Riot API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jscheel42/chemist";
            };
          } // packageOverrides)
      ) {};

    chemist = chemist_0_4_0;

    chemistry_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chemistry";
            version = "0.1.4";
            src = fetchHex {
              pkg = "chemistry";
              version = "0.1.4";
              sha256 =
                "2f8c2fcaad4e20c9478c8eb7384bc6c15c53f0b95c0c19349192c7291722380f";
            };

            meta = {
              description = ''Chemistry is a Testing Framework for your Elixir
                            projects.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/genericlady/chemistry";
            };
          } // packageOverrides)
      ) {};

    chemistry = chemistry_0_1_4;

    chess_logic_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chess_logic";
            version = "0.2.0";
            src = fetchHex {
              pkg = "chess_logic";
              version = "0.2.0";
              sha256 =
                "27bff781206fd95deb923bdf09a9f1e87c9a0ea7895b7990f6dd97c4861d97d7";
            };

            meta = {
              description = ''Elixir struct for playing the game of chess.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kokolegorille/chess_logic";
            };
          } // packageOverrides)
      ) {};

    chess_logic = chess_logic_0_2_0;

    chexes_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chexes";
            version = "0.1.5";
            src = fetchHex {
              pkg = "chexes";
              version = "0.1.5";
              sha256 =
                "59dfd122aefc1f925db806c5e1b7b8fdbc8e1cd2f877bca02af1d1c0667d7332";
            };

            meta = {
              description = ''None, funny module.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/chexes";
            };
          } // packageOverrides)
      ) {};

    chexes = chexes_0_1_5;

    chibi_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chibi";
            version = "1.0.0";
            src = fetchHex {
              pkg = "chibi";
              version = "1.0.0";
              sha256 =
                "c2b86847692b26ef08570e2a9239d0e8589f305de0228d54486706f01dbd1f4e";
            };

            meta = {
              description = ''Chibi`s first library.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    chibi = chibi_1_0_0;

    chicken_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chicken";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chicken";
              version = "0.1.0";
              sha256 =
                "e649d554b150ae0b500e91d3ac95c8810d1ac0097f997916b1ec7d24a738f511";
            };

            meta = {
              description = ''Needed for a chicken soup sandwich.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    chicken = chicken_0_1_0;

    chicken_soup_sandwich_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, chicken_0_1_0 }:
          buildMix ({
            name = "chicken_soup_sandwich";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chicken_soup_sandwich";
              version = "0.1.0";
              sha256 =
                "29760865b5e8497957f46a8d4f0658c8cd3e159161ad5f6e4f2ccfaa120d2cec";
            };
            beamDeps  = [ chicken_0_1_0 ];

            meta = {
              description = ''A chicken soup sandwich.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    chicken_soup_sandwich = chicken_soup_sandwich_0_1_0;

    child_spec_compat_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "child_spec_compat";
            version = "1.0.0";
            src = fetchHex {
              pkg = "child_spec_compat";
              version = "1.0.0";
              sha256 =
                "0fe504628981bdf27d4201f7e1b3e2d0423f9d6de567d5ccf5d5bb9d6c948774";
            };

            meta = {
              description = ''Compatibility macros for Elixir v1.5+ child
                            specifications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whitfin/child-spec-compat";
            };
          } // packageOverrides)
      ) {};

    child_spec_compat = child_spec_compat_1_0_0;

    chinese_translation_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "chinese_translation";
            version = "0.2.0";
            src = fetchHex {
              pkg = "chinese_translation";
              version = "0.2.0";
              sha256 =
                "1a2a523f9aac4dcccc462028e0ed566a13ec036bbc101e7a86147a37cbe58ac5";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              longDescription = ''ChineseTranslation provides traditional
                                chinese <-> simplified chinese translation, as
                                well as pinyin translation and slugify for
                                chinese phrases/characters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tyrchen/chinese_translation";
            };
          } // packageOverrides)
      ) {};

    chinese_translation = chinese_translation_0_2_0;

    chinese_util_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chinese_util";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chinese_util";
              version = "0.1.0";
              sha256 =
                "0989a192a9760d1a833afa7e69a1c59d80725d8be3bfe079a349cd173df22869";
            };

            meta = {
              description = ''Lib for elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/dev800/chinese_util";
            };
          } // packageOverrides)
      ) {};

    chinese_util = chinese_util_0_1_0;

    choice_context_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "choice_context";
            version = "0.1.2";
            src = fetchHex {
              pkg = "choice_context";
              version = "0.1.2";
              sha256 =
                "0574fd3400d31719cfecfcec9d17e7b33f08afa9a0ada8bd37fc1dced4fcb718";
            };

            meta = {
              longDescription = ''This is a GenServer-ish implementation of a
                                Choise Context. That is a process that accepts a
                                value during the specified period of time and
                                refuses to do so after the timeout has
                                elapsed.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    choice_context = choice_context_0_1_2;

    chronos_0_3_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chronos";
            version = "0.3.9";
            src = fetchHex {
              pkg = "chronos";
              version = "0.3.9";
              sha256 =
                "973e1273088677a12afc1a72aad78fe5070fb0ad6f9b1c648d79dd251292dee4";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          } // packageOverrides)
      ) {};

    chronos_1_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chronos";
            version = "1.5.1";
            src = fetchHex {
              pkg = "chronos";
              version = "1.5.1";
              sha256 =
                "015d881b1d095b53f626dc32f8db05e5faca8635b199d3cc2022a057c469904b";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          } // packageOverrides)
      ) {};

    chronos_1_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chronos";
            version = "1.8.0";
            src = fetchHex {
              pkg = "chronos";
              version = "1.8.0";
              sha256 =
                "64587835882ed833614bd23b54089a02c24ff1dd6e80de870d05c96f55c7b7bb";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          } // packageOverrides)
      ) {};

    chronos = chronos_1_8_0;

    chuck_norris_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "chuck_norris";
            version = "0.1.1";
            src = fetchHex {
              pkg = "chuck_norris";
              version = "0.1.1";
              sha256 =
                "10ef53cd0404acea5e318f390d0ab888b7bf445716add6a1d82db8276865c302";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Api to consume `https://api.chucknorris.io/`'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ramortegui/chuck_norris_api";
            };
          } // packageOverrides)
      ) {};

    chuck_norris = chuck_norris_0_1_1;

    chumak_1_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "chumak";
            version = "1.3.0";
            src = fetchHex {
              pkg = "chumak";
              version = "1.3.0";
              sha256 =
                "0627e692df7c36b03d4b66949c2b0e83ae51c36d0e2322e7667bed45b2e599f2";
            };

            meta = {
              description = ''Erlang implementation of ZeroMQ Transport
                            Protocol (ZMTP)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/chovencorp/chumak";
            };
          } // packageOverrides)
      ) {};

    chumak = chumak_1_3_0;

    chunky_svg_0_0_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xml_builder_2_1_0
        }:
          buildMix ({
            name = "chunky_svg";
            version = "0.0.4";
            src = fetchHex {
              pkg = "chunky_svg";
              version = "0.0.4";
              sha256 =
                "c8d7212148d72b03b6ed102410017a2cf77987a09fb889320fc381d383e68c75";
            };
            beamDeps  = [ xml_builder_2_1_0 ];

            meta = {
              description = '' A library for drawing things with SVG '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/chunky_svg";
            };
          } // packageOverrides)
      ) {};

    chunky_svg = chunky_svg_0_0_4;

    cider_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cider";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cider";
              version = "0.1.1";
              sha256 =
                "456b62e2224eee2baa2e29c9b62630a66012b0e1041cdaeeef0e9551376e6475";
            };

            meta = {
              description = ''CIDR library for Elixer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IanLuites/cider";
            };
          } // packageOverrides)
      ) {};

    cider = cider_0_1_1;

    cidr_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cidr";
            version = "1.1.0";
            src = fetchHex {
              pkg = "cidr";
              version = "1.1.0";
              sha256 =
                "155c26559b27be49a446e13a9e12bf50d62bf9231c548e7743263e75fa61dc91";
            };

            meta = {
              description = ''Classless Inter-Domain Routing (CIDR) for
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/c-rack/cidr-elixir";
            };
          } // packageOverrides)
      ) {};

    cidr = cidr_1_1_0;

    cingi_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_6_1,
          porcelain_2_0_3,
          temp_0_4_5,
          yaml_elixir_1_3_2
        }:
          buildMix ({
            name = "cingi";
            version = "0.1.3";
            src = fetchHex {
              pkg = "cingi";
              version = "0.1.3";
              sha256 =
                "beed6e108879f5add0f82750038eafaa9b589ab1a418d2d6af82f302d8821185";
            };
            beamDeps  = [
                          gproc_0_6_1
                          porcelain_2_0_3
                          temp_0_4_5
                          yaml_elixir_1_3_2
                        ];

            meta = {
              longDescription = ''Continuous-ing Integration (...core). A
                                distributed pipeline-based command line task
                                runner providing the core functionality for a CI
                                server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Rhathe/CingI";
            };
          } // packageOverrides)
      ) {};

    cingi = cingi_0_1_3;

    cipher_suites_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cipher_suites";
            version = "0.3.0";
            src = fetchHex {
              pkg = "cipher_suites";
              version = "0.3.0";
              sha256 =
                "4d89b14280ce64039d73a5c6e3494dda7150c36cfdf19508e1caf9613c05fedb";
            };

            meta = {
              longDescription = ''Select and sort the cipher suites for an
                                Erlang/Elixir application using the widely used
                                OpenSSL syntax.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/voltone/cipher_suites";
            };
          } // packageOverrides)
      ) {};

    cipher_suites = cipher_suites_0_3_0;

    circle_ci_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "circle_ci";
            version = "0.1.0";
            src = fetchHex {
              pkg = "circle_ci";
              version = "0.1.0";
              sha256 =
                "88efaa466adc35bbdbe6d93dfe3db7224ed7968508d1c62f1000bd225a31f6f6";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              description = ''A wrapper for interfacing with the CircleCI
                            API.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mobileoverlord/circleci";
            };
          } // packageOverrides)
      ) {};

    circle_ci = circle_ci_0_1_0;

    circler_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "circler";
            version = "0.1.0";
            src = fetchHex {
              pkg = "circler";
              version = "0.1.0";
              sha256 =
                "a90aae96563b8ea8ed3cbf7f09d196d3b8ca39439230c310555f6bd10dcc1aa3";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''CircleCi api wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yannvery/circler";
            };
          } // packageOverrides)
      ) {};

    circler = circler_0_1_0;

    circular_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "circular";
            version = "0.1.0";
            src = fetchHex {
              pkg = "circular";
              version = "0.1.0";
              sha256 =
                "40480e69922c2e1057690bcf9ea3829d6501251be9751537cbc9c30445ea9f00";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''CircleCi api wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yannvery/circler";
            };
          } // packageOverrides)
      ) {};

    circular = circular_0_1_0;

    cirro_connect_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          websockex_0_4_1
        }:
          buildMix ({
            name = "cirro_connect";
            version = "0.1.7";
            src = fetchHex {
              pkg = "cirro_connect";
              version = "0.1.7";
              sha256 =
                "cc16512e4bba9450f52230f27b9535661de12e9e657841ef9025e704c3bb3dc0";
            };
            beamDeps  = [ poison_3_1_0 websockex_0_4_1 ];

            meta = {
              longDescription = ''An Elixir websocket-based SQL connector for
                                Cirro. CirroConnect allows Elixir programs to
                                connect to Cirro (http://www.cirro.com) using
                                its websocket API and issue federated
                                queries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cirroinc/cirro_connect";
            };
          } // packageOverrides)
      ) {};

    cirro_connect = cirro_connect_0_1_7;

    cirru_parser_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cirru_parser";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cirru_parser";
              version = "0.0.1";
              sha256 =
                "259f533ee97805c50eb12fa8472b5553eaca5bfd58216d54a734dfa1c4d0c678";
            };

            meta = {
              description = ''Cirru Parser in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Cirru/parser.ex";
            };
          } // packageOverrides)
      ) {};

    cirru_parser = cirru_parser_0_0_1;

    ckan_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_1_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "ckan";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ckan";
              version = "0.0.2";
              sha256 =
                "471a58f1d38df7a6ff36af9a1e9d4c6cb9d310c5acb2db95ff3184717d7762a0";
            };
            beamDeps  = [ httpotion_2_1_0 poison_1_5_2 ];

            meta = {
              description = ''A small library for interacting with CKAN
                            (ckan.org) instances'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rossjones/ckan_ex";
            };
          } // packageOverrides)
      ) {};

    ckan = ckan_0_0_2;

    clarifai_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "clarifai";
            version = "0.2.1";
            src = fetchHex {
              pkg = "clarifai";
              version = "0.2.1";
              sha256 =
                "f2794278765f267d4158a764dea21a20c02b9cd9b7930039ef1ba2fbe22af223";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir API client for Clarifai.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ChanChar/clarifai";
            };
          } // packageOverrides)
      ) {};

    clarifai = clarifai_0_2_1;

    classnames_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "classnames";
            version = "0.1.0";
            src = fetchHex {
              pkg = "classnames";
              version = "0.1.0";
              sha256 =
                "7a72389132b89d5799e9c1132e15162d944140d92eaa0fa4cf77f50cfae5175e";
            };

            meta = {
              description = ''A simple utility for conditionally joining class
                            names'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rzane/classnames";
            };
          } // packageOverrides)
      ) {};

    classnames = classnames_0_1_0;

    classy_structs_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "classy_structs";
            version = "0.9.0";
            src = fetchHex {
              pkg = "classy_structs";
              version = "0.9.0";
              sha256 =
                "a2af4c6b20d0dacf8c51600d4f028b17e16373853f0f82205b0199709336a52b";
            };

            meta = {
              longDescription = ''Classy structs provides object-oriented
                                features, such as inheritance and polymorphism,
                                on top of Elixir`s structs.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/timmolderez/classy-structs";
            };
          } // packageOverrides)
      ) {};

    classy_structs = classy_structs_0_9_0;

    cleanex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dialyxir_0_5_1,
          earmark_1_2_5
        }:
          buildMix ({
            name = "cleanex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cleanex";
              version = "0.0.1";
              sha256 =
                "7db6119b6cad7f196e55d3b2d58e5ce854ab9b9279771f051a328cd0ed2acfc3";
            };
            beamDeps  = [ dialyxir_0_5_1 earmark_1_2_5 ];

            meta = {
              description = ''Data cleansing & aggregating libraries in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/data-maestro/cleanex";
            };
          } // packageOverrides)
      ) {};

    cleanex = cleanex_0_0_1;

    cleanser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cleanser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cleanser";
              version = "0.1.0";
              sha256 =
                "183d63ad7a08110f9304eda887226c7f5ae4f42fc3b2a974727dbd869d2daa5a";
            };

            meta = {
              description = ''An email validation library (with more to come)
                            written entirely in Elixir!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicoevergara/cleanser";
            };
          } // packageOverrides)
      ) {};

    cleanser = cleanser_0_1_0;

    cleverbot_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_6_2 }:
          buildMix ({
            name = "cleverbot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cleverbot";
              version = "0.0.1";
              sha256 =
                "2a6f1bedbfd03fa0bbceff1134976d720e349cd7551cd5033eadf79f6cea4622";
            };
            beamDeps  = [ httpoison_0_6_2 ];

            meta = {
              description = ''A Cleverbot API wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Cleverbot";
            };
          } // packageOverrides)
      ) {};

    cleverbot = cleverbot_0_0_1;

    clhi_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "clhi";
            version = "0.2.0";
            src = fetchHex {
              pkg = "clhi";
              version = "0.2.0";
              sha256 =
                "98c3e9826482aa4f0830a7af6d47945264d0785a1dff94bdfd0975b521bdfb9e";
            };

            meta = {
              description = ''A CLI helper for asking questions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/verypossible/clhi";
            };
          } // packageOverrides)
      ) {};

    clhi = clhi_0_2_0;

    cli_spinners_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cli_spinners";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cli_spinners";
              version = "0.1.0";
              sha256 =
                "3b8ccad722e518309d8b92230960ca4775a761164514f78a89c4f04d5a25c97f";
            };

            meta = {
              longDescription = ''This module compirises of the loading
                                animations for the CLI- command line interface.
                                This comprises of 60+ loading animaations. This
                                is highly useful ind command line applications
                                for loading animations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/cli_spinners";
            };
          } // packageOverrides)
      ) {};

    cli_spinners = cli_spinners_0_1_0;

    clickhousex_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_3,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "clickhousex";
            version = "0.2.2";
            src = fetchHex {
              pkg = "clickhousex";
              version = "0.2.2";
              sha256 =
                "1a3d6b3d65e1b6c9cebfb6c4bc19df074520263883badbfa83f713f60a1b2534";
            };
            beamDeps  = [ db_connection_1_1_3 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''ClickHouse driver for Elixir (uses HTTP).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/appodeal/clickhousex";
            };
          } // packageOverrides)
      ) {};

    clickhousex = clickhousex_0_2_2;

    clickhousex_odbc_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, db_connection_1_1_3
        }:
          buildMix ({
            name = "clickhousex_odbc";
            version = "0.2.0";
            src = fetchHex {
              pkg = "clickhousex_odbc";
              version = "0.2.0";
              sha256 =
                "5d0e0e9bb882b645d099d7801da35512d9aadbbfb0f160905a9ed523ef699f37";
            };
            beamDeps  = [ db_connection_1_1_3 ];

            meta = {
              description = ''ClickHouse driver for Elixir which uses ODBC
                            driver for connection.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/appodeal/clickhousex/tree/feature/odbc";
            };
          } // packageOverrides)
      ) {};

    clickhousex_odbc = clickhousex_odbc_0_2_0;

    clipboard_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "clipboard";
            version = "0.2.1";
            src = fetchHex {
              pkg = "clipboard";
              version = "0.2.1";
              sha256 =
                "7d6fa6851e7d6e3f21c6c4c9f903807097e2604f99ffc06354c980838d3b2fda";
            };

            meta = {
              description = ''Copy and paste from system clipboard'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jayjun/clipboard";
            };
          } // packageOverrides)
      ) {};

    clipboard = clipboard_0_2_1;

    clixir_0_3_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "clixir";
            version = "0.3.3";
            src = fetchHex {
              pkg = "clixir";
              version = "0.3.3";
              sha256 =
                "809ade12b8bb5a539bf774b09986d7a6607b5fd7a5a80d46bd6ab2329ecae56b";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''A safe way to extend Elixir with C functions'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cdegroot/uderzo_poncho";
            };
          } // packageOverrides)
      ) {};

    clixir = clixir_0_3_3;

    clone_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "clone";
            version = "0.1.0";
            src = fetchHex {
              pkg = "clone";
              version = "0.1.0";
              sha256 =
                "4fba7bd8599c2dd71f67a559059113671037ffbacd51af0ce731f8020885adaa";
            };

            meta = {
              description = ''An Elixir library to clone/rewrite module
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelostrada/clone";
            };
          } // packageOverrides)
      ) {};

    clone = clone_0_1_0;

    clope_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "clope";
            version = "0.1.3";
            src = fetchHex {
              pkg = "clope";
              version = "0.1.3";
              sha256 =
                "2685a3ee557b2c73b495a9ef1100299f63177c5954a2b4de4d3df9a2855480a4";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''CLOPE: A Fast and Effective Clustering Algorithm
                            for Transactional Data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ayrat555/clope";
            };
          } // packageOverrides)
      ) {};

    clope = clope_0_1_3;

    close_enough_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "close_enough";
            version = "0.0.1";
            src = fetchHex {
              pkg = "close_enough";
              version = "0.0.1";
              sha256 =
                "cbd73a651bffc50259035a311e5a03cb01176667b76aece059778dda9bd72079";
            };

            meta = {
              description = ''Forget typos in function names name, CloseEnough
                            handles them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sivsushruth/close_enough";
            };
          } // packageOverrides)
      ) {};

    close_enough = close_enough_0_0_1;

    closex_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          dialyxir_1_0_0_rc_3,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "closex";
            version = "0.9.0";
            src = fetchHex {
              pkg = "closex";
              version = "0.9.0";
              sha256 =
                "1f94ccd26a44a1ebd504d2e7ae00e827d7a1358dd676662933dfc8d29faf52e9";
            };
            beamDeps  = [
                          cachex_2_1_0
                          dialyxir_1_0_0_rc_3
                          httpoison_0_13_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''Close.io HTTP client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nested-tech/closex";
            };
          } // packageOverrides)
      ) {};

    closex = closex_0_9_0;

    cloudinary_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_4_0
        }:
          buildMix ({
            name = "cloudinary";
            version = "0.0.2";
            src = fetchHex {
              pkg = "cloudinary";
              version = "0.0.2";
              sha256 =
                "9e32b21717b193f90a526203725811b96294d7c88391e5ad4a57bf178678cc4c";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_4_0 ];

            meta = {
              description = ''Library to upload to Cloudinary'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    cloudinary = cloudinary_0_0_2;

    cloudini_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "cloudini";
            version = "1.2.0";
            src = fetchHex {
              pkg = "cloudini";
              version = "1.2.0";
              sha256 =
                "785b69c15bfeec24c064051b1eade220e0a0fcc48b286425d19d1c66cd9a8b9d";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Cloudinary client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/socialpaymentsbv/cloudini";
            };
          } // packageOverrides)
      ) {};

    cloudini = cloudini_1_2_0;

    cloudsight_elixir_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "cloudsight_elixir";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cloudsight_elixir";
              version = "0.2.0";
              sha256 =
                "55febee76b5ee4551614d805ae8910bef35efef89f6521d96df3d966eb606963";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Simple Elixir wrapper for the Cloudsight API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cloudsight/cloudsight_elixir";
            };
          } // packageOverrides)
      ) {};

    cloudsight_elixir = cloudsight_elixir_0_2_0;

    cloudsigma_api_wrapper_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_1_2_0,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "cloudsigma_api_wrapper";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cloudsigma_api_wrapper";
              version = "0.1.1";
              sha256 =
                "3a1d52021299f3a13423df85f4b143809c57458977ec74d701b8fff1da41b81c";
            };
            beamDeps  = [ apex_1_2_0 poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''Dead simple Elixir wrapper for the CloudSigma
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stirlab/elixir-cloudsigma";
            };
          } // packageOverrides)
      ) {};

    cloudsigma_api_wrapper = cloudsigma_api_wrapper_0_1_1;

    clouseau_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, credo_0_9_3 }:
          buildMix ({
            name = "clouseau";
            version = "0.3.1";
            src = fetchHex {
              pkg = "clouseau";
              version = "0.3.1";
              sha256 =
                "a84721553da64f76d6be9412411ffafeb6500255a0074da80b9298d190f54617";
            };
            beamDeps  = [ credo_0_9_3 ];

            meta = {
              description = ''Debugging tool. A wrapper around IO.inspect that
                            provides some enhancements'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/voger/clouseau";
            };
          } // packageOverrides)
      ) {};

    clouseau = clouseau_0_3_1;

    clusterable_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, libcluster_2_5_0 }:
          buildMix ({
            name = "clusterable";
            version = "0.2.0";
            src = fetchHex {
              pkg = "clusterable";
              version = "0.2.0";
              sha256 =
                "90234f7ce577d807a1e3be2d551c31ee5a0435f62c53624441e3e46b77c3d55d";
            };
            beamDeps  = [ libcluster_2_5_0 ];

            meta = {
              description = ''Clusterable makes clustering easier'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/clusterable";
            };
          } // packageOverrides)
      ) {};

    clusterable = clusterable_0_2_0;

    cmark_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cmark";
            version = "0.7.0";
            src = fetchHex {
              pkg = "cmark";
              version = "0.7.0";
              sha256 =
                "deffa0b66cba126433efb54c068354bcf7c1fd8ba0f579741ab1d3cb26e0f942";
            };

            meta = {
              longDescription = ''Elixir NIF for cmark (C), a parser library
                                following the CommonMark spec, a compatible
                                implementation of Markdown.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/cmark.ex";
            };
          } // packageOverrides)
      ) {};

    cmark = cmark_0_7_0;

    cnodex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cnodex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cnodex";
              version = "0.1.1";
              sha256 =
                "caf80956580ed4477cd763378897c6b39e54cc3d9bc15d01064f55a0af6e9064";
            };

            meta = {
              description = ''Attention: This project has been renamed to
                            nodex'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    cnodex = cnodex_0_1_1;

    cobertura_cover_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cobertura_cover";
            version = "0.9.0";
            src = fetchHex {
              pkg = "cobertura_cover";
              version = "0.9.0";
              sha256 =
                "870bc4658cacc5c80d13f1206b688925234d2dc4e00278e8a3e72fbbd6bea0b1";
            };

            meta = {
              longDescription = ''A plugin for `mix test --cover` that writes a
                                `coverage.xml` file compatible with Jenkins`
                                Cobertura plugin. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/PSPDFKit-labs/cobertura_cover";
            };
          } // packageOverrides)
      ) {};

    cobertura_cover = cobertura_cover_0_9_0;

    cobs_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cobs";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cobs";
              version = "0.2.0";
              sha256 =
                "3f0442fce227c16345835cb0b8532f5a14dbd627d46dccdfd2cbfb18a3b92176";
            };

            meta = {
              description = ''Elixir implementation of Consistent Overhead Byte
                            Stuffing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/krodelin/cobs-elixir";
            };
          } // packageOverrides)
      ) {};

    cobs = cobs_0_2_0;

    code_frame_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "code_frame";
            version = "0.1.0";
            src = fetchHex {
              pkg = "code_frame";
              version = "0.1.0";
              sha256 =
                "72303f3131a67be81ed90dbd48f833a034070bd4ab771b50a92096dbde4d339e";
            };

            meta = {
              description = ''Generate an excerpt of a string and highlight a
                            specific line'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/marvinhagemeister/elixir-code-frame";
            };
          } // packageOverrides)
      ) {};

    code_frame = code_frame_0_1_0;

    code_runner_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_5_1,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "code_runner";
            version = "0.1.1";
            src = fetchHex {
              pkg = "code_runner";
              version = "0.1.1";
              sha256 =
                "168f8dfdbafce5ede44e30603ac8377f6ff304a0489ab3b8f70939ef067d52ec";
            };
            beamDeps  = [ poolboy_1_5_1 porcelain_2_0_3 ];

            meta = {
              description = ''A module for running Elixir code in sandbox
                            environment'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/harfangk/code_runner";
            };
          } // packageOverrides)
      ) {};

    code_runner = code_runner_0_1_1;

    codec_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, private_0_1_1 }:
          buildMix ({
            name = "codec";
            version = "0.1.2";
            src = fetchHex {
              pkg = "codec";
              version = "0.1.2";
              sha256 =
                "ceeb915b72ff84ea5ea35d2fb89f6533f2fe36543fe86b44e90efca60910993a";
            };
            beamDeps  = [ private_0_1_1 ];

            meta = {
              longDescription = ''facilitates the development of layered binary
                                protocols while mostly sticking with the Elixir
                                bit field syntax.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carusso/codec";
            };
          } // packageOverrides)
      ) {};

    codec = codec_0_1_2;

    codepagex_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "codepagex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "codepagex";
              version = "0.1.4";
              sha256 =
                "21710d98fb2bc03a4d44365b66aba569c3a9267437cfafd09ca27ed92a99c75e";
            };

            meta = {
              longDescription = ''Codepagex is an elixir library to convert
                                between string encodings to and from utf-8. Like
                                iconv, but written in pure Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tallakt/codepagex";
            };
          } // packageOverrides)
      ) {};

    codepagex = codepagex_0_1_4;

    coerce_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "coerce";
            version = "1.0.1";
            src = fetchHex {
              pkg = "coerce";
              version = "1.0.1";
              sha256 =
                "b44a691700f7a1a15b4b7e2ff1fa30bebd669929ac8aa43cffe9e2f8bf051cf1";
            };

            meta = {
              description = ''Coerce allows defining coercions, standardized
                            conversions, between data types.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir-coerce";
            };
          } // packageOverrides)
      ) {};

    coerce = coerce_1_0_1;

    coercion_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "coercion";
            version = "1.0.0";
            src = fetchHex {
              pkg = "coercion";
              version = "1.0.0";
              sha256 =
                "1f815bc2d63a9628566432be780b099cba3d1ad17ea76805d1b2dd80879fcfa6";
            };

            meta = {
              description = ''Coerce and validate dirty values to Elixir
                            primitives.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/moxley/coercion";
            };
          } // packageOverrides)
      ) {};

    coercion = coercion_1_0_0;

    coffee_rotor_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rotor_0_2_2 }:
          buildMix ({
            name = "coffee_rotor";
            version = "0.2.1";
            src = fetchHex {
              pkg = "coffee_rotor";
              version = "0.2.1";
              sha256 =
                "cb2f786c1abf109ed4d86ec175c02cb09adb1f1ee52d7a4ef0c9e65979d4f365";
            };
            beamDeps  = [ rotor_0_2_2 ];

            meta = {
              description = ''A [rotor](https://github.com/HashNuke/rotor) to
                            compile CoffeeScript files '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/coffee_rotor";
            };
          } // packageOverrides)
      ) {};

    coffee_rotor = coffee_rotor_0_2_1;

    cogmint_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cogmint";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cogmint";
              version = "0.0.1";
              sha256 =
                "3d67fba5160f16003ae40cc60657bc019138ba55343493c5b31d4efa62a4d374";
            };

            meta = {
              description = ''Client for Cogmint Project'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    cogmint = cogmint_0_0_1;

    cognixir_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "cognixir";
            version = "0.4.0";
            src = fetchHex {
              pkg = "cognixir";
              version = "0.4.0";
              sha256 =
                "51503199ad514ceaf4b4939c6de00fd817fdecd1e191d3453426293749458a3d";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_1_0 ];

            meta = {
              longDescription = ''Elixir Client for Microsoft Cognitive
                                Services. With this library you can access the
                                cognitive services api and add machine
                                intelligence to your elixir application!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BrummbQ/cognixir";
            };
          } // packageOverrides)
      ) {};

    cognixir = cognixir_0_4_0;

    coincap_ex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "coincap_ex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "coincap_ex";
              version = "0.2.0";
              sha256 =
                "2a98a6325c12fc06cd6261c021be4744ec8e15c47e494bc13b3a3eb8da41b6f1";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''CoinCap.io API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbenatti/coincap_ex";
            };
          } // packageOverrides)
      ) {};

    coincap_ex = coincap_ex_0_2_0;

    coincap_io_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_13_0,
          poison_2_2_0,
          vex_0_8_0
        }:
          buildMix ({
            name = "coincap_io";
            version = "0.0.4";
            src = fetchHex {
              pkg = "coincap_io";
              version = "0.0.4";
              sha256 =
                "ca55b86e76a95b3db4122798b2c5e8123a1f3ea9b9358624eb48c65cbff211a3";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_0_13_0
                          poison_2_2_0
                          vex_0_8_0
                        ];

            meta = {
              longDescription = ''WIP, unstable Elixir API wrapper for
                                coincap.io. Provides access to market
                                capitalization data of bitcoin, altcoins and
                                cryptotokens.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/coincap_io_ex";
            };
          } // packageOverrides)
      ) {};

    coincap_io = coincap_io_0_0_4;

    coincheck_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "coincheck_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "coincheck_ex";
              version = "0.1.0";
              sha256 =
                "be69cb77ff0576b298e2da071c4ec45fb4de963a2ee71d41262a8ae81fb15fdc";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Coincheck API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yanshiyason/coincheck_ex";
            };
          } // packageOverrides)
      ) {};

    coincheck_ex = coincheck_ex_0_1_0;

    coinmarketcap_api_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_1_2_0,
          jason_1_1_1,
          poison_3_1_0,
          tesla_1_0_0
        }:
          buildMix ({
            name = "coinmarketcap_api";
            version = "2.0.1";
            src = fetchHex {
              pkg = "coinmarketcap_api";
              version = "2.0.1";
              sha256 =
                "359655478dbfcaa2eeca4e1ef26b83ec562673e74343d194b07d42634011a71d";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_1_2_0
                          jason_1_1_1
                          poison_3_1_0
                          tesla_1_0_0
                        ];

            meta = {
              longDescription = ''Coinmarketcap.com v2 API client for
                                Elixir/Erlang. Provides access to ticker and
                                historical data for cryptocurrencies like
                                Ethereum, Bitcoin, Monero, etc.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/coinmarketcap_api_ex";
            };
          } // packageOverrides)
      ) {};

    coinmarketcap_api = coinmarketcap_api_2_0_1;

    coinpayments_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tesla_0_10_0 }:
          buildMix ({
            name = "coinpayments";
            version = "0.5.2";
            src = fetchHex {
              pkg = "coinpayments";
              version = "0.5.2";
              sha256 =
                "c6c060c0e2d3df4e545f5067137b38f48b2433bfe2fccf3facdfefaaa8043fb2";
            };
            beamDeps  = [ tesla_0_10_0 ];

            meta = {
              description = ''A wrapper for the Coinpayments API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shannonwells/coinpayments_ex";
            };
          } // packageOverrides)
      ) {};

    coinpayments = coinpayments_0_5_2;

    colixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "colixir";
              version = "0.0.1";
              sha256 =
                "38dc49351419c6fcfdb76bbc785e07c3acf83cc29f632719dd601ecadbfb73b8";
            };

            meta = {
              description = ''Colixir creates colorized text for terminal
                            output'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mondok/colixir";
            };
          } // packageOverrides)
      ) {};

    colixir = colixir_0_0_1;

    collectable_utils_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "collectable_utils";
            version = "0.1.0";
            src = fetchHex {
              pkg = "collectable_utils";
              version = "0.1.0";
              sha256 =
                "8fa467dfc5efbef9e5501be718c85b56916918b61d067e71965185bee8dc0462";
            };

            meta = {
              description = ''A collection of functions for working with
                            Collectables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/collectable_utils";
            };
          } // packageOverrides)
      ) {};

    collectable_utils = collectable_utils_0_1_0;

    collision_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "collision";
            version = "0.3.1";
            src = fetchHex {
              pkg = "collision";
              version = "0.3.1";
              sha256 =
                "e20c2ba89772bf35aeed1b7f9bd8f41e3456fdd2ed95b0f04a67db4fc3e2b666";
            };

            meta = {
              longDescription = ''A library for creating, manipulating, and
                                detecting and resolving collisions between
                                polygons.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tpoulsen/collision";
            };
          } // packageOverrides)
      ) {};

    collision = collision_0_3_1;

    cologne_phonetic_ex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cologne_phonetic_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cologne_phonetic_ex";
              version = "1.0.0";
              sha256 =
                "bdd022d5e427295eae9b894b369f5823d28873b801e82382c9f5e5b2b39f1825";
            };

            meta = {
              longDescription = ''Calculates and returns the \"Cologne
                                Phonetic\" (Kölner Phonetik) code for the given
                                string. It`s the phonetic code for the German
                                language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Fulnir/cologne_phonetic_ex";
            };
          } // packageOverrides)
      ) {};

    cologne_phonetic_ex = cologne_phonetic_ex_1_0_0;

    color_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "color";
            version = "0.1.0";
            src = fetchHex {
              pkg = "color";
              version = "0.1.0";
              sha256 =
                "c864b4d5f83050f810f311dff674c5486f87c028d8cd495612a0f97829afe6ff";
            };

            meta = {
              longDescription = ''Color is a Elixir library to provide basic
                                RGB, CMYK, HSL, and other colourspace
                                manipulation support to applications that
                                require it'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fertapric/color";
            };
          } // packageOverrides)
      ) {};

    color = color_0_1_0;

    color_stream_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "color_stream";
            version = "0.0.2";
            src = fetchHex {
              pkg = "color_stream";
              version = "0.0.2";
              sha256 =
                "b1181f32b310311016006f4f8d52b3418d1af6f06e71903daabafdcaa602a29d";
            };

            meta = {
              description = ''Generate random colors that are fairly spaced out
                            and look nice.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/code-lever/color-stream-elixir";
            };
          } // packageOverrides)
      ) {};

    color_stream = color_stream_0_0_2;

    color_utils_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "color_utils";
            version = "0.2.0";
            src = fetchHex {
              pkg = "color_utils";
              version = "0.2.0";
              sha256 =
                "bf16a1a9de7d837a68ede139c6e06bc9d57f9eccedff302f730105bd80d98647";
            };

            meta = {
              description = ''A Color Util library for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/barakyo/color_utils";
            };
          } // packageOverrides)
      ) {};

    color_utils = color_utils_0_2_0;

    colorful_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colorful";
            version = "0.6.0";
            src = fetchHex {
              pkg = "colorful";
              version = "0.6.0";
              sha256 =
                "6b00225f137efdde7901d3ddc7626a3b33031c20ea145097b2442680e72adc3d";
            };

            meta = {
              description = ''Modules which manage colors'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/colorful";
            };
          } // packageOverrides)
      ) {};

    colorful = colorful_0_6_0;

    colorify_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colorify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "colorify";
              version = "0.1.0";
              sha256 =
                "af501f91ed2b3ba7cd6e7a5c2940b44d3f9ca78a455dd7d0e8641cd100714f64";
            };

            meta = {
              description = ''Converts a binary to hex color for HTML & CSS
                            usage.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/murtza/colorify";
            };
          } // packageOverrides)
      ) {};

    colorify = colorify_0_1_0;

    colorize_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colorize";
            version = "0.2.0";
            src = fetchHex {
              pkg = "colorize";
              version = "0.2.0";
              sha256 =
                "d43757bae49d6da310d641cf7ec809bdc0b6a9eb40fb7ac4c57c1dbbb7d4e32e";
            };

            meta = {
              description = ''Colorize your text in the console'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/colorize";
            };
          } // packageOverrides)
      ) {};

    colorize = colorize_0_2_0;

    colors_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colors";
            version = "1.1.1";
            src = fetchHex {
              pkg = "colors";
              version = "1.1.1";
              sha256 =
                "f1c06de5d0c23dc112318d7339083a8cc4c0fc944fd2cbf38b8474adcf77419a";
            };

            meta = {
              description = ''a colors util'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/colors";
            };
          } // packageOverrides)
      ) {};

    colors = colors_1_1_1;

    columbo_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "columbo";
            version = "2.0.0";
            src = fetchHex {
              pkg = "columbo";
              version = "2.0.0";
              sha256 =
                "647e03059a6344a8d94217059a0d7a5d01e21e1609b6f5a2a1e33c6bce4bb143";
            };

            meta = {
              description = ''Erlang service discovery and tracking system for
                            clusters'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aruki-delivery/columbo";
            };
          } // packageOverrides)
      ) {};

    columbo = columbo_2_0_0;

    combination_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "combination";
            version = "0.0.3";
            src = fetchHex {
              pkg = "combination";
              version = "0.0.3";
              sha256 =
                "72b099f463df42ef7dc6371d250c7070b57b6c5902853f69deb894f79eda18ca";
            };

            meta = {
              description = ''Elixir library computing simple combination and
                            permutation on Enumerables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-combination";
            };
          } // packageOverrides)
      ) {};

    combination = combination_0_0_3;

    combine_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "combine";
            version = "0.10.0";
            src = fetchHex {
              pkg = "combine";
              version = "0.10.0";
              sha256 =
                "1b1dbc1790073076580d0d1d64e42eae2366583e7aecd455d1215b0d16f2451b";
            };

            meta = {
              description = ''A parser combinator library for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/combine";
            };
          } // packageOverrides)
      ) {};

    combine = combine_0_10_0;

    combine_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "combine";
            version = "0.7.0";
            src = fetchHex {
              pkg = "combine";
              version = "0.7.0";
              sha256 =
                "3ac1b6622e6149204899c7069b850a53ed38d1a749cc7357aeffe86e8bfc593c";
            };

            meta = {
              description = ''A parser combinator library for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/combine";
            };
          } // packageOverrides)
      ) {};

    comeonin_1_6_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, comeonin_i18n_0_1_3
        }:
          buildMix ({
            name = "comeonin";
            version = "1.6.0";
            src = fetchHex {
              pkg = "comeonin";
              version = "1.6.0";
              sha256 =
                "40dd0da2c33696d19515888fd86b9ffdcad92d49e9a6b3b13df98e824897a1b1";
            };
            beamDeps  = [ comeonin_i18n_0_1_3 ];

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "comeonin";
            version = "2.0.3";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.0.3";
              sha256 =
                "a9a6f87107ebf6898adeca7130adb1b9e421c1be7e8b30b13ac1e0354ea15198";
            };

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_2_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "comeonin";
            version = "2.1.1";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.1.1";
              sha256 =
                "7f85774ae5d453f664d0e7809cc1ab32ff22855d16ff6a2edd68c6d36cb1a1aa";
            };

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_2_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "comeonin";
            version = "2.6.0";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.6.0";
              sha256 =
                "bc72f049a1c61048427f557821fc06e273abf09f6829377541475d7b36ac8ac6";
            };

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_4_0_0_rc_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          argon2_elixir_1_3_1,
          bcrypt_elixir_1_0_1,
          pbkdf2_elixir_0_12_3
        }:
          buildMix ({
            name = "comeonin";
            version = "4.0.0-rc.0";
            src = fetchHex {
              pkg = "comeonin";
              version = "4.0.0-rc.0";
              sha256 =
                "81181133ffb98462cff27f40c837d2420cb12fa0bd640ad69ddba00afebac828";
            };
            beamDeps  = [
                          argon2_elixir_1_3_1
                          bcrypt_elixir_1_0_1
                          pbkdf2_elixir_0_12_3
                        ];

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_4_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          argon2_elixir_1_3_1,
          bcrypt_elixir_1_0_1,
          pbkdf2_elixir_0_12_3
        }:
          buildMix ({
            name = "comeonin";
            version = "4.0.3";
            src = fetchHex {
              pkg = "comeonin";
              version = "4.0.3";
              sha256 =
                "2b7b82fc468a2fb22e9f7db0a27e88911ea6d7de6f3cae69ef84c011c6088d02";
            };
            beamDeps  = [
                          argon2_elixir_1_3_1
                          bcrypt_elixir_1_0_1
                          pbkdf2_elixir_0_12_3
                        ];

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_4_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          argon2_elixir_1_3_1,
          bcrypt_elixir_1_0_1,
          pbkdf2_elixir_0_12_3
        }:
          buildMix ({
            name = "comeonin";
            version = "4.1.1";
            src = fetchHex {
              pkg = "comeonin";
              version = "4.1.1";
              sha256 =
                "48b5691682dc7b4d744af1fe4660c6bceb14e49acf2a900309a20990a0eb7d64";
            };
            beamDeps  = [
                          argon2_elixir_1_3_1
                          bcrypt_elixir_1_0_1
                          pbkdf2_elixir_0_12_3
                        ];

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin = comeonin_4_1_1;

    comeonin_i18n_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_15_0 }:
          buildMix ({
            name = "comeonin_i18n";
            version = "0.1.3";
            src = fetchHex {
              pkg = "comeonin_i18n";
              version = "0.1.3";
              sha256 =
                "4b45ca5af3cbf20bf7d3f7e874629041a2a921ad5a62ca9b94546a1e559023a6";
            };
            beamDeps  = [ gettext_0_15_0 ];

            meta = {
              description = ''Internationalization support for the Comeonin
                            password hashing library.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixircnx/comeonin_i18n";
            };
          } // packageOverrides)
      ) {};

    comeonin_i18n = comeonin_i18n_0_1_3;

    commanded_0_16_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_pubsub_1_0_2,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "commanded";
            version = "0.16.0";
            src = fetchHex {
              pkg = "commanded";
              version = "0.16.0";
              sha256 =
                "52f6f768f9dfda50067476f9d80b10cc1d2b9b0b09c67d357b8e1cd21b8f7176";
            };
            beamDeps  = [ phoenix_pubsub_1_0_2 poison_3_1_0 uuid_1_1_8 ];

            meta = {
              longDescription = ''Use Commanded to build your own Elixir
                                applications following the CQRS/ES pattern.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/commanded/commanded";
            };
          } // packageOverrides)
      ) {};

    commanded = commanded_0_16_0;

    commanded_swarm_registry_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          commanded_0_16_0,
          swarm_3_3_1
        }:
          buildMix ({
            name = "commanded_swarm_registry";
            version = "0.2.0";
            src = fetchHex {
              pkg = "commanded_swarm_registry";
              version = "0.2.0";
              sha256 =
                "1cc71b7021e0455f3abfe307f41c33280c2703887e07e3eb5412def4bad7cc45";
            };
            beamDeps  = [ commanded_0_16_0 swarm_3_3_1 ];

            meta = {
              description = ''Distributed process registry for Commanded using
                            Swarm'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/commanded/commanded-swarm-registry";
            };
          } // packageOverrides)
      ) {};

    commanded_swarm_registry = commanded_swarm_registry_0_2_0;

    commander_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "commander";
            version = "1.1.0";
            src = fetchHex {
              pkg = "commander";
              version = "1.1.0";
              sha256 =
                "ef598cd33bcd316b13ec268c0e4526863aea5d48320ad75f533a0e212dc0c4c5";
            };

            meta = {
              description = ''A macro library to help create telegram bot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlo-colombo/commander";
            };
          } // packageOverrides)
      ) {};

    commander = commander_1_1_0;

    commando_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "commando";
            version = "0.1.0";
            src = fetchHex {
              pkg = "commando";
              version = "0.1.0";
              sha256 =
                "c310d3a491ea7f793966c99b65fb4080bcfc5f16a9ed731c99bf8c9a752f2e8b";
            };

            meta = {
              longDescription = ''Elixir command line options parser with
                                descriptions, help messages, default values, and
                                other useful features'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/svetob/commando";
            };
          } // packageOverrides)
      ) {};

    commando = commando_0_1_0;

    commerce_billing_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          httpoison_1_2_0,
          jazz_0_2_2,
          mock_0_3_1
        }:
          buildMix ({
            name = "commerce_billing";
            version = "0.0.2";
            src = fetchHex {
              pkg = "commerce_billing";
              version = "0.0.2";
              sha256 =
                "6bb751f496011b974cb8d536b079eb7dfaeee4be827e4cf2fe0585e10f26bd04";
            };
            beamDeps  = [ ex_doc_0_18_3 httpoison_1_2_0 jazz_0_2_2 mock_0_3_1
                      ];

            meta = {
              description = ''Credit card processing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshnuss/commerce_billing";
            };
          } // packageOverrides)
      ) {};

    commerce_billing = commerce_billing_0_0_2;

    comms_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "comms";
            version = "0.1.0";
            src = fetchHex {
              pkg = "comms";
              version = "0.1.0";
              sha256 =
                "db18ca9188c39396178a7b4712ed72f4b7a21db0ff34182ef05ebe13a613dd48";
            };

            meta = {
              description = ''Explicit message passing for improved reasoning
                            about actor systems.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/comms";
            };
          } // packageOverrides)
      ) {};

    comms = comms_0_1_0;

    compassIO_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, chronos_1_5_1 }:
          buildMix ({
            name = "compassIO";
            version = "0.0.1";
            src = fetchHex {
              pkg = "compassIO";
              version = "0.0.1";
              sha256 =
                "980a602623dd1caca67501bfab32a0b8b6bfb1c48550682ea29d254f335ccb6b";
            };
            beamDeps  = [ chronos_1_5_1 ];

            meta = {
              description = ''Read (and eventually write) compass .DAT
                            files.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tobyprivett/compassIO";
            };
          } // packageOverrides)
      ) {};

    compassIO = compassIO_0_0_1;

    compiler_cache_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "compiler_cache";
            version = "1.1.0";
            src = fetchHex {
              pkg = "compiler_cache";
              version = "1.1.0";
              sha256 =
                "86127383f400300c774d41ec26fb227152d8747a21f35866a6190fda62c760ca";
            };

            meta = {
              description = ''LRU cache for compiling expressions into
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/compiler_cache";
            };
          } // packageOverrides)
      ) {};

    compiler_cache = compiler_cache_1_1_0;

    compiletime_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "compiletime";
            version = "0.2.0";
            src = fetchHex {
              pkg = "compiletime";
              version = "0.2.0";
              sha256 =
                "36cf66a457160724a7b9e4e03037e6b1454af974b69aa992be1aac7c66003c87";
            };

            meta = {
              description = ''A collection of helpful compiletime tools'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/compile";
            };
          } // packageOverrides)
      ) {};

    compiletime = compiletime_0_2_0;

    complex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_2_1,
          exprintf_0_2_1
        }:
          buildMix ({
            name = "complex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "complex";
              version = "0.2.0";
              sha256 =
                "6db6a2850ed907c4d9e062591110dc70c35c3818ccf609f1268052a3f4bf10b0";
            };
            beamDeps  = [ earmark_0_2_1 exprintf_0_2_1 ];

            meta = {
              description = ''Complex is a library for types and mathematical
                            functions for complex numbers.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-complex.git";
            };
          } // packageOverrides)
      ) {};

    complex = complex_0_2_0;

    complex_num_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, numbers_2_0_3 }:
          buildMix ({
            name = "complex_num";
            version = "1.0.3";
            src = fetchHex {
              pkg = "complex_num";
              version = "1.0.3";
              sha256 =
                "f75d9825bae2f2db9853de9300e269750b4ff0528744dc7d152bc4e11c03030a";
            };
            beamDeps  = [ numbers_2_0_3 ];

            meta = {
              longDescription = ''ComplexNum allows you to do math with Complex
                                Numbers. Both Cartesian and Polar form are
                                supported.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_complex_num/";
            };
          } // packageOverrides)
      ) {};

    complex_num_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_5_0,
          numbers_5_1_0,
          ratio_2_2_0
        }:
          buildMix ({
            name = "complex_num";
            version = "1.1.0";
            src = fetchHex {
              pkg = "complex_num";
              version = "1.1.0";
              sha256 =
                "af43eef08804efa9034f23c8d3cbfbb6301239528df44730101f503333d03ed9";
            };
            beamDeps  = [ decimal_1_5_0 numbers_5_1_0 ratio_2_2_0 ];

            meta = {
              longDescription = ''ComplexNum allows you to do math with Complex
                                Numbers. Both Cartesian and Polar form are
                                supported.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_complex_num/";
            };
          } // packageOverrides)
      ) {};

    complex_num = complex_num_1_1_0;

    complex_num_sigil_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, complex_num_1_1_0
        }:
          buildMix ({
            name = "complex_num_sigil";
            version = "0.1.0";
            src = fetchHex {
              pkg = "complex_num_sigil";
              version = "0.1.0";
              sha256 =
                "d0f32001c24ded991a646c8683359dad0ab77534fca1c2020cd670633b5c9005";
            };
            beamDeps  = [ complex_num_1_1_0 ];

            meta = {
              description = ''Adds a `~i` sigil for working with
                            `ComplexNum`.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/livinginthepast/complex_num_sigil";
            };
          } // packageOverrides)
      ) {};

    complex_num_sigil = complex_num_sigil_0_1_0;

    compound_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "compound";
            version = "0.2.0";
            src = fetchHex {
              pkg = "compound";
              version = "0.2.0";
              sha256 =
                "0daecab1809b17886521cf314fcd4b67abd83a19d06b801b244c56292346c00a";
            };

            meta = {
              description = ''Compound is a minimalistic TCP Server written in
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lvlick/Compound";
            };
          } // packageOverrides)
      ) {};

    compound = compound_0_2_0;

    comredis_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "comredis";
            version = "1.0.1";
            src = fetchHex {
              pkg = "comredis";
              version = "1.0.1";
              sha256 =
                "03aa3a9235f39c666854027b88915b9f256c357ce6e0a493da54d6dec7b3a207";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Comredis is your comrade for Redis command
                            generation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iurifq/comredis";
            };
          } // packageOverrides)
      ) {};

    comredis = comredis_1_0_1;

    con_cache_0_11_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_4 }:
          buildMix ({
            name = "con_cache";
            version = "0.11.1";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.11.1";
              sha256 =
                "0e444e1884db44e9904fb00a50f6c06a6288c69577e5555e1fcb61ff156a5ad9";
            };
            beamDeps  = [ exactor_2_2_4 ];

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          } // packageOverrides)
      ) {};

    con_cache_0_12_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_4 }:
          buildMix ({
            name = "con_cache";
            version = "0.12.1";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.12.1";
              sha256 =
                "e72ea94da0ad5d651fe4fa5e6c9b85e16b3583f0690af7fc4de191eac370bcae";
            };
            beamDeps  = [ exactor_2_2_4 ];

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          } // packageOverrides)
      ) {};

    con_cache_0_13_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "con_cache";
            version = "0.13.0";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.13.0";
              sha256 =
                "350cf66ef28fd8800088302c429f511f766dd143872cfec8e9cb59d187023e03";
            };

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          } // packageOverrides)
      ) {};

    con_cache = con_cache_0_13_0;

    con_cache_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_4 }:
          buildMix ({
            name = "con_cache";
            version = "0.9.0";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.9.0";
              sha256 =
                "600b122653d7e5f6414bb0728fa6133c656e2d24fad7f0a31bb89c1c70ec68bb";
            };
            beamDeps  = [ exactor_2_2_4 ];

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          } // packageOverrides)
      ) {};

    concern_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "concern";
            version = "0.1.0";
            src = fetchHex {
              pkg = "concern";
              version = "0.1.0";
              sha256 =
                "1ddf24e0055714ea41f6a732172ebc4e47dabda76afbdcd99b56feff62b1fb9b";
            };

            meta = {
              description = ''Bring ActiveSupport::Concern to Elixir world'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Aetherus/concern";
            };
          } // packageOverrides)
      ) {};

    concern = concern_0_1_0;

    concerto_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "concerto";
            version = "0.1.5";
            src = fetchHex {
              pkg = "concerto";
              version = "0.1.5";
              sha256 =
                "1d8a12ab5eee72c0c07df44ef6dccab499159c96b426b2db76a7de0f6455f7af";
            };

            meta = {
              description = ''file-based routing library for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/concerto";
            };
          } // packageOverrides)
      ) {};

    concerto = concerto_0_1_5;

    concha_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "concha";
            version = "0.1.0";
            src = fetchHex {
              pkg = "concha";
              version = "0.1.0";
              sha256 =
                "81d6c3f77254cac8d4a75ab69351ba0d0d3931070f70268d7189d3d4237a3342";
            };

            meta = {
              description = ''A consistent hashing library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlosgaldino/concha";
            };
          } // packageOverrides)
      ) {};

    concha = concha_0_1_0;

    conduit_amqp_client_3_6_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, rabbit_common_3_5_6
        }:
          buildRebar3 ({
            name = "conduit_amqp_client";
            version = "3.6.2";
            src = fetchHex {
              pkg = "conduit_amqp_client";
              version = "3.6.2";
              sha256 =
                "ee8f1b12197ca267b134baa058d770af693fe6a1574925d329fb929438920893";
            };

            beamDeps  = [ rabbit_common_3_5_6 ];

            meta = {
              description = ''RabbitMQ AMQP Client'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    conduit_amqp_client = conduit_amqp_client_3_6_2;

    conduit_rabbit_common_2_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "conduit_rabbit_common";
            version = "2.7.1";
            src = fetchHex {
              pkg = "conduit_rabbit_common";
              version = "2.7.1";
              sha256 =
                "aa530774308e48d869e3ff250416684578d3386ebb31b5cf187e2aff034c3a87";
            };

            meta = {
              description = ''RabbitMQ Common Libraries'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    conduit_rabbit_common = conduit_rabbit_common_2_7_1;

    conekta_1_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "conekta";
            version = "1.0.7";
            src = fetchHex {
              pkg = "conekta";
              version = "1.0.7";
              sha256 =
                "b38da855b1602f3d22a4bda133ab15497496622d0af14bb2685491b841474890";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir library for Conekta api calls'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/echavezNS/conekta-elixir.git";
            };
          } // packageOverrides)
      ) {};

    conekta = conekta_1_0_7;

    conekta_ex_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "conekta_ex";
            version = "1.0.3";
            src = fetchHex {
              pkg = "conekta_ex";
              version = "1.0.3";
              sha256 =
                "03219f461df4376058918be0f22a5f06ec32c61cce3b204a254109790345d812";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Conekta API Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nysertxs/conekta_ex";
            };
          } // packageOverrides)
      ) {};

    conekta_ex = conekta_ex_1_0_3;

    confex_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "1.5.0";
            src = fetchHex {
              pkg = "confex";
              version = "1.5.0";
              sha256 =
                "1919eae7c7ab7eb8a533059b7a6b16447ec58b43062c73bf4bd0dc8204ea1019";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "2.0.1";
            src = fetchHex {
              pkg = "confex";
              version = "2.0.1";
              sha256 =
                "6ba4d880d3a7f4eb68553b8cd197bd2d9dcdb82ceaa8d1d515109e5c927dfe47";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex_3_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "3.2.2";
            src = fetchHex {
              pkg = "confex";
              version = "3.2.2";
              sha256 =
                "2d8df0a909c07cd5b4ad452ef81071796370e62180136288fa03f45e42f0ec32";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex_3_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "3.2.3";
            src = fetchHex {
              pkg = "confex";
              version = "3.2.3";
              sha256 =
                "ee04f41e9780be59713dfdb0d5132486db361bc79255318a8d6afdf165736107";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex_3_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "3.3.1";
            src = fetchHex {
              pkg = "confex";
              version = "3.3.1";
              sha256 =
                "61a9a4fff223130cbcda4ee2396f9cb0d8c49861e96c57e46293827308e99a80";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex = confex_3_3_1;

    config_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config";
            version = "0.1.0";
            src = fetchHex {
              pkg = "config";
              version = "0.1.0";
              sha256 =
                "7ef9d010ee924763035dabe401c20306c152cf3c812d60fefb3e800a9e9d66c8";
            };

            meta = {
              longDescription = ''Provides convenient way to load application
                                configuration from config files and environment
                                variables.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    config = config_0_1_0;

    config_env_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config_env";
            version = "0.2.0";
            src = fetchHex {
              pkg = "config_env";
              version = "0.2.0";
              sha256 =
                "f777bc18de7dd5bb8596fb91fcb391d2e5aefbe1d55d60c27b388660e6895f5a";
            };

            meta = {
              description = ''Configuration loader from system environment'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ammbot/config_env";
            };
          } // packageOverrides)
      ) {};

    config_env = config_env_0_2_0;

    config_ext_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config_ext";
            version = "0.3.0";
            src = fetchHex {
              pkg = "config_ext";
              version = "0.3.0";
              sha256 =
                "0427a67d0f88191a3254f223318bf18397e37d3e9df1c6a6844615f67494729d";
            };

            meta = {
              longDescription = ''A bunch of common elixir config helpers to
                                load config from environment variables or by
                                executing a function.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/driv3r/config_ext";
            };
          } // packageOverrides)
      ) {};

    config_ext = config_ext_0_3_0;

    config_getters_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config_getters";
            version = "0.1.0";
            src = fetchHex {
              pkg = "config_getters";
              version = "0.1.0";
              sha256 =
                "4f4b6778816b4a377d18654d85ac9202abf745b24661aa7c8040f06a91485e8e";
            };

            meta = {
              description = ''Simple config value getter generator for Elixir
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jbernardo95/config_getters";
            };
          } // packageOverrides)
      ) {};

    config_getters = config_getters_0_1_0;

    config_validator_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config_validator";
            version = "0.1.2";
            src = fetchHex {
              pkg = "config_validator";
              version = "0.1.2";
              sha256 =
                "970b66f274b6e0f85925c34653b0dfb7ff14a2209ec22b9c940f58d6f541a798";
            };

            meta = {
              description = ''Configuration validation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/config_validator";
            };
          } // packageOverrides)
      ) {};

    config_validator = config_validator_0_1_2;

    config_values_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config_values";
            version = "1.0.0";
            src = fetchHex {
              pkg = "config_values";
              version = "1.0.0";
              sha256 =
                "cdbd33fd68cf7fa4fe88dfc1f73e5d26f69d86132650dfba9a636dc75f6cb26c";
            };

            meta = {
              description = ''Interpolated configuration values'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hassox/config_values";
            };
          } // packageOverrides)
      ) {};

    config_values = config_values_1_0_0;

    configparser_ex_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "configparser_ex";
            version = "2.0.0";
            src = fetchHex {
              pkg = "configparser_ex";
              version = "2.0.0";
              sha256 =
                "f52ddb9c02dadf9a760dc2899d4804a99f5af6f30ea3932c124788c87d543a14";
            };

            meta = {
              description = ''A module that parses INI-like files. Not unlike
                            the Python configparser package.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/easco/configparser_ex";
            };
          } // packageOverrides)
      ) {};

    configparser_ex_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "configparser_ex";
            version = "3.0.0";
            src = fetchHex {
              pkg = "configparser_ex";
              version = "3.0.0";
              sha256 =
                "7b15c23dcbc5d8cc812e4976b10a8f5eb72fce6490557120496b12ee436009c7";
            };

            meta = {
              description = ''A module that parses INI-like files. Not unlike
                            the Python configparser package.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/easco/configparser_ex";
            };
          } // packageOverrides)
      ) {};

    configparser_ex = configparser_ex_3_0_0;

    configure_it_out_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "configure_it_out";
            version = "0.3.0";
            src = fetchHex {
              pkg = "configure_it_out";
              version = "0.3.0";
              sha256 =
                "90243e0534074416570efa639313dbe1a553db039d8fdbc715afe12283b4cdf5";
            };

            meta = {
              longDescription = ''A collection of helpful tools for helping you
                                understand your Elixir application`s
                                configuration settings.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/configure_it_out";
            };
          } // packageOverrides)
      ) {};

    configure_it_out = configure_it_out_0_3_0;

    confix_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confix";
            version = "0.4.0";
            src = fetchHex {
              pkg = "confix";
              version = "0.4.0";
              sha256 =
                "23ac7e7f1ea48d61f95f1be97246d4cbbe6dfb6e1197a3e610b9f3b4cdee3219";
            };

            meta = {
              description = ''Read, parse and patch Elixir application`s
                            configuration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/surgeventures/confix";
            };
          } // packageOverrides)
      ) {};

    confix = confix_0_4_0;

    confload_0_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, file_system_0_1_5
        }:
          buildMix ({
            name = "confload";
            version = "0.2.1";
            src = fetchHex {
              pkg = "confload";
              version = "0.2.1";
              sha256 =
                "2752835b0402808555f7ff2626a26716661f05bce4127d27a9c35eb990057c62";
            };
            beamDeps  = [ file_system_0_1_5 ];

            meta = {
              description = ''OTP compliant configuration reloader for
                            distillery'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liveforeverx/confload";
            };
          } // packageOverrides)
      ) {};

    confload = confload_0_2_1;

    confsul_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, consul_1_1_0 }:
          buildMix ({
            name = "confsul";
            version = "0.1.2";
            src = fetchHex {
              pkg = "confsul";
              version = "0.1.2";
              sha256 =
                "4451dc6840d77551848df826e41c18036ff36e2aa21e750abbeaa1c2a74b617d";
            };
            beamDeps  = [ consul_1_1_0 ];

            meta = {
              description = ''Configure your Elixir apps using Consul'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ponchomf/confsul";
            };
          } // packageOverrides)
      ) {};

    confsul = confsul_0_1_2;

    conjunction_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "conjunction";
            version = "1.0.2";
            src = fetchHex {
              pkg = "conjunction";
              version = "1.0.2";
              sha256 =
                "1314060876aa584b62a8f985e71c8f22c1e5f6d8d4250b26451c4fb79c2b1f1f";
            };

            meta = {
              description = ''Combine a list of strings with a conjunction'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dustinspecker/conjunction";
            };
          } // packageOverrides)
      ) {};

    conjunction = conjunction_1_0_2;

    conn_pool_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          agent_map_0_9_9,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "conn_pool";
            version = "0.2.1";
            src = fetchHex {
              pkg = "conn_pool";
              version = "0.2.1";
              sha256 =
                "5878f3cd4325ae572631dd58e4793503305639a56bdfd6967e3a4df03a4748ee";
            };
            beamDeps  = [ agent_map_0_9_9 httpoison_1_2_0 ];

            meta = {
              longDescription = ''Connection pool helps storing, sharing and
                                using connections. It also make its possible to
                                use the same connection concurrently.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zergera/conn-pool";
            };
          } // packageOverrides)
      ) {};

    conn_pool = conn_pool_0_2_1;

    connection_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "connection";
            version = "1.0.4";
            src = fetchHex {
              pkg = "connection";
              version = "1.0.4";
              sha256 =
                "4a0850c9be22a43af9920a71ab17c051f5f7d45c209e40269a1938832510e4d9";
            };

            meta = {
              description = ''Connection behaviour for connection processes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/connection";
            };
          } // packageOverrides)
      ) {};

    connection = connection_1_0_4;

    connex_1_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_5_1,
          redix_0_7_1
        }:
          buildMix ({
            name = "connex";
            version = "1.0.4";
            src = fetchHex {
              pkg = "connex";
              version = "1.0.4";
              sha256 =
                "9f48b26bfd7dcaf8cedda641ff61ee65e4059a976c5b05cc6eca948cae1888ed";
            };
            beamDeps  = [ poolboy_1_5_1 redix_0_7_1 ];

            meta = {
              description = ''Pooling and sharding connections'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gumi/connex";
            };
          } // packageOverrides)
      ) {};

    connex = connex_1_0_4;

    conqueuer_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_10_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "conqueuer";
            version = "0.5.1";
            src = fetchHex {
              pkg = "conqueuer";
              version = "0.5.1";
              sha256 =
                "7370e2a0201f73ced6b202877b4dcb6872e1b6bbb0c024b1edee3a058dd653ab";
            };
            beamDeps  = [ inflex_1_10_0 poolboy_1_5_1 ];

            meta = {
              description = ''An Elixir in memory work queue.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/midas/conqueuer";
            };
          } // packageOverrides)
      ) {};

    conqueuer = conqueuer_0_5_1;

    console_tree_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "console_tree";
            version = "0.0.1";
            src = fetchHex {
              pkg = "console_tree";
              version = "0.0.1";
              sha256 =
                "c7dea20c14fd8bc6697a68f2917def38d20c772eb4b5715b18197672e7ddc0eb";
            };

            meta = {
              longDescription = ''A simple library to print a text
                                representation of a tree structure, intended for
                                use in a terminal environment.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciaran/console_tree";
            };
          } // packageOverrides)
      ) {};

    console_tree = console_tree_0_0_1;

    const_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "const";
            version = "0.1.0";
            src = fetchHex {
              pkg = "const";
              version = "0.1.0";
              sha256 =
                "a33d67c278b83b1f143ed6af33fc1824789bb0519184bcf1d76795ed536e202f";
            };

            meta = {
              description = ''A simple helper to define constants'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/const";
            };
          } // packageOverrides)
      ) {};

    const = const_0_1_0;

    constantine_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "constantine";
            version = "0.1.1";
            src = fetchHex {
              pkg = "constantine";
              version = "0.1.1";
              sha256 =
                "f9837807a04ac48df1652a17dab1e21788084952686c47d63a4d2118333bbc73";
            };

            meta = {
              description = ''Type-safe constants in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/timCF/constantine/";
            };
          } // packageOverrides)
      ) {};

    constantine = constantine_0_1_1;

    constants_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "constants";
            version = "0.1.0";
            src = fetchHex {
              pkg = "constants";
              version = "0.1.0";
              sha256 =
                "f2dc3e64173259411f7e91f598ea1c3dc8e7805da642715a238cccee84b1d7b4";
            };

            meta = {
              description = ''A library to help your easily define
                            constants.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vfsoraki/constants";
            };
          } // packageOverrides)
      ) {};

    constants = constants_0_1_0;

    construct_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "construct";
            version = "1.1.0";
            src = fetchHex {
              pkg = "construct";
              version = "1.1.0";
              sha256 =
                "6a435124507a80e5af4c3f3621b1d85aa91ecabd4bf7ab530bb6260c5b1b4367";
            };

            meta = {
              description = ''Library for dealing with data structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ExpressApp/construct";
            };
          } // packageOverrides)
      ) {};

    construct = construct_1_1_0;

    consul_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_6_2
        }:
          buildMix ({
            name = "consul";
            version = "1.0.3";
            src = fetchHex {
              pkg = "consul";
              version = "1.0.3";
              sha256 =
                "80d5836e4cbe686bff535634e719e0892455b03e77bcde149fb221c80fdb1a52";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_6_2 ];

            meta = {
              description = ''An Elixir client for Consul`s HTTP API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/consul-ex";
            };
          } // packageOverrides)
      ) {};

    consul_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "consul";
            version = "1.1.0";
            src = fetchHex {
              pkg = "consul";
              version = "1.1.0";
              sha256 =
                "2ad4ad12329a78da4c247c835f9c64739bd1bb9ad1921929d9dae71bd062d574";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''An Elixir client for Consul`s HTTP API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/consul-ex";
            };
          } // packageOverrides)
      ) {};

    consul = consul_1_1_0;

    containers_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "containers";
            version = "0.7.1";
            src = fetchHex {
              pkg = "containers";
              version = "0.7.1";
              sha256 =
                "80a21828e9d237d5bb3faae83e79f2e2b1861d0d15058e159ae4bd2a6e00fbcc";
            };

            meta = {
              longDescription = ''Functional container like data structures for
                                better runtime safety and polymorphism'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattludwigs/containers";
            };
          } // packageOverrides)
      ) {};

    containers = containers_0_7_1;

    content_indexer_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, stemmer_1_0_2 }:
          buildMix ({
            name = "content_indexer";
            version = "0.2.5";
            src = fetchHex {
              pkg = "content_indexer";
              version = "0.2.5";
              sha256 =
                "72a5f00464328c17e3782e9ad8c1ebad06953829c28f24d844f4abc2212ad2ad";
            };
            beamDeps  = [ stemmer_1_0_2 ];

            meta = {
              description = ''Genserver based content indexer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/netflakes/content_indexer";
            };
          } // packageOverrides)
      ) {};

    content_indexer = content_indexer_0_2_5;

    content_type_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "content_type";
            version = "0.1.0";
            src = fetchHex {
              pkg = "content_type";
              version = "0.1.0";
              sha256 =
                "bf01f4cec2ce7f7eeead6acca60c8d8d373122a16d6b2b6784c70fcd5667a84b";
            };

            meta = {
              description = ''A parser for the HTTP Content-Type header.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/marcelotto/content_type";
            };
          } // packageOverrides)
      ) {};

    content_type = content_type_0_1_0;

    contentful_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "contentful";
            version = "0.1.1";
            src = fetchHex {
              pkg = "contentful";
              version = "0.1.1";
              sha256 =
                "78301adfc4e0f8fbc3531e70c95ddf1353f5dfc57d19b6c5b9f4d25d0df8e49e";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Contentful Content Delivery API SDK'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/contentful-labs/contentful.ex";
            };
          } // packageOverrides)
      ) {};

    contentful = contentful_0_1_1;

    context_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "context";
            version = "0.1.0";
            src = fetchHex {
              pkg = "context";
              version = "0.1.0";
              sha256 =
                "83ae89cc655107eaf45c87e45d62e2c4a3232729e313e4df4107e5589397aa89";
            };

            meta = {
              description = ''Erlang Standard Context'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kivra/context";
            };
          } // packageOverrides)
      ) {};

    context = context_0_1_0;

    contextEX_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "contextEX";
            version = "0.3.6";
            src = fetchHex {
              pkg = "contextEX";
              version = "0.3.6";
              sha256 =
                "5b3e2182a3ccdb7258d2b877767f37792520c2e0ad2f40f4238015001cbc94cb";
            };

            meta = {
              description = ''Context-oriented Programming with Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mi-nakano/contextEX";
            };
          } // packageOverrides)
      ) {};

    contextEX = contextEX_0_3_6;

    contracts_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "contracts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "contracts";
              version = "0.1.0";
              sha256 =
                "057f06b938a8b8e9028a2dd4e8c4071ec342a2cb624071fa5d0b198734924806";
            };

            meta = {
              description = ''Design by Contracts for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/elixir-contracts";
            };
          } // packageOverrides)
      ) {};

    contracts = contracts_0_1_0;

    control_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "control";
            version = "0.1.0";
            src = fetchHex {
              pkg = "control";
              version = "0.1.0";
              sha256 =
                "dc47f8692f10baceefb43fb902b7093c5459a542b0de4991055cbbabb351e2b5";
            };

            meta = {
              description = ''An exploratory look into functors, applicatives,
                            and monads for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/elixir-control";
            };
          } // packageOverrides)
      ) {};

    control = control_0_1_0;

    conv_case_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "conv_case";
            version = "0.2.2";
            src = fetchHex {
              pkg = "conv_case";
              version = "0.2.2";
              sha256 =
                "561c550ab6d55b2a4d4c14449e58c9957798613eb26ea182e14a962965377bca";
            };

            meta = {
              longDescription = ''A library to convert strings, atoms and map
                                keys between `camelCase`, `snake_case` and
                                `kebab-case`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hrzndhrn/conv_case";
            };
          } // packageOverrides)
      ) {};

    conv_case = conv_case_0_2_2;

    convertat_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "convertat";
            version = "1.1.0";
            src = fetchHex {
              pkg = "convertat";
              version = "1.1.0";
              sha256 =
                "603229c43df6769f2166c78c5c3f31316390bf6e19fa8e15f02026170ab51a79";
            };

            meta = {
              description = ''Provides functions for converting from and to
                            arbitrary bases. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/convertat";
            };
          } // packageOverrides)
      ) {};

    convertat = convertat_1_1_0;

    convoy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, stemmer_1_0_2 }:
          buildMix ({
            name = "convoy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "convoy";
              version = "0.1.0";
              sha256 =
                "b045d6279cc1f6254e2a1dbdd2d4c5036533b6df723b44238c245bea9076e03f";
            };
            beamDeps  = [ stemmer_1_0_2 ];

            meta = {
              longDescription = ''Convoy is bot engine. You can operate with
                                rules like match, contains, starts_with, stem,
                                catch_all. Re-define Convoy.Rules.init_rules to
                                create your own rule set. See examples in the
                                tests.'';
              license = with stdenv.lib.licenses; [ free free ];
            };
          } // packageOverrides)
      ) {};

    convoy = convoy_0_1_0;

    cookie_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cookie";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cookie";
              version = "0.1.1";
              sha256 =
                "eec8878291f037ea24557dcf58b48f18e3ec8626d14c296220cc259106907a99";
            };

            meta = {
              description = ''HTTP state management with cookies.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/CrowdHailer/cookie.ex";
            };
          } // packageOverrides)
      ) {};

    cookie = cookie_0_1_1;

    cookie_jar_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_6_2,
          httpotion_3_1_0
        }:
          buildMix ({
            name = "cookie_jar";
            version = "1.0.3";
            src = fetchHex {
              pkg = "cookie_jar";
              version = "1.0.3";
              sha256 =
                "fd9892953d539667551fef05d80dacef422e376e35648ce91800d6c7ce135bae";
            };
            beamDeps  = [ httpoison_0_6_2 httpotion_3_1_0 ];

            meta = {
              description = ''CookieJar stores your cookies and applies them to
                            future requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/cookie_jar";
            };
          } // packageOverrides)
      ) {};

    cookie_jar = cookie_jar_1_0_3;

    cookie_store_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cookie_store";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cookie_store";
              version = "0.1.0";
              sha256 =
                "ff4cd2315bc9641602ffc931ab9450add3fd8d3086526f0739bfb6b5f221ac3c";
            };

            meta = {
              description = ''Library for parsing of HTTP cookies and
                            persistent storage'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/cookie_store";
            };
          } // packageOverrides)
      ) {};

    cookie_store = cookie_store_0_1_0;

    coordinate_transformer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "coordinate_transformer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "coordinate_transformer";
              version = "0.0.1";
              sha256 =
                "7759821a70c34e4e138da807c00a1de6ba8917addb457a27ceb32c666034008e";
            };

            meta = {
              longDescription = ''A small library of composable to manipulate
                                3-D cartesian coordinates using transformation
                                matrices and matrix multiplication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ckeyes88/coordinate_transformer";
            };
          } // packageOverrides)
      ) {};

    coordinate_transformer = coordinate_transformer_0_0_1;

    corenlp_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "corenlp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "corenlp";
              version = "0.1.1";
              sha256 =
                "96e07d99c054676808616609701378a1ff53f2fcf0d7745e90dbe1630ab9bd52";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''This package provides a client interface to a
                                Stanford CoreNLP Server for natural language
                                processing (NLP) of textual content.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arpieb/corenlp";
            };
          } // packageOverrides)
      ) {};

    corenlp = corenlp_0_1_1;

    cortex_0_5_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, file_system_0_2_6
        }:
          buildMix ({
            name = "cortex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "cortex";
              version = "0.5.0";
              sha256 =
                "3352cd4c67d7cc3cf0c2858bea48c0112c255cdfb665e6d9393a47328c36aa42";
            };
            beamDeps  = [ file_system_0_2_6 ];

            meta = {
              description = ''Cortex is the intelligent coding assistant for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/urbint/cortex";
            };
          } // packageOverrides)
      ) {};

    cortex = cortex_0_5_0;

    couch_factory_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "couch_factory";
            version = "0.2.0";
            src = fetchHex {
              pkg = "couch_factory";
              version = "0.2.0";
              sha256 =
                "eb685417e43670d5cea2e928ae2176bd6696e2fad69ca439428591e8cff6523c";
            };

            meta = {
              description = ''Factory Girl implementation with CouchDb
                            persistence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/javierg/couch_factory";
            };
          } // packageOverrides)
      ) {};

    couch_factory = couch_factory_0_2_0;

    couchdb_adapter_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          oauther_1_1_1,
          poison_3_1_0,
          tesla_0_7_2
        }:
          buildMix ({
            name = "couchdb_adapter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "couchdb_adapter";
              version = "0.1.0";
              sha256 =
                "a7a733ed897c373bed196afcd54337c08bac297494c26ef49e2b85a3e5fb7633";
            };
            beamDeps  = [
                          hackney_1_13_0 oauther_1_1_1 poison_3_1_0 tesla_0_7_2
                        ];

            meta = {
              description = ''Not usable yet WIP! CouchDB RESP API client for
                            Elixir and Phoenix.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sbezugliy/couchdb_adapter";
            };
          } // packageOverrides)
      ) {};

    couchdb_adapter = couchdb_adapter_0_1_0;

    couchdb_auth_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          oauther_1_1_1,
          poison_3_1_0,
          tesla_0_7_2
        }:
          buildMix ({
            name = "couchdb_auth";
            version = "0.1.0";
            src = fetchHex {
              pkg = "couchdb_auth";
              version = "0.1.0";
              sha256 =
                "5326c5129e7040fc009cfa631f4d145142d32fd9d3959f5dae5c164f173625ef";
            };
            beamDeps  = [
                          hackney_1_13_0 oauther_1_1_1 poison_3_1_0 tesla_0_7_2
                        ];

            meta = {
              description = ''CouchDB HTTP authorization package'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sbezugliy/couchdb_auth";
            };
          } // packageOverrides)
      ) {};

    couchdb_auth = couchdb_auth_0_1_0;

    couchdb_ex_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "couchdb_ex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "couchdb_ex";
              version = "0.2.1";
              sha256 =
                "7c4cd8264870480d801c39983d8f130d5d81da7dd92fa8e045e085003a0805b9";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A supposed-to-be-good CouchDB interface for
                            elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vaartis/couchdb-ex";
            };
          } // packageOverrides)
      ) {};

    couchdb_ex = couchdb_ex_0_2_1;

    count_buffer_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pool_ring_0_1_5 }:
          buildMix ({
            name = "count_buffer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "count_buffer";
              version = "0.1.5";
              sha256 =
                "6e78dc0458dac8dae9d41d7857c7185b3164cecd9992a1407265ebfa3455544e";
            };
            beamDeps  = [ pool_ring_0_1_5 ];

            meta = {
              description = ''buffer a large set of counters and flush
                            periodically'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/count_buffer";
            };
          } // packageOverrides)
      ) {};

    count_buffer = count_buffer_0_1_5;

    counters_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "counters";
            version = "0.2.0";
            src = fetchHex {
              pkg = "counters";
              version = "0.2.0";
              sha256 =
                "6414410179e226ea6197a7c194616894c3ae62b30369df46daf6c478e3803d1f";
            };

            meta = {
              description = ''Counters for BEAM.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/counters.erl";
            };
          } // packageOverrides)
      ) {};

    counters = counters_0_2_0;

    countries_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_4_0 }:
          buildMix ({
            name = "countries";
            version = "1.5.0";
            src = fetchHex {
              pkg = "countries";
              version = "1.5.0";
              sha256 =
                "82e4994eb7beb57e29255a1f7402b3b57088289d7386e7d375eeb36bdc9660f8";
            };
            beamDeps  = [ yamerl_0_4_0 ];

            meta = {
              longDescription = ''Countries is a collection of all sorts of
                                useful information for every country in the [ISO
                                3166](https://de.wikipedia.org/wiki/ISO_3166)
                                standard.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SebastianSzturo/countries";
            };
          } // packageOverrides)
      ) {};

    countries = countries_1_5_0;

    countriex_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "countriex";
            version = "0.4.1";
            src = fetchHex {
              pkg = "countriex";
              version = "0.4.1";
              sha256 =
                "80b2e18b2e901224758868dd768f0eecc0d3a1db09a2d7364f43556990a239cb";
            };

            meta = {
              longDescription = ''All sorts of useful information about every
                                country. A pure elixir port of the ruby
                                Countries gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/navinpeiris/countriex";
            };
          } // packageOverrides)
      ) {};

    countriex = countriex_0_4_1;

    country_data_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "country_data";
            version = "0.2.0";
            src = fetchHex {
              pkg = "country_data";
              version = "0.2.0";
              sha256 =
                "c2f4a1167a31fecbb8b30d3907241ef1994870216be54f2bff2a58e2ef8ac936";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''The country, language & currency utility
                                functions inspired by
                                https://github.com/OpenBookPrices/country-data/.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tubitv/ex_country_data";
            };
          } // packageOverrides)
      ) {};

    country_data = country_data_0_2_0;

    courier_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_smtp_0_11_0,
          mail_0_1_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "courier";
            version = "0.1.0";
            src = fetchHex {
              pkg = "courier";
              version = "0.1.0";
              sha256 =
                "e2cd9174da5676da0e46388d06b6e18f3eaa24465b152c36cf53c48cd295a3ec";
            };
            beamDeps  = [ gen_smtp_0_11_0 mail_0_1_1 poolboy_1_5_1 ];

            meta = {
              description = ''Adapter based email delivery'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/courier";
            };
          } // packageOverrides)
      ) {};

    courier = courier_0_1_0;

    coveralls_1_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "coveralls";
            version = "1.5.0";
            src = fetchHex {
              pkg = "coveralls";
              version = "1.5.0";
              sha256 =
                "a95b1ba48e968c3c297141ce0d65513153ef116cdf7edc333a3d81ded8222520";
            };

            meta = {
              description = ''Coveralls for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/markusn/coveralls-erl";
            };
          } // packageOverrides)
      ) {};

    coveralls = coveralls_1_5_0;

    covfefe_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "covfefe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "covfefe";
              version = "0.0.1";
              sha256 =
                "f1cb489c0c2ac5f22e3a17030270df424966379697618d4536c550d826f4af4c";
            };

            meta = {
              description = ''fault tolerant covfefe elixir port.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/m13m/covfefe";
            };
          } // packageOverrides)
      ) {};

    covfefe = covfefe_0_0_1;

    cowbell_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cowbell";
            version = "1.0.1";
            src = fetchHex {
              pkg = "cowbell";
              version = "1.0.1";
              sha256 =
                "008773bb6d8160c5f5bef4eb63ced9e51395e2c2434de550655ed7e39b1696db";
            };

            meta = {
              description = ''A node connection manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ostinelli/cowbell";
            };
          } // packageOverrides)
      ) {};

    cowbell = cowbell_1_0_1;

    cowboy_2_0_0 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_2_0_1,
          ranch_1_4_0
        }:
          buildErlangMk ({
            name = "cowboy";
            version = "2.0.0";
            src = fetchHex {
              pkg = "cowboy";
              version = "2.0.0";
              sha256 =
                "6c7c840b4353df9f3f7f2c053d58a3d1b0cd4d2bd71265d23ec31089565578cc";
            };
            beamDeps  = [ cowlib_2_0_1 ranch_1_4_0 ];

            meta = {
              description = ''Small, fast, modular HTTP server.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowboy_2_2_2 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_2_1_0,
          ranch_1_4_0
        }:
          buildErlangMk ({
            name = "cowboy";
            version = "2.2.2";
            src = fetchHex {
              pkg = "cowboy";
              version = "2.2.2";
              sha256 =
                "bb4b00f37054c3afaf74c0f8bffd4b73655fc69eae3bacf8015920e62f6b0956";
            };
            beamDeps  = [ cowlib_2_1_0 ranch_1_4_0 ];

            meta = {
              description = ''Small, fast, modular HTTP server.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowboy_2_3_0 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_2_2_1,
          ranch_1_4_0
        }:
          buildErlangMk ({
            name = "cowboy";
            version = "2.3.0";
            src = fetchHex {
              pkg = "cowboy";
              version = "2.3.0";
              sha256 =
                "97507126273043be04c951b7c95b8cd057e223a16830439667a491d6091feb63";
            };
            beamDeps  = [ cowlib_2_2_1 ranch_1_4_0 ];

            meta = {
              description = ''Small, fast, modular HTTP server.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowboy_2_4_0 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_2_3_0,
          ranch_1_5_0
        }:
          buildErlangMk ({
            name = "cowboy";
            version = "2.4.0";
            src = fetchHex {
              pkg = "cowboy";
              version = "2.4.0";
              sha256 =
                "ada25dbfd4e8779c5903471d8a84e98c303975b26619f1a5cb2b9c2b5d08414a";
            };
            beamDeps  = [ cowlib_2_3_0 ranch_1_5_0 ];

            meta = {
              description = ''Small, fast, modular HTTP server.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowboy = cowboy_2_4_0;

    cowgirl_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cowgirl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cowgirl";
              version = "0.0.1";
              sha256 =
                "3b06ca6bb82fa3674ddad182cc479d9ab1538b83a4cf616c666e0d6f873c44e5";
            };

            meta = {
              description = ''Small, fast, modular HTTP server written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/larrylv/cowgirl";
            };
          } // packageOverrides)
      ) {};

    cowgirl = cowgirl_0_0_1;

    cowlib_2_0_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "2.0.1";
            src = fetchHex {
              pkg = "cowlib";
              version = "2.0.1";
              sha256 =
                "0d74161b7f5c0ffaf390c5f59d2267a504a095f275c722e221716472c80caaea";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowlib_2_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "2.1.0";
            src = fetchHex {
              pkg = "cowlib";
              version = "2.1.0";
              sha256 =
                "a00f85d3f8bc7d21eea8a03a2c4b4b18238f4d2959562dc2db666d000684ce32";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowlib_2_2_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "2.2.1";
            src = fetchHex {
              pkg = "cowlib";
              version = "2.2.1";
              sha256 =
                "85f5314e64a3a645669dde1038a54b1732f2a8aef2a46b1fd2e3db52810f681e";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowlib_2_3_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "2.3.0";
            src = fetchHex {
              pkg = "cowlib";
              version = "2.3.0";
              sha256 =
                "d69585839b7354141e05e9687490e1c75d4dea82ee77a4ff904ea5198b94d89b";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowlib_2_4_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "2.4.0";
            src = fetchHex {
              pkg = "cowlib";
              version = "2.4.0";
              sha256 =
                "7d41cfa3e7d93d0d9c9f0febb104a58cc57d9b85d0b5c264397723c3ed0f02fb";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowlib = cowlib_2_4_0;

    cowmachine_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_2_3_0,
          lager_3_6_1,
          zotonic_stdlib_1_0_0
        }:
          buildRebar3 ({
            name = "cowmachine";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cowmachine";
              version = "1.0.0";
              sha256 =
                "dc999367b7189a947935815ca7f06bfdf23c64cf973ccc76eee20a13bec9d1fb";
            };

            beamDeps  = [ cowboy_2_3_0 lager_3_6_1 zotonic_stdlib_1_0_0 ];

            meta = {
              description = ''Webmachine for Cowboy and Zotonic'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zotonic/cowmachine";
            };
          } // packageOverrides)
      ) {};

    cowmachine = cowmachine_1_0_0;

    cowsay_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cowsay";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cowsay";
              version = "0.0.1";
              sha256 =
                "9f8a6634710974787751279b22ef5d7cb3c6a74db42636540ae5db37c4632e2a";
            };

            meta = {
              description = ''A cow-friend who will speak your mind'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbrock25/cowsay";
            };
          } // packageOverrides)
      ) {};

    cowsay = cowsay_0_0_1;

    cqex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cqex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cqex";
              version = "0.2.0";
              sha256 =
                "2180cb8083d38765bd3912f128b603826686300aef6f61adf9dc89fde3bb5429";
            };

            meta = {
              description = ''Idiomatic Elixir client for Cassandra.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matehat/cqex";
            };
          } // packageOverrides)
      ) {};

    cqex = cqex_0_2_0;

    cqrs_events_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          moebius_3_0_1,
          poison_2_0_1,
          syn_1_6_3
        }:
          buildMix ({
            name = "cqrs_events";
            version = "0.0.4";
            src = fetchHex {
              pkg = "cqrs_events";
              version = "0.0.4";
              sha256 =
                "21c5ee4b8b814abf7ced3c88069511dd1a9a5c1c16a17c175228bfe5a9e4b7f8";
            };
            beamDeps  = [ moebius_3_0_1 poison_2_0_1 syn_1_6_3 ];

            meta = {
              description = ''This is not production ready yet but I want your
                            feedback.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amberbit/cqrs_commands";
            };
          } // packageOverrides)
      ) {};

    cqrs_events = cqrs_events_0_0_4;

    crazy_pants_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crazy_pants";
            version = "0.0.1";
            src = fetchHex {
              pkg = "crazy_pants";
              version = "0.0.1";
              sha256 =
                "46e50adccb0d858e5a540c834d4e358ffa43ed9cdcac20ae36569fc7eaffa532";
            };

            meta = {
              description = ''These pretzels are making me thirsty'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whodat/crazy_pants";
            };
          } // packageOverrides)
      ) {};

    crazy_pants = crazy_pants_0_0_1;

    crc_0_9_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "crc";
            version = "0.9.0";
            src = fetchHex {
              pkg = "crc";
              version = "0.9.0";
              sha256 =
                "900511831f6a4f3570f86bb7ecd1937685ba6a0c1820c0bc6e88da968c9aaf3e";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''A library used to calculate CRC checksums for
                            binary data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TattdCodeMonkey/crc";
            };
          } // packageOverrides)
      ) {};

    crc = crc_0_9_0;

    crc32cer_0_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "crc32cer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "crc32cer";
              version = "0.1.0";
              sha256 =
                "b443dd202152045527ad8589c6b5dd49ed83b6012927b4cf9db0ed40b87a86d1";
            };

            meta = {
              description = ''CRC32-C as nif for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zmstone/crc32cert .git";
            };
          } // packageOverrides)
      ) {};

    crc32cer = crc32cer_0_1_0;

    crdt_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crdt";
            version = "0.2.0";
            src = fetchHex {
              pkg = "crdt";
              version = "0.2.0";
              sha256 =
                "51dd65e8aed3b0ae519bc1ba43ca64a92ed328733f84815513b23a025e3b7439";
            };

            meta = {
              longDescription = ''CRDT provides simple reference
                                implementations of some conflict-free replicated
                                data types.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jclem/crdt_ex";
            };
          } // packageOverrides)
      ) {};

    crdt = crdt_0_2_0;

    cre_0_1_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_2_2_2,
          gen_pnet_0_1_7,
          jsone_1_4_5
        }:
          buildRebar3 ({
            name = "cre";
            version = "0.1.6";
            src = fetchHex {
              pkg = "cre";
              version = "0.1.6";
              sha256 =
                "9b14c1f90205491f75c2213849e5eff947610864a0de3170d29c64f17fef0afc";
            };

            beamDeps  = [ cowboy_2_2_2 gen_pnet_0_1_7 jsone_1_4_5 ];

            meta = {
              description = ''Common runtime environment for distributed
                            programming languages'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/cre/";
            };
          } // packageOverrides)
      ) {};

    cre_0_1_7 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_2_2_2,
          gen_pnet_0_1_7,
          jsone_1_4_5
        }:
          buildRebar3 ({
            name = "cre";
            version = "0.1.7";
            src = fetchHex {
              pkg = "cre";
              version = "0.1.7";
              sha256 =
                "b6e5f14a1d98370dd443349eb85e45119afd2b81846e8c476a769ae9681f5873";
            };

            beamDeps  = [ cowboy_2_2_2 gen_pnet_0_1_7 jsone_1_4_5 ];

            meta = {
              description = ''Common runtime environment for distributed
                            programming languages'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/cre/";
            };
          } // packageOverrides)
      ) {};

    cre = cre_0_1_7;

    credit_card_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "credit_card";
            version = "1.0.0";
            src = fetchHex {
              pkg = "credit_card";
              version = "1.0.0";
              sha256 =
                "c7dee15035f4ff925f08bc806c4bd1817209c64d8ba089d0731808ee35e97ba0";
            };

            meta = {
              description = ''A library for validating credit card numbers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abakhi/credit_card";
            };
          } // packageOverrides)
      ) {};

    credit_card = credit_card_1_0_0;

    credo_0_8_0_rc7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bunt_0_2_0 }:
          buildMix ({
            name = "credo";
            version = "0.8.0-rc7";
            src = fetchHex {
              pkg = "credo";
              version = "0.8.0-rc7";
              sha256 =
                "ecbebfb89ab692f398856180a7b7763cb2438f1ecf3d2d00e524c0e1b5e8977f";
            };
            beamDeps  = [ bunt_0_2_0 ];

            meta = {
              description = ''A static code analysis tool with a focus on code
                            consistency and teaching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/credo";
            };
          } // packageOverrides)
      ) {};

    credo_0_9_0_rc8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bunt_0_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "credo";
            version = "0.9.0-rc8";
            src = fetchHex {
              pkg = "credo";
              version = "0.9.0-rc8";
              sha256 =
                "76184b882472591a4583b861666ceb021baba141784963ec588bec2c8e7dad10";
            };
            beamDeps  = [ bunt_0_2_0 poison_3_1_0 ];

            meta = {
              description = ''A static code analysis tool with a focus on code
                            consistency and teaching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/credo";
            };
          } // packageOverrides)
      ) {};

    credo_0_9_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bunt_0_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "credo";
            version = "0.9.3";
            src = fetchHex {
              pkg = "credo";
              version = "0.9.3";
              sha256 =
                "dcd1d45626f6a02abeef3fc424eaf101b05a851d3cceb9535b8ea3e14c3c17e6";
            };
            beamDeps  = [ bunt_0_2_0 poison_3_1_0 ];

            meta = {
              description = ''A static code analysis tool with a focus on code
                            consistency and teaching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/credo";
            };
          } // packageOverrides)
      ) {};

    credo = credo_0_9_3;

    credo_contrib_0_1_0_rc3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, credo_0_9_3 }:
          buildMix ({
            name = "credo_contrib";
            version = "0.1.0-rc3";
            src = fetchHex {
              pkg = "credo_contrib";
              version = "0.1.0-rc3";
              sha256 =
                "3db7495f8e86d4fe8d7ad60640f7049e2de8afd63b9c8ede7304f29ce9a7532c";
            };
            beamDeps  = [ credo_0_9_3 ];

            meta = {
              longDescription = ''A set of community-maintained checks for the
                                Credo static analysis tool. Many of the checks
                                are implementations of rules from
                                https://github.com/christopheradams/elixir_style_guide.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/xtian/credo_contrib";
            };
          } // packageOverrides)
      ) {};

    credo_contrib = credo_contrib_0_1_0_rc3;

    croma_0_9_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "croma";
            version = "0.9.3";
            src = fetchHex {
              pkg = "croma";
              version = "0.9.3";
              sha256 =
                "c224e5fd11d416eed976c44930993f18c40b2e40768271a7c676019b18178166";
            };

            meta = {
              description = ''Elixir macro utilities to make type-based
                            programming easier'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    croma = croma_0_9_3;

    cronex_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cronex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "cronex";
              version = "0.4.0";
              sha256 =
                "3c906b6f8dff2e8d6df2433e1ef596f9ba20fb50f738464fc0a6f0006e1e7ce2";
            };

            meta = {
              description = ''A cron like system built in Elixir, that you can
                            mount in your supervision tree'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jbernardo95/cronex";
            };
          } // packageOverrides)
      ) {};

    cronex = cronex_0_4_0;

    cronider_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cronider";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cronider";
              version = "0.1.0";
              sha256 =
                "2bbbb518217ac8cbe646ea1ccfe4b21edb1c3caa841489a4034bf310e15e1a6d";
            };

            meta = {
              description = ''Crontab intervals with time collision
                            detection'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/virviil/cronider";
            };
          } // packageOverrides)
      ) {};

    cronider = cronider_0_1_0;

    cronitor_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cronitor";
            version = "1.1.0";
            src = fetchHex {
              pkg = "cronitor";
              version = "1.1.0";
              sha256 =
                "860b9387c6b2a16215803eb225de73ea949bf312e4999a26f891ef9d88b94b0a";
            };

            meta = {
              description = ''An extremely simple wrapper for the cronitor.io
                            ping endpoints.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jordan0day/cronitor";
            };
          } // packageOverrides)
      ) {};

    cronitor = cronitor_1_1_0;

    crowley_0_0_1_dev = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "crowley";
            version = "0.0.1-dev";
            src = fetchHex {
              pkg = "crowley";
              version = "0.0.1-dev";
              sha256 =
                "97dc96e9b1fa63ec16ad924531e54f1d63c4c090b131157e3beb66c5e0d5b8b4";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Personal todo list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eowfenth/crowley-server";
            };
          } // packageOverrides)
      ) {};

    crowley = crowley_0_0_1_dev;

    crunchbase_0_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "crunchbase";
            version = "0.0.0";
            src = fetchHex {
              pkg = "crunchbase";
              version = "0.0.0";
              sha256 =
                "08537212ea26aeeccacf472dbda6339fc3eafd0fd8ccb2f134b4e935e8601885";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''CrunchBase for Alchemists.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/meetwalter/crunchbase";
            };
          } // packageOverrides)
      ) {};

    crunchbase = crunchbase_0_0_0;

    crutches_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crutches";
            version = "1.0.0";
            src = fetchHex {
              pkg = "crutches";
              version = "1.0.0";
              sha256 =
                "cfd97962a22fe30820e6ca6d0671c763232a7edf149aa11bd62ee77dff0ffff0";
            };

            meta = {
              description = ''An Elixir toolbelt freely inspired from Ruby`s
                            ActiveSupport'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mykewould/crutches";
            };
          } // packageOverrides)
      ) {};

    crutches = crutches_1_0_0;

    crux_cache_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, crux_structs_0_1_4
        }:
          buildMix ({
            name = "crux_cache";
            version = "0.1.1";
            src = fetchHex {
              pkg = "crux_cache";
              version = "0.1.1";
              sha256 =
                "791e9c9523b585879425ef01d65e0e7962e03b948412e4c51a01111ba5999bd4";
            };
            beamDeps  = [ crux_structs_0_1_4 ];

            meta = {
              description = ''Package providing Discord API struct caches for
                            crux.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SpaceEEC/crux_cache/";
            };
          } // packageOverrides)
      ) {};

    crux_cache = crux_cache_0_1_1;

    crux_gateway_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_13_1,
          poison_3_1_0,
          websockex_0_4_1
        }:
          buildMix ({
            name = "crux_gateway";
            version = "0.1.2";
            src = fetchHex {
              pkg = "crux_gateway";
              version = "0.1.2";
              sha256 =
                "e1fb4df76fb14e06330922cee158399133806123b50f894f0d62634cf4aa3ccc";
            };
            beamDeps  = [ gen_stage_0_13_1 poison_3_1_0 websockex_0_4_1 ];

            meta = {
              description = ''Package providing a flexible gateway connection
                            to the Discord API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SpaceEEC/crux_gateway/";
            };
          } // packageOverrides)
      ) {};

    crux_gateway = crux_gateway_0_1_2;

    crux_structs_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crux_structs";
            version = "0.1.4";
            src = fetchHex {
              pkg = "crux_structs";
              version = "0.1.4";
              sha256 =
                "a952db2649ad905785a36a3d1f2e75e394d9935d7b8fa6902982329e00383c4d";
            };

            meta = {
              description = ''Package providing Discord API structs for
                            crux.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SpaceEEC/crux_structs/";
            };
          } // packageOverrides)
      ) {};

    crux_structs = crux_structs_0_1_4;

    crypt3_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crypt3";
            version = "1.0.4";
            src = fetchHex {
              pkg = "crypt3";
              version = "1.0.4";
              sha256 =
                "e5cbd63d4b720e323ed0dd5ac647254bc9f3ac250b87da29d27ea9cbef31df37";
            };

            meta = {
              description = ''crypt(3) NIF for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ominousness/crypt3";
            };
          } // packageOverrides)
      ) {};

    crypt3 = crypt3_1_0_4;

    cryptex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cryptex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cryptex";
              version = "0.0.1";
              sha256 =
                "19d709c6ffbda3c74ec811190d168170db0435720cbe788c0233bea4afee1d16";
            };

            meta = {
              description = ''An Elixir library for encrypting/decrypting,
                            signing/verifying data. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/cryptex";
            };
          } // packageOverrides)
      ) {};

    cryptex = cryptex_0_0_1;

    crypto_compare_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "crypto_compare";
            version = "0.1.1";
            src = fetchHex {
              pkg = "crypto_compare";
              version = "0.1.1";
              sha256 =
                "aa1216b91b118fbecb0edbe9cd2cf787b530527a579bd4c66f883fdbeaefd34e";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''CryptoCompare Elixir API client'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/konstantinzolotarev/crypto_compare";
            };
          } // packageOverrides)
      ) {};

    crypto_compare = crypto_compare_0_1_1;

    crypto_exchanges_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "crypto_exchanges";
            version = "0.4.0";
            src = fetchHex {
              pkg = "crypto_exchanges";
              version = "0.4.0";
              sha256 =
                "2b7733073baf1eebf54e7cbe0eb2365c00f0b4d3b2149df42f136675d2f6c1a5";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A unified api for crypto exchanges.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sbrink/crypto_exchanges_elixir";
            };
          } // packageOverrides)
      ) {};

    crypto_exchanges = crypto_exchanges_0_4_0;

    crypto_quotation_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "crypto_quotation";
            version = "0.0.1";
            src = fetchHex {
              pkg = "crypto_quotation";
              version = "0.0.1";
              sha256 =
                "398f504074309cbf44d58a9472c368e5a279cf7ab8d3afe5995be9eb820ec4fc";
            };
            beamDeps  = [ httpotion_3_0_3 poison_2_2_0 ];

            meta = {
              description = ''Get quotation of crypto currencies'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/CryptoClub/crypto_quotation";
            };
          } // packageOverrides)
      ) {};

    crypto_quotation = crypto_quotation_0_0_1;

    cryptocomparex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jason_1_0_0,
          key_tools_0_4_1,
          tesla_1_0_0
        }:
          buildMix ({
            name = "cryptocomparex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cryptocomparex";
              version = "0.1.1";
              sha256 =
                "7fd8d9baa7156b7ff9ad298ccc86264888438e3e9d53fa63610879ebc92855d0";
            };
            beamDeps  = [ jason_1_0_0 key_tools_0_4_1 tesla_1_0_0 ];

            meta = {
              description = ''Cryptocomparex is an unofficial Elixir/Erlang API
                            client for Cryptocompare API.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/cryptocomparex";
            };
          } // packageOverrides)
      ) {};

    cryptocomparex = cryptocomparex_0_1_1;

    cryptonightex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "cryptonightex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cryptonightex";
              version = "0.2.0";
              sha256 =
                "177bc7debcfab03da57e7072528f17b4bd7df6ebc57ef2c81c6e8a1fc6ea2edc";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''CryptoNight native library for Elixir/Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kukunin/cryptonightex";
            };
          } // packageOverrides)
      ) {};

    cryptonightex = cryptonightex_0_2_0;

    cryptopia_api_0_2_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "cryptopia_api";
            version = "0.2.6";
            src = fetchHex {
              pkg = "cryptopia_api";
              version = "0.2.6";
              sha256 =
                "7e0dc6768700ff717d05825c997516b256f842e01e51daebf4f041ea45f888bd";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapped cryptopia API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/konstantinzolotarev/cryptopia_api";
            };
          } // packageOverrides)
      ) {};

    cryptopia_api = cryptopia_api_0_2_6;

    cryptowatch_ex_0_9_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          atomic_map_0_9_3,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "cryptowatch_ex";
            version = "0.9.2";
            src = fetchHex {
              pkg = "cryptowatch_ex";
              version = "0.9.2";
              sha256 =
                "6051333e65ccda8a8ec80062a8c4f71d8414f4b6a0b19855bf7eb8e638328bee";
            };
            beamDeps  = [ atomic_map_0_9_3 httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A thin wrapper around public Cryptowatch API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/madshargreave/cryptex";
            };
          } // packageOverrides)
      ) {};

    cryptowatch_ex = cryptowatch_ex_0_9_2;

    crystal_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crystal";
            version = "0.1.0";
            src = fetchHex {
              pkg = "crystal";
              version = "0.1.0";
              sha256 =
                "7bb3a69dd0665ccac81afa033990661da332f1cf482e14d0531ee711eb254ca4";
            };

            meta = {
              description = ''Static type system for BEAM. Crystal is Elixir
                            wrapper around Gradualizer.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/coingaming/crystal";
            };
          } // packageOverrides)
      ) {};

    crystal = crystal_0_1_0;

    cspex_2_0_0_beta = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cspex";
            version = "2.0.0-beta";
            src = fetchHex {
              pkg = "cspex";
              version = "2.0.0-beta";
              sha256 =
                "91e53b2e93573b407af2e21e0bb84f9a44010204c6474e58f96553f76256cb82";
            };

            meta = {
              description = ''A library that brings all the CSP joy to the
                            Elixir land.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vidalraphael/cspex";
            };
          } // packageOverrides)
      ) {};

    cspex = cspex_2_0_0_beta;

    csv_1_4_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, parallel_stream_1_0_6
        }:
          buildMix ({
            name = "csv";
            version = "1.4.4";
            src = fetchHex {
              pkg = "csv";
              version = "1.4.4";
              sha256 =
                "12c0d07bcf00b41a9b3da1e9cf52eb05c04cb9ed1714b1ae2209d0d41b19af3c";
            };
            beamDeps  = [ parallel_stream_1_0_6 ];

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          } // packageOverrides)
      ) {};

    csv_2_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, parallel_stream_1_0_6
        }:
          buildMix ({
            name = "csv";
            version = "2.0.0";
            src = fetchHex {
              pkg = "csv";
              version = "2.0.0";
              sha256 =
                "89adb329444874809641cc2f645aec2bd38dfd841e7fe4c1b3bca2e6f91a1af3";
            };
            beamDeps  = [ parallel_stream_1_0_6 ];

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          } // packageOverrides)
      ) {};

    csv_2_0_0_rc_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, parallel_stream_1_0_6
        }:
          buildMix ({
            name = "csv";
            version = "2.0.0-rc.0";
            src = fetchHex {
              pkg = "csv";
              version = "2.0.0-rc.0";
              sha256 =
                "24aaa5213dad31402ae37b979e0b5bb77e98d2dbbea326ed91a1000c91c41113";
            };
            beamDeps  = [ parallel_stream_1_0_6 ];

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          } // packageOverrides)
      ) {};

    csv_2_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, parallel_stream_1_0_6
        }:
          buildMix ({
            name = "csv";
            version = "2.1.1";
            src = fetchHex {
              pkg = "csv";
              version = "2.1.1";
              sha256 =
                "3ae8ec4e98a44850d494d8441c8896631c295b3541cac791e56ea0885ba7df3f";
            };
            beamDeps  = [ parallel_stream_1_0_6 ];

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          } // packageOverrides)
      ) {};

    csv = csv_2_1_1;

    csvlixir_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "csvlixir";
            version = "2.0.1";
            src = fetchHex {
              pkg = "csvlixir";
              version = "2.0.1";
              sha256 =
                "2049755d04b109c06f82f5dfe739cff0e74118b674069c0475326c10f33cb02a";
            };

            meta = {
              longDescription = ''CSVLixir is a CSV reader/writer for Elixir.
                                Reading from files returns a stream of lists.
                                Reading from strings returns a list of lists.
                                The writer transforms a (possibly lazy) list of
                                lists into a stream of CSV strings. It can also
                                take a single list and return a single CSV
                                string.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jimm/csvlixir";
            };
          } // packageOverrides)
      ) {};

    csvlixir_2_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "csvlixir";
            version = "2.0.4";
            src = fetchHex {
              pkg = "csvlixir";
              version = "2.0.4";
              sha256 =
                "2a890aab96f45de234a50ae18d2a9fcb1ee36804d808591b459f8128f2098e42";
            };

            meta = {
              longDescription = ''CSVLixir is a CSV reader/writer for Elixir.
                                Reading from files returns a stream of lists.
                                Reading from strings returns a list of lists.
                                The writer transforms a (possibly lazy) list of
                                lists into a stream of CSV strings. It can also
                                take a single list and return a single CSV
                                string.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jimm/csvlixir";
            };
          } // packageOverrides)
      ) {};

    csvlixir = csvlixir_2_0_4;

    ctx_0_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ctx";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ctx";
              version = "0.4.1";
              sha256 =
                "42a463c7167ccb9a3d476f5228c6750f2c6efd521f20c8830cd7f3499ac82e41";
            };

            meta = {
              description = ''Context carries request scoped values and
                            deadlines'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsloughter/ctx";
            };
          } // packageOverrides)
      ) {};

    ctx = ctx_0_4_1;

    cuckoo_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, murmur_1_0_1 }:
          buildMix ({
            name = "cuckoo";
            version = "1.0.2";
            src = fetchHex {
              pkg = "cuckoo";
              version = "1.0.2";
              sha256 =
                "a0ee9dd36a107196755f1afabcd4eea90f14dde30a1eb2b54a493bfb894659eb";
            };
            beamDeps  = [ murmur_1_0_1 ];

            meta = {
              description = ''Cuckoo is a pure Elixir implementation of Cuckoo
                            Filters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/cuckoo";
            };
          } // packageOverrides)
      ) {};

    cuckoo = cuckoo_1_0_2;

    cucumberl_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cucumberl";
            version = "0.0.10";
            src = fetchHex {
              pkg = "cucumberl";
              version = "0.0.10";
              sha256 =
                "53bd73d016602c8c46883dbcc5a57ee814fe4708b14e4406d566b5ca9d119110";
            };

            meta = {
              longDescription = ''A pure-erlang, open-source, implementation of
                                Cucumber (http://cukes.info). This provides a
                                subset of the Cucumber feature definition
                                language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ericbmerritt/cucumberl";
            };
          } // packageOverrides)
      ) {};

    cucumberl = cucumberl_0_0_10;

    cudex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cudex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cudex";
              version = "0.0.1";
              sha256 =
                "39d75c051b8fe597571155a06a1c17666704b867ec3060ec633363407ab533ac";
            };

            meta = {
              description = ''CUDA library in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/data-maestro/cudex";
            };
          } // packageOverrides)
      ) {};

    cudex = cudex_0_0_1;

    cuid_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cuid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cuid";
              version = "0.1.0";
              sha256 =
                "80cd46bd323e05b706c60008368e631b559307b554c0acc54292ab2c73a3340b";
            };

            meta = {
              description = ''Generate collision-resistant ids, in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duailibe/cuid";
            };
          } // packageOverrides)
      ) {};

    cuid = cuid_0_1_0;

    cuneiform_3_0_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cf_client_0_1_5,
          cf_worker_0_1_4,
          cre_0_1_6,
          getopt_1_0_1,
          lib_conf_0_1_4
        }:
          buildRebar3 ({
            name = "cuneiform";
            version = "3.0.3";
            src = fetchHex {
              pkg = "cuneiform";
              version = "3.0.3";
              sha256 =
                "89d081a5358bd0c602ac44a3e992e51bdca830609d053ddb096e41e7e3e0a2dc";
            };

            beamDeps  = [
                          cf_client_0_1_5
                          cf_worker_0_1_4
                          cre_0_1_6
                          getopt_1_0_1
                          lib_conf_0_1_4
                        ];

            meta = {
              description = ''A functional workflow language for large-scale
                            scientific data analysis.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/cuneiform/";
            };
          } // packageOverrides)
      ) {};

    cuneiform = cuneiform_3_0_3;

    cure_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cure";
            version = "0.5.0";
            src = fetchHex {
              pkg = "cure";
              version = "0.5.0";
              sha256 =
                "f052e29304fdd81e29973251d43f8980bf9c66cfdea623d485c2ad7e4561ffc5";
            };

            meta = {
              longDescription = ''Interfaces Elixir with C/C++ code in a
                                user-friendly way! Based on Erlang-ports.
                                Provides a few Mix-tasks to kickstart the
                                development process.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/luc-tielen/Cure.git";
            };
          } // packageOverrides)
      ) {};

    cure = cure_0_5_0;

    curl2httpoison_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curl2httpoison";
            version = "0.2.6";
            src = fetchHex {
              pkg = "curl2httpoison";
              version = "0.2.6";
              sha256 =
                "d22fda1a85db812e9f6e0c8770f004cb7942f463bc59b07ad272c01330a7bfca";
            };

            meta = {
              description = ''Curl2HTTPoison transform your curl request to
                            HTTPPoison request code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    curl2httpoison = curl2httpoison_0_2_6;

    curltime_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curltime";
            version = "1.0.4";
            src = fetchHex {
              pkg = "curltime";
              version = "1.0.4";
              sha256 =
                "79de7c8db086bfcb1f9f636d7553726a843b86e9ba4f6216bb7459c2e1b0e943";
            };

            meta = {
              longDescription = ''curltime is an Elixir package that allows you
                                to easily get website response times.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sergiotapia/curltime";
            };
          } // packageOverrides)
      ) {};

    curltime = curltime_1_0_4;

    currency_formatter_0_4_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "currency_formatter";
            version = "0.4.8";
            src = fetchHex {
              pkg = "currency_formatter";
              version = "0.4.8";
              sha256 =
                "9452542b50b97befb5dd07eb6a216b3fd1c2c22c47c549ae9ce42669dcb7b10c";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''A library to help with formatting a number to
                                a currency using iso standards and other
                                convenience functions related to formatting
                                currencies'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/smeevil/currency_formatter";
            };
          } // packageOverrides)
      ) {};

    current_streak_ex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "current_streak_ex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "current_streak_ex";
              version = "0.1.1";
              sha256 =
                "1c62bcd7bdd69818dc05f0602e03a5aca6b21554206cb6634bedb807ee27d5a7";
            };
            beamDeps  = [ floki_0_20_3 httpoison_0_13_0 ];

            meta = {
              description = ''Get github current streak which support only
                            public repositories.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/current_streak_ex";
            };
          } // packageOverrides)
      ) {};

    current_streak_ex = current_streak_ex_0_1_1;

    current_user_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "current_user";
            version = "0.0.1";
            src = fetchHex {
              pkg = "current_user";
              version = "0.0.1";
              sha256 =
                "8a400d8cbd02da89bccf67a357733b682e0d6d4c421b7230405ac16b1988809c";
            };

            meta = {
              description = ''Configurable user authentication for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/halogenandtoast/current_user";
            };
          } // packageOverrides)
      ) {};

    current_user = current_user_0_0_1;

    curry_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curry";
            version = "0.0.1";
            src = fetchHex {
              pkg = "curry";
              version = "0.0.1";
              sha256 =
                "e8f56fee1cb82ae2616c36021d4dd8c2b4169490e224dea84f63feb47475d6f0";
            };

            meta = {
              description = ''A simple currying macro allowing to define
                            curried functions in Elixir modules.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/elixir-curry";
            };
          } // packageOverrides)
      ) {};

    curry = curry_0_0_1;

    currying_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "currying";
            version = "1.0.3";
            src = fetchHex {
              pkg = "currying";
              version = "1.0.3";
              sha256 =
                "7b9b8cd644ecac635f0abf6267ca46d497e73144a5882449a843461a014f1154";
            };

            meta = {
              longDescription = ''The Currying library allows you to partially
                                apply (or `curry`) any Elixir function, in a
                                very transparent way. It also optionally
                                implements the infix operator `~>` as a synomym
                                for currying.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir_currying";
            };
          } // packageOverrides)
      ) {};

    currying = currying_1_0_3;

    curtail_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curtail";
            version = "0.1.1";
            src = fetchHex {
              pkg = "curtail";
              version = "0.1.1";
              sha256 =
                "6321e76b4901ecc9574e978d669b5e16922f0e5ad622a3498c49c01e20b45ac1";
            };

            meta = {
              description = ''HTML-safe string truncation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seankay/curtail";
            };
          } // packageOverrides)
      ) {};

    curtail = curtail_0_1_1;

    curve25519_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curve25519";
            version = "1.0.2";
            src = fetchHex {
              pkg = "curve25519";
              version = "1.0.2";
              sha256 =
                "925a9167e39ee2d76733437e0e40523bbe60ccb0ee090a9b85e541f4493e0334";
            };

            meta = {
              description = ''Curve25519 Diffie-Hellman functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/curve25519_ex";
            };
          } // packageOverrides)
      ) {};

    curve25519 = curve25519_1_0_2;

    curve448_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curve448";
            version = "1.0.2";
            src = fetchHex {
              pkg = "curve448";
              version = "1.0.2";
              sha256 =
                "fc17a9d813b7d43459cb4037673f5136eeb11553db1f1cc9698a370911175c4d";
            };

            meta = {
              description = ''Curve448 Diffie-Hellman functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/curve448_ex";
            };
          } // packageOverrides)
      ) {};

    curve448 = curve448_1_0_2;

    cushion_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_2_1_0 }:
          buildMix ({
            name = "cushion";
            version = "0.0.3";
            src = fetchHex {
              pkg = "cushion";
              version = "0.0.3";
              sha256 =
                "1371ab210bd3b7ef7381dbe3f53fedb8afbbb0c562f45d614e4849373919482b";
            };
            beamDeps  = [ httpotion_2_1_0 ];

            meta = {
              longDescription = ''A really simple Buffer API client for sending
                                updates. Right now it only supports sending text
                                updates, but hopefully will support more in the
                                future.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryanbillingsley/cushion";
            };
          } // packageOverrides)
      ) {};

    cushion = cushion_0_0_3;

    custom_base_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "custom_base";
            version = "0.2.1";
            src = fetchHex {
              pkg = "custom_base";
              version = "0.2.1";
              sha256 =
                "8df019facc5ec9603e94f7270f1ac73ddf339f56ade76a721eaa57c1493ba463";
            };

            meta = {
              description = ''Allow you to make custom base conversion in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/custom_base";
            };
          } // packageOverrides)
      ) {};

    custom_base = custom_base_0_2_1;

    customerio_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "customerio";
            version = "0.1.2";
            src = fetchHex {
              pkg = "customerio";
              version = "0.1.2";
              sha256 =
                "1b9e3523c871f8e493a9cc81dc6650b0222743d1f2ff5f66a1f403b938bd8d08";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir client for the Customer.io event
                            API.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    customerio = customerio_0_1_2;

    cwmp_ex_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_2,
          poison_2_2_0,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "cwmp_ex";
            version = "0.2.3";
            src = fetchHex {
              pkg = "cwmp_ex";
              version = "0.2.3";
              sha256 =
                "7fab872f1487ee778d8d4812edc3887e4690ad9250861e7663840712f530582d";
            };
            beamDeps  = [ erlsom_1_4_2 poison_2_2_0 xml_builder_2_1_0 ];

            meta = {
              description = ''A module that implements the CWMP protocol'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/Fullrate/cwmp_ex";
            };
          } // packageOverrides)
      ) {};

    cwmp_ex = cwmp_ex_0_2_3;

    cx_leaderboard_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cx_leaderboard";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cx_leaderboard";
              version = "0.1.0";
              sha256 =
                "dc96f7f5fc93bf7b6d4ecbbdd2a9e58ff0a00032a38086863f18839c8db1d3f3";
            };

            meta = {
              description = ''Fast, customizable leaderboards database.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/crossfield/cx_leaderboard";
            };
          } // packageOverrides)
      ) {};

    cx_leaderboard = cx_leaderboard_0_1_0;

    cyanide_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cyanide";
            version = "0.5.0";
            src = fetchHex {
              pkg = "cyanide";
              version = "0.5.0";
              sha256 =
                "43228c3f4557327130656b6b6a1c396ce29f6c69ba537aec1935751a4f4d5c06";
            };

            meta = {
              description = ''An Elixir BSON encoding/decoding library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ispirata/cyanide";
            };
          } // packageOverrides)
      ) {};

    cyanide = cyanide_0_5_0;

    cybersource_sdk_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "cybersource_sdk";
            version = "1.0.1";
            src = fetchHex {
              pkg = "cybersource_sdk";
              version = "1.0.1";
              sha256 =
                "1a4fc87c7a996b9ab75c05175639c403b7eace9fcfc22b2c36e028bb08fc6e3e";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''Non-official library used to call WSDL SOAP
                            Services of CyberSource.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coletiv/cybersource-sdk";
            };
          } // packageOverrides)
      ) {};

    cybersource_sdk = cybersource_sdk_1_0_1;

    cypher_query_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cypher_query";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cypher_query";
              version = "0.0.1";
              sha256 =
                "068bee4f13275d3448a4676bf113d5b2e414b47a9f84bb6e1614a009104c3f30";
            };

            meta = {
              description = ''A dumb string-based query builder for neo4j
                            Cypher queries'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/collin/cypher_query";
            };
          } // packageOverrides)
      ) {};

    cypher_query = cypher_query_0_0_1;

    d_bounce_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "d_bounce";
            version = "0.1.0";
            src = fetchHex {
              pkg = "d_bounce";
              version = "0.1.0";
              sha256 =
                "a50697bbad75eac32a6b7c7cf817eb1c158a82b0dd3a0a62f44652aec4b12ed5";
            };

            meta = {
              description = ''Elixir d-bounce.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ecpplus/elixir-d-bounce";
            };
          } // packageOverrides)
      ) {};

    d_bounce = d_bounce_0_1_0;

    daisy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "daisy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "daisy";
              version = "0.1.0";
              sha256 =
                "60371317a1f02956f95b0acb87c3735df239a8d28c9c983ea1c29fcf954b4b3a";
            };

            meta = {
              description = ''A new blockchain experience'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hayesgm/daisy";
            };
          } // packageOverrides)
      ) {};

    daisy = daisy_0_1_0;

    damm_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "damm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "damm";
              version = "0.1.0";
              sha256 =
                "2d2d0adbf0ffe5888d0aaee784a25b3bb9b99acf33b6de350aee9f58c588cbd5";
            };

            meta = {
              description = ''Damm algorithm implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mururu/damm";
            };
          } // packageOverrides)
      ) {};

    damm = damm_0_1_0;

    darcy_0_0_7 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          erlware_commons_1_0_4,
          hackney_1_10_1,
          jsone_1_4_5
        }:
          buildRebar3 ({
            name = "darcy";
            version = "0.0.7";
            src = fetchHex {
              pkg = "darcy";
              version = "0.0.7";
              sha256 =
                "912645eaf824d947313cc34e2d145b1f7b9403333fe64dd618b6380c9d6261af";
            };

            beamDeps  = [ erlware_commons_1_0_4 hackney_1_10_1 jsone_1_4_5 ];

            meta = {
              description = ''Erlang DDB client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrallen1/darcy";
            };
          } // packageOverrides)
      ) {};

    darcy = darcy_0_0_7;

    darkskyx_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_6_2 }:
          buildMix ({
            name = "darkskyx";
            version = "0.1.3";
            src = fetchHex {
              pkg = "darkskyx";
              version = "0.1.3";
              sha256 =
                "4092b86e306265ec93c2174c8d47128ba4532c69a81599f3aab0ce3b02dcc38e";
            };
            beamDeps  = [ httpoison_0_6_2 ];

            meta = {
              description = ''A Darksky.net weather api client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/darkskyx";
            };
          } // packageOverrides)
      ) {};

    darkskyx = darkskyx_0_1_3;

    das_bot_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0,
          websocket_client_1_3_0
        }:
          buildMix ({
            name = "das_bot";
            version = "0.1.1";
            src = fetchHex {
              pkg = "das_bot";
              version = "0.1.1";
              sha256 =
                "b2fec60e11939628a35dd3aa656991da25d70aaad42ffcce3b3798dedf94d2dd";
            };
            beamDeps  = [
                          httpoison_0_13_0 poison_3_1_0 websocket_client_1_3_0
                        ];

            meta = {
              description = ''Like Plug, but for Slack Bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattbaker/das-bot";
            };
          } // packageOverrides)
      ) {};

    das_bot = das_bot_0_1_1;

    data_crypter_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "data_crypter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "data_crypter";
              version = "0.1.0";
              sha256 =
                "e5246635eead395c1d19664e268b7657aa92fcd2bbd5591831aaa37e3a310928";
            };

            meta = {
              description = ''AES 128/256 GCM encrypt/decrypt wrapper for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirocaster/data_crypter";
            };
          } // packageOverrides)
      ) {};

    data_crypter = data_crypter_0_1_0;

    data_leaf_walker_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "data_leaf_walker";
            version = "0.1.0";
            src = fetchHex {
              pkg = "data_leaf_walker";
              version = "0.1.0";
              sha256 =
                "9d3a8688c3751765453f04e8f60f3826757396dce66baf7e2cf7335c9c373bbd";
            };

            meta = {
              longDescription = ''Traverse and map values of deeply nested data
                                structures: Provides a `map_deeply/2` function
                                for Maps and Lists and Keyword Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-map-deeply";
            };
          } // packageOverrides)
      ) {};

    data_leaf_walker = data_leaf_walker_0_1_0;

    data_morph_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_2_1_1 }:
          buildMix ({
            name = "data_morph";
            version = "0.0.7";
            src = fetchHex {
              pkg = "data_morph";
              version = "0.0.7";
              sha256 =
                "e2fe9e013c6f5cb81c6c18af468253de670054ff98b58a2385bf72cfdef13c82";
            };
            beamDeps  = [ csv_2_1_1 ];

            meta = {
              description = ''Create Elixir structs, maps with atom keys, and
                            keyword lists from CSV/TSV data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/robmckinnon/data_morph";
            };
          } // packageOverrides)
      ) {};

    data_morph = data_morph_0_0_7;

    data_pool_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, e_queue_1_0_1 }:
          buildMix ({
            name = "data_pool";
            version = "1.0.2";
            src = fetchHex {
              pkg = "data_pool";
              version = "1.0.2";
              sha256 =
                "92af4af2eb5ad1bbabcefa750c55b9664c0d4395f00cb68c08a56a8adcfcb3f9";
            };
            beamDeps  = [ e_queue_1_0_1 ];

            meta = {
              longDescription = ''Utility to buffer items into a queue that
                                follow a simple block pattern on calls to push
                                and pop when the queue at a max size or
                                empty.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfalk/data_pool";
            };
          } // packageOverrides)
      ) {};

    data_pool = data_pool_1_0_2;

    database_url_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "database_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "database_url";
              version = "0.1.0";
              sha256 =
                "273c8c926761d5716fee17c8a8494583d729a4419e30479a292eb6cea3d9a756";
            };

            meta = {
              description = ''Parse database URL and renturn keyword list for
                            use with Ecto.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/s-m-i-t-a/database_url";
            };
          } // packageOverrides)
      ) {};

    database_url = database_url_0_1_0;

    datasets_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          math_0_3_0,
          statistics_0_4_1
        }:
          buildMix ({
            name = "datasets";
            version = "0.1.0";
            src = fetchHex {
              pkg = "datasets";
              version = "0.1.0";
              sha256 =
                "6de8652c7deaf1ed73f369c582f2889d4c6f9ca3de20256e41573d82dd78cb2e";
            };
            beamDeps  = [ ex_doc_0_18_3 math_0_3_0 statistics_0_4_1 ];

            meta = {
              description = ''Generate sample data similar to sklearn.datasets
                            for python'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/markkurt/sampledata";
            };
          } // packageOverrides)
      ) {};

    datasets = datasets_0_1_0;

    datastructures_0_2_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "datastructures";
            version = "0.2.8";
            src = fetchHex {
              pkg = "datastructures";
              version = "0.2.8";
              sha256 =
                "fc351f7ac756383a5179b87fb16fb143be79235b7942dee97cf0315e8ace45fe";
            };

            meta = {
              description = ''Elixir protocols and implementations for various
                            data structures.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/elixir-datastructures";
            };
          } // packageOverrides)
      ) {};

    datastructures = datastructures_0_2_8;

    datum_4_3_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "datum";
            version = "4.3.3";
            src = fetchHex {
              pkg = "datum";
              version = "4.3.3";
              sha256 =
                "1eaa24cce0385e1964b925b12641191e677eded559c4aa34adb429f606801f33";
            };

            buildPlugins  = [ coveralls ];


            meta = {
              description = ''pure functional and generic programming'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/fogfish/datum";
            };
          } // packageOverrides)
      ) {};

    datum = datum_4_3_3;

    db_connection_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "db_connection";
            version = "1.0.0";
            src = fetchHex {
              pkg = "db_connection";
              version = "1.0.0";
              sha256 =
                "ee19a9e07f6d6356652f12b8bf675e24b75a143dd98ca3a022e00c2f5b782290";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 sbroker_1_0_0 ];

            meta = {
              description = ''Database connection behaviour for database
                            transactions and connection pooling'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/db_connection";
            };
          } // packageOverrides)
      ) {};

    db_connection_1_0_0_rc_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "db_connection";
            version = "1.0.0-rc.5";
            src = fetchHex {
              pkg = "db_connection";
              version = "1.0.0-rc.5";
              sha256 =
                "b1d3dcc363cb9d285b9b659ecdb1b9a662575866975858f13ff2c5ce9bb9fb03";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 sbroker_1_0_0 ];

            meta = {
              description = ''Database connection behaviour for database
                            transactions and connection pooling'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/db_connection";
            };
          } // packageOverrides)
      ) {};

    db_connection_1_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "db_connection";
            version = "1.1.3";
            src = fetchHex {
              pkg = "db_connection";
              version = "1.1.3";
              sha256 =
                "5f0a16a58312a610d5eb0b07506280c65f5137868ad479045f2a2dc4ced80550";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 sbroker_1_0_0 ];

            meta = {
              description = ''Database connection behaviour for database
                            transactions and connection pooling'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/db_connection";
            };
          } // packageOverrides)
      ) {};

    db_connection = db_connection_1_1_3;

    dbg_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dbg";
            version = "1.0.1";
            src = fetchHex {
              pkg = "dbg";
              version = "1.0.1";
              sha256 =
                "866159f496a1ad9b959501f16db3d1338bb6cef029a75a67ca5615d25b38345f";
            };

            meta = {
              description = ''Distributed tracing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dbg";
            };
          } // packageOverrides)
      ) {};

    dbg = dbg_1_0_1;

    dbschema_0_2_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgpool_1_1_0,
          erlando_3_1_1,
          lager_3_2_1
        }:
          buildRebar3 ({
            name = "dbschema";
            version = "0.2.2";
            src = fetchHex {
              pkg = "dbschema";
              version = "0.2.2";
              sha256 =
                "b9341a59416e9c89038483802f73ecd92263d4727c23e527e6b34de36188a97d";
            };

            beamDeps  = [ epgpool_1_1_0 erlando_3_1_1 lager_3_2_1 ];

            meta = {
              description = ''Database postgresql migrations util'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/dbschema";
            };
          } // packageOverrides)
      ) {};

    dbschema = dbschema_0_2_2;

    dbux_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "dbux";
            version = "1.0.3";
            src = fetchHex {
              pkg = "dbux";
              version = "1.0.3";
              sha256 =
                "79d01f620dd32ec4ed11423e0724bf7d8a46353e56f8d28cbdbf499a352caa1e";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Bindings for the D-Bus IPC protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/dbux";
            };
          } // packageOverrides)
      ) {};

    dbux = dbux_1_0_3;

    ddate_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ddate";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ddate";
              version = "0.0.2";
              sha256 =
                "89f73c3b20f06b6d2cdb00402cfc79ceed3d233507307cc88aae331be4a384e9";
            };

            meta = {
              description = ''Discordian Date system library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/redvers/ddate";
            };
          } // packageOverrides)
      ) {};

    ddate = ddate_0_0_2;

    ddb_client_0_5_9 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dproto_0_5_6,
          mmath_0_2_25
        }:
          buildRebar3 ({
            name = "ddb_client";
            version = "0.5.9";
            src = fetchHex {
              pkg = "ddb_client";
              version = "0.5.9";
              sha256 =
                "14966a70835bb7a200a146bd5e5e220de5af0ea7937da64e109bb56c519323ee";
            };

            beamDeps  = [ dproto_0_5_6 mmath_0_2_25 ];

            meta = {
              description = ''DalmatinerDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/ddb_client";
            };
          } // packageOverrides)
      ) {};

    ddb_client = ddb_client_0_5_9;

    ddb_connection_0_4_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_client_0_5_9,
          otters_0_2_10,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "ddb_connection";
            version = "0.4.4";
            src = fetchHex {
              pkg = "ddb_connection";
              version = "0.4.4";
              sha256 =
                "3531770871b53604969754f6a8f5cda3bd263435d612f0ddca150c35e0adc43b";
            };

            beamDeps  = [ ddb_client_0_5_9 otters_0_2_10 poolboy_1_5_1 ];

            meta = {
              description = ''DDB client connection'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ddb_connection = ddb_connection_0_4_4;

    ddwrt_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "ddwrt";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ddwrt";
              version = "0.0.2";
              sha256 =
                "028ab0631c7d23482c4e14c27a01c19d630333e96002e3ff86ee2744deab0da0";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''A library for interacting with routers running
                            DD-WRT'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/derek-schaefer/ddwrt";
            };
          } // packageOverrides)
      ) {};

    ddwrt = ddwrt_0_0_2;

    deal_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deal";
            version = "1.0.0";
            src = fetchHex {
              pkg = "deal";
              version = "1.0.0";
              sha256 =
                "1b169ad642665f96dfaf25f54e72b4ba4cb2a7d06608bd0cfc976b3d1c91af15";
            };

            meta = {
              longDescription = ''Deal is a shortcut to chain function that
                                returns data using the pattern `{:ok,
                                value}`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/deal";
            };
          } // packageOverrides)
      ) {};

    deal = deal_1_0_0;

    dealer_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "dealer";
            version = "0.8.0";
            src = fetchHex {
              pkg = "dealer";
              version = "0.8.0";
              sha256 =
                "c8c72d38e1cff6a181a6b6f627fb6fd5998279827519e598eb28bcef2be721ee";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              description = ''An API Client for Stockfighter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/larrylv/dealer";
            };
          } // packageOverrides)
      ) {};

    dealer = dealer_0_8_0;

    debbie_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "debbie";
            version = "1.0.4";
            src = fetchHex {
              pkg = "debbie";
              version = "1.0.4";
              sha256 =
                "10d85263c61374d0e87df3fffe8762f0f1a72852a19323364ab20753adca76cd";
            };

            meta = {
              description = ''.DEB Built In Erlang'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/crownedgrouse/debbie";
            };
          } // packageOverrides)
      ) {};

    debbie = debbie_1_0_4;

    debounce_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "debounce";
            version = "0.1.1";
            src = fetchHex {
              pkg = "debounce";
              version = "0.1.1";
              sha256 =
                "c38963005087b751680f7805f800497e2ccdff9a4666551e071ef5438f32ca55";
            };

            meta = {
              description = ''A process-based debouncer for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/debounce";
            };
          } // packageOverrides)
      ) {};

    debounce = debounce_0_1_1;

    debug_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "debug";
            version = "0.1.0";
            src = fetchHex {
              pkg = "debug";
              version = "0.1.0";
              sha256 =
                "bdf929b46b35e0ce8d5a2af657295a533f308fb3ad4072559196b5f1e43ccd64";
            };

            meta = {
              description = ''flexible debugging messages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mndvns/debug";
            };
          } // packageOverrides)
      ) {};

    debug = debug_0_1_0;

    decimal_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decimal";
            version = "1.1.1";
            src = fetchHex {
              pkg = "decimal";
              version = "1.1.1";
              sha256 =
                "c73f361389c2221e2fda0e2ba63c6de88d1545b00ddc0b4d5885202ccc34c568";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          } // packageOverrides)
      ) {};

    decimal_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decimal";
            version = "1.1.2";
            src = fetchHex {
              pkg = "decimal";
              version = "1.1.2";
              sha256 =
                "7a6dfa1f4d389497acd7b807bf38c55022487c68b73d339d5114e3a691e006c5";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          } // packageOverrides)
      ) {};

    decimal_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decimal";
            version = "1.3.1";
            src = fetchHex {
              pkg = "decimal";
              version = "1.3.1";
              sha256 =
                "94f7e657875648bc9ac747726eaae05c11cebff2dd01b2f807c7ab822a857786";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          } // packageOverrides)
      ) {};

    decimal_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decimal";
            version = "1.5.0";
            src = fetchHex {
              pkg = "decimal";
              version = "1.5.0";
              sha256 =
                "130926580655f34d759dd25f5d723fd233c9bbe0399cde57e2a1adea9ed92e08";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          } // packageOverrides)
      ) {};

    decimal = decimal_1_5_0;

    decimal_arithmetic_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "decimal_arithmetic";
            version = "0.1.2";
            src = fetchHex {
              pkg = "decimal_arithmetic";
              version = "0.1.2";
              sha256 =
                "b9a1900d1a2cbb6fcffe55f02374824637c7afda53617b90e5738202a6026954";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''Extended arithmetic for Decimal library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jacek-adamek/decimal_arithmetic";
            };
          } // packageOverrides)
      ) {};

    decimal_arithmetic = decimal_arithmetic_0_1_2;

    decimal_env_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "decimal_env";
            version = "0.3.0";
            src = fetchHex {
              pkg = "decimal_env";
              version = "0.3.0";
              sha256 =
                "343f692917d79349807ce0adedb8d00406c5ac57402536eefca4eda86cbb0abd";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''Provides macros to use Decimals with the regular
                            Elixir operators'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/decimal_env";
            };
          } // packageOverrides)
      ) {};

    decimal_env = decimal_env_0_3_0;

    decks_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decks";
            version = "0.0.2";
            src = fetchHex {
              pkg = "decks";
              version = "0.0.2";
              sha256 =
                "3d01790def23bccd30c34c3a839572f2bc19ea0b9e0a569115feb2d64d78bf50";
            };

            meta = {
              description = ''Implements standard card decks for Elixir-based
                            card games.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/elixir_decks";
            };
          } // packageOverrides)
      ) {};

    decks = decks_0_0_2;

    deco_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deco";
            version = "0.1.2";
            src = fetchHex {
              pkg = "deco";
              version = "0.1.2";
              sha256 =
                "d603e1bd6b826afdfaf30f8f2c0d074e0f58c55bdafc5ccad0195ffbbf64fde9";
            };

            meta = {
              description = ''Minimalist Function Decorators'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vic/deco";
            };
          } // packageOverrides)
      ) {};

    deco = deco_0_1_2;

    decoction_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decoction";
            version = "0.0.1";
            src = fetchHex {
              pkg = "decoction";
              version = "0.0.1";
              sha256 =
                "cdf7ad35cdf87962e153bb56d9c68f8dd061469d58cae8923cbdcd2980d7adc0";
            };

            meta = {
              description = ''Decoction is a static site generator written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/decoction";
            };
          } // packageOverrides)
      ) {};

    decoction = decoction_0_0_1;

    decompilerl_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decompilerl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "decompilerl";
              version = "0.0.1";
              sha256 =
                "655989269692375f7f25ebe4f2a1f6d3a665085f08e2f4b9155164ee9d7799cc";
            };

            meta = {
              description = ''Decompile Elixir modules to Erlang abstract
                            code'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/aerosol/decompilerl";
            };
          } // packageOverrides)
      ) {};

    decompilerl = decompilerl_0_0_1;

    decorator_1_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decorator";
            version = "1.2.3";
            src = fetchHex {
              pkg = "decorator";
              version = "1.2.3";
              sha256 =
                "9f632910acfbeb875e538206286834f1bf062fb837b0a25f0c9fe4ee1f0edf71";
            };

            meta = {
              description = ''Function decorators for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/decorator";
            };
          } // packageOverrides)
      ) {};

    decorator = decorator_1_2_3;

    deditex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deditex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "deditex";
              version = "0.1.0";
              sha256 =
                "fb1387eaa51042e44fb32eb6b7d89b19f17b10b8b5eade4c43da0ee070d67d86";
            };

            meta = {
              description = ''Handles connections to the Deditec RO-ETH
                            Modules.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Kagemaru/deditex";
            };
          } // packageOverrides)
      ) {};

    deditex = deditex_0_1_0;

    deep_clean_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deep_clean";
            version = "0.1.1";
            src = fetchHex {
              pkg = "deep_clean";
              version = "0.1.1";
              sha256 =
                "fb6444e8092f7d52d963b5e472e0c02ec6ac937bf59870f25e283fad98ec658c";
            };

            meta = {
              description = ''Exclude elements from deep nested maps or list'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ottojimb/deep_clean";
            };
          } // packageOverrides)
      ) {};

    deep_clean = deep_clean_0_1_1;

    deep_merge_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deep_merge";
            version = "0.1.1";
            src = fetchHex {
              pkg = "deep_merge";
              version = "0.1.1";
              sha256 =
                "7dd57812332d76067deb9611b93cc98ac74cbb3b09480eef80c7e3c5a0813ecf";
            };

            meta = {
              longDescription = ''Deep (recursive) merging for maps, keyword
                                lists and whatever else you may want via
                                implementing a simple protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/deep_merge";
            };
          } // packageOverrides)
      ) {};

    deep_merge = deep_merge_0_1_1;

    default_args_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "default_args";
            version = "0.1.1";
            src = fetchHex {
              pkg = "default_args";
              version = "0.1.1";
              sha256 =
                "0a4c9c4de71fd4d3d37b47251cfad73667e26762f5f6011f794052b56fe3a322";
            };

            meta = {
              description = ''Compile time check for function defaults'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leighshepperson/default_args";
            };
          } // packageOverrides)
      ) {};

    default_args = default_args_0_1_1;

    defer_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "defer";
            version = "0.1.2";
            src = fetchHex {
              pkg = "defer";
              version = "0.1.2";
              sha256 =
                "9f7941090d0394fb55ebabf50a881521eb9d4492ebbd3ceedbec3790928e7b1f";
            };

            meta = {
              description = ''Deferrables for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/defer";
            };
          } // packageOverrides)
      ) {};

    defer = defer_0_1_2;

    deferred_config_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deferred_config";
            version = "0.1.1";
            src = fetchHex {
              pkg = "deferred_config";
              version = "0.1.1";
              sha256 =
                "2eb5311037feb4a6a5dbe3ecc5c98af7ea849730e5dbd9aee0f45c5dbccc3922";
            };

            meta = {
              longDescription = ''Seamless runtime config with one line of
                                code. No special accessors or mappings. Full
                                support for `{:system...} tuple` and `{m,f,a}`
                                runtime config patterns.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/deferred_config";
            };
          } // packageOverrides)
      ) {};

    deferred_config = deferred_config_0_1_1;

    defmap_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "defmap";
            version = "0.2.0";
            src = fetchHex {
              pkg = "defmap";
              version = "0.2.0";
              sha256 =
                "d7c38e2edb3766a4669f0222acf44192dfe34d21c691029b418c8dd18f32c816";
            };

            meta = {
              description = ''Embed your map into a module for easier/faster
                            lookup'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minhajuddin/defmap";
            };
          } // packageOverrides)
      ) {};

    defmap = defmap_0_2_0;

    defmemo_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "defmemo";
            version = "0.1.1";
            src = fetchHex {
              pkg = "defmemo";
              version = "0.1.1";
              sha256 =
                "8fefc49ff64b06fdb1ee15292419c16919a7a3c6b8e5cac6afd7a13919715e0f";
            };

            meta = {
              description = '' A memoization macro (defmemo) for elixir using a
                            genserver backing store. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/os6sense/DefMemo";
            };
          } // packageOverrides)
      ) {};

    defmemo = defmemo_0_1_1;

    defunit_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "defunit";
            version = "0.4.0";
            src = fetchHex {
              pkg = "defunit";
              version = "0.4.0";
              sha256 =
                "24ad6790202eba6ef734e9cd5e53cb96d839646d40a46ec7a32d53dcd9ff43b3";
            };

            meta = {
              longDescription = ''DefUnit provides macros that allow you to
                                quickly create a module that defines a set of
                                core units (SI, FPS, currency, whatever) for its
                                users. The macros create documentation
                                attributes, conversion operators and type specs
                                that allow Dialyzer to detect incompatible unit
                                assignments at compile time.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/robinhilliard/defunit.git";
            };
          } // packageOverrides)
      ) {};

    defunit = defunit_0_4_0;

    defused_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fuse_2_4_2 }:
          buildMix ({
            name = "defused";
            version = "0.6.0";
            src = fetchHex {
              pkg = "defused";
              version = "0.6.0";
              sha256 =
                "83047d87c96d0f6990f8a134ec203c8ad564b06e2d8f77bc33d83639e53ab3d8";
            };
            beamDeps  = [ fuse_2_4_2 ];

            meta = {
              description = ''A fuse wrapping macro for easy circuit
                            breaking'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soundtrackyourbrand/defused";
            };
          } // packageOverrides)
      ) {};

    defused = defused_0_6_0;

    delayed_otp_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delayed_otp";
            version = "0.0.4";
            src = fetchHex {
              pkg = "delayed_otp";
              version = "0.0.4";
              sha256 =
                "a7724c803adba2f353256b7ea3f1b47e1206ef2f2b468ddccec82fd37cae4019";
            };

            meta = {
              longDescription = ''Delay death of supervisor children or
                                gen_server : for instance Erlang supervisor with
                                exponential backoff restart strategy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kbrw/delayed_otp";
            };
          } // packageOverrides)
      ) {};

    delayed_otp = delayed_otp_0_0_4;

    delegate_access_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delegate_access";
            version = "0.1.0";
            src = fetchHex {
              pkg = "delegate_access";
              version = "0.1.0";
              sha256 =
                "361d91348aff927ae50aa4896259bfc84248fd15fd4f1c00d5305c9a38395020";
            };

            meta = {
              description = ''delegate Access callbacks to another module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mndvns/delegate_access";
            };
          } // packageOverrides)
      ) {};

    delegate_access = delegate_access_0_1_0;

    delegate_behaviour_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delegate_behaviour";
            version = "0.1.6";
            src = fetchHex {
              pkg = "delegate_behaviour";
              version = "0.1.6";
              sha256 =
                "2cd343e9fa0d9359cf331302e085a67727f01551d4ef9252aea037953934186b";
            };

            meta = {
              description = ''Macros to define modules that delegate to
                            concrete implementations of behaviours'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    delegate_behaviour = delegate_behaviour_0_1_6;

    delegate_with_docs_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delegate_with_docs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "delegate_with_docs";
              version = "0.1.0";
              sha256 =
                "670d9bd3094d48ed0e4bd6f7f68e38b3b66a68ad3241c2479f4d8700dbdfea75";
            };

            meta = {
              description = ''Delegate functions while preserving their docs'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/danielberkompas/delegate_with_docs";
            };
          } // packageOverrides)
      ) {};

    delegate_with_docs = delegate_with_docs_0_1_0;

    delorean_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delorean";
            version = "1.3.0";
            src = fetchHex {
              pkg = "delorean";
              version = "1.3.0";
              sha256 =
                "fb92b7b7ce2d0bd575ec45080ab88953fb567eb7883ed5a86fa3d85bae04d09d";
            };

            meta = {
              longDescription = ''A simple helper module to provide the ability
                                to tranform dates in a pipeline for increased
                                simplicity and readability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willamin/delorean";
            };
          } // packageOverrides)
      ) {};

    delorean = delorean_1_3_0;

    delta_crdt_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delta_crdt";
            version = "0.1.7";
            src = fetchHex {
              pkg = "delta_crdt";
              version = "0.1.7";
              sha256 =
                "9a5d51132766acacd2dc74cd1b4a604f296a3ed376058d760901d9854e0a1a8c";
            };

            meta = {
              description = ''Implementations of δ-CRDTs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/derekkraan/delta_crdt_ex";
            };
          } // packageOverrides)
      ) {};

    delta_crdt = delta_crdt_0_1_7;

    deltek_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_3_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "deltek";
            version = "0.0.4";
            src = fetchHex {
              pkg = "deltek";
              version = "0.0.4";
              sha256 =
                "274eecc6aba76e19e30e5850746ee81241ac8cc334d9729588b2ba770ac53988";
            };
            beamDeps  = [ html_entities_0_3_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''An Elixir wrapper for the SOAP Deltek API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucidstack/elixir-deltek";
            };
          } // packageOverrides)
      ) {};

    deltek = deltek_0_0_4;

    demacro_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "demacro";
            version = "0.0.1";
            src = fetchHex {
              pkg = "demacro";
              version = "0.0.1";
              sha256 =
                "e2a83d48f6b3e03764baf2e149dd5420e632d0d4daa77c5226697a3755a89d16";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    demacro = demacro_0_0_1;

    depo_1_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, esqlite_0_2_4 }:
          buildMix ({
            name = "depo";
            version = "1.5.2";
            src = fetchHex {
              pkg = "depo";
              version = "1.5.2";
              sha256 =
                "92a80eaaf85054d5856b25e67307c22d708917997d7a9e082f880c88b95e2f87";
            };
            beamDeps  = [ esqlite_0_2_4 ];

            meta = {
              longDescription = ''Depo provides lightweight storage and
                                querying capabilities in Elixir by providing a
                                minimal and polished API that builds on the
                                unique advantages of SQLite.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    depo = depo_1_5_2;

    deppie_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deppie";
            version = "1.1.0";
            src = fetchHex {
              pkg = "deppie";
              version = "1.1.0";
              sha256 =
                "705f8ca00df055333604356627f6590db6c64b29313672abe22a39bf44947852";
            };

            meta = {
              description = ''Elixir`s coolest deprecation logger'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/deppie";
            };
          } // packageOverrides)
      ) {};

    deppie = deppie_1_1_0;

    deque_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deque";
            version = "1.2.0";
            src = fetchHex {
              pkg = "deque";
              version = "1.2.0";
              sha256 =
                "cbc965c2c04654fee7ed875bf5efb5c925e1c98b0351bf1cca10670a024fbd5a";
            };

            meta = {
              description = ''Fast bounded deque using two rotating lists.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/discordapp/deque";
            };
          } // packageOverrides)
      ) {};

    deque = deque_1_2_0;

    descriptive_statistics_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "descriptive_statistics";
            version = "0.0.2";
            src = fetchHex {
              pkg = "descriptive_statistics";
              version = "0.0.2";
              sha256 =
                "254d75c74d5470165553562fd7bfbc432325feecaa106ab15151f581e59ed550";
            };

            meta = {
              longDescription = ''Descriptive Statistics is a library that
                                allows you to compute simple descriptive
                                statistics in Elixir. Inspired by
                                https://github.com/thirtysixthspan/descriptive_statistics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pusewicz/descriptive_statistics";
            };
          } // packageOverrides)
      ) {};

    descriptive_statistics = descriptive_statistics_0_0_2;

    destructure_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "destructure";
            version = "0.2.3";
            src = fetchHex {
              pkg = "destructure";
              version = "0.2.3";
              sha256 =
                "e962f5c740ae2c31c944a42c6f3a53b5abb4ac69566b963ce7a69fc18ff5ad82";
            };

            meta = {
              description = ''Javascript-style destructuring for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/destructure";
            };
          } // packageOverrides)
      ) {};

    destructure = destructure_0_2_3;

    detergent_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "detergent";
            version = "0.3.0";
            src = fetchHex {
              pkg = "detergent";
              version = "0.3.0";
              sha256 =
                "510cfb5d35b4b344762f074b73c8696b4bdde654ea046b3365cf92760ae33362";
            };

            meta = {
              description = ''An emulsifying Erlang SOAP library'';
              license = with stdenv.lib.licenses; [ unlicense bsd3 ];
              homepage = "https://github.com/devinus/detergent";
            };
          } // packageOverrides)
      ) {};

    detergent = detergent_0_3_0;

    detergentex_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, detergent_0_3_0 }:
          buildMix ({
            name = "detergentex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "detergentex";
              version = "0.0.7";
              sha256 =
                "6bb1bc2fe9228f97e512ef012c473ed822263dc38c3dbaa727fcd111ce1c4771";
            };
            beamDeps  = [ detergent_0_3_0 ];

            meta = {
              description = ''Elixir binding to Detergent erlang library used
                            to call WSDL SOAP Services'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/r-icarus/detergentex";
            };
          } // packageOverrides)
      ) {};

    detergentex = detergentex_0_0_7;

    deviant_elixir_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          feeder_ex_1_1_0,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "deviant_elixir";
            version = "0.0.4";
            src = fetchHex {
              pkg = "deviant_elixir";
              version = "0.0.4";
              sha256 =
                "42473969889a47edab66384988e70ab6b4da158043e9231deab822743e3d9943";
            };
            beamDeps  = [ feeder_ex_1_1_0 httpoison_1_2_0 ];

            meta = {
              longDescription = ''WIP. Unstable alpha. Elixir API wrapper for
                                Deviant Art. At this moment provides only RSS
                                feeds intergac.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vdaniuk/deviant-elixir";
            };
          } // packageOverrides)
      ) {};

    deviant_elixir = deviant_elixir_0_0_4;

    dex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "dex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "dex";
              version = "0.1.2";
              sha256 =
                "41c2cf68cc5469c3b14f12a969ba3aa1b169cc2cb01fae567538670a4dbd5dd6";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''Deploy Elixir application with Mix.Task.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbtfr/dex";
            };
          } // packageOverrides)
      ) {};

    dex = dex_0_1_2;

    dexter_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "dexter";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dexter";
              version = "1.0.0";
              sha256 =
                "c9263dde2f0b5a6bde94669de664d9aa500d290837827a18068bbfa29730e923";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''A Pokéapi client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/dexter";
            };
          } // packageOverrides)
      ) {};

    dexter = dexter_1_0_0;

    dextruct_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dextruct";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dextruct";
              version = "1.0.0";
              sha256 =
                "264246312240d8bddbb7c3b30e7c2aeead4ad5dd82a6f06ec04d116e8ee1e05b";
            };

            meta = {
              description = ''Destructing assignment with `<~`'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/taiansu/dextruct";
            };
          } // packageOverrides)
      ) {};

    dextruct = dextruct_1_0_0;

    dexts_0_3_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, datastructures_0_2_8
        }:
          buildMix ({
            name = "dexts";
            version = "0.3.1";
            src = fetchHex {
              pkg = "dexts";
              version = "0.3.1";
              sha256 =
                "4f8392ca3d2c74e567dbc8014ea46b5b36ac6cacea094c3e229a889427405180";
            };
            beamDeps  = [ datastructures_0_2_8 ];

            meta = {
              description = ''dets wrapper for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/dexts";
            };
          } // packageOverrides)
      ) {};

    dexts = dexts_0_3_1;

    dflow_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dflow";
            version = "0.1.7";
            src = fetchHex {
              pkg = "dflow";
              version = "0.1.7";
              sha256 =
                "167b1ff691e8b630f6d2cd3d333d12de4d7c73ef436d32708e2599a934f30d7f";
            };

            meta = {
              description = ''Pipelined flow processing engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dflow";
            };
          } // packageOverrides)
      ) {};

    dialyxir_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dialyxir";
            version = "0.5.1";
            src = fetchHex {
              pkg = "dialyxir";
              version = "0.5.1";
              sha256 =
                "6c32a70ed5d452c6650916555b1f96c79af5fc4bf286997f8b15f213de786f73";
            };

            meta = {
              description = ''Mix tasks to simplify use of Dialyzer in Elixir
                            projects.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jeremyjh/dialyxir";
            };
          } // packageOverrides)
      ) {};

    dialyxir_1_0_0_rc_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dialyxir";
            version = "1.0.0-rc.3";
            src = fetchHex {
              pkg = "dialyxir";
              version = "1.0.0-rc.3";
              sha256 =
                "ddde98a783cec47d1b0ffaf5a0d5fbe09e90e1ac2d28452eefa6f72aac072c5a";
            };

            meta = {
              description = ''Mix tasks to simplify use of Dialyzer in Elixir
                            projects.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jeremyjh/dialyxir";
            };
          } // packageOverrides)
      ) {};

    dialyxir = dialyxir_1_0_0_rc_3;

    dialyze_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dialyze";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dialyze";
              version = "0.2.1";
              sha256 =
                "f485181fa53229356621261a384963cb47511cccf1454e82ca4fde53274fcd48";
            };

            meta = {
              description = ''Dialyzer Mix task'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dialyze";
            };
          } // packageOverrides)
      ) {};

    dialyze = dialyze_0_2_1;

    dialyzex_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dialyzex";
            version = "1.1.2";
            src = fetchHex {
              pkg = "dialyzex";
              version = "1.1.2";
              sha256 =
                "7c36a0b90ef36500e67090b220ea5adbe8f51af3463ad5e982b66e21c9a8b8ea";
            };

            meta = {
              description = ''A dialyzer task for Mix with sensible defaults'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Comcast/dialyzex";
            };
          } // packageOverrides)
      ) {};

    dialyzex = dialyzex_1_1_2;

    diane_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sweet_xml_0_6_5 }:
          buildMix ({
            name = "diane";
            version = "0.0.1";
            src = fetchHex {
              pkg = "diane";
              version = "0.0.1";
              sha256 =
                "cb4a9984aab545f376d32f13b4ab612ba32a603781ddd743658d9c3991a4a89d";
            };
            beamDeps  = [ sweet_xml_0_6_5 ];

            meta = {
              description = ''RSS/Atom parser for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ptrckbrwn/diane";
            };
          } // packageOverrides)
      ) {};

    diane = diane_0_0_1;

    dice_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dice";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dice";
              version = "0.0.1";
              sha256 =
                "975795636d6374bf120669cdbd6008a64bdd193a2ff202ffbdeefaa03d11bb9c";
            };

            meta = {
              description = ''Library and CLI app for rolling dice '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/dice";
            };
          } // packageOverrides)
      ) {};

    dice = dice_0_0_1;

    dice_roller_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dice_roller";
            version = "1.1.0";
            src = fetchHex {
              pkg = "dice_roller";
              version = "1.1.0";
              sha256 =
                "90e3485951605338f23686dcc001599354cb6eff7df851b1a1f6514b1c7fbd5c";
            };

            meta = {
              description = ''An Elixir library for simulating dice rolls'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KevinGreene/DiceRoller";
            };
          } // packageOverrides)
      ) {};

    dice_roller = dice_roller_1_1_0;

    dicks_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpoison_0_6_2
        }:
          buildMix ({
            name = "dicks";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dicks";
              version = "0.1.0";
              sha256 =
                "66d1a93ad1753361f2fc82033805a5f4c03ff295c78123e497f1ec56b9815be3";
            };
            beamDeps  = [ exjsx_3_1_0 httpoison_0_6_2 ];

            meta = {
              longDescription = ''An Elixir client for the Dick As A Service
                                platform http://dicks-api.herokuapp.com '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Annwenn/DicksEx";
            };
          } // packageOverrides)
      ) {};

    dicks = dicks_0_1_0;

    dicon_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dicon";
            version = "0.5.0";
            src = fetchHex {
              pkg = "dicon";
              version = "0.5.0";
              sha256 =
                "558b41dbedfb0ffd459b577b65476bcda6a714f1d5ce3d8c3485de3dbf31499d";
            };

            meta = {
              description = ''Simple release deliverer for Elixir'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/dicon";
            };
          } // packageOverrides)
      ) {};

    dicon = dicon_0_5_0;

    diet_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "diet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "diet";
              version = "0.1.0";
              sha256 =
                "35fa3928b7760a7c1c4501f66a66cb75c5ce3133bea87d8aeacc67948db31986";
            };

            meta = {
              longDescription = ''Diet is a DSL for writing your program logic
                                as a sequence of trivial transformations. See
                                https://github.com/pragdave/diet_examples for
                                some example code, and
                                https://www.youtube.com/watch?v=L1-amhlGk7c for
                                a talk that contains examples of Diet in
                                action.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/diet";
            };
          } // packageOverrides)
      ) {};

    diet = diet_0_1_0;

    diff_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "diff";
            version = "1.1.0";
            src = fetchHex {
              pkg = "diff";
              version = "1.1.0";
              sha256 =
                "3364bf94be8b73c9c42464200ebac563023972795d1d6e4adecf4216c9ae685a";
            };

            meta = {
              description = ''A simple diff library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/diff";
            };
          } // packageOverrides)
      ) {};

    diff = diff_1_1_0;

    difflist_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "difflist";
            version = "1.0.0";
            src = fetchHex {
              pkg = "difflist";
              version = "1.0.0";
              sha256 =
                "09c313d872def8122e068d448379294e81187b45c976d1a8819664f2abca4947";
            };

            meta = {
              description = ''Difference lists in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/difflist";
            };
          } // packageOverrides)
      ) {};

    difflist = difflist_1_0_0;

    diffy_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          proper_1_2_0,
          zotonic_stdlib_1_0_0_alpha2
        }:
          buildRebar3 ({
            name = "diffy";
            version = "1.0.0";
            src = fetchHex {
              pkg = "diffy";
              version = "1.0.0";
              sha256 =
                "96f85bc92178f1c28a9540e2d05c50d74416257ff2fe8a1132aa560da0562f73";
            };

            beamDeps  = [ proper_1_2_0 zotonic_stdlib_1_0_0_alpha2 ];

            meta = {
              description = ''Diff, match patch implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zotonic/diffy";
            };
          } // packageOverrides)
      ) {};

    diffy = diffy_1_0_0;

    digestex_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "digestex";
            version = "0.4.2";
            src = fetchHex {
              pkg = "digestex";
              version = "0.4.2";
              sha256 =
                "9248522fa20ef6b72c6ef57eadea0256b3091d683a5c3481d65a267640c75ef3";
            };

            meta = {
              description = ''An elixir module for doing HTTP digest
                            authentication using erlang httpc'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/jdalberg/digestex";
            };
          } // packageOverrides)
      ) {};

    digestex = digestex_0_4_2;

    digger_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "digger";
            version = "1.0.0";
            src = fetchHex {
              pkg = "digger";
              version = "1.0.0";
              sha256 =
                "2f7c9e9e3383214fff410b2ed6b9870c85063a9f983c710d9fe589f78ad74826";
            };

            meta = {
              longDescription = ''A collection of helpers to operate on nested
                                maps. See README for the complete list of
                                helpers. The test suite is also helpful.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/treble37/digger";
            };
          } // packageOverrides)
      ) {};

    digger = digger_1_0_0;

    digitalocean_api_wrapper_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_1_2_0,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "digitalocean_api_wrapper";
            version = "0.1.1";
            src = fetchHex {
              pkg = "digitalocean_api_wrapper";
              version = "0.1.1";
              sha256 =
                "074f5517fa16bed409be0f3c7ad5e35825b89e935dfcadf69b355f7a421635c6";
            };
            beamDeps  = [ apex_1_2_0 poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''Dead simple Elixir wrapper for the DigitalOcean
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stirlab/elixir-digitalocean";
            };
          } // packageOverrides)
      ) {};

    digitalocean_api_wrapper = digitalocean_api_wrapper_0_1_1;

    digoc_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_3_1
        }:
          buildMix ({
            name = "digoc";
            version = "0.3.3";
            src = fetchHex {
              pkg = "digoc";
              version = "0.3.3";
              sha256 =
                "23d5c2f1b977b1f3e12567879a20bc211898efdfcac9a0b6802324bc42ea0605";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_3_1 ];

            meta = {
              description = ''An Elixir client for the Digital Ocean API v2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinmontuori/digoc";
            };
          } // packageOverrides)
      ) {};

    digoc = digoc_0_3_3;

    dir_walker_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dir_walker";
            version = "0.0.7";
            src = fetchHex {
              pkg = "dir_walker";
              version = "0.0.7";
              sha256 =
                "56d7a7e5b76dc7a6417309a11ddd79d8ef5c4e31a6f6b58d596fbf8d4e6600ea";
            };

            meta = {
              longDescription = ''DirWalker lazily traverses one or more
                                directory trees, depth first, returning
                                successive file names. Provides both a `next()`
                                and a Stream-based API. Directory names may
                                optionally be returned. The File.Stat structure
                                associated with the file name may also
                                optionally be returned.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/dir_walker";
            };
          } // packageOverrides)
      ) {};

    dir_walker = dir_walker_0_0_7;

    disc_union_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "disc_union";
            version = "0.2.0";
            src = fetchHex {
              pkg = "disc_union";
              version = "0.2.0";
              sha256 =
                "e4aebd9378d5dbf960d5d69546fa9654790cbb68b257de630f673fa16a54eace";
            };

            meta = {
              description = ''Discriminated unions for Elixir - for building
                            algebraic data types'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/X4lldux/disc_union";
            };
          } // packageOverrides)
      ) {};

    disc_union = disc_union_0_2_0;

    discogs_ex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "discogs_ex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "discogs_ex";
              version = "0.0.1";
              sha256 =
                "7072322e35911b118e1f81d0156b08a610c28fdb8efdf4a0b6acb2237157f21e";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              description = ''An Elixir library for Discogs API 2.0.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/mager/discogs_ex";
            };
          } // packageOverrides)
      ) {};

    discogs_ex = discogs_ex_0_0_1;

    discord_alchemy_0_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          httpoison_0_13_0,
          kcl_1_1_0,
          poison_3_1_0,
          porcelain_2_0_3,
          websocket_client_1_3_0
        }:
          buildMix ({
            name = "discord_alchemy";
            version = "0.6.1";
            src = fetchHex {
              pkg = "discord_alchemy";
              version = "0.6.1";
              sha256 =
                "c8dc8c04fbe0b2abd6bfe1ec5f8321c45ebdf4128f80e1fc15876da7f5871ab0";
            };
            beamDeps  = [
                          gen_stage_0_14_0
                          httpoison_0_13_0
                          kcl_1_1_0
                          poison_3_1_0
                          porcelain_2_0_3
                          websocket_client_1_3_0
                        ];

            meta = {
              longDescription = ''A Discord wrapper / framework for elixir.
                                This package intends to provide a solid
                                foundation for interacting with the Discord API,
                                as well as a very easy command and event hook
                                system.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cronokirby/alchemy";
            };
          } // packageOverrides)
      ) {};

    discord_alchemy = discord_alchemy_0_6_1;

    discord_elixir_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "discord_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "discord_elixir";
              version = "0.0.1";
              sha256 =
                "437b3bf9cc605cf34da28c1be0d57c87c24b1ae79f7aca17efad1f27c4e4dce0";
            };
            beamDeps  = [ httpotion_3_0_3 poison_2_2_0 ];

            meta = {
              description = ''An elixir library for creating discord bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Lugghawk/discord_elixir";
            };
          } // packageOverrides)
      ) {};

    discord_elixir = discord_elixir_0_0_1;

    diskusage_logger_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "diskusage_logger";
            version = "0.2.0";
            src = fetchHex {
              pkg = "diskusage_logger";
              version = "0.2.0";
              sha256 =
                "e3f2aed1b0fc4590931c089a6453a4c4eb4c945912aa97bcabcc0cff7851f34d";
            };

            meta = {
              description = ''A service that logs disk usage each minute'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbta/diskusage_logger";
            };
          } // packageOverrides)
      ) {};

    diskusage_logger = diskusage_logger_0_2_0;

    dismake_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dismake";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dismake";
              version = "1.0.0";
              sha256 =
                "7eeff4a362ed4b4250e4090caa6861ee7b27a524919f574b9f836067b63ac058";
            };

            meta = {
              description = ''Dismake is a \"compiler\" (as in Mix.compilers)
                            that just runs make. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/dismake";
            };
          } // packageOverrides)
      ) {};

    dismake = dismake_1_0_0;

    dispatch_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_pubsub_1_0_2
        }:
          buildMix ({
            name = "dispatch";
            version = "0.1.2";
            src = fetchHex {
              pkg = "dispatch";
              version = "0.1.2";
              sha256 =
                "9634d685a926fe2c6481341a23d8d7b2355023e7686ad916d3775d2839390750";
            };
            beamDeps  = [ phoenix_pubsub_1_0_2 ];

            meta = {
              longDescription = ''A distributed service registry built on top
                                of phoenix_pubsub. Requests are dispatched to
                                one or more services based on hashed keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/voicelayer/dispatch";
            };
          } // packageOverrides)
      ) {};

    dispatch = dispatch_0_1_2;

    dist_agent_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          batched_communication_0_1_3,
          croma_0_9_3,
          foretoken_0_1_1,
          raft_fleet_0_8_2,
          raft_kv_0_2_0,
          rafted_value_0_9_2
        }:
          buildMix ({
            name = "dist_agent";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dist_agent";
              version = "0.1.0";
              sha256 =
                "0264776f1455e7e7e53aa80ea68948517952341a5117fe2859bb9e70042f0530";
            };
            beamDeps  = [
                          batched_communication_0_1_3
                          croma_0_9_3
                          foretoken_0_1_1
                          raft_fleet_0_8_2
                          raft_kv_0_2_0
                          rafted_value_0_9_2
                        ];

            meta = {
              description = ''Elixir framework to run distributed,
                            fault-tolerant variant of Agent.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dist_agent = dist_agent_0_1_0;

    dist_neat_ex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, neat_ex_1_3_0 }:
          buildMix ({
            name = "dist_neat_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dist_neat_ex";
              version = "1.0.0";
              sha256 =
                "9f660c837baff92e3ebedbd01fead1f17794e1d0fbbb0de976606bb8ae710697";
            };
            beamDeps  = [ neat_ex_1_3_0 ];

            meta = {
              longDescription = ''This project allows for Distributed
                                Neuroevolution of Augmenting Topologies. Evolve
                                a population of artificial neural networks on a
                                distributed cluster of devices, using the NEAT
                                algorithm.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dist_neat_ex = dist_neat_ex_1_0_0;

    distance_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distance";
            version = "0.2.2";
            src = fetchHex {
              pkg = "distance";
              version = "0.2.2";
              sha256 =
                "e02a4b25ad5c617acaeda1b3d5b4efbe3e010eb0f95a6dedff99f8a9dfafacf1";
            };

            meta = {
              description = ''Various distance functions for geometric or
                            geographic calculations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/distance";
            };
          } // packageOverrides)
      ) {};

    distance = distance_0_2_2;

    distancex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "distancex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "distancex";
              version = "0.1.0";
              sha256 =
                "62d78de83026d809dc93c1ea92452cffc6e905f157e9dfa25cbc51b44e54d6f4";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''Elixir-wrapper for Google Directions API. Can
                                return the drive time and driving distance
                                between two places.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vysakh0/distancex";
            };
          } // packageOverrides)
      ) {};

    distancex = distancex_0_1_0;

    distancia_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distancia";
            version = "0.1.3";
            src = fetchHex {
              pkg = "distancia";
              version = "0.1.3";
              sha256 =
                "1a0096e863c025b19665422a0a43e07faa080fd8f1902d6104b44195a163b3d2";
            };

            meta = {
              longDescription = ''Distancia is a module which provides
                                functions that calculate distances between two
                                points. It allows to perform calulations in
                                various metrics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/walerian777/distancia";
            };
          } // packageOverrides)
      ) {};

    distancia = distancia_0_1_3;

    distillery_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distillery";
            version = "1.1.2";
            src = fetchHex {
              pkg = "distillery";
              version = "1.1.2";
              sha256 =
                "d74397267362f30a7d9a82095f7f6ffa83d19f11c1f88c0483b0bc1bcf175654";
            };

            meta = {
              description = ''Build releases of your Mix projects with ease!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/distillery";
            };
          } // packageOverrides)
      ) {};

    distillery_1_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distillery";
            version = "1.3.5";
            src = fetchHex {
              pkg = "distillery";
              version = "1.3.5";
              sha256 =
                "a12c9fc967fc4cbbeb7aa3fac48f36aeffd1c895df2170630b39a30d6a4ec9ad";
            };

            meta = {
              description = ''Build releases of your Mix projects with ease!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/distillery";
            };
          } // packageOverrides)
      ) {};

    distillery_1_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distillery";
            version = "1.5.3";
            src = fetchHex {
              pkg = "distillery";
              version = "1.5.3";
              sha256 =
                "4132429c9ca044982c99c1d2761840f48b19b9d517cc8457bf0c12092ae8382b";
            };

            meta = {
              description = ''Build releases of your Mix projects with ease!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/distillery";
            };
          } // packageOverrides)
      ) {};

    distillery = distillery_1_5_3;

    distributed_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distributed";
            version = "0.1.3";
            src = fetchHex {
              pkg = "distributed";
              version = "0.1.3";
              sha256 =
                "32da4ec31d902e516f83bf8e71f1f3e7037405ff9a7bd02842dcbafaaebc0f15";
            };

            meta = {
              longDescription = ''Distributed is a wrapper module that helps
                                developers to make distributed, scaled,
                                replicated and fault-tolerant (with takeover
                                ability) master-slave systems.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ertgl/distributed";
            };
          } // packageOverrides)
      ) {};

    distributed = distributed_0_1_3;

    distributed_attribute_server_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          attribute_server_0_1_0,
          stringify_0_1_1
        }:
          buildMix ({
            name = "distributed_attribute_server";
            version = "0.1.0";
            src = fetchHex {
              pkg = "distributed_attribute_server";
              version = "0.1.0";
              sha256 =
                "0ac43d806a18339383ec096e6d346db97c96a20418ddffba704572a3b6f9efa9";
            };
            beamDeps  = [ attribute_server_0_1_0 stringify_0_1_1 ];

            meta = {
              longDescription = ''(BETA) Distributed shared dictionary using
                                master/slave replication and slave to master
                                failover'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MishaConway/elixir-distributed-attribute-server";
            };
          } // packageOverrides)
      ) {};

    distributed_attribute_server =
      distributed_attribute_server_0_1_0;

    distributed_attribute_server_application_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          attribute_server_0_1_0,
          stringify_0_1_1
        }:
          buildMix ({
            name = "distributed_attribute_server_application";
            version = "0.1.0";
            src = fetchHex {
              pkg = "distributed_attribute_server_application";
              version = "0.1.0";
              sha256 =
                "ce497e689cdca8941c42f3bfd873015a8a9f5539bd1a4619d9c6868cba72d8b7";
            };
            beamDeps  = [ attribute_server_0_1_0 stringify_0_1_1 ];

            meta = {
              longDescription = ''(BETA) Distributed shared dictionary using
                                master/slave replication and slave to master
                                failover'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MishaConway/elixir-distributed-attribute-server";
            };
          } // packageOverrides)
      ) {};

    distributed_attribute_server_application =
      distributed_attribute_server_application_0_1_0;

    distributed_test_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distributed_test";
            version = "0.2.4";
            src = fetchHex {
              pkg = "distributed_test";
              version = "0.2.4";
              sha256 =
                "771bc28fcfdad847f3988297183840d2b3a4ab2cb3a729eaf12cb7b882d48d50";
            };

            meta = {
              description = ''Run tests in a distributed environment!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/distributed_test";
            };
          } // packageOverrides)
      ) {};

    distributed_test = distributed_test_0_2_4;

    diver_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "diver";
            version = "0.2.0";
            src = fetchHex {
              pkg = "diver";
              version = "0.2.0";
              sha256 =
                "07b26943e25b5654629f5579675ab50d1ef132fe6ded956828200459c4a3e002";
            };

            meta = {
              longDescription = ''A HBase driver for Erlang/Elixir using
                                Jinterface and the Asynchbase Java client to
                                query the database.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/novabyte/diver";
            };
          } // packageOverrides)
      ) {};

    diver = diver_0_2_0;

    dj_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsx_2_9_0 }:
          buildRebar3 ({
            name = "dj";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dj";
              version = "0.1.0";
              sha256 =
                "1b772a7b7c0a31715e2ddd699ff99fc0571ede0c42e3976cd00acfdeedde7bbd";
            };

            beamDeps  = [ jsx_2_9_0 ];

            meta = {
              description = ''Library for decoding JSON'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/truqu/dj";
            };
          } // packageOverrides)
      ) {};

    dj = dj_0_1_0;

    dlist_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dlist";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dlist";
              version = "0.0.1";
              sha256 =
                "51c9d4a9e02c9a8892450876939d1e18b7f9ae78b237a683f0efad47d46e5f9a";
            };

            meta = {
              description = ''Deque implementations '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/dlist.git";
            };
          } // packageOverrides)
      ) {};

    dlist = dlist_0_0_1;

    dns_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_13 }:
          buildMix ({
            name = "dns";
            version = "0.0.4";
            src = fetchHex {
              pkg = "dns";
              version = "0.0.4";
              sha256 =
                "c5278e4edc364b76f0bb551b4cc1b9bfe1230e7e542a7359ce5137bff2861eb9";
            };
            beamDeps  = [ socket_0_3_13 ];

            meta = {
              longDescription = ''DNS library for Elixir using `inet_dns`
                                module. Note: The `inet_dns` module is
                                considered internal to Erlang and subject to
                                change. If this happened this library will be
                                updated.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tungd/elixir-dns";
            };
          } // packageOverrides)
      ) {};

    dns_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_13 }:
          buildMix ({
            name = "dns";
            version = "2.1.0";
            src = fetchHex {
              pkg = "dns";
              version = "2.1.0";
              sha256 =
                "ffaeacaca0dd081dade657b9bf8f0902dbf3a025a096ef7c6e0130dce2786a86";
            };
            beamDeps  = [ socket_0_3_13 ];

            meta = {
              longDescription = ''DNS library for Elixir using `inet_dns`
                                module. Note: The `inet_dns` module is
                                considered internal to Erlang and subject to
                                change. If this happened this library will be
                                updated.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tungd/elixir-dns";
            };
          } // packageOverrides)
      ) {};

    dns = dns_2_1_0;

    dnsimple_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "dnsimple";
            version = "1.2.0";
            src = fetchHex {
              pkg = "dnsimple";
              version = "1.2.0";
              sha256 =
                "5ada8e70cb739d6e8422166774972144a464e16e634b9c3e8370330082e30340";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for the DNSimple API v2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dnsimple/dnsimple-elixir";
            };
          } // packageOverrides)
      ) {};

    dnsimple = dnsimple_1_2_0;

    doc_first_formatter_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "doc_first_formatter";
            version = "0.0.2";
            src = fetchHex {
              pkg = "doc_first_formatter";
              version = "0.0.2";
              sha256 =
                "88500d55349571173f88d0f691e1ac7908b9663bfc06f9f0862e60ea8378313c";
            };

            meta = {
              longDescription = ''An ExUnit formatter that puts a list of tests
                                first, distinguishes pending from failed tests,
                                and saves detailed error information for once
                                the test suite is finished.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bkerley/doc_first_formatter";
            };
          } // packageOverrides)
      ) {};

    doc_first_formatter = doc_first_formatter_0_0_2;

    docker_distiller_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "docker_distiller";
            version = "2.0.0";
            src = fetchHex {
              pkg = "docker_distiller";
              version = "2.0.0";
              sha256 =
                "e5368d9d84f74ee8e7a1fd9412cfcac77740d203578f75a96ecc14750cad5df6";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              description = ''An opinionated container release builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PagerDuty/docker_distiller";
            };
          } // packageOverrides)
      ) {};

    docker_distiller = docker_distiller_2_0_0;

    dockerator_1_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "dockerator";
            version = "1.3.3";
            src = fetchHex {
              pkg = "dockerator";
              version = "1.3.3";
              sha256 =
                "f586cb8e37506ba6977b44cacb4559cd3c688497f096e302ca62ba42dd90e178";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              description = ''Tool for turning Elixir apps into Docker images
                            without a pain.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dockerator/dockerator-elixir";
            };
          } // packageOverrides)
      ) {};

    dockerator = dockerator_1_3_3;

    dockerex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_12_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "dockerex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "dockerex";
              version = "0.1.1";
              sha256 =
                "6b96a8a51910e27fdc1f5dbb075af65489b95a18fd47e533a749a739ac2da515";
            };
            beamDeps  = [ httpoison_0_12_0 poison_2_2_0 ];

            meta = {
              description = ''A lightweight Docker api client that supports SSL
                            connection.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hisea/dockerex";
            };
          } // packageOverrides)
      ) {};

    dockerex = dockerex_0_1_1;

    documentr_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_3_0_3 }:
          buildMix ({
            name = "documentr";
            version = "0.1.0";
            src = fetchHex {
              pkg = "documentr";
              version = "0.1.0";
              sha256 =
                "f5144217548e492cbfde9d8b7cf82a644dea4befd9e0800cf2f4915cfdd99583";
            };
            beamDeps  = [ httpotion_3_0_3 ];

            meta = {
              description = ''This is a logger plugin that will log your API
                            for automating documentation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/printex";
            };
          } // packageOverrides)
      ) {};

    documentr = documentr_0_1_0;

    docxelixir_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "docxelixir";
            version = "1.0.1";
            src = fetchHex {
              pkg = "docxelixir";
              version = "1.0.1";
              sha256 =
                "481a219e468766b8608fc10499e7d5bac55676bb722a5db9bcce33747428cdde";
            };

            meta = {
              description = ''reads docx document files (paragraphs, tables)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewaguiar/docxelixir";
            };
          } // packageOverrides)
      ) {};

    docxelixir = docxelixir_1_0_1;

    doex_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fn_expr_0_3_0,
          httpoison_1_2_0,
          jason_1_1_1,
          version_tasks_0_11_1
        }:
          buildMix ({
            name = "doex";
            version = "0.8.0";
            src = fetchHex {
              pkg = "doex";
              version = "0.8.0";
              sha256 =
                "66bea44da1a6486b03104a16106f725951393a4f24a1f8389d1f44b2c3e18d77";
            };
            beamDeps  = [
                          fn_expr_0_3_0
                          httpoison_1_2_0
                          jason_1_1_1
                          version_tasks_0_11_1
                        ];

            meta = {
              description = ''A Digital Ocean API v2 client for Elixir (yes,
                            another one)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/capbash/doex";
            };
          } // packageOverrides)
      ) {};

    doex = doex_0_8_0;

    doggie_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "doggie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "doggie";
              version = "0.1.0";
              sha256 =
                "9206ac863606bd773bf4e15b2d7c5be90613f3fb571fa8f8fc481d707762f8b7";
            };

            meta = {
              longDescription = ''Doggie is a tiny library that provides the
                                most commonly used regular expression patterns
                                for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lk-geimfari/doggie";
            };
          } // packageOverrides)
      ) {};

    doggie = doggie_0_1_0;

    dogma_0_1_16 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "dogma";
            version = "0.1.16";
            src = fetchHex {
              pkg = "dogma";
              version = "0.1.16";
              sha256 =
                "8533cb896ea527959923f9c3f08e7083e18ff681388ad7c9a599dd5d28e9085f";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A code style linter for Elixir, powered by
                            shame.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/dogma";
            };
          } // packageOverrides)
      ) {};

    dogma = dogma_0_1_16;

    dogstat_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dogstat";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dogstat";
              version = "0.1.0";
              sha256 =
                "fc9c71283add85753e6f8e168c359d1b8055228a14ac6525ed986be5e92cf80c";
            };

            meta = {
              description = ''Runtime-configurable Elixir client for StatsD
                            servers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/dogstat";
            };
          } // packageOverrides)
      ) {};

    dogstat = dogstat_0_1_0;

    dogstatsc_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dogstatsc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dogstatsc";
              version = "0.1.0";
              sha256 =
                "b4315c67779fd5b075f58009f8b5353a83fa302ef2c05317faec7af7a6241fdd";
            };

            meta = {
              description = ''A DogStatsD client OTP application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tkyshm/dogstatsc";
            };
          } // packageOverrides)
      ) {};

    dogstatsc = dogstatsc_0_1_0;

    dogstatsd_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dogstatsd";
            version = "0.0.4";
            src = fetchHex {
              pkg = "dogstatsd";
              version = "0.0.4";
              sha256 =
                "fd179c7fe3cff2f9332c7b4166a13bd6ffe5397d903dc4a58723c04a4053dc8b";
            };

            meta = {
              description = ''A client for DogStatsd, an extension of the
                            StatsD metric server for Datadog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamkittelson/dogstatsd-elixir";
            };
          } // packageOverrides)
      ) {};

    dogstatsd = dogstatsd_0_0_4;

    dolphin_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_0_0
        }:
          buildMix ({
            name = "dolphin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dolphin";
              version = "0.1.0";
              sha256 =
                "49a59224e92e08eca6d0f92606ad1d840bed9449897d1a9fe614a3330849068e";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_0_0 ];

            meta = {
              description = ''Dolphin is an unofficial library for the Flippa
                            REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jhartwell/Dolphin";
            };
          } // packageOverrides)
      ) {};

    dolphin = dolphin_0_1_0;

    domain_parts_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "domain_parts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "domain_parts";
              version = "0.1.0";
              sha256 =
                "392600ec140a508a4db00bafa27e9d7ae068aacaef4d7b1750b58e26e1f2bd3d";
            };

            meta = {
              description = ''A module for extracting the parts of a domain
                            (subdomain, domain, and tld).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/domain_parts";
            };
          } // packageOverrides)
      ) {};

    domain_parts = domain_parts_0_1_0;

    domainatrex_2_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "domainatrex";
            version = "2.1.2";
            src = fetchHex {
              pkg = "domainatrex";
              version = "2.1.2";
              sha256 =
                "0602db13babd44ce9cad9f792d43d4c57d4f7c623f5b0608793889d2d090772c";
            };

            meta = {
              description = ''Domain / TLD parsing library for Elixir, using
                            the Public Suffix List.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/domainatrex";
            };
          } // packageOverrides)
      ) {};

    domainatrex = domainatrex_2_1_2;

    dossh_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0,
          table_rex_2_0_0
        }:
          buildMix ({
            name = "dossh";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dossh";
              version = "0.1.0";
              sha256 =
                "ea710ce0553734e931c40cff9376a0bf5619857849f0aefb710e2b9f69c854c4";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 table_rex_2_0_0 ];

            meta = {
              longDescription = ''Simple command line utility to access
                                information about the user`s digital ocean
                                droplets'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dossh = dossh_0_1_0;

    dot_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dot";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dot";
              version = "0.0.3";
              sha256 =
                "3411bf1f70bb8ea0caa64515054a4a161b711667a5cdb0e7c14e766ce04b06ae";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    dot = dot_0_0_3;

    dot_notes_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dot_notes";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dot_notes";
              version = "1.0.0";
              sha256 =
                "0689a006ca36716eadac9f8f83699aff6d56520a15403610d08e2f397fd60996";
            };

            meta = {
              description = ''Simple dot/bracket notation parsing/conversion
                            for Maps/Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/dot-notes-elixir";
            };
          } // packageOverrides)
      ) {};

    dot_notes = dot_notes_1_0_0;

    doteki_1_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bucs_1_0_16 }:
          buildMix ({
            name = "doteki";
            version = "1.0.6";
            src = fetchHex {
              pkg = "doteki";
              version = "1.0.6";
              sha256 =
                "a72ce3f8eb85143bb9bcda410745702436eacb87f21e009381f63a80be872c6f";
            };
            beamDeps  = [ bucs_1_0_16 ];

            meta = {
              description = ''Dynamic configuration in your erlang
                            application'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/doteki";
            };
          } // packageOverrides)
      ) {};

    doteki = doteki_1_0_6;

    dotenv_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dotenv";
            version = "3.0.0";
            src = fetchHex {
              pkg = "dotenv";
              version = "3.0.0";
              sha256 =
                "f8a7d800b6b419a8d8a8bc5b5cd820a181c2b713aab7621794febe934f7bd84e";
            };

            meta = {
              description = ''A port of dotenv to Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avdi/dotenv_elixir";
            };
          } // packageOverrides)
      ) {};

    dotenv = dotenv_3_0_0;

    dotex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, temp_0_4_5 }:
          buildMix ({
            name = "dotex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dotex";
              version = "0.1.0";
              sha256 =
                "3212f5f920d48cc2acbac66007e98e7aaa6ed3195405074e034345d59d222bda";
            };
            beamDeps  = [ temp_0_4_5 ];

            meta = {
              description = ''Generate Graphviz graphs from Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aussiegeek/dotex";
            };
          } // packageOverrides)
      ) {};

    dotex = dotex_0_1_0;

    double_0_6_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "double";
            version = "0.6.5";
            src = fetchHex {
              pkg = "double";
              version = "0.6.5";
              sha256 =
                "b4e4b78cb90d9602016b84920956704f64094ac1a151856963ede235b308e233";
            };

            meta = {
              longDescription = ''Double is a simple library to help build
                                injectable dependencies for your tests. It does
                                NOT override behavior of existing modules or
                                functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sonerdy/double";
            };
          } // packageOverrides)
      ) {};

    double = double_0_6_5;

    dovetail_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dovetail";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dovetail";
              version = "0.0.3";
              sha256 =
                "01b6c3085ebb9cb7d43115c7a2d9780a840017e521daeb7d0a2233f61f8b0306";
            };

            meta = {
              description = ''Dovetail provides a harness for running test
                            dovecot servers.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/thusfresh/dovetail";
            };
          } // packageOverrides)
      ) {};

    dovetail = dovetail_0_0_3;

    download_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_2_0 }:
          buildMix ({
            name = "download";
            version = "0.0.4";
            src = fetchHex {
              pkg = "download";
              version = "0.0.4";
              sha256 =
                "c5e8ad1ab3ed03f32783106a5728978d2fc90d736986e6d53724b22e6d0ee779";
            };
            beamDeps  = [ httpoison_1_2_0 ];

            meta = {
              description = ''Downloads remote file and stores it in the
                            filesystem'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/asiniy/download";
            };
          } // packageOverrides)
      ) {};

    download = download_0_0_4;

    downstream_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_0_0 }:
          buildMix ({
            name = "downstream";
            version = "0.1.0";
            src = fetchHex {
              pkg = "downstream";
              version = "0.1.0";
              sha256 =
                "b82a6717fc764f00fd491171f218d1c77d73965b5d750744f87bcdd2ff63b258";
            };
            beamDeps  = [ httpoison_1_0_0 ];

            meta = {
              description = ''An Elixir Client for Streaming Downloads'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpiercy827/downstream";
            };
          } // packageOverrides)
      ) {};

    downstream = downstream_0_1_0;

    dp_decoder_0_2_17 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dp_decoder";
            version = "0.2.17";
            src = fetchHex {
              pkg = "dp_decoder";
              version = "0.2.17";
              sha256 =
                "0f33e30c33f662084c28b0819d5f5083587adf2879d2d8909b3889c805d18976";
            };

            meta = {
              description = ''Collection of decoders for different metric
                            protocols'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dp_decoder";
            };
          } // packageOverrides)
      ) {};

    dp_decoder = dp_decoder_0_2_17;

    dproto_0_5_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsxd_0_2_4,
          mmath_0_2_25,
          snappiest_1_2_0
        }:
          buildRebar3 ({
            name = "dproto";
            version = "0.5.6";
            src = fetchHex {
              pkg = "dproto";
              version = "0.5.6";
              sha256 =
                "9d7815bc85e5df10522fd7f9cdc874de9cf0854d97858e3e3729c2e975274c60";
            };

            beamDeps  = [ jsxd_0_2_4 mmath_0_2_25 snappiest_1_2_0 ];

            meta = {
              description = ''Protocols for dalmatinerdb'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dproto";
            };
          } // packageOverrides)
      ) {};

    dproto = dproto_0_5_6;

    dqe_idx_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dqe_idx";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dqe_idx";
              version = "0.2.1";
              sha256 =
                "8c9cab439e32ae8c208c4aee879c12862258661910ef0c365dfdc2b6d4db5983";
            };

            meta = {
              description = ''Dalmatiner QE indexing'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx_0_4_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dqe_idx";
            version = "0.4.4";
            src = fetchHex {
              pkg = "dqe_idx";
              version = "0.4.4";
              sha256 =
                "591be35f0d055f95f867a4c1713c8524d158ab9bc4d5dd2323c1121c6565b56d";
            };

            meta = {
              description = ''Dalmatiner QE indexing'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx = dqe_idx_0_4_4;

    dqe_idx_ddb_0_5_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_connection_0_4_4,
          dproto_0_5_6,
          dqe_idx_0_4_4
        }:
          buildRebar3 ({
            name = "dqe_idx_ddb";
            version = "0.5.2";
            src = fetchHex {
              pkg = "dqe_idx_ddb";
              version = "0.5.2";
              sha256 =
                "4555d146076e680f07d48ffe3f65f510bbb52ea968c17eed0b5dfc3538f5b0fa";
            };

            beamDeps  = [ ddb_connection_0_4_4 dproto_0_5_6 dqe_idx_0_4_4 ];

            meta = {
              description = ''DDB driven indexer for Dalmatiner Query engine'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx_ddb = dqe_idx_ddb_0_5_2;

    draconic_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "draconic";
            version = "0.1.1";
            src = fetchHex {
              pkg = "draconic";
              version = "0.1.1";
              sha256 =
                "74b22d85f868ce33a21317fc278cf0fbe08aca40a54511bf274109d9b46e68e9";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Draconic provides a DSL for easily building
                            complex command line interfaces.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbuck/draconic";
            };
          } // packageOverrides)
      ) {};

    draconic = draconic_0_1_1;

    drifter_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "drifter";
            version = "0.0.0";
            src = fetchHex {
              pkg = "drifter";
              version = "0.0.0";
              sha256 =
                "f5812cabae4043eca1b983bbb55713ddf2426bcd513f6d92fc8281df4054cf6b";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''An OS X native VM builder thingy (work in
                            progress)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/drifter";
            };
          } // packageOverrides)
      ) {};

    drifter = drifter_0_0_0;

    drivewealth_api_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "drivewealth_api";
            version = "0.4.0";
            src = fetchHex {
              pkg = "drivewealth_api";
              version = "0.4.0";
              sha256 =
                "c8b7ae9dc539ce4173eb3a30f7e606aa48a75ac72da66659f4174560b537f05d";
            };
            beamDeps  = [ hackney_1_13_0 poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''DriveWealth API in Elixir
                            (http://developer.drivewealth.com)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbenatti/drivewealth_api";
            };
          } // packageOverrides)
      ) {};

    drivewealth_api = drivewealth_api_0_4_0;

    dslhtml_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dslhtml";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dslhtml";
              version = "0.1.0";
              sha256 =
                "9959ff033ac89389c226ea8c36be07c16cf5d90290dd0c1a002b9c17183cde75";
            };

            meta = {
              description = ''DSL for HTML in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kenju/elixir_dsl_html";
            };
          } // packageOverrides)
      ) {};

    dslhtml = dslhtml_0_1_0;

    dublin_bus_api_0_1_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "dublin_bus_api";
            version = "0.1.11";
            src = fetchHex {
              pkg = "dublin_bus_api";
              version = "0.1.11";
              sha256 =
                "27e875fb3f5632f4013759e3dd06d18e9c4da09fcb3f37dcef383922e5008f2f";
            };
            beamDeps  = [ floki_0_20_3 httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Access to the Real Time Passenger Information
                            (RTPI) for Dublin Bus services.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlo-colombo/dublin-bus-api";
            };
          } // packageOverrides)
      ) {};

    dublin_bus_api = dublin_bus_api_0_1_11;

    dumballah_2_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dumballah";
            version = "2.3.0";
            src = fetchHex {
              pkg = "dumballah";
              version = "2.3.0";
              sha256 =
                "abbb2dcdbf1f4006b35d58a8748ef955aa54b15721fadbd6005114cc91966d26";
            };

            meta = {
              description = ''Elixir library to manipulate Unix timestamps,
                            named after a voodoo Loa.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/ZuraGuerra/dumballah";
            };
          } // packageOverrides)
      ) {};

    dumballah = dumballah_2_3_0;

    duplex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dir_walker_0_0_7 }:
          buildMix ({
            name = "duplex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "duplex";
              version = "0.1.1";
              sha256 =
                "997f8af7f720a18a874fcf4e12d2a9f0995b5198c25872b6a970629c517a2f18";
            };
            beamDeps  = [ dir_walker_0_0_7 ];

            meta = {
              longDescription = ''Duplex allows you to search for similar code
                                blocks inside your project. ## Usage ```elixir
                                iex -S mix Duplex.show_similar([\"lib\",
                                \"config\", \"web\"]) ```'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    duplex = duplex_0_1_1;

    duplicate_code_finder_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dir_walker_0_0_7 }:
          buildMix ({
            name = "duplicate_code_finder";
            version = "0.1.1";
            src = fetchHex {
              pkg = "duplicate_code_finder";
              version = "0.1.1";
              sha256 =
                "83d109dd229e0c165a554dfbf4f805026565bd9e312f544210b41870cf397820";
            };
            beamDeps  = [ dir_walker_0_0_7 ];

            meta = {
              longDescription = ''Duplicate Code Finder allows you to search
                                for similar code blocks inside your project. ##
                                Usage ```elixir iex -S mix
                                DuplicateCodeFinder.show_similar([\"lib\",
                                \"config\", \"web\"]) ```'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    duplicate_code_finder = duplicate_code_finder_0_1_1;

    durable_workflow_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "durable_workflow";
            version = "0.1.2";
            src = fetchHex {
              pkg = "durable_workflow";
              version = "0.1.2";
              sha256 =
                "6ddd504238e917b40d5742c04bd31593b7d25ec8600d0f457e9116c141c05153";
            };

            meta = {
              longDescription = ''A library for creating finite-state machines
                                with automatic file-based persistence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/durable_workflow";
            };
          } // packageOverrides)
      ) {};

    durable_workflow = durable_workflow_0_1_2;

    durango_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_util_0_1_0,
          httpoison_0_13_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "durango";
            version = "0.1.3";
            src = fetchHex {
              pkg = "durango";
              version = "0.1.3";
              sha256 =
                "d9efca3ac513d5f033ec8f6ed68240825324404c6a33db9d996521e1098ea42d";
            };
            beamDeps  = [ gen_util_0_1_0 httpoison_0_13_0 jason_1_1_1 ];

            meta = {
              description = ''A database wrapper for ArangoDB'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/durango";
            };
          } // packageOverrides)
      ) {};

    durango = durango_0_1_3;

    durga_transport_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "durga_transport";
            version = "1.0.1";
            src = fetchHex {
              pkg = "durga_transport";
              version = "1.0.1";
              sha256 =
                "42db857eba0e78c4eb15823b5137e8ccad13711cc2c873b6f1b469c4c0771009";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    durga_transport = durga_transport_1_0_1;

    dwolla_elixir_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0,
          recase_0_3_0
        }:
          buildMix ({
            name = "dwolla_elixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dwolla_elixir";
              version = "1.0.0";
              sha256 =
                "b314563ea7038b7bbe88df30ff664fe3e774d48b62997e69e670c51133ccbe61";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 recase_0_3_0 ];

            meta = {
              description = ''An Elixir Library for Dwolla'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wfgilman/dwolla-elixir";
            };
          } // packageOverrides)
      ) {};

    dwolla_elixir = dwolla_elixir_1_0_0;

    dye_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dye";
            version = "0.4.1";
            src = fetchHex {
              pkg = "dye";
              version = "0.4.1";
              sha256 =
                "d8bccef998e1b5800c7a433ea027df83103ae98c0be5a19d03216b320986bf74";
            };

            meta = {
              description = ''Dyeing your terminal!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kabie/dye";
            };
          } // packageOverrides)
      ) {};

    dye = dye_0_4_1;

    dynamic_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dynamic";
            version = "0.1.1";
            src = fetchHex {
              pkg = "dynamic";
              version = "0.1.1";
              sha256 =
                "650d67b07050d782e5fe38e5faad961fea813ba3e52144ffae1ed7e727c1bee6";
            };

            meta = {
              description = ''Easily manipulate complex maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ironbay/dynamic";
            };
          } // packageOverrides)
      ) {};

    dynamic = dynamic_0_1_1;

    dynamic_compile_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dynamic_compile";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dynamic_compile";
              version = "1.0.0";
              sha256 =
                "eb73d8e9a6334914f79c15ee8214acad9659c42222d49beda3e8b6f6789a980a";
            };

            meta = {
              description = ''compile and load erlang modules from string
                            input'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/dynamic_compile";
            };
          } // packageOverrides)
      ) {};

    dynamic_compile = dynamic_compile_1_0_0;

    dynamic_interfaces_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dynamic_interfaces";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dynamic_interfaces";
              version = "0.2.1";
              sha256 =
                "0e6c107a9819214193f5469bcca80598b86603b3191b86a5d2accbc86a6de5b1";
            };

            meta = {
              description = ''Macro for swapping out different implementations
                            at runtime.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skylerparr/dynamic_interfaces";
            };
          } // packageOverrides)
      ) {};

    dynamic_interfaces = dynamic_interfaces_0_2_1;

    e_q_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "e_q";
            version = "1.0.0";
            src = fetchHex {
              pkg = "e_q";
              version = "1.0.0";
              sha256 =
                "23dbb293640ba24a38c6b56bfa81a569b8a6654b85e0ccbedf89c740e2b91937";
            };

            meta = {
              longDescription = ''An Elixir wrapper around the Erlang optimized
                                `queue` that supports the FIFO, first-in
                                first-out, pattern. This is useful is when you
                                can`t predict when an item needs to be taken or
                                added to the queue. Use this instead of using
                                `++` or double reversing lists to add items to
                                the \"back\" of a queue.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bakkdoor/e_q";
            };
          } // packageOverrides)
      ) {};

    e_q = e_q_1_0_0;

    e_queue_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "e_queue";
            version = "1.0.1";
            src = fetchHex {
              pkg = "e_queue";
              version = "1.0.1";
              sha256 =
                "aff37843191c1229ec49d0d067b18d5e0871a28fe049a4a82c7884e66320b7e8";
            };

            meta = {
              longDescription = ''An Elixir wrapper around the Erlang optimized
                                `queue` that supports the FIFO, first-in
                                first-out, pattern. This is useful is when you
                                can`t predict when an item needs to be taken or
                                added to the queue. Use this instead of using
                                `++` or double reversing lists to add items to
                                the \"back\" of a queue.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfalk/e_queue";
            };
          } // packageOverrides)
      ) {};

    e_queue = e_queue_1_0_1;

    earmark_0_1_19 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "0.1.19";
            src = fetchHex {
              pkg = "earmark";
              version = "0.1.19";
              sha256 =
                "db85f989ba3030d40d3a901d7eebbf926ee07355bf6113d730b8aaf9404a6bd7";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "0.2.1";
            src = fetchHex {
              pkg = "earmark";
              version = "0.2.1";
              sha256 =
                "c86afb8d22a5aa8315afd4257c7512011c0c9a48b0fea43af7612836b958098b";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "1.1.1";
            src = fetchHex {
              pkg = "earmark";
              version = "1.1.1";
              sha256 =
                "d446a8ffea9968237fcada883303ac6e04a00a1dc41039061645eea9e7af65a0";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark_1_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "1.2.5";
            src = fetchHex {
              pkg = "earmark";
              version = "1.2.5";
              sha256 =
                "c57508ddad47dfb8038ca6de1e616e66e9b87313220ac5d9817bc4a4dc2257b9";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark = earmark_1_2_5;

    ease_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ease";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ease";
              version = "0.1.0";
              sha256 =
                "94e954dd0dad89b363d6289f8cc4a95cab1c0490cc6f2d4388e7d5afc637f42f";
            };

            meta = {
              description = ''Simple implementation of standard animation
                            easing functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/ease.ex";
            };
          } // packageOverrides)
      ) {};

    ease = ease_0_1_0;

    eastar_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eastar";
            version = "0.4.2";
            src = fetchHex {
              pkg = "eastar";
              version = "0.4.2";
              sha256 =
                "e276abdda27ae0727fb19022ef537dce3f66bb8a3f6c395b3b22021beaed2441";
            };

            meta = {
              longDescription = ''Eastar is a pure-Elixir implementation of A*
                                graph pathfinding algorithm. All graph
                                environment, like nodes connectivity, distance &
                                H-metric are abstracted away - you provide them
                                as functions.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://github.com/herenowcoder/eastar";
            };
          } // packageOverrides)
      ) {};

    eastar = eastar_0_4_2;

    easy_post_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "easy_post";
            version = "0.1.1";
            src = fetchHex {
              pkg = "easy_post";
              version = "0.1.1";
              sha256 =
                "9439da92eb4451e4be61067a50bd3c8b6b67e9a0b0889134c5754b9264fec059";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An API client for EasyPost'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/system76/easy_post";
            };
          } // packageOverrides)
      ) {};

    easy_post = easy_post_0_1_1;

    easy_server_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "easy_server";
            version = "0.0.1";
            src = fetchHex {
              pkg = "easy_server";
              version = "0.0.1";
              sha256 =
                "af9faac0c7c440cf04bbb5d1f8aea1fc00b0c60da384c8103fafdaf0df00a0bb";
            };

            meta = {
              description = ''Easier GenServer for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/termoose/EasyServer";
            };
          } // packageOverrides)
      ) {};

    easy_server = easy_server_0_0_1;

    easy_ssl_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "easy_ssl";
            version = "1.0.3";
            src = fetchHex {
              pkg = "easy_ssl";
              version = "1.0.3";
              sha256 =
                "13eb48c8d3cb4f6c9178dfc7097c6bb04522856c90bb08c39c610a8457e77b9b";
            };

            meta = {
              description = ''SSL/X509 parsing for humans.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CaliDog/EasySSL";
            };
          } // packageOverrides)
      ) {};

    easy_ssl = easy_ssl_1_0_3;

    easypost_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "easypost";
            version = "0.0.1";
            src = fetchHex {
              pkg = "easypost";
              version = "0.0.1";
              sha256 =
                "8339fcfb60a1d4833b99aa611d194bf1ae94f22509dc81cf90d07ee2db0e074e";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Elixir Easypost Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dania02525/easypost";
            };
          } // packageOverrides)
      ) {};

    easypost = easypost_0_0_1;

    ebayka_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0,
          sweet_xml_0_6_5,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "ebayka";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ebayka";
              version = "0.2.2";
              sha256 =
                "2efe04426c66b7f82471957fddccb9e21e941167aa8f74ed56ce5e7e447ff906";
            };
            beamDeps  = [
                          httpoison_1_2_0
                          poison_3_1_0
                          sweet_xml_0_6_5
                          xml_builder_2_1_0
                        ];

            meta = {
              description = ''A small library to help using the eBay Trading
                            API with Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ssnickolay/ebayka";
            };
          } // packageOverrides)
      ) {};

    ebayka = ebayka_0_2_2;

    ebitmap_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_2 }:
          buildRebar3 ({
            name = "ebitmap";
            version = "0.1.7";
            src = fetchHex {
              pkg = "ebitmap";
              version = "0.1.7";
              sha256 =
                "c21c1d7235f13b99a5b7a8aa98b13d4398591775a04697ec12c1e05eb83d340c";
            };

            beamDeps  = [ cf_0_2_2 ];

            meta = {
              description = ''An erlang library for working with bitmaps'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ebitmap_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_2 }:
          buildRebar3 ({
            name = "ebitmap";
            version = "0.2.3";
            src = fetchHex {
              pkg = "ebitmap";
              version = "0.2.3";
              sha256 =
                "b37e991b30cade8c3a55dbc1fa994af10bc016c2a43e1183228138fd1778ef2a";
            };

            beamDeps  = [ cf_0_2_2 ];

            meta = {
              description = ''An erlang library for working with bitmaps'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ebitmap = ebitmap_0_2_3;

    ebs_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.0.3";
            src = fetchHex {
              pkg = "ebs";
              version = "1.0.3";
              sha256 =
                "8e3e2d779c8a684f054f94c1a4a284db1568013d4f2cfc39df0931ad48286dda";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.1";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.1";
              sha256 =
                "a2c59b12699a4a643c4461f6ad8d302b7014e9ae823dd6843eecb35e95f3bc3c";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.2";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.2";
              sha256 =
                "3895a1d3e72abfbb7f812ce9faed5c9a091444bf63ed996e15214c48ddc0c280";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.3";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.3";
              sha256 =
                "5a508509ae5ea89a0e1e9487bb783b2b2437037da2985bb80ce0b218c6b87f90";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.4";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.4";
              sha256 =
                "d9d6311d043d9f538528bbd53bf228b146741c689285bf6198990daa42c29037";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.5";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.5";
              sha256 =
                "df0b845d6c901940e6cdcc3928d662841ad032916685ee20121755d6da2dccd8";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.2.0";
            src = fetchHex {
              pkg = "ebs";
              version = "1.2.0";
              sha256 =
                "e4052c05aff1b6d263d99336e7310a92b0c1999ed692b80022f4d0d78cc6b091";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.4.1";
            src = fetchHex {
              pkg = "ebs";
              version = "1.4.1";
              sha256 =
                "857dcf3c81387e785262c48324d09c205b472a67f4c8ab72fe9b7909ec50e101";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs = ebs_1_4_1;

    ec2_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_3 }:
          buildMix ({
            name = "ec2";
            version = "0.9.1";
            src = fetchHex {
              pkg = "ec2";
              version = "0.9.1";
              sha256 =
                "ae857fe633bca078fd1ee54232dd3bc74566ff46b93aa53e38d74c546c3d9b6f";
            };
            beamDeps  = [ jsx_2_8_3 ];

            meta = {
              description = ''helper library for working with aws ec2
                            metadata'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/talentdeficit/ec2";
            };
          } // packageOverrides)
      ) {};

    ec2 = ec2_0_9_1;

    ec_cart_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ec_cart";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ec_cart";
              version = "0.1.5";
              sha256 =
                "376d7a59c0afd94a916ddd9c009c26e88a0c37dd044dc0d81ba3388ea7e4ac9e";
            };

            meta = {
              description = ''E-commerce cart for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ramortegui/ec_cart";
            };
          } // packageOverrides)
      ) {};

    ec_cart = ec_cart_0_1_5;

    ecat_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_0_3,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ecat";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ecat";
              version = "1.0.0";
              sha256 =
                "f8716b28943d0f1e052c3f7b6bf01acf98d70e5bcc74fe3df867f1ce38bfc762";
            };

            beamDeps  = [ ebs_1_0_3 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of cat(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-cat";
            };
          } // packageOverrides)
      ) {};

    ecat = ecat_1_0_0;

    echo_bot_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_5_0,
          poison_2_2_0,
          telegram_0_0_3
        }:
          buildMix ({
            name = "echo_bot";
            version = "0.0.2";
            src = fetchHex {
              pkg = "echo_bot";
              version = "0.0.2";
              sha256 =
                "f353984ab5ea36b423b2a18d788d5eeeb6ae45aca254129b99c5bbab9865b38c";
            };
            beamDeps  = [ gproc_0_5_0 poison_2_2_0 telegram_0_0_3 ];

            meta = {
              description = ''A demo telegram bot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/echo_bot";
            };
          } // packageOverrides)
      ) {};

    echo_bot = echo_bot_0_0_2;

    ecimd2_0_0_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ecimd2";
            version = "0.0.8";
            src = fetchHex {
              pkg = "ecimd2";
              version = "0.0.8";
              sha256 =
                "ed45e1eb5bd0747d44bb0167046d70f12c6c3b699ff29a9ac248b8655fd0ed6b";
            };

            meta = {
              description = ''CIMD2 client (SME) for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/VoyagerInnovations/esmpp";
            };
          } // packageOverrides)
      ) {};

    ecimd2 = ecimd2_0_0_8;

    eco_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eco";
            version = "0.0.1";
            src = fetchHex {
              pkg = "eco";
              version = "0.0.1";
              sha256 =
                "424ac1d38ca56a2a9efc4b90d4533950ac901d1c6b5702a39d7fe984b4b0c14d";
            };

            meta = {
              description = ''Ecto Wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gitobi/eco";
            };
          } // packageOverrides)
      ) {};

    eco = eco_0_0_1;

    ecomm_1_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_5,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ecomm";
            version = "1.0.2";
            src = fetchHex {
              pkg = "ecomm";
              version = "1.0.2";
              sha256 =
                "a2789052de9125ac880f40d91f9efa3f4cf5bd00a7362690828c4c2642e296f4";
            };

            beamDeps  = [ ebs_1_1_5 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of comm(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-comm";
            };
          } // packageOverrides)
      ) {};

    ecomm = ecomm_1_0_2;

    econfig_0_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "econfig";
            version = "0.7.3";
            src = fetchHex {
              pkg = "econfig";
              version = "0.7.3";
              sha256 =
                "bddff19a757209d3e98b6952897fbf8790f6cf33d9e5caf2501263ea4ad46e3c";
            };

            meta = {
              description = ''simple Erlang config handler using INI files'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/benoitc/econfig";
            };
          } // packageOverrides)
      ) {};

    econfig = econfig_0_7_3;

    ecql_5_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ecql";
            version = "5.0.3";
            src = fetchHex {
              pkg = "ecql";
              version = "5.0.3";
              sha256 =
                "d1c1c464aff7c2fa2786b27e46d76891376031ea18fbb99dacca6c5bc5a09801";
            };
            compilePorts = true;

            meta = {
              description = ''Fastest Cassandra driver for Erlang (CQL3 native
                            protocol v4).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exosite/ecql2";
            };
          } // packageOverrides)
      ) {};

    ecql = ecql_5_0_3;

    ecrontab_0_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, gproc_0_6_1 }:
          buildRebar3 ({
            name = "ecrontab";
            version = "0.6.0";
            src = fetchHex {
              pkg = "ecrontab";
              version = "0.6.0";
              sha256 =
                "99ad381e64568c847fc14b6404a02420949b6c8c7e9748ba00ec0f8f3561a81a";
            };

            beamDeps  = [ gproc_0_6_1 ];

            meta = {
              description = ''crontab for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/feng19/ecrontab";
            };
          } // packageOverrides)
      ) {};

    ecrontab = ecrontab_0_6_0;

    ecs_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecs";
            version = "0.5.0";
            src = fetchHex {
              pkg = "ecs";
              version = "0.5.0";
              sha256 =
                "d32507f2c42ec2d812349bbee69c4b0adcb35dc3f6bbac983336d13ec0c8dc4a";
            };

            meta = {
              description = ''An experimental Entity-Component System (ECS)
                            game engine.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshforisha/ecs";
            };
          } // packageOverrides)
      ) {};

    ecs = ecs_0_5_0;

    ecstatic_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_2,
          uuid_1_1_8
        }:
          buildMix ({
            name = "ecstatic";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ecstatic";
              version = "0.1.1";
              sha256 =
                "801f641aaf2fae243e4b44a323f42f19228449ea08b56219bac5f4ff6c02e6e3";
            };
            beamDeps  = [ gen_stage_0_12_2 uuid_1_1_8 ];

            meta = {
              description = ''An ECS (Entity-Component-System) framework in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trevoke/ecstatic";
            };
          } // packageOverrides)
      ) {};

    ecstatic = ecstatic_0_1_1;

    ecto_1_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_5_0,
          mariaex_0_7_5,
          poison_1_5_2,
          poolboy_1_5_1,
          postgrex_0_13_5,
          sbroker_1_0_0_beta_5
        }:
          buildMix ({
            name = "ecto";
            version = "1.0.4";
            src = fetchHex {
              pkg = "ecto";
              version = "1.0.4";
              sha256 =
                "c1be3435dea3a812ce08c66b63e3098fee3a53f962a3639f73ea75fcc4adb22f";
            };
            beamDeps  = [
                          decimal_1_5_0
                          mariaex_0_7_5
                          poison_1_5_2
                          poolboy_1_5_1
                          postgrex_0_13_5
                          sbroker_1_0_0_beta_5
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_1_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_5_0,
          mariaex_0_7_5,
          poison_1_5_2,
          poolboy_1_5_1,
          postgrex_0_13_5,
          sbroker_1_0_0_beta_5
        }:
          buildMix ({
            name = "ecto";
            version = "1.0.7";
            src = fetchHex {
              pkg = "ecto";
              version = "1.0.7";
              sha256 =
                "d56766fb8e93dcec7e6dd9ef8bfe624b9b6d1f3a433fac4f0e7532681f501086";
            };
            beamDeps  = [
                          decimal_1_5_0
                          mariaex_0_7_5
                          poison_1_5_2
                          poolboy_1_5_1
                          postgrex_0_13_5
                          sbroker_1_0_0_beta_5
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_function_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecto_function";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ecto_function";
              version = "1.0.1";
              sha256 =
                "289f84882dff97b23eadf4cf9eb17c75ea4b9f6cab0b01a4961e868135862cd9";
            };

            meta = {
              longDescription = ''Simple macro for defining macro that will
                                return `fragment` with SQL function. A little
                                bit Xzibit, but fun.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hauleth/ecto_function";
            };
          } // packageOverrides)
      ) {};

    ecto_function = ecto_function_1_0_1;

    ecto_generator_9_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecto_generator";
            version = "9.0.0";
            src = fetchHex {
              pkg = "ecto_generator";
              version = "9.0.0";
              sha256 =
                "ed33cee148f59bf449cbd600123d545d881e9d27076ed30f9f711f927ae2748b";
            };

            meta = {
              description = ''Generate Ecto schemas from existing database in
                            Phoenix - Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://www.alexandrubagu.info";
            };
          } // packageOverrides)
      ) {};

    ecto_generator = ecto_generator_9_0_0;

    ecto_integral_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecto_integral";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ecto_integral";
              version = "0.1.0";
              sha256 =
                "ebe113a073810a820bf4dec1b1c20c6a8c56353bcb8190b69524f1d9cebc8987";
            };

            meta = {
              description = ''Interval Type for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/ecto_interval";
            };
          } // packageOverrides)
      ) {};

    ecto_integral = ecto_integral_0_1_0;

    ecto_observable_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, observable_0_2_0 }:
          buildMix ({
            name = "ecto_observable";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ecto_observable";
              version = "0.3.1";
              sha256 =
                "b276864175e2207d53eb443d7c0537f7f79919fd3c7fa41b795cfa5e104963f1";
            };
            beamDeps  = [ observable_0_2_0 ];

            meta = {
              description = ''Ecto Observable brings observable functionality
                            to an Ecto Repo.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/ecto_observable";
            };
          } // packageOverrides)
      ) {};

    ecto_observable = ecto_observable_0_3_1;

    ecto_olap_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecto_olap";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ecto_olap";
              version = "0.2.1";
              sha256 =
                "fde977ceb9020478ab50490c993b23e3a0da6ad0d6742337e097ecd638ab9136";
            };

            meta = {
              description = ''Data analytics helpers for Ecto and PostgreSQL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hauleth/ecto_olap";
            };
          } // packageOverrides)
      ) {};

    ecto_olap = ecto_olap_0_2_1;

    ecto_role_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecto_role";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ecto_role";
              version = "0.1.0";
              sha256 =
                "2d53ca7643c107cc527408b6bc5365da23904d6bb93796974a811bd7d146391b";
            };

            meta = {
              description = ''Implement Table, Row and Column Locking via
                            OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mithereal/ecto-role";
            };
          } // packageOverrides)
      ) {};

    ecto_role = ecto_role_0_1_0;

    ed25519_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ed25519";
            version = "1.3.0";
            src = fetchHex {
              pkg = "ed25519";
              version = "1.3.0";
              sha256 =
                "181f57b695c50a9b159ef5829ce1decb6b45cee849b8935bd13648a7a632d32b";
            };

            meta = {
              description = ''Ed25519 signature functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/ed25519_ex";
            };
          } // packageOverrides)
      ) {};

    ed25519 = ed25519_1_3_0;

    edate_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_3,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "edate";
            version = "1.0.0";
            src = fetchHex {
              pkg = "edate";
              version = "1.0.0";
              sha256 =
                "317a55a440d7cec54c5addba7bb557d5e70a55869f34eb63ddd11c366eb4d369";
            };

            beamDeps  = [ ebs_1_1_3 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of date(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-date";
            };
          } // packageOverrides)
      ) {};

    edate = edate_1_0_0;

    edeliver_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "edeliver";
            version = "1.5.0";
            src = fetchHex {
              pkg = "edeliver";
              version = "1.5.0";
              sha256 =
                "6da0dbb4c9818a3053deab9d7ce9f434dd5964b07e2f53d8275fd2af4ee7fabd";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              longDescription = ''Build and Deploy Elixir Applications and
                                perform Hot-Code Upgrades and Schema
                                Migrations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boldpoker/edeliver";
            };
          } // packageOverrides)
      ) {};

    edeliver = edeliver_1_5_0;

    edeliver_fork_1_4_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "edeliver_fork";
            version = "1.4.6";
            src = fetchHex {
              pkg = "edeliver_fork";
              version = "1.4.6";
              sha256 =
                "f6c0c8b5a9ca80418130bc9442366e4347e3954a7ca2c02d5e7dfaa2a346d76b";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              longDescription = ''Build and Deploy Elixir Applications and
                                perform Hot-Code Upgrades and Schema
                                Migrations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boldpoker/edeliver";
            };
          } // packageOverrides)
      ) {};

    edeliver_fork = edeliver_fork_1_4_6;

    edgar_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "edgar";
            version = "1.0.2";
            src = fetchHex {
              pkg = "edgar";
              version = "1.0.2";
              sha256 =
                "b48044486005955965ecfb300dafcd4002973bf7f3b95514d9bd55647052c80f";
            };

            meta = {
              description = ''Erlang Does Gnu AR'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/crownedgrouse/edgar";
            };
          } // packageOverrides)
      ) {};

    edgar = edgar_1_0_2;

    edh_phoenix_swagger_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "edh_phoenix_swagger";
            version = "0.2.1";
            src = fetchHex {
              pkg = "edh_phoenix_swagger";
              version = "0.2.1";
              sha256 =
                "ba005f8c410f31844c1dd33fe635fac759eaa5756289e25e615f0eceb6d6b7c8";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Swagger DSL and Generator for Phoenix projects'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/everydayhero/phoenix_swagger";
            };
          } // packageOverrides)
      ) {};

    edh_phoenix_swagger = edh_phoenix_swagger_0_2_1;

    edib_0_11_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "edib";
            version = "0.11.0";
            src = fetchHex {
              pkg = "edib";
              version = "0.11.0";
              sha256 =
                "99403094cdcff6ef5b213ec6f26ec3885c9f4cf517fcd95270d484eb6340a6ee";
            };

            meta = {
              longDescription = ''Mix task to create a docker image of your
                                application release. Installation: `mix
                                archive.install hex edib` More detailed
                                information about release image building at:
                                https://github.com/edib-tool/elixir-docker-image-builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edib-tool/mix-edib";
            };
          } // packageOverrides)
      ) {};

    edib = edib_0_11_0;

    ediff_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_2_0,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ediff";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ediff";
              version = "1.0.0";
              sha256 =
                "ea617dde25d85fd0804dd9c68b6efed3ff9f2787353ed8599850e1ce7153f9be";
            };

            beamDeps  = [ ebs_1_2_0 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of diff(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-diff";
            };
          } // packageOverrides)
      ) {};

    ediff = ediff_1_0_0;

    edip_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "edip";
            version = "0.4.3";
            src = fetchHex {
              pkg = "edip";
              version = "0.4.3";
              sha256 =
                "b0b9f34b2048b3f03c1f25b6dc60a1567b6f3ec8c6ad945de30dc313d7608800";
            };

            meta = {
              longDescription = ''Mix task to create a docker image of your
                                application release. More detailed information
                                about release image packaging at:
                                https://github.com/asaaki/elixir-docker-image-packager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/mix-edip";
            };
          } // packageOverrides)
      ) {};

    edip = edip_0_4_3;

    editorconfig_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "editorconfig";
            version = "0.0.1";
            src = fetchHex {
              pkg = "editorconfig";
              version = "0.0.1";
              sha256 =
                "c4bad1c6e0ba0f418f583d04f40c6fd066de267d4367692c66cfcdd14b84469a";
            };

            meta = {
              description = ''EditorConfig API for Elixir projects'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mytrile";
            };
          } // packageOverrides)
      ) {};

    editorconfig = editorconfig_0_0_1;

    edown_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "edown";
            version = "0.7.0";
            src = fetchHex {
              pkg = "edown";
              version = "0.7.0";
              sha256 =
                "6d7365a7854cd724e8d1fd005f5faa4444eae6a87eb6df9b789b6e7f6f09110a";
            };

            meta = {
              description = ''Markdown extension for EDoc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/edown";
            };
          } // packageOverrides)
      ) {};

    edown_0_8_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "edown";
            version = "0.8.1";
            src = fetchHex {
              pkg = "edown";
              version = "0.8.1";
              sha256 =
                "2821d6a43d1da067f6eac072e69105140a36556cd906fc6b81b6fae905f5dd13";
            };

            meta = {
              description = ''Markdown extension for EDoc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/edown";
            };
          } // packageOverrides)
      ) {};

    edown = edown_0_8_1;

    eenv_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eenv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eenv";
              version = "0.1.0";
              sha256 =
                "e99e7d8a136d75d8e42340c967594969e7ddc124abd536df614fc548ef79ad95";
            };

            meta = {
              description = ''Application Configuration Manager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhongwencool/erl-env";
            };
          } // packageOverrides)
      ) {};

    eenv = eenv_0_1_0;

    efene_0_99_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          aleppo_0_9_0,
          ast_walk_0_3_0
        }:
          buildRebar3 ({
            name = "efene";
            version = "0.99.2";
            src = fetchHex {
              pkg = "efene";
              version = "0.99.2";
              sha256 =
                "4796846239db628f4180848ffbdd0eaca54d5ea472aac34ee621810ef91c34ac";
            };

            beamDeps  = [ aleppo_0_9_0 ast_walk_0_3_0 ];

            meta = {
              description = ''A Programming Language for the Erlang VM'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/efene/efene";
            };
          } // packageOverrides)
      ) {};

    efene = efene_0_99_2;

    effects_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "effects";
            version = "0.1.1";
            src = fetchHex {
              pkg = "effects";
              version = "0.1.1";
              sha256 =
                "dac8b9c694d33d12ddac0582bba12c52e6f6f8b24fc0d03b4cbc5bb4c598ecc0";
            };

            meta = {
              description = ''Monadic, softly-typed, extensible effect handling
                            in Elixir.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/metalabdesign/effects";
            };
          } // packageOverrides)
      ) {};

    effects = effects_0_1_1;

    effi_0_1_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          getopt_1_0_1,
          jsone_1_4_5
        }:
          buildRebar3 ({
            name = "effi";
            version = "0.1.5";
            src = fetchHex {
              pkg = "effi";
              version = "0.1.5";
              sha256 =
                "39bdf11a85f461e1b977f7e7807fb3b3b6e0842d52383a66a7bdbb96db7cbb95";
            };

            beamDeps  = [ getopt_1_0_1 jsone_1_4_5 ];

            meta = {
              description = ''Erlang foreign function interface'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/effi/";
            };
          } // packageOverrides)
      ) {};

    effi = effi_0_1_5;

    effusion_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_bencode_2_0_1,
          httpotion_3_0_3,
          int_set_1_3_0,
          ranch_1_5_0
        }:
          buildMix ({
            name = "effusion";
            version = "0.1.0";
            src = fetchHex {
              pkg = "effusion";
              version = "0.1.0";
              sha256 =
                "8a9c67a997130b102d6d32ef9308eb6405d83a8d4d086471cbdf9deff7e0ef2b";
            };
            beamDeps  = [
                          ex_bencode_2_0_1
                          httpotion_3_0_3
                          int_set_1_3_0
                          ranch_1_5_0
                        ];

            meta = {
              description = ''A BitTorrent library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Cantido/effusion";
            };
          } // packageOverrides)
      ) {};

    effusion = effusion_0_1_0;

    efgrep_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_4,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "efgrep";
            version = "1.0.0";
            src = fetchHex {
              pkg = "efgrep";
              version = "1.0.0";
              sha256 =
                "d89b6ca047879cbdd12d1b2287b6e05cc92217b589e0be1842b1086e9e1baeae";
            };

            beamDeps  = [ ebs_1_1_4 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of fgrep(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-fgrep";
            };
          } // packageOverrides)
      ) {};

    efgrep = efgrep_1_0_0;

    efirebirdsql_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "efirebirdsql";
            version = "0.2.0";
            src = fetchHex {
              pkg = "efirebirdsql";
              version = "0.2.0";
              sha256 =
                "26dd295c2dbd9bc9ff104c2883b0e7032e8367348557534365b89d55a3785084";
            };

            meta = {
              description = ''Firebird Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nakagami/efirebirdsql";
            };
          } // packageOverrides)
      ) {};

    efirebirdsql = efirebirdsql_0_2_0;

    eflame_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eflame";
            version = "1.0.1";
            src = fetchHex {
              pkg = "eflame";
              version = "1.0.1";
              sha256 =
                "e0b08854a66f9013129de0b008488f3411ae9b69b902187837f994d7a99cf04e";
            };

            meta = {
              description = ''Flame Graph profiler for Erlang and Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/proger/eflame";
            };
          } // packageOverrides)
      ) {};

    eflame = eflame_1_0_1;

    eflatbuffers_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eflatbuffers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eflatbuffers";
              version = "0.1.0";
              sha256 =
                "31e6ecbbd56b68d03b8367d0642cb4a0c2d235b3248ae007c466244becef662e";
            };

            meta = {
              description = ''Elixir/Erlang flatbuffers implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wooga/eflatbuffers";
            };
          } // packageOverrides)
      ) {};

    eflatbuffers = eflatbuffers_0_1_0;

    efluentc_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, msgpack_0_7_0 }:
          buildRebar3 ({
            name = "efluentc";
            version = "0.2.0";
            src = fetchHex {
              pkg = "efluentc";
              version = "0.2.0";
              sha256 =
                "ee29002731a6edce7b44c24235c3aa43770638b8369c3a392f82fb33dd9e6251";
            };

            beamDeps  = [ msgpack_0_7_0 ];

            meta = {
              description = ''fluentd client for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tkyshm/efluentc";
            };
          } // packageOverrides)
      ) {};

    efluentc = efluentc_0_2_0;

    efranc_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "efranc";
            version = "0.0.1";
            src = fetchHex {
              pkg = "efranc";
              version = "0.0.1";
              sha256 =
                "9e5d436f49cab770d8d0d9c433679fe46c636c923385047c36327bf1cc6b654d";
            };

            meta = {
              description = ''Detect the language of text'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/efranc";
            };
          } // packageOverrides)
      ) {};

    efranc = efranc_0_0_1;

    egcache_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "egcache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "egcache";
              version = "0.1.0";
              sha256 =
                "964fd994917b7f37c6510e4fad1bf00737b36ff9cea321694c6b6e1f14f50d6a";
            };

            meta = {
              description = ''An OTP application'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/relx";
            };
          } // packageOverrides)
      ) {};

    egcache = egcache_0_1_0;

    egeonames_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "egeonames";
            version = "0.1.1";
            src = fetchHex {
              pkg = "egeonames";
              version = "0.1.1";
              sha256 =
                "cf3c00ac668a9b10fa225b4896fb7e88683e82b93ec3f2f6fe5279d86fdbe00e";
            };

            meta = {
              description = ''wrapper around geonames.org'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massemanet/egeonames";
            };
          } // packageOverrides)
      ) {};

    egeonames = egeonames_0_1_1;

    egetopt_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "egetopt";
            version = "1.0.0";
            src = fetchHex {
              pkg = "egetopt";
              version = "1.0.0";
              sha256 =
                "858c69142a14cbe41171df8c88af51baf2ced421261c4bf83c823700afe7371a";
            };

            meta = {
              description = ''POSIX style command-line option parsing.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-getopt";
            };
          } // packageOverrides)
      ) {};

    egetopt = egetopt_1_0_0;

    egithub_0_5_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          goldrush_0_1_9,
          hackney_1_13_0,
          jiffy_0_15_2,
          lager_3_6_3
        }:
          buildRebar3 ({
            name = "egithub";
            version = "0.5.5";
            src = fetchHex {
              pkg = "egithub";
              version = "0.5.5";
              sha256 =
                "24c55b773dd9711440ffe67ee904770912af336d4b387e97db8ac0a527bb3915";
            };

            beamDeps  = [
                          goldrush_0_1_9 hackney_1_13_0 jiffy_0_15_2 lager_3_6_3
                        ];

            meta = {
              description = ''GitHub API client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/erlang-github";
            };
          } // packageOverrides)
      ) {};

    egithub_0_5_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          goldrush_0_1_9,
          hackney_1_13_0,
          jiffy_0_15_2,
          lager_3_6_3
        }:
          buildRebar3 ({
            name = "egithub";
            version = "0.5.6";
            src = fetchHex {
              pkg = "egithub";
              version = "0.5.6";
              sha256 =
                "729e4ed4a932d06dd88cb6234d140ff57be8e6e20834b5ecf8aeb892d86219e3";
            };

            beamDeps  = [
                          goldrush_0_1_9 hackney_1_13_0 jiffy_0_15_2 lager_3_6_3
                        ];

            meta = {
              description = ''GitHub API client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/erlang-github";
            };
          } // packageOverrides)
      ) {};

    egithub = egithub_0_5_6;

    eh_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eh";
            version = "0.2.0";
            src = fetchHex {
              pkg = "eh";
              version = "0.2.0";
              sha256 =
                "91013c78138c8854c5699ef42324e66286fed0048c4d4212c4dc3012d764c628";
            };

            meta = {
              description = ''Lookup Elixir documentation from the command line
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Frost/eh.git";
            };
          } // packageOverrides)
      ) {};

    eh = eh_0_2_0;

    ehash_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ehash";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ehash";
              version = "0.2.1";
              sha256 =
                "2649de588d6bef73abd98f43ed7a6fe5368b3bbea7e03296b086f7ba39a0bfdb";
            };

            meta = {
              description = ''A library to consistently crypto-hash Erlang
                            Terms'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    ehash = ehash_0_2_1;

    ehee_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_5,
          ex_doc_0_18_3,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "ehee";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ehee";
              version = "0.0.1";
              sha256 =
                "eba648087d45ec3dcaeb5674488a7e91b3a1d6abe04c07924350803f3952b16b";
            };
            beamDeps  = [
                          earmark_1_2_5
                          ex_doc_0_18_3
                          httpoison_0_13_0
                          poison_1_5_2
                        ];

            meta = {
              description = ''Unofficial Elixir client for the Github API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kanmo/ehee";
            };
          } // packageOverrides)
      ) {};

    ehee = ehee_0_0_1;

    eiconv_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eiconv";
            version = "1.0.0";
            src = fetchHex {
              pkg = "eiconv";
              version = "1.0.0";
              sha256 =
                "8c80851decf72fc4571a70278d7932e9a87437770322077ecf797533fbb792cd";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Iconv NIF interface'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zotonic/z_stdlib";
            };
          } // packageOverrides)
      ) {};

    eiconv = eiconv_1_0_0;

    eidetic_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "eidetic";
            version = "0.0.4";
            src = fetchHex {
              pkg = "eidetic";
              version = "0.0.4";
              sha256 =
                "ff59332dd3467f92988b383728017410ed773b11044a4d93244190e71e35fd5d";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''An event-sourcing library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GT8Online/eidetic-elixir";
            };
          } // packageOverrides)
      ) {};

    eidetic_1_0_0_alpha1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "eidetic";
            version = "1.0.0-alpha1";
            src = fetchHex {
              pkg = "eidetic";
              version = "1.0.0-alpha1";
              sha256 =
                "a4c7df845a572c8b848dcd00c93152fc92406826e788d27a91bceeda0894ae23";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''An event-sourcing library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GT8Online/eidetic-elixir";
            };
          } // packageOverrides)
      ) {};

    eidetic = eidetic_1_0_0_alpha1;

    eidetic_eventstore_mongodb_1_0_0_alpha1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eidetic_1_0_0_alpha1,
          mongodb_0_4_6,
          poolboy_1_5_1,
          uuid_1_1_8
        }:
          buildMix ({
            name = "eidetic_eventstore_mongodb";
            version = "1.0.0-alpha1";
            src = fetchHex {
              pkg = "eidetic_eventstore_mongodb";
              version = "1.0.0-alpha1";
              sha256 =
                "cdf441d27569fd70873b2b6d430f55e1cfd86c703d7fcaf6bf3cc1d34e86b36c";
            };
            beamDeps  = [
                          eidetic_1_0_0_alpha1
                          mongodb_0_4_6
                          poolboy_1_5_1
                          uuid_1_1_8
                        ];

            meta = {
              description = ''A MongoDB EventStore for the Eidetic
                            EventSourcing library'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    eidetic_eventstore_mongodb =
      eidetic_eventstore_mongodb_1_0_0_alpha1;

    eidetic_projector_0_1_0_alpha2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eidetic_0_0_4,
          mongodb_0_4_6
        }:
          buildMix ({
            name = "eidetic_projector";
            version = "0.1.0-alpha2";
            src = fetchHex {
              pkg = "eidetic_projector";
              version = "0.1.0-alpha2";
              sha256 =
                "12d97f6377102c3ec61088ab8291553638d562753dead9cec003cd99b430c5b0";
            };
            beamDeps  = [ eidetic_0_0_4 mongodb_0_4_6 ];

            meta = {
              description = ''Projector Middleware system for building
                            projections from Eidetic event streams'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    eidetic_projector = eidetic_projector_0_1_0_alpha2;

    eight_ball_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eight_ball";
            version = "0.0.1";
            src = fetchHex {
              pkg = "eight_ball";
              version = "0.0.1";
              sha256 =
                "1ba1b2b5f3dfaba751b51f101c3c526a09f0c989768f265e82a6a065447a6aa4";
            };

            meta = {
              description = ''Library that acts like a real life Magic 8
                            Ball.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fteem/eight_ball";
            };
          } // packageOverrides)
      ) {};

    eight_ball = eight_ball_0_0_1;

    eight_ball_chip_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eight_ball_chip";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eight_ball_chip";
              version = "0.1.0";
              sha256 =
                "4d54086054bd9e96f89de04d2020915056d6d9a0cc2d5fed08ed004b838feaee";
            };

            meta = {
              description = ''Testing hex publish'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    eight_ball_chip = eight_ball_chip_0_1_0;

    eight_ball_dj_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eight_ball_dj";
            version = "0.0.2";
            src = fetchHex {
              pkg = "eight_ball_dj";
              version = "0.0.2";
              sha256 =
                "5b0d4f92a76f3d48d5541936ae8540154ed2a14ccda1a45e250d6a577bb541f5";
            };

            meta = {
              description = ''Ask a question to the Magic Eight Ball'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/djkianoosh/eight_ball";
            };
          } // packageOverrides)
      ) {};

    eight_ball_dj = eight_ball_dj_0_0_2;

    eikon_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eikon";
            version = "0.0.2";
            src = fetchHex {
              pkg = "eikon";
              version = "0.0.2";
              sha256 =
                "fc624850b69504dd3f05e65ce40b4480aef70b605045f3d79d218c39c443a205";
            };

            meta = {
              description = ''Eikōn is an Elixir library providing a read-only
                            interface for image files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tchoutri/eikon";
            };
          } // packageOverrides)
      ) {};

    eikon = eikon_0_0_2;

    eini_1_2_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eini";
            version = "1.2.4";
            src = fetchHex {
              pkg = "eini";
              version = "1.2.4";
              sha256 =
                "6a5f2a2260ce76db87981c0f93b4b6875051993934de894a71e87e54f069bb7e";
            };

            meta = {
              description = ''An Erlang INI parser'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/erlcloud/eini";
            };
          } // packageOverrides)
      ) {};

    eini = eini_1_2_4;

    ejabberd_dev_15_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ejabberd_dev";
            version = "15.9.0";
            src = fetchHex {
              pkg = "ejabberd_dev";
              version = "15.9.0";
              sha256 =
                "4c4ca5b3ee1900bd7e5babed76cae361b6350ed5793ce013cbfccc06208c291e";
            };

            meta = {
              longDescription = ''A package to help with building ejabberd
                                modules. This package includes source and header
                                files from the ejabberd project that are
                                necessary in order to build a gen_mod module.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/scrogson/ejabberd_dev";
            };
          } // packageOverrides)
      ) {};

    ejabberd_dev = ejabberd_dev_15_9_0;

    ejpet_0_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ejpet";
            version = "0.7.1";
            src = fetchHex {
              pkg = "ejpet";
              version = "0.7.1";
              sha256 =
                "837fed81f14c0f6d0d0c64b22b258aaf52d9e524570306c20f552216b6dcb4e3";
            };

            meta = {
              description = ''Search my JSON'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/nmichel/ejpet";
            };
          } // packageOverrides)
      ) {};

    ejpet = ejpet_0_7_1;

    ejwt_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsx_2_8_0 }:
          buildRebar3 ({
            name = "ejwt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ejwt";
              version = "0.1.0";
              sha256 =
                "c316a4b7fd21b07b401a3a01db9039b7006f5a1c7e96a981b6cbcb36da1a4a84";
            };

            beamDeps  = [ jsx_2_8_0 ];

            meta = {
              description = ''Encode/decode JSON Web Token'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/artefactop/ejwt";
            };
          } // packageOverrides)
      ) {};

    ejwt = ejwt_0_1_0;

    el_meduza_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "el_meduza";
            version = "0.1.5";
            src = fetchHex {
              pkg = "el_meduza";
              version = "0.1.5";
              sha256 =
                "9db53423e2699e9d2b81a9b4c8a60f6e2e3c14925fe53478cac8b7c82269c031";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Fetching json api data from some of the available
                            endpoints of meduza.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kirqe/el_meduza";
            };
          } // packageOverrides)
      ) {};

    el_meduza = el_meduza_0_1_5;

    el_monads_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "el_monads";
            version = "0.1.1";
            src = fetchHex {
              pkg = "el_monads";
              version = "0.1.1";
              sha256 =
                "4316338309b71b7a3dacee92eae13642ce0432eff644f2e3e01731a50b0da5a4";
            };

            meta = {
              longDescription = ''This is an implementation of the `Try` and
                                `Maybe` monads. Please see tests for
                                examples.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Twizty/el_monads";
            };
          } // packageOverrides)
      ) {};

    el_monads = el_monads_0_1_1;

    el_soconos_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlport_0_9_8,
          export_0_1_1
        }:
          buildMix ({
            name = "el_soconos";
            version = "1.1.0";
            src = fetchHex {
              pkg = "el_soconos";
              version = "1.1.0";
              sha256 =
                "909c1aa7f89a550d2be75cf83a8f6b530206bd2a55e5b23e3373a770afce4ca8";
            };
            beamDeps  = [ erlport_0_9_8 export_0_1_1 ];

            meta = {
              longDescription = ''Elixir wrapper for the Python SoCo library
                                for querying and controlling a Sonos music
                                system.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nerves-build/el_soconos";
            };
          } // packageOverrides)
      ) {};

    el_soconos = el_soconos_1_1_0;

    ela_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ela";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ela";
              version = "1.0.0";
              sha256 =
                "840ba8e9e71dc1c53489054da45363ec7690ed46a2b2233784df8d13a174cdea";
            };

            meta = {
              longDescription = ''Elixir Linear Algebra (ELA for short)
                                contains functionality for working with both
                                vectors and matrices.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/SebastianCallh/elixir-linear-algebra";
            };
          } // packageOverrides)
      ) {};

    ela = ela_1_0_0;

    elastic_2_3_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          aws_auth_0_6_4,
          httpotion_3_0_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "elastic";
            version = "2.3.5";
            src = fetchHex {
              pkg = "elastic";
              version = "2.3.5";
              sha256 =
                "0bc6b7a69f43cbfed7fc91ac534f7099aedfb56f5e4367544c9dd723b8b1d5bc";
            };
            beamDeps  = [ aws_auth_0_6_4 httpotion_3_0_3 poison_2_2_0 ];

            meta = {
              description = ''You Know, for (Elastic) Search'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/radar/elastic";
            };
          } // packageOverrides)
      ) {};

    elasticachex_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_13 }:
          buildMix ({
            name = "elasticachex";
            version = "1.1.1";
            src = fetchHex {
              pkg = "elasticachex";
              version = "1.1.1";
              sha256 =
                "37a4bdbfd7f385b813b975c6270bb12fd087a56a84af848ffa17a6667ac80193";
            };
            beamDeps  = [ socket_0_3_13 ];

            meta = {
              longDescription = ''An implementation of the Node Auto Discovery
                                for Memcached in the ElastiCache service of AWS.
                                See
                                http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.html'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peillis/elasticachex";
            };
          } // packageOverrides)
      ) {};

    elasticachex = elasticachex_1_1_1;

    elasticemail_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "elasticemail";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elasticemail";
              version = "0.1.1";
              sha256 =
                "2d07f36fa0035baba053b2ab1917cd76ae96d256e16ce106c616b37cbd53e6f8";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A basic Elixir wrapper of the ElasticEmail
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manme/elasticemail";
            };
          } // packageOverrides)
      ) {};

    elasticemail = elasticemail_0_1_1;

    elasticsearch_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          maybe_1_0_0,
          poison_3_1_0,
          vex_0_6_0
        }:
          buildMix ({
            name = "elasticsearch";
            version = "0.4.1";
            src = fetchHex {
              pkg = "elasticsearch";
              version = "0.4.1";
              sha256 =
                "39a5787c15ccf520580c64561aa1844722cefce82b8e2c6742456ea3fe5f93e9";
            };
            beamDeps  = [ httpoison_1_2_0 maybe_1_0_0 poison_3_1_0 vex_0_6_0
                      ];

            meta = {
              description = ''Elasticsearch without DSLs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/elasticsearch-elixir";
            };
          } // packageOverrides)
      ) {};

    elasticsearch = elasticsearch_0_4_1;

    elastix_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0,
          retry_0_10_0
        }:
          buildMix ({
            name = "elastix";
            version = "0.6.0";
            src = fetchHex {
              pkg = "elastix";
              version = "0.6.0";
              sha256 =
                "735c1b437c3ea849535169b651b6977660cdd5d84c8ade27000480fb93ad2b6e";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 retry_0_10_0 ];

            meta = {
              description = ''A DSL-free Elasticsearch client for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/werbitzky/elastix";
            };
          } // packageOverrides)
      ) {};

    elastix = elastix_0_6_0;

    elastix_reloaded_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "elastix_reloaded";
            version = "0.6.0";
            src = fetchHex {
              pkg = "elastix_reloaded";
              version = "0.6.0";
              sha256 =
                "8da716e38929448e9d264e9bed6634e6a1215a21ad87770000ee900c21cd2a27";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A simple Elasticsearch REST client written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evuez/elastix-reloaded";
            };
          } // packageOverrides)
      ) {};

    elastix_reloaded = elastix_reloaded_0_6_0;

    elavon_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "elavon";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elavon";
              version = "0.1.2";
              sha256 =
                "1c704a5a8780fe56e78d5222608f4e4ab3ff488d44e14a9ff21f01480e3333be";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Native elixir client for USBank Elavon Converge
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/elavon-elixir";
            };
          } // packageOverrides)
      ) {};

    elavon = elavon_0_1_2;

    elephant_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elephant";
            version = "0.2.1";
            src = fetchHex {
              pkg = "elephant";
              version = "0.2.1";
              sha256 =
                "79c72e93745f8c34472ac88cb924cdaf9fa501876f320f9c9401362cc511827d";
            };

            meta = {
              description = ''A STOMP client to listen to, for example, AMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eteubert/elephant";
            };
          } // packageOverrides)
      ) {};

    elephant = elephant_0_2_1;

    eleveldb_2_2_20 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eleveldb";
            version = "2.2.20";
            src = fetchHex {
              pkg = "eleveldb";
              version = "2.2.20";
              sha256 =
                "0e67df12ef836a7bcdde9373c59f1ae18b335defd1d66b820d3d4dd7ca1844e2";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Erlang LevelDB API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/eleveldb";
            };
          } // packageOverrides)
      ) {};

    eleveldb = eleveldb_2_2_20;

    elibuf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elibuf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elibuf";
              version = "0.1.0";
              sha256 =
                "85e1a302dbd21d8346866da9c5ff6129ec3c1c11e09aff5e476000519d83da53";
            };

            meta = {
              description = ''Generate Protobuf specification from elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/norbertskakste/Elibuf";
            };
          } // packageOverrides)
      ) {};

    elibuf = elibuf_0_1_0;

    elifull_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "elifull";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elifull";
              version = "0.1.0";
              sha256 =
                "1da03d7e2169c1b8755d7d8c76824a0c8c169ae0bf39f22e13baf1742d4358e9";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Simple library that provides usefull methods'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MobElian/elixircourse";
            };
          } // packageOverrides)
      ) {};

    elifull = elifull_0_1_0;

    eligator_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eligator";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eligator";
              version = "0.1.0";
              sha256 =
                "562dc8476330aa549eb975b2c0637c402169a4ee29d79d2647d81198344c2f2e";
            };

            meta = {
              description = ''Simple gating module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mytrile/eligator";
            };
          } // packageOverrides)
      ) {};

    eligator = eligator_0_1_0;

    elistix_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "elistix";
            version = "1.0.1";
            src = fetchHex {
              pkg = "elistix";
              version = "1.0.1";
              sha256 =
                "77adc07147df381caecafdeb67f2effe00aaf8d254cdbe39447de896f81434a5";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''Use Elasticsearch along with your Elixir app
                            without learn any new DSL.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/lcostantini/elistix";
            };
          } // packageOverrides)
      ) {};

    elistix = elistix_1_0_1;

    eliver_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, enquirer_0_1_0 }:
          buildMix ({
            name = "eliver";
            version = "2.0.3";
            src = fetchHex {
              pkg = "eliver";
              version = "2.0.3";
              sha256 =
                "bd2434db0bb850f2b304e77b29565646411235fadff89ad023787e6f52ce1e87";
            };
            beamDeps  = [ enquirer_0_1_0 ];

            meta = {
              description = ''Interactive semantic versioning for Elixir
                            packages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/glasnoster/eliver";
            };
          } // packageOverrides)
      ) {};

    eliver = eliver_2_0_3;

    elivndb_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "elivndb";
            version = "0.2.5";
            src = fetchHex {
              pkg = "elivndb";
              version = "0.2.5";
              sha256 =
                "8b6616058f3aa46b5958b59e9675cd1c94cff290776cfef6424727af92f313ab";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Kawaii VNDB API wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DoumanAsh/EliVndb";
            };
          } // packageOverrides)
      ) {};

    elivndb = elivndb_0_2_5;

    elixir_agi_0_0_20 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_agi";
            version = "0.0.20";
            src = fetchHex {
              pkg = "elixir_agi";
              version = "0.0.20";
              sha256 =
                "f4e790fa04a77272b467174836e0a264ea24d8153d0e30c9d4ec492a2962f7b5";
            };

            meta = {
              longDescription = ''Elixir client for the Asterisk AGI protocol.
                                Find the user guide in the github repo at:
                                https://github.com/marcelog/elixir_agi.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_agi";
            };
          } // packageOverrides)
      ) {};

    elixir_agi = elixir_agi_0_0_20;

    elixir_ale_0_6_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "elixir_ale";
            version = "0.6.2";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "0.6.2";
              sha256 =
                "477b3013c5624607b8ac18aa15f1c8cc8f5264739d376153a29a83d4416c9154";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale_0_7_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "elixir_ale";
            version = "0.7.0";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "0.7.0";
              sha256 =
                "d8a422aababab286189a54cfc6d93d3dbdf517e2e9c9ac478af38fbc4ce0be3f";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale_1_0_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "elixir_ale";
            version = "1.0.3";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "1.0.3";
              sha256 =
                "6e2817392935f311fa3e074db9ebf72f5a2d69570333fa6407266ac726105ca6";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale = elixir_ale_1_0_3;

    elixir_ami_0_0_20 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_agi_0_0_20
        }:
          buildMix ({
            name = "elixir_ami";
            version = "0.0.20";
            src = fetchHex {
              pkg = "elixir_ami";
              version = "0.0.20";
              sha256 =
                "91b8a45801b22d998d12b284ec12a36eac843fcc1d461b7549be33a6aee8e038";
            };
            beamDeps  = [ elixir_agi_0_0_20 ];

            meta = {
              longDescription = ''Elixir client for the Asterisk AMI protocol.
                                Find the user guide in the github repo at:
                                https://github.com/marcelog/elixir_ami.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_ami";
            };
          } // packageOverrides)
      ) {};

    elixir_ami = elixir_ami_0_0_20;

    elixir_auth_github_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "elixir_auth_github";
            version = "0.1.4";
            src = fetchHex {
              pkg = "elixir_auth_github";
              version = "0.1.4";
              sha256 =
                "24b23c4aaa9476e05363d719f3aa616635b486df75fdb2237331d75908a95787";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A module to help simplify github oauth in
                            elixir/phoenix.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/dwyl/elixir-auth-github";
            };
          } // packageOverrides)
      ) {};

    elixir_auth_github = elixir_auth_github_0_1_4;

    elixir_authorizenet_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ibrowse_4_4_0,
          sweet_xml_0_6_5,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "elixir_authorizenet";
            version = "0.4.1";
            src = fetchHex {
              pkg = "elixir_authorizenet";
              version = "0.4.1";
              sha256 =
                "72346ee1b02e4dabb8876a9af32b988b433fea039cfa4e339aa5bfdba3ac2d8d";
            };
            beamDeps  = [ ibrowse_4_4_0 sweet_xml_0_6_5 xml_builder_2_1_0 ];

            meta = {
              longDescription = ''Elixir client for the Authorize.Net merchant
                                AIM API. A number of features are implemented,
                                but I still consider this as WIP, and pull
                                requests, suggestions, or other kind of feedback
                                are very welcome! User guide at:
                                https://github.com/marcelog/elixir_authorizenet.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_authorizenet";
            };
          } // packageOverrides)
      ) {};

    elixir_authorizenet = elixir_authorizenet_0_4_1;

    elixir_bencode_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_bencode";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_bencode";
              version = "1.0.0";
              sha256 =
                "2c4c86843b2377182da7cff125784a227c7bc63ef9e92ce7257f14b132667ebe";
            };

            meta = {
              description = ''Bencode encoder / decoder in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AntonFagerberg/elixir_bencode";
            };
          } // packageOverrides)
      ) {};

    elixir_bencode = elixir_bencode_1_0_0;

    elixir_cmake_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_cmake";
            version = "0.4.0";
            src = fetchHex {
              pkg = "elixir_cmake";
              version = "0.4.0";
              sha256 =
                "f951f2cdf4bb4f66d31301d9aaac1e2839f4b4250161c2a525cefeb426a62214";
            };

            meta = {
              description = ''A CMake compiler to help building Ports/NIFs in
                            your Elixir/mix project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/code-lever/elixir-cmake";
            };
          } // packageOverrides)
      ) {};

    elixir_cmake = elixir_cmake_0_4_0;

    elixir_data_dog_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "elixir_data_dog";
            version = "0.2.1";
            src = fetchHex {
              pkg = "elixir_data_dog";
              version = "0.2.1";
              sha256 =
                "cdc639c9d9511d918159c92af129294c39541f83b5774b92f457c2416c49e7c9";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''A simple library for sending metrics to
                            DataDog'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/KamilLelonek/elixir_data_dog";
            };
          } // packageOverrides)
      ) {};

    elixir_data_dog = elixir_data_dog_0_2_1;

    elixir_dropbox_0_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          json_1_2_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "elixir_dropbox";
            version = "0.0.8";
            src = fetchHex {
              pkg = "elixir_dropbox";
              version = "0.0.8";
              sha256 =
                "4b617883a22d5e05e606a0875bbc2a79146e611572e62471a7b97b7e98af7392";
            };
            beamDeps  = [ httpoison_0_13_0 json_1_2_2 poison_1_5_2 ];

            meta = {
              description = ''Simple Elixir wrapper for the Dropbox v2 API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sger/elixir_dropbox";
            };
          } // packageOverrides)
      ) {};

    elixir_dropbox = elixir_dropbox_0_0_8;

    elixir_elastic_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_2_1 }:
          buildMix ({
            name = "elixir_elastic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_elastic";
              version = "0.1.0";
              sha256 =
                "e4aa87ccb4c8f305f2f132c8109c84967769b246949c16c4c0083ee5fee044fe";
            };
            beamDeps  = [ exjsx_3_2_1 ];

            meta = {
              description = ''A simple Elixir Elasticsearch HTTP client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wlchn/elixir_elastic";
            };
          } // packageOverrides)
      ) {};

    elixir_elastic = elixir_elastic_0_1_0;

    elixir_email_reply_parser_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_email_reply_parser";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_email_reply_parser";
              version = "0.1.2";
              sha256 =
                "db5bf1f24227d2e49a30aa20739756783193385571ecf6c98f3bab900b32a6f2";
            };

            meta = {
              longDescription = ''Email reply parser for retrieval of the last
                                reply from email message. Originally an Elixir
                                port of
                                https://github.com/github/email_reply_parser as
                                well as its port
                                https://github.com/zapier/email-reply-parser
                                enhanced by e.g. an ability to handle emails
                                with German.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/hellogustav/elixir_email_reply_parser";
            };
          } // packageOverrides)
      ) {};

    elixir_email_reply_parser = elixir_email_reply_parser_0_1_2;

    elixir_exif_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_exif";
            version = "0.2.0";
            src = fetchHex {
              pkg = "elixir_exif";
              version = "0.2.0";
              sha256 =
                "1bb82e27d67ca2723b31002622c17b21c55a17e28026e1022e51ff36fe39d6e6";
            };

            meta = {
              description = ''Parse exif and thumbnail data from jpeg/tiff
                            images.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/ElixirExif";
            };
          } // packageOverrides)
      ) {};

    elixir_exif = elixir_exif_0_2_0;

    elixir_freshbooks_0_0_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ibrowse_4_4_0,
          sweet_xml_0_6_5,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "elixir_freshbooks";
            version = "0.0.10";
            src = fetchHex {
              pkg = "elixir_freshbooks";
              version = "0.0.10";
              sha256 =
                "d542621d85738d76b86cc645d5bd1ec77fc113819c6dce285d2c48c622648969";
            };
            beamDeps  = [ ibrowse_4_4_0 sweet_xml_0_6_5 xml_builder_2_1_0 ];

            meta = {
              description = ''Elixir client for FreshBooks.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_freshbooks";
            };
          } // packageOverrides)
      ) {};

    elixir_freshbooks = elixir_freshbooks_0_0_10;

    elixir_go_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_go";
            version = "0.4.0";
            src = fetchHex {
              pkg = "elixir_go";
              version = "0.4.0";
              sha256 =
                "b36217bf19bcf3a0a31f0acbd5ed36f83998579f68ad6117ac6e9c248ad166c4";
            };

            meta = {
              description = ''Elixir struct for playing the game of go. Ported
                            from javascript/godash.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kokolegorille/go";
            };
          } // packageOverrides)
      ) {};

    elixir_go = elixir_go_0_4_0;

    elixir_gravatar_url_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_gravatar_url";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_gravatar_url";
              version = "1.0.0";
              sha256 =
                "e298fbfc6c4ebf401cf4e62739d79696eff3ce454f037055523c08f2cf815db1";
            };

            meta = {
              description = ''An Elixir module for generating Gravatar urls'';

            };
          } // packageOverrides)
      ) {};

    elixir_gravatar_url = elixir_gravatar_url_1_0_0;

    elixir_help_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_help";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_help";
              version = "0.1.0";
              sha256 =
                "a76dd871c1422ab548f96f82fc26d0b13f85df34aa2f3fa6e3fa4348b06478dc";
            };

            meta = {
              description = ''IEx `h` from your cli'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/h";
            };
          } // packageOverrides)
      ) {};

    elixir_help = elixir_help_0_1_0;

    elixir_igo_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_20_3 }:
          buildMix ({
            name = "elixir_igo";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elixir_igo";
              version = "0.1.1";
              sha256 =
                "f4b5e63e033236ee058b42421de14ced0f0970fe28952576d650069e5a7d9aa4";
            };
            beamDeps  = [ floki_0_20_3 ];

            meta = {
              description = ''The game of Go in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jphager2/elixir_igo";
            };
          } // packageOverrides)
      ) {};

    elixir_igo = elixir_igo_0_1_1;

    elixir_ipify_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          httpotion_3_0_3
        }:
          buildMix ({
            name = "elixir_ipify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_ipify";
              version = "0.1.0";
              sha256 =
                "5e050efcd1e632a8dd4ca6633de66815096c45bca0a29b083522b3b881d953be";
            };
            beamDeps  = [ ex_doc_0_18_3 httpotion_3_0_3 ];

            meta = {
              description = ''A simple elixir library for ipify: A Simple IP
                            Address API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gabulyaz/elixir-ipify";
            };
          } // packageOverrides)
      ) {};

    elixir_ipify = elixir_ipify_0_1_0;

    elixir_ldap_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "elixir_ldap";
            version = "0.4.0";
            src = fetchHex {
              pkg = "elixir_ldap";
              version = "0.4.0";
              sha256 =
                "a73cf12cf9a67fc13835e9d64aabd232c8f1b5e7ee7a41a71cc18dc57368a0c7";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''elixir LDAP Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kobatako/elixir_ldap";
            };
          } // packageOverrides)
      ) {};

    elixir_ldap = elixir_ldap_0_4_0;

    elixir_linter_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          credo_0_9_3,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "elixir_linter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_linter";
              version = "0.1.0";
              sha256 =
                "6d8dd87a04e75aabc05ec6bd547c8256cf7dc311221f98bc23c4a69c4914788f";
            };
            beamDeps  = [ credo_0_9_3 porcelain_2_0_3 ];

            meta = {
              longDescription = ''Elixir Linter is an engine for quickly and
                                easily running Credo code quality evaluation
                                against any project! Learn more about Credo
                                here: https://github.com/rrrene/credo'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SophieDeBenedetto/elixir_linter";
            };
          } // packageOverrides)
      ) {};

    elixir_linter = elixir_linter_0_1_0;

    elixir_locker_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, locker_1_0_8 }:
          buildMix ({
            name = "elixir_locker";
            version = "0.1.4";
            src = fetchHex {
              pkg = "elixir_locker";
              version = "0.1.4";
              sha256 =
                "cca190b5846f37dfaaa495981b92e34015ca0dd0a879d200be90333f3866ceb2";
            };
            beamDeps  = [ locker_1_0_8 ];

            meta = {
              description = ''Elixir wrapper for the locker Erlang library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/elixir_locker";
            };
          } // packageOverrides)
      ) {};

    elixir_locker = elixir_locker_0_1_4;

    elixir_make_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_make";
            version = "0.4.1";
            src = fetchHex {
              pkg = "elixir_make";
              version = "0.4.1";
              sha256 =
                "d1f7e3df73e3beaf8784d6f6027230af524cf78c9860623a55d84fe85fae5ee4";
            };

            meta = {
              description = ''A Make compiler for Mix'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/elixir_make";
            };
          } // packageOverrides)
      ) {};

    elixir_make_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_make";
            version = "0.4.2";
            src = fetchHex {
              pkg = "elixir_make";
              version = "0.4.2";
              sha256 =
                "727834332ec92c69d91d1111f2de8519b459bce6730db2c0e0c2f46c7fd29374";
            };

            meta = {
              description = ''A Make compiler for Mix'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/elixir_make";
            };
          } // packageOverrides)
      ) {};

    elixir_make = elixir_make_0_4_2;

    elixir_max72xx_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_6_2 }:
          buildMix ({
            name = "elixir_max72xx";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_max72xx";
              version = "0.1.2";
              sha256 =
                "ccbd9b9b5a3bce8610ec14687285395aee908989191f671f5332f0935ef30136";
            };
            beamDeps  = [ elixir_ale_0_6_2 ];

            meta = {
              longDescription = ''Hex package to use 8x8 LED matrix or
                                7-segment displays with MAX72XX microchip in
                                Elixir/Nerves projects. Uses elixir_ale SPI
                                protocol for communication'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/konstantinzolotarev/elixir_max72xx";
            };
          } // packageOverrides)
      ) {};

    elixir_max72xx = elixir_max72xx_0_1_2;

    elixir_mbcs_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_mbcs";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_mbcs";
              version = "0.1.2";
              sha256 =
                "45d2572ed4c2bae10e961ddf95846ffd64f83ed7427898b8fdf3221607f610b5";
            };

            meta = {
              description = ''Convert the character encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/woxtu/elixir-mbcs";
            };
          } // packageOverrides)
      ) {};

    elixir_mbcs = elixir_mbcs_0_1_2;

    elixir_mock_0_2_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "elixir_mock";
            version = "0.2.8";
            src = fetchHex {
              pkg = "elixir_mock";
              version = "0.2.8";
              sha256 =
                "55228c66407cddf810a8c56849b98a3f99ee7618dc3f73ae12a9844e88b349b6";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              longDescription = ''Creates inspectable mocks (test doubles)
                                based on real elixir modules for testing.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wanderanimrod/elixir_mock";
            };
          } // packageOverrides)
      ) {};

    elixir_mock = elixir_mock_0_2_8;

    elixir_mod_event_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "elixir_mod_event";
            version = "0.0.10";
            src = fetchHex {
              pkg = "elixir_mod_event";
              version = "0.0.10";
              sha256 =
                "65b94a3988b6486b6d89e1ec9c88f64265bf138f20e1f724f663505f6cd3e3e5";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              longDescription = ''Elixir client for FreeSWITCH
                                mod_event_socket. Find the user guide in the
                                github repo at:
                                https://github.com/marcelog/elixir_mod_event.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_mod_event";
            };
          } // packageOverrides)
      ) {};

    elixir_mod_event = elixir_mod_event_0_0_10;

    elixir_nsq_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0,
          socket_0_3_13,
          uuid_1_1_8
        }:
          buildMix ({
            name = "elixir_nsq";
            version = "1.1.0";
            src = fetchHex {
              pkg = "elixir_nsq";
              version = "1.1.0";
              sha256 =
                "2799ff5dcff537c8a66784fa157393734d5a892edd115729f6497aca49c07957";
            };
            beamDeps  = [
                          httpotion_3_1_0 poison_3_1_0 socket_0_3_13 uuid_1_1_8
                        ];

            meta = {
              longDescription = ''A client library for NSQ, `elixir_nsq` aims
                                to be complete, easy to use, and well tested.
                                Developed at Wistia (http://wistia.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wistia/elixir_nsq";
            };
          } // packageOverrides)
      ) {};

    elixir_nsq = elixir_nsq_1_1_0;

    elixir_pins_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sshex_2_1_0 }:
          buildMix ({
            name = "elixir_pins";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elixir_pins";
              version = "0.0.1";
              sha256 =
                "a311cf7a09eab691a85fbaaa5f661833f79e1ab3bcf7cf368567c56bc9eb60c0";
            };
            beamDeps  = [ sshex_2_1_0 ];

            meta = {
              description = ''Elixir interface for Raspberry Pi GPIO pins.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MainShayne233/elixir_pins";
            };
          } // packageOverrides)
      ) {};

    elixir_pins = elixir_pins_0_0_1;

    elixir_prelude_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_prelude";
            version = "0.2.1";
            src = fetchHex {
              pkg = "elixir_prelude";
              version = "0.2.1";
              sha256 =
                "178d8de9762447e8f8271bd6af356a171af9fb7c20fcd4fa510a05e19b24240d";
            };

            meta = {
              description = ''Small set of useful utility functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/elixir_prelude";
            };
          } // packageOverrides)
      ) {};

    elixir_prelude = elixir_prelude_0_2_1;

    elixir_qlib_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_qlib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elixir_qlib";
              version = "0.1.1";
              sha256 =
                "abca629322973c243b1af1a4089cebca487326bb381d57c07cd00ee78b6bbd3e";
            };

            meta = {
              description = ''A simple queue abstraction library to support
                            leasing and buffering in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rhumbertgz/elixir_qlib";
            };
          } // packageOverrides)
      ) {};

    elixir_qlib = elixir_qlib_0_1_1;

    elixir_quality_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_quality";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_quality";
              version = "0.1.0";
              sha256 =
                "c98a77dbd58587ac3c0a1016bf102224eae1e25fb3f485cc6b7af62b390ca391";
            };

            meta = {
              description = ''A collection of code quality tools'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/atmd83/elixir_quality";
            };
          } // packageOverrides)
      ) {};

    elixir_quality = elixir_quality_0_1_0;

    elixir_radius_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_radius";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_radius";
              version = "0.1.0";
              sha256 =
                "40f4c2a792c5967e21d4e7914a91a62fbed3712bf9c6ec5f0a549e659e4ddc94";
            };

            meta = {
              description = ''Decode & encode RADIUS packets '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bearice/elixir-radius";
            };
          } // packageOverrides)
      ) {};

    elixir_radius = elixir_radius_0_1_0;

    elixir_script_0_32_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, estree_2_6_1 }:
          buildMix ({
            name = "elixir_script";
            version = "0.32.1";
            src = fetchHex {
              pkg = "elixir_script";
              version = "0.32.1";
              sha256 =
                "fceb666062a4959a93fd5dd8b4ed78bdab12a20bd1387a9a6ce9ce17d5628546";
            };
            beamDeps  = [ estree_2_6_1 ];

            meta = {
              description = ''ElixirScript: compiles Elixir code to
                            JavaScript'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixirscript/elixirscript";
            };
          } // packageOverrides)
      ) {};

    elixir_script = elixir_script_0_32_1;

    elixir_script_react_16_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_script_0_32_1
        }:
          buildMix ({
            name = "elixir_script_react";
            version = "16.2.0";
            src = fetchHex {
              pkg = "elixir_script_react";
              version = "16.2.0";
              sha256 =
                "3aee792220b0d6ccb0c7fa89723c330ad18df54d3e64a4ecb91dbb41ed658575";
            };
            beamDeps  = [ elixir_script_0_32_1 ];

            meta = {
              description = ''React library for ElixirScript'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixirscript/elixirscript_react";
            };
          } // packageOverrides)
      ) {};

    elixir_script_react = elixir_script_react_16_2_0;

    elixir_script_web_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_script_0_32_1
        }:
          buildMix ({
            name = "elixir_script_web";
            version = "0.2.0";
            src = fetchHex {
              pkg = "elixir_script_web";
              version = "0.2.0";
              sha256 =
                "52c74adced9e989d8d421c0c96ee76a6be5e98ef6c48c727815cc64f82e31eb5";
            };
            beamDeps  = [ elixir_script_0_32_1 ];

            meta = {
              description = ''Web APIs for ElixirScript'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixirscript/elixirscript_web";
            };
          } // packageOverrides)
      ) {};

    elixir_script_web = elixir_script_web_0_2_0;

    elixir_sense_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_sense";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_sense";
              version = "1.0.0";
              sha256 =
                "6a3baef02859e3e1a7d6f355ad6a4fc962ec56cb0f396a8be2bd8091aaa28821";
            };

            meta = {
              longDescription = ''An API/Server for Elixir projects that
                                provides context-aware information for code
                                completion, documentation, go/jump to
                                definition, signature info and more.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msaraiva/elixir_sense";
            };
          } // packageOverrides)
      ) {};

    elixir_sense = elixir_sense_1_0_0;

    elixir_socks5_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_13 }:
          buildMix ({
            name = "elixir_socks5";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elixir_socks5";
              version = "0.1.1";
              sha256 =
                "a882f776e27a51b2f4b7bb32614f7127ab55348c7a23753ae2c8b92586fb13c7";
            };
            beamDeps  = [ socket_0_3_13 ];

            meta = {
              longDescription = ''Yet another socks5 server implementation when
                                running alone(iex -S mix), it will listen on
                                port 9898 import in your project and start it
                                with SocksServer.Listener.Sup.start_link(9898)
                                Project is published with MIT License'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eminarcissus/elixir_socks5";
            };
          } // packageOverrides)
      ) {};

    elixir_socks5 = elixir_socks5_0_1_1;

    elixir_spain_phone_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_spain_phone";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_spain_phone";
              version = "0.1.0";
              sha256 =
                "91d953a975770ab064e307c19c902e7d7ebe362e19c64e496588d6033a1159ba";
            };

            meta = {
              description = ''Package for validating and generating Spanish
                            phone numbers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nevadajames/elixir_spain_phone";
            };
          } // packageOverrides)
      ) {};

    elixir_spain_phone = elixir_spain_phone_0_1_0;

    elixir_style_guide_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_style_guide";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_style_guide";
              version = "0.1.0";
              sha256 =
                "f88892a54282f72f2fb2fe3e7ccd9a9a820ba117ccbad288cc003a54e0e66f0b";
            };

            meta = {
              description = ''A community driven style guide for Elixir'';
              license = stdenv.lib.licenses.free;
              homepage =
                "https://github.com/christopheradams/elixir_style_guide";
            };
          } // packageOverrides)
      ) {};

    elixir_style_guide = elixir_style_guide_0_1_0;

    elixir_talk_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          yamerl_0_4_0,
          yaml_elixir_1_3_2
        }:
          buildMix ({
            name = "elixir_talk";
            version = "1.2.0";
            src = fetchHex {
              pkg = "elixir_talk";
              version = "1.2.0";
              sha256 =
                "3aa1e22c7f159cb7bf0727b1ab9d070f4348a824a19ac360fca139b5ef38646b";
            };
            beamDeps  = [ connection_1_0_4 yamerl_0_4_0 yaml_elixir_1_3_2 ];

            meta = {
              description = ''ElixirTalk is an Elixir client for beanstalkd.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jsvisa/elixir_talk";
            };
          } // packageOverrides)
      ) {};

    elixir_talk = elixir_talk_1_2_0;

    elixir_tea_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_tea";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_tea";
              version = "1.0.0";
              sha256 =
                "c1e46d2d7b07a926ba8730452f517db45cf4f8f35d119b84aa0f0f676048cdcc";
            };

            meta = {
              description = ''A TEA (Tiny Encryption Algorithm) implemented in
                            pure Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/elixir_tea";
            };
          } // packageOverrides)
      ) {};

    elixir_tea = elixir_tea_1_0_0;

    elixir_tictactoe_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_tictactoe";
            version = "0.3.2";
            src = fetchHex {
              pkg = "elixir_tictactoe";
              version = "0.3.2";
              sha256 =
                "17908259b577251bbf5b0ffcfbb1ea4ddd826eb21a05a401b8624777013d4a96";
            };

            meta = {
              description = ''Core library to build a tictactoe app'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andreamazza89/elixir_ttt_core";
            };
          } // packageOverrides)
      ) {};

    elixir_tictactoe = elixir_tictactoe_0_3_2;

    elixir_uuid_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_uuid";
            version = "1.2.0";
            src = fetchHex {
              pkg = "elixir_uuid";
              version = "1.2.0";
              sha256 =
                "e4d6e26434471761ed45a3545239da87af7b70904dd4442a55f87d06b137c56b";
            };

            meta = {
              description = ''UUID generator and utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zyro/elixir-uuid";
            };
          } // packageOverrides)
      ) {};

    elixir_uuid = elixir_uuid_1_2_0;

    elixir_v8_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "elixir_v8";
            version = "0.3.0";
            src = fetchHex {
              pkg = "elixir_v8";
              version = "0.3.0";
              sha256 =
                "cac97dfeaaaebd06dd7735d66c2b1223898bc38e5821e7236e5f2bfe63b80421";
            };
            beamDeps  = [ exjsx_3_2_1 poolboy_1_5_1 ];

            meta = {
              description = ''V8 engine for Elixir with pools.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/le0pard/elixir_v8";
            };
          } // packageOverrides)
      ) {};

    elixir_v8 = elixir_v8_0_3_0;

    elixir_weather_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          hackney_1_8_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "elixir_weather";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_weather";
              version = "0.1.0";
              sha256 =
                "de921e8fc37f80cb8bde62be3b2ae0df787db74a6fe5880e069ad2f8c969aab0";
            };
            beamDeps  = [ floki_0_17_2 hackney_1_8_0 httpoison_0_11_2 ];

            meta = {
              description = ''Page parser for weather sites'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpran/elixir-weather";
            };
          } // packageOverrides)
      ) {};

    elixir_weather = elixir_weather_0_1_0;

    elixir_weather_slack_bot_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_weather_0_1_0,
          hackney_1_8_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "elixir_weather_slack_bot";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_weather_slack_bot";
              version = "0.1.2";
              sha256 =
                "9ad44845a036c4c677a7d8eb2f750f372ebc1920df23efb6d4bd348b2de23392";
            };
            beamDeps  = [ elixir_weather_0_1_0 hackney_1_8_0 httpoison_0_11_2
                      ];

            meta = {
              description = ''Slack bot hndler for weather'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpran/elixir-weather-slack-bot";
            };
          } // packageOverrides)
      ) {};

    elixir_weather_slack_bot = elixir_weather_slack_bot_0_1_2;

    elixir_wit_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "elixir_wit";
            version = "2.0.0";
            src = fetchHex {
              pkg = "elixir_wit";
              version = "2.0.0";
              sha256 =
                "47fe0047731dd28f69d3fb48c213bf96b0afa94953291f9e24483ae8ca2d2808";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_1_0 uuid_1_1_8 ];

            meta = {
              longDescription = ''Elixir client for the Wit API. Wit is the
                                natural language engine for creating Bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zabirauf/elixir_wit";
            };
          } // packageOverrides)
      ) {};

    elixir_wit = elixir_wit_2_0_0;

    elixir_xml_to_map_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_2 }:
          buildMix ({
            name = "elixir_xml_to_map";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_xml_to_map";
              version = "0.1.2";
              sha256 =
                "a134d24496ebb25e1ab7027bba18a3be1f91f44aa3e6701bdc6ea5807d98ef0a";
            };
            beamDeps  = [ erlsom_1_4_2 ];

            meta = {
              description = ''A module for converting an XML string to a map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/homanchou/elixir-xml-to-map";
            };
          } // packageOverrides)
      ) {};

    elixir_xml_to_map = elixir_xml_to_map_0_1_2;

    elixirc_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "elixirc";
            version = "0.2.2";
            src = fetchHex {
              pkg = "elixirc";
              version = "0.2.2";
              sha256 =
                "4977828f1cdd405306a5c21343e86aa71fd65f831d232bcb79b048ea323137d0";
            };
            beamDeps  = [ gen_stage_0_14_0 httpoison_0_11_2 ];

            meta = {
              description = ''An Elixir IRC module providing GenStage/callback
                            based IRC Clients.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henry232323/elixirc/";
            };
          } // packageOverrides)
      ) {};

    elixirc = elixirc_0_2_2;

    elixirfm_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "elixirfm";
            version = "0.1.3";
            src = fetchHex {
              pkg = "elixirfm";
              version = "0.1.3";
              sha256 =
                "17d37320e52e124a754e0cb546bf00dca1da28fb74670798686cdb8456a424a9";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Lastfm API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jrichocean/Elixirfm";
            };
          } // packageOverrides)
      ) {};

    elixirfm = elixirfm_0_1_3;

    elixirway_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixirway";
            version = "0.1.4";
            src = fetchHex {
              pkg = "elixirway";
              version = "0.1.4";
              sha256 =
                "35c923f3e03fc04a10fe578ecde83703f29f43de39314bfc17393cbd6b2f614e";
            };

            meta = {
              description = ''A piglatin translator written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spilth/elixirway";
            };
          } // packageOverrides)
      ) {};

    elixirway = elixirway_0_1_4;

    elixlsx_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixlsx";
            version = "0.4.0";
            src = fetchHex {
              pkg = "elixlsx";
              version = "0.4.0";
              sha256 =
                "518790e7492a9d6556d075fcb5385d16d0bd51357c5a25d6b94bd4d6924b8add";
            };

            meta = {
              description = ''a writer for XLSX spreadsheet files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xou/elixlsx";
            };
          } // packageOverrides)
      ) {};

    elixlsx = elixlsx_0_4_0;

    elixml_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixml";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elixml";
              version = "0.1.1";
              sha256 =
                "10802a1a02dbbc64fde4f2f55398d01306e75e73b6f6f15c63dd17e4affd96f3";
            };

            meta = {
              description = ''Easy to use xml lib. Allow to parse, compose and
                            generate xml data'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mlankenau/elixml";
            };
          } // packageOverrides)
      ) {};

    elixml = elixml_0_1_1;

    elixplane_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixplane";
            version = "0.4.0";
            src = fetchHex {
              pkg = "elixplane";
              version = "0.4.0";
              sha256 =
                "99a2aac94c85f60d31119874d05e8937aba952d8de1d07f499634b86c856ee6e";
            };

            meta = {
              description = ''An X-Plane network interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/robinhilliard/elixplane";
            };
          } // packageOverrides)
      ) {};

    elixplane = elixplane_0_4_0;

    elixtagram_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauth2_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "elixtagram";
            version = "0.6.0";
            src = fetchHex {
              pkg = "elixtagram";
              version = "0.6.0";
              sha256 =
                "8bae37d9f56a53acbc8a761d7dcd2d6469706a4e6dbccf5ade7be70f54dcd4cd";
            };
            beamDeps  = [ httpoison_0_11_2 oauth2_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Instagram client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/elixtagram";
            };
          } // packageOverrides)
      ) {};

    elixtagram = elixtagram_0_6_0;

    elixush_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, zipper_1_0_1 }:
          buildMix ({
            name = "elixush";
            version = "0.0.4";
            src = fetchHex {
              pkg = "elixush";
              version = "0.0.4";
              sha256 =
                "3f84a78f5834b8b2f2cd4675945752aaea388585095c4bc766d32c8228d2e6d8";
            };
            beamDeps  = [ zipper_1_0_1 ];

            meta = {
              description = ''A simple Push programming language interpreter
                            implemented in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfb/elixush";
            };
          } // packageOverrides)
      ) {};

    elixush = elixush_0_0_4;

    eljiffy_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jiffy_0_15_2 }:
          buildMix ({
            name = "eljiffy";
            version = "1.0.0";
            src = fetchHex {
              pkg = "eljiffy";
              version = "1.0.0";
              sha256 =
                "75408bb7d607c6e791e07f34c28af39bf11203b8061398a9b7e5657050908fcd";
            };
            beamDeps  = [ jiffy_0_15_2 ];

            meta = {
              longDescription = ''An Elixir wrapper around the erlang json nifs
                                library, Jiffy (github.com/davisp/jiffy)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lilrooness/eljiffy";
            };
          } // packageOverrides)
      ) {};

    eljiffy = eljiffy_1_0_0;

    elli_1_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli";
            version = "1.0.5";
            src = fetchHex {
              pkg = "elli";
              version = "1.0.5";
              sha256 =
                "fb55bab884f1d921f2e86c00738909a9e56aca14604e617b138e163093609c97";
            };

            meta = {
              description = ''Erlang web server for HTTP APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli";
            };
          } // packageOverrides)
      ) {};

    elli_cookie_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, elli_1_0_5 }:
          buildRebar3 ({
            name = "elli_cookie";
            version = "0.1.7";
            src = fetchHex {
              pkg = "elli_cookie";
              version = "0.1.7";
              sha256 =
                "b3ac3ed5f3d02f0de28668484659362d30539a74bbcf926ad216d3d89587bebd";
            };

            beamDeps  = [ elli_1_0_5 ];

            meta = {
              description = ''Cookies for Elli.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli_cookie";
            };
          } // packageOverrides)
      ) {};

    elli_cookie_0_2_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli_cookie";
            version = "0.2.9";
            src = fetchHex {
              pkg = "elli_cookie";
              version = "0.2.9";
              sha256 =
                "0b8362e93e718153649f2ab1eeda82bb368b9d872dcb21141c72a5fd7cb8a97d";
            };

            meta = {
              description = ''Cookies for Elli.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli_cookie";
            };
          } // packageOverrides)
      ) {};

    elli_cookie = elli_cookie_0_2_9;

    elli_date_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli_date";
            version = "1.1.1";
            src = fetchHex {
              pkg = "elli_date";
              version = "1.1.1";
              sha256 =
                "a78a1eb846395e3e2d96ce5924ed3d4147e792ea72e167a649de0fd4fb37a662";
            };

            meta = {
              description = ''Elli middleware adding the Date header.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli_date";
            };
          } // packageOverrides)
      ) {};

    elli_date = elli_date_1_1_1;

    elm_compile_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elm_compile";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elm_compile";
              version = "0.1.0";
              sha256 =
                "487ab60cf1d270fb9841ff1fe7c35c6194e3cea5f0db1c3d88d039753719be8b";
            };

            meta = {
              description = ''Simple elm compile hook-in for Mix projects'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ErikMejerHansen/elm_compile";
            };
          } // packageOverrides)
      ) {};

    elm_compile = elm_compile_0_1_0;

    elmer_0_0_14 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elmer";
            version = "0.0.14";
            src = fetchHex {
              pkg = "elmer";
              version = "0.0.14";
              sha256 =
                "7f4c43c32fa0e20d2e6f42bd4737286d30b84b198b2afe6561041be0ee3d76f0";
            };

            meta = {
              description = ''Helper mix tasks for generating elm files like
                            Main, Ports, Models, Msgs, etc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanjohnson320/elmer";
            };
          } // packageOverrides)
      ) {};

    elmer = elmer_0_0_14;

    elmxir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elmxir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elmxir";
              version = "0.0.1";
              sha256 =
                "65ad59b4922b75fb7b6c888f3e5c7dea1d01a4a085a376261bcaa3cfd6ce0845";
            };

            meta = {
              description = ''Helper functions for working with Elm + Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/NoRedInk/elmxir";
            };
          } // packageOverrides)
      ) {};

    elmxir = elmxir_0_0_1;

    elo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elo";
              version = "0.1.0";
              sha256 =
                "2de825e49a309fc3ff88ad82b2bd51407b2037775ca746701c1c96753fc97bf0";
            };

            meta = {
              description = ''Calculate Elo ratings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulfri/elo";
            };
          } // packageOverrides)
      ) {};

    elo = elo_0_1_0;

    elru_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elru";
            version = "1.1.0";
            src = fetchHex {
              pkg = "elru";
              version = "1.1.0";
              sha256 =
                "f40b4a3218bde342a3c4d5a3f1efb8fe0456f0033b18b0209a4916a704f47f6e";
            };

            meta = {
              description = ''Implements LRU cache in Erlang OTP application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Biunovich/ELRU";
            };
          } // packageOverrides)
      ) {};

    elru = elru_1_1_0;

    elxparser_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elxparser";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elxparser";
              version = "0.0.1";
              sha256 =
                "512fa6e23131e2a6204b0b763e3f6bd7e2ebdbc3f2ee1008dc99a824f5e60b86";
            };

            meta = {
              description = ''An Elixir Parser Combinator Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kmizu/elxparser";
            };
          } // packageOverrides)
      ) {};

    elxparser = elxparser_0_0_1;

    em_7_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "em";
            version = "7.2.2";
            src = fetchHex {
              pkg = "em";
              version = "7.2.2";
              sha256 =
                "142496d9380a1f45d041ca3ea5f45c8add233a230b61879a50542c49d0d41010";
            };

            meta = {
              description = ''An EasyMock inspired mocking library for
                            erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sheyll/erlymock";
            };
          } // packageOverrides)
      ) {};

    em = em_7_2_2;

    email_checker_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_13 }:
          buildMix ({
            name = "email_checker";
            version = "0.1.2";
            src = fetchHex {
              pkg = "email_checker";
              version = "0.1.2";
              sha256 =
                "c4e330cb37884f1616d7abf66ceada366ddc9d41c02204144e9c2ceca33ecf14";
            };
            beamDeps  = [ socket_0_3_13 ];

            meta = {
              longDescription = ''Simple library checking the validity of an
                                email. Checks are performed in the following
                                order: - REGEX: validate the emails has a good
                                looking format - MX: validate the domain sever
                                contains MX records - SMTP: validate the SMTP
                                behind the MX records knows this email address
                                (no email sent)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jshmrtn/email_checker";
            };
          } // packageOverrides)
      ) {};

    email_checker = email_checker_0_1_2;

    email_guard_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "email_guard";
            version = "1.1.2";
            src = fetchHex {
              pkg = "email_guard";
              version = "1.1.2";
              sha256 =
                "242e0c6118b162f432dccd208a4d74c1ddc4ed9c2eeeb1135e33fdbbb2d5cb7b";
            };

            meta = {
              description = ''Detect disposable or personal email addresses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/heresydev/email_guard";
            };
          } // packageOverrides)
      ) {};

    email_guard = email_guard_1_1_2;

    emay_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "emay";
            version = "1.0.1";
            src = fetchHex {
              pkg = "emay";
              version = "1.0.1";
              sha256 =
                "eaf0948b4fcfa2dc2bf05eb356c8df8b6c852debab38a4ab5bb1d48b1011ee1f";
            };
            beamDeps  = [ httpoison_0_13_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''Send SM via Emay(亿美软通)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ZhuyiHome/emay";
            };
          } // packageOverrides)
      ) {};

    emay = emay_1_0_1;

    emeck_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "emeck";
            version = "1.0.0";
            src = fetchHex {
              pkg = "emeck";
              version = "1.0.0";
              sha256 =
                "b502dda5cdb6a0dd5a892e6d6f25b5dba038f2afd67d25a4dfaae5c87233bab7";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {
              description = ''A Mocking library for Elixir language. It`s
                            implemented based on meck.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bencode/emeck";
            };
          } // packageOverrides)
      ) {};

    emeck = emeck_1_0_0;

    eml_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eml";
            version = "0.7.1";
            src = fetchHex {
              pkg = "eml";
              version = "0.7.1";
              sha256 =
                "f03a35e2684455ee9e8b641f9550d41893f5b013c1277751685414f56cee9c0a";
            };

            meta = {
              longDescription = ''Eml makes markup a first class citizen in
                                Elixir. It provides a flexible and modular
                                toolkit for generating, parsing and manipulating
                                markup. It`s main focus is html, but other
                                markup languages could be implemented as well.
                                '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zambal/eml";
            };
          } // packageOverrides)
      ) {};

    eml = eml_0_7_1;

    emo_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "emo";
            version = "0.3.1";
            src = fetchHex {
              pkg = "emo";
              version = "0.3.1";
              sha256 =
                "52702d50dd8529b3c5df58d5f02c6851d1ecc85d4045dc97f3d21ec686659e72";
            };

            meta = {
              description = ''Erlang Mustache template rendering library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/cvik/emo";
            };
          } // packageOverrides)
      ) {};

    emo = emo_0_3_1;

    emodel_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "emodel";
            version = "1.6.0";
            src = fetchHex {
              pkg = "emodel";
              version = "1.6.0";
              sha256 =
                "b3968b1d92d67f527b42af0f984ad84062104ecede52c69a9e9ca99b73a3e66b";
            };

            meta = {
              description = ''Erlang data transformation/validation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/emodel";
            };
          } // packageOverrides)
      ) {};

    emodel = emodel_1_6_0;

    emoj_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "emoj";
            version = "1.0.1";
            src = fetchHex {
              pkg = "emoj";
              version = "1.0.1";
              sha256 =
                "b4e738eb6104fa7f52a3f25d065ea82cdb4813bb8e7f1934fb193533c02e453b";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Find relevant emoji from text'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/emoj";
            };
          } // packageOverrides)
      ) {};

    emoj = emoj_1_0_1;

    emojix_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "emojix";
            version = "0.1.2";
            src = fetchHex {
              pkg = "emojix";
              version = "0.1.2";
              sha256 =
                "430ad83fe1831850ec2384b8c076946f922625cdac5d1e4e7156a2b6a35594ca";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''An elixir library that converts emoji in char or
                            svg. 💩'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ukita/emojix";
            };
          } // packageOverrides)
      ) {};

    emojix = emojix_0_1_2;

    emr_adapter_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          sweet_xml_0_6_5,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "emr_adapter";
            version = "0.1.1";
            src = fetchHex {
              pkg = "emr_adapter";
              version = "0.1.1";
              sha256 =
                "13e5032c9053ea474781cc96e807446c1250d8ed04bd4f5608f312e7b37f2e08";
            };
            beamDeps  = [ httpoison_0_13_0 sweet_xml_0_6_5 xml_builder_2_1_0
                      ];

            meta = {
              description = ''Emr Adapter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zentechnamhoang/emr_adapter";
            };
          } // packageOverrides)
      ) {};

    emr_adapter = emr_adapter_0_1_1;

    enchufeweb_0_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, websocket_client_1_3_0
        }:
          buildMix ({
            name = "enchufeweb";
            version = "0.2.1";
            src = fetchHex {
              pkg = "enchufeweb";
              version = "0.2.1";
              sha256 =
                "26702e5bc9b83a7ae74c9cd0f98ca8c30553e10413bf82cfac5cddf22ccc8ef9";
            };
            beamDeps  = [ websocket_client_1_3_0 ];

            meta = {
              description = ''Websocket Library written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/enchufeweb";
            };
          } // packageOverrides)
      ) {};

    enchufeweb = enchufeweb_0_2_1;

    encore_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "encore";
            version = "0.0.1";
            src = fetchHex {
              pkg = "encore";
              version = "0.0.1";
              sha256 =
                "075a44edf57f8eb4649bbfaca44638ce03b7d84a0cff01a8cb4f9beeb6d553cd";
            };

            meta = {
              longDescription = ''Encore is an elixir library for building
                                temporal expressions as described by Martin
                                Fowler in
                                https://martinfowler.com/apsupp/recurring.pdf'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jnmandal/encore";
            };
          } // packageOverrides)
      ) {};

    encore = encore_0_0_1;

    endo_0_0_1_beta = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "endo";
            version = "0.0.1-beta";
            src = fetchHex {
              pkg = "endo";
              version = "0.0.1-beta";
              sha256 =
                "4fa51c12a63b90147e2f7c2f0ab2668249b240a5f8110d8b31873a4f428821bd";
            };

            meta = {
              description = ''Translates SQL to Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/brianvanburken/endo";
            };
          } // packageOverrides)
      ) {};

    endo = endo_0_0_1_beta;

    enhanced_defstruct_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enhanced_defstruct";
            version = "0.1.1";
            src = fetchHex {
              pkg = "enhanced_defstruct";
              version = "0.1.1";
              sha256 =
                "65734cbd66567cdf9ad5c6ce4281e4cef397ab060a56d1a13b07cd54572f25f5";
            };

            meta = {
              longDescription = ''EnhancedDefstruct is package that helps to
                                create structs without invoking defmodule
                                macro.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amatalai/enhanced_defstruct";
            };
          } // packageOverrides)
      ) {};

    enhanced_defstruct = enhanced_defstruct_0_1_1;

    enmity_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enmity";
            version = "0.1.0";
            src = fetchHex {
              pkg = "enmity";
              version = "0.1.0";
              sha256 =
                "dd269b996a4008bf01f274cab82e57d28c16f4cd098baf0dce5c294d4a9e3fd7";
            };

            meta = {
              description = ''A Discord library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Cantido/enmity";
            };
          } // packageOverrides)
      ) {};

    enmity = enmity_0_1_0;

    eno_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          combine_0_7_0,
          mariaex_0_7_9,
          postgrex_0_13_5
        }:
          buildMix ({
            name = "eno";
            version = "0.0.1";
            src = fetchHex {
              pkg = "eno";
              version = "0.0.1";
              sha256 =
                "217cabaf3d3a4f5e46d9b48a88a2cafded20a04a2f477f6bec37b3a82b40424a";
            };
            beamDeps  = [ combine_0_7_0 mariaex_0_7_9 postgrex_0_13_5 ];

            meta = {
              description = ''lightweight SQL toolkit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/eno";
            };
          } // packageOverrides)
      ) {};

    eno = eno_0_0_1;

    enphex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "enphex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "enphex";
              version = "0.1.1";
              sha256 =
                "f95689a03116725a6a34304edff82103dc1c7e944a7f96a71462c16fa9ed664c";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''An elixir wrapper for enphase api'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/enphex";
            };
          } // packageOverrides)
      ) {};

    enphex = enphex_0_1_1;

    enquirer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enquirer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "enquirer";
              version = "0.1.0";
              sha256 =
                "59445208ad96171f10b2d21bc35032f6f7a49aa4cfd5d13d18f93730c49140bb";
            };

            meta = {
              longDescription = ''Enquirer is a simple module to make is easy
                                to get user input in terminal applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/glasnoster/enquirer";
            };
          } // packageOverrides)
      ) {};

    enquirer = enquirer_0_1_0;

    entropy_string_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "entropy_string";
            version = "1.3.1";
            src = fetchHex {
              pkg = "entropy_string";
              version = "1.3.1";
              sha256 =
                "2de3221da428d7899f7296f881237c9329e0b6f96ad74b8d230bfd050ec30835";
            };

            meta = {
              longDescription = ''Efficiently generate cryptographically strong
                                random strings of specified entropy from various
                                character sets.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EntropyString/Elixir";
            };
          } // packageOverrides)
      ) {};

    entropy_string = entropy_string_1_3_1;

    entropy_string_erl_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "entropy_string_erl";
            version = "1.1.1";
            src = fetchHex {
              pkg = "entropy_string_erl";
              version = "1.1.1";
              sha256 =
                "4bb13883d72efe0da676065f6aafb1d65a0bb3762456e5b7b8776c7b76e03a07";
            };

            meta = {
              longDescription = ''Efficiently generate cryptographically strong
                                random strings of specified entropy from various
                                character sets.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EntropyString/Erlang";
            };
          } // packageOverrides)
      ) {};

    entropy_string_erl = entropy_string_erl_1_1_1;

    enum_parser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enum_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "enum_parser";
              version = "0.1.0";
              sha256 =
                "7203a26cfb2830d5526eac5c6cbba35416574f8c251a31caa2b532676c966208";
            };

            meta = {
              description = ''EnumParser transform enum`s keys'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Matsa59/enum-parser";
            };
          } // packageOverrides)
      ) {};

    enum_parser = enum_parser_0_1_0;

    env_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "env";
            version = "0.2.0";
            src = fetchHex {
              pkg = "env";
              version = "0.2.0";
              sha256 =
                "f1e883acf23f3d504492a0a8fcef453325755cf774f446a38945b4bc1f6c7cf2";
            };

            meta = {
              description = ''Env is an improved application configuration
                            reader for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/env";
            };
          } // packageOverrides)
      ) {};

    env = env_0_2_0;

    env_config_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "env_config";
            version = "0.1.0";
            src = fetchHex {
              pkg = "env_config";
              version = "0.1.0";
              sha256 =
                "07fc2332b99e906f838a1efba77fa6cc0a4bc51a1058761bfab6c836527fd331";
            };

            meta = {
              description = ''Handles fetching values from config with support
                            for runtime ENV loading.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dplummer/env_config";
            };
          } // packageOverrides)
      ) {};

    env_config_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "env_config";
            version = "0.2.0";
            src = fetchHex {
              pkg = "env_config";
              version = "0.2.0";
              sha256 =
                "db40327294a6188e171bafc453dd3e09f00f27944e1b59b539ab8996989d6f12";
            };

            meta = {
              description = ''Handles fetching values from config with support
                            for runtime ENV loading.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dplummer/env_config";
            };
          } // packageOverrides)
      ) {};

    env_config = env_config_0_2_0;

    env_helper_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "env_helper";
            version = "0.0.5";
            src = fetchHex {
              pkg = "env_helper";
              version = "0.0.5";
              sha256 =
                "7f32c90ff6218ef481c0eae30e38a8d39904eda3bef724867f131168a7f9578d";
            };

            meta = {
              description = ''A simple add on to make working with environment
                            variables slightly easier.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manheim/env_helper";
            };
          } // packageOverrides)
      ) {};

    env_helper = env_helper_0_0_5;

    enver_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enver";
            version = "0.0.0";
            src = fetchHex {
              pkg = "enver";
              version = "0.0.0";
              sha256 =
                "e6fe0faa449152a3d66c78caf41499c4bf38b657cc95a50cc0e26f012a3e8592";
            };

            meta = {
              description = ''A utility for managing application & system
                            configuration data.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amorphid/enver-elixir";
            };
          } // packageOverrides)
      ) {};

    enver = enver_0_0_0;

    envex_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, coercion_1_0_0 }:
          buildMix ({
            name = "envex";
            version = "0.1.5";
            src = fetchHex {
              pkg = "envex";
              version = "0.1.5";
              sha256 =
                "fa560c52096ecfdbd120db8ff94335cfaa1b356a7d841c18cd5e277af2284b5d";
            };
            beamDeps  = [ coercion_1_0_0 ];

            meta = {
              description = ''Environment configuration parser. Purely
                            functional, server free.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cnsa/envex";
            };
          } // packageOverrides)
      ) {};

    envex = envex_0_1_5;

    envy_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "envy";
            version = "1.1.1";
            src = fetchHex {
              pkg = "envy";
              version = "1.1.1";
              sha256 =
                "7061eb1a47415fd757145d8dec10dc0b1e48344960265cb108f194c4252c3a89";
            };

            meta = {
              description = ''A package for managing env files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/envy";
            };
          } // packageOverrides)
      ) {};

    envy = envy_1_1_1;

    ep_0_2_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, ast_walk_0_3_0
        }:
          buildRebar3 ({
            name = "ep";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ep";
              version = "0.2.0";
              sha256 =
                "5eefb7d9c19065d85f18b4db519851698024858bb4d529f82774e5c205397a64";
            };

            beamDeps  = [ ast_walk_0_3_0 ];

            meta = {
              description = ''Erlang Protocols'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marianoguerra/ep";
            };
          } // packageOverrides)
      ) {};

    ep = ep_0_2_0;

    epa_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "epa";
            version = "0.1.2";
            src = fetchHex {
              pkg = "epa";
              version = "0.1.2";
              sha256 =
                "aa6043fcbfe5ad52bc1025cfea26240fde59ca71010c539c92d12bbb1be09d5d";
            };

            meta = {
              description = ''Simple helpers to validate your ENV config is
                            correct'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjpoll/epa";
            };
          } // packageOverrides)
      ) {};

    epa = epa_0_1_2;

    eper_0_94_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eper";
            version = "0.94.0";
            src = fetchHex {
              pkg = "eper";
              version = "0.94.0";
              sha256 =
                "8d853792fa61a7fd068fe9c113a8a44bc839e11ad70cb8d5d2884566e3bede39";
            };

            meta = {
              description = ''Erlang Performance and Debugging Tools'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massemanet/eper";
            };
          } // packageOverrides)
      ) {};

    epgpool_1_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgsql_3_2_0,
          lager_3_2_1,
          poolboy_1_4_2
        }:
          buildRebar3 ({
            name = "epgpool";
            version = "1.1.0";
            src = fetchHex {
              pkg = "epgpool";
              version = "1.1.0";
              sha256 =
                "7627eefd73bd8c03a589e38f30bae0c4b60cf629ab2130c2ac9acd7d79dae58b";
            };

            beamDeps  = [ epgsql_3_2_0 lager_3_2_1 poolboy_1_4_2 ];

            meta = {
              description = ''Erlang postgresql pool application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/epgpool";
            };
          } // packageOverrides)
      ) {};

    epgpool_1_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgsql_3_3_0,
          lager_3_2_1,
          poolboy_1_4_2
        }:
          buildRebar3 ({
            name = "epgpool";
            version = "1.1.1";
            src = fetchHex {
              pkg = "epgpool";
              version = "1.1.1";
              sha256 =
                "9ada3e0c9b931f77c325955d82a6b1b2f52e5322438bb8c3182bc48a659673f9";
            };

            beamDeps  = [ epgsql_3_3_0 lager_3_2_1 poolboy_1_4_2 ];

            meta = {
              description = ''Erlang postgresql pool application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/epgpool";
            };
          } // packageOverrides)
      ) {};

    epgpool = epgpool_1_1_1;

    epgsql_3_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epgsql";
            version = "3.2.0";
            src = fetchHex {
              pkg = "epgsql";
              version = "3.2.0";
              sha256 =
                "ff88a419df7b3084e8358538ade8b1844f5d6d18e9fa8c2124acea889720665a";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          } // packageOverrides)
      ) {};

    epgsql_3_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epgsql";
            version = "3.3.0";
            src = fetchHex {
              pkg = "epgsql";
              version = "3.3.0";
              sha256 =
                "732be3676dd3103abdf515d57cfe686b59bf0e4c28f9af16f8c5f2c5a2307ffc";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          } // packageOverrides)
      ) {};

    epgsql_3_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epgsql";
            version = "3.4.0";
            src = fetchHex {
              pkg = "epgsql";
              version = "3.4.0";
              sha256 =
                "5d370c2b007888e1009f27cd7ab346ec4000dc14bf3ad190029bda19ab9d782d";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          } // packageOverrides)
      ) {};

    epgsql_4_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epgsql";
            version = "4.0.1";
            src = fetchHex {
              pkg = "epgsql";
              version = "4.0.1";
              sha256 =
                "7d97afb4a1a02731ec389a9b90e273d41a7f20d35967c59a065a16edc09fe70b";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          } // packageOverrides)
      ) {};

    epgsql_4_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epgsql";
            version = "4.1.0";
            src = fetchHex {
              pkg = "epgsql";
              version = "4.1.0";
              sha256 =
                "098c597ea0c25e995e6cad537e53b1742472ea61d68f98fe01cb1618fe5de595";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          } // packageOverrides)
      ) {};

    epgsql = epgsql_4_1_0;

    ephemeral_2_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bucs_1_0_16 }:
          buildMix ({
            name = "ephemeral";
            version = "2.0.4";
            src = fetchHex {
              pkg = "ephemeral";
              version = "2.0.4";
              sha256 =
                "4b293d80f75f9c4575ff4b9c8e889a56802f40b018bf57e74f19644efee6c850";
            };
            beamDeps  = [ bucs_1_0_16 ];

            meta = {
              description = ''Erlang/Elixir module for managing temporary
                            files'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/ephemeral";
            };
          } // packageOverrides)
      ) {};

    ephemeral = ephemeral_2_0_4;

    epiphany_0_1_0_dev = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "epiphany";
            version = "0.1.0-dev";
            src = fetchHex {
              pkg = "epiphany";
              version = "0.1.0-dev";
              sha256 =
                "38b15e762a4bb8c57a3ef238531dd465113b1019fb5aa63d7c8b38ed579f15f9";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Cassandra driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vptheron/epiphany";
            };
          } // packageOverrides)
      ) {};

    epiphany = epiphany_0_1_0_dev;

    episcina_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, gproc_0_3_1 }:
          buildRebar3 ({
            name = "episcina";
            version = "1.1.0";
            src = fetchHex {
              pkg = "episcina";
              version = "1.1.0";
              sha256 =
                "16238717bfbc8cb226342f6b098bb1fafb48c7547265a10ad3e6e83899abc46f";
            };

            beamDeps  = [ gproc_0_3_1 ];

            meta = {
              description = ''Erlang Connection Pool'';

            };
          } // packageOverrides)
      ) {};

    episcina = episcina_1_1_0;

    epocxy_1_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "epocxy";
            version = "1.1.0";
            src = fetchHex {
              pkg = "epocxy";
              version = "1.1.0";
              sha256 =
                "7f559d654fd5e3b5a64b79953fe06bbf36215c931be81115a418b6b2c9db802f";
            };

            meta = {
              description = ''Erlang Patterns of Concurrency'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/duomark/epocxy";
            };
          } // packageOverrides)
      ) {};

    epocxy = epocxy_1_1_0;

    epoxy_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "epoxy";
            version = "0.0.1";
            src = fetchHex {
              pkg = "epoxy";
              version = "0.0.1";
              sha256 =
                "d63d176a03ce1c9279037012fcb10ca0c5e959badf196cccfe8237c79873ed9d";
            };

            meta = {
              description = ''Epoxy for your data'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/suddenrushofsushi/epoxy";
            };
          } // packageOverrides)
      ) {};

    epoxy = epoxy_0_0_1;

    eqc_ex_1_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eqc_ex";
            version = "1.2.4";
            src = fetchHex {
              pkg = "eqc_ex";
              version = "1.2.4";
              sha256 =
                "2d2895bedf784ffaf11144d25e6ca11a4cfff5b73c35ec6bedd3c5ec5cabc5e9";
            };

            meta = {
              description = ''Wrappers to facilitate using Quviq QuickCheck
                            with Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Quviq/eqc_ex";
            };
          } // packageOverrides)
      ) {};

    eqc_ex_1_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eqc_ex";
            version = "1.4.2";
            src = fetchHex {
              pkg = "eqc_ex";
              version = "1.4.2";
              sha256 =
                "6547e68351624ca5387df7e3332136b07f1be73c5a429c1b4e40436dcad50f38";
            };

            meta = {
              description = ''Wrappers to facilitate using Quviq QuickCheck
                            with Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Quviq/eqc_ex";
            };
          } // packageOverrides)
      ) {};

    eqc_ex = eqc_ex_1_4_2;

    eqrcode_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eqrcode";
            version = "0.1.2";
            src = fetchHex {
              pkg = "eqrcode";
              version = "0.1.2";
              sha256 =
                "84f1aab417f5380f56ea8a45a3bb214cb6c1b1eafc9250708f60aa4b08d4ec0c";
            };

            meta = {
              description = ''Simple QRCode Generator in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SiliconJungles/eqrcode";
            };
          } // packageOverrides)
      ) {};

    eqrcode = eqrcode_0_1_2;

    equery_0_12_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "equery";
            version = "0.12.1";
            src = fetchHex {
              pkg = "equery";
              version = "0.12.1";
              sha256 =
                "3badfe7e20de1c52bf406b69f60f51a2fcd404e287518c95268e242214e7af4d";
            };

            meta = {
              description = ''Sql generator library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/equery";
            };
          } // packageOverrides)
      ) {};

    equery_0_13_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "equery";
            version = "0.13.2";
            src = fetchHex {
              pkg = "equery";
              version = "0.13.2";
              sha256 =
                "d32deb22a0b15008c8f84c301eb7d869c44d7de3e1daeee278d796379d2b91f0";
            };

            meta = {
              description = ''Sql generator library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/equery";
            };
          } // packageOverrides)
      ) {};

    equery = equery_0_13_2;

    equivalex_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "equivalex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "equivalex";
              version = "0.1.4";
              sha256 =
                "e63af7625d18d1be6cb88aaeef5046be6c0b3d7aa8e735a51203ed17076be8ba";
            };

            meta = {
              description = ''constant time polymorphic comparisons'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/equivalex";
            };
          } // packageOverrides)
      ) {};

    equivalex_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "equivalex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "equivalex";
              version = "1.0.1";
              sha256 =
                "26c8f6dd1286a1e552de691c78c8c1ba818a74dfaa247a16f572cb114dccd47c";
            };

            meta = {
              description = ''constant time polymorphic comparisons'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/equivalex";
            };
          } // packageOverrides)
      ) {};

    equivalex = equivalex_1_0_1;

    eredis_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eredis";
            version = "1.1.0";
            src = fetchHex {
              pkg = "eredis";
              version = "1.1.0";
              sha256 =
                "80212b6237e1102e85b672ad7364037b44e3fee95a9c805e77c6cac93480857a";
            };

            meta = {
              description = ''Erlang Redis Client'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    eredis = eredis_1_1_0;

    eredis_cluster_0_5_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eredis_1_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "eredis_cluster";
            version = "0.5.11";
            src = fetchHex {
              pkg = "eredis_cluster";
              version = "0.5.11";
              sha256 =
                "0f5a3658c790626abf6540c040f78de8f1c691fe7ddde3a19283b90e77facaba";
            };
            beamDeps  = [ eredis_1_1_0 poolboy_1_5_1 ];

            meta = {
              description = ''An erlang wrapper for eredis library to support
                            cluster mode'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/eredis_cluster";
            };
          } // packageOverrides)
      ) {};

    eredis_cluster = eredis_cluster_0_5_11;

    erl2ex_0_0_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "erl2ex";
            version = "0.0.9";
            src = fetchHex {
              pkg = "erl2ex";
              version = "0.0.9";
              sha256 =
                "4e49c461ecffc33986bb72a43ae87211fb33fed39077fb522c381b884d189514";
            };

            meta = {
              longDescription = ''Erl2ex is an Erlang to Elixir transpiler,
                                converting well-formed Erlang source to Elixir
                                source with equivalent functionality.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/dazuma/erl2ex";
            };
          } // packageOverrides)
      ) {};

    erl2ex = erl2ex_0_0_9;

    erl_cidr_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erl_cidr";
            version = "1.0.1";
            src = fetchHex {
              pkg = "erl_cidr";
              version = "1.0.1";
              sha256 =
                "8df4f99dd2dd68c3ee3daae90677f6969004692441ad48af704aebdbe80c09eb";
            };

            meta = {
              description = ''CIDR library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/inet_cidr";
            };
          } // packageOverrides)
      ) {};

    erl_cidr = erl_cidr_1_0_1;

    erl_exercism_0_1_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, parse_trans_3_1_0
        }:
          buildRebar3 ({
            name = "erl_exercism";
            version = "0.1.2";
            src = fetchHex {
              pkg = "erl_exercism";
              version = "0.1.2";
              sha256 =
                "056b45bfc9870a6473fb0ce63b8461942e4f2abebe76794e29ce8d791df97278";
            };

            beamDeps  = [ parse_trans_3_1_0 ];

            meta = {
              description = ''An helper library for exercisms erlang
                            exercises'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NobbZ/erl_exercism";
            };
          } // packageOverrides)
      ) {};

    erl_exercism = erl_exercism_0_1_2;

    erlando_3_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlando";
            version = "3.1.1";
            src = fetchHex {
              pkg = "erlando";
              version = "3.1.1";
              sha256 =
                "9633cb4978dbd78827fa76ea4c3b0bd24cfbd4dd9af48088e922e7115494a344";
            };

            meta = {
              description = ''Syntax extensions for Erlang'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/egobrain/erlando";
            };
          } // packageOverrides)
      ) {};

    erlando = erlando_3_1_1;

    erlang_color_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_color";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlang_color";
              version = "1.0.0";
              sha256 =
                "6b17e5e589c8fef540574c9ea32b67cec2c8a44283aafe474d6e5818fb3ee038";
            };

            meta = {
              description = ''ANSI colors for your Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/julianduque/erlang-color";
            };
          } // packageOverrides)
      ) {};

    erlang_color = erlang_color_1_0_0;

    erlang_commons_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_commons";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlang_commons";
              version = "0.1.0";
              sha256 =
                "1e55059ee1b2f3aa9fa6b9e1bfdb636a41929568d5170c4b47f4d49459d70cbe";
            };

            meta = {
              description = ''An OTP library: Erlang Commons like Apache
                            Commons.'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    erlang_commons = erlang_commons_0_1_0;

    erlang_decimal_0_4_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_decimal";
            version = "0.4.3";
            src = fetchHex {
              pkg = "erlang_decimal";
              version = "0.4.3";
              sha256 =
                "72dc9119f895fa2463738674c08a062100eb586707cfbeb9a560cf3d56c62943";
            };

            meta = {
              description = ''Library for fast decimal arithmetics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/decimal";
            };
          } // packageOverrides)
      ) {};

    erlang_decimal = erlang_decimal_0_4_3;

    erlang_decorators_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_decorators";
            version = "0.3.1";
            src = fetchHex {
              pkg = "erlang_decorators";
              version = "0.3.1";
              sha256 =
                "98c20f1764835dc86b7713944c3a352cbedd2780b0b02e1fd978e5cfe047b04c";
            };

            meta = {
              description = ''Erlang decorators parse_transform library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/erlang_decorators";
            };
          } // packageOverrides)
      ) {};

    erlang_decorators = erlang_decorators_0_3_1;

    erlang_localtime_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_localtime";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlang_localtime";
              version = "1.0.0";
              sha256 =
                "46e3f7b18477b377ec71f9dcd91c4d30fe82a128ffa9f89be1595d4d08414844";
            };

            meta = {
              description = ''Erlang library for conversion from one local time
                            to another'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/choptastic/erlang_localtime";
            };
          } // packageOverrides)
      ) {};

    erlang_localtime = erlang_localtime_1_0_0;

    erlang_term_1_5_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_term";
            version = "1.5.3";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.5.3";
              sha256 =
                "80fde641d104008f8cdab02094ac83e2a1b820b55bc9ed522e58f3d173d03a26";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          } // packageOverrides)
      ) {};

    erlang_term_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_term";
            version = "1.5.4";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.5.4";
              sha256 =
                "aafbf46598822251724549d0d1724256cad618e85faf0f2d5c4e8b61f2432937";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          } // packageOverrides)
      ) {};

    erlang_term_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_term";
            version = "1.6.0";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.6.0";
              sha256 =
                "6d43c835c4a88de5e8823ac2c4766c99a5f840a89647ba2d8e7925163179b86e";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          } // packageOverrides)
      ) {};

    erlang_term_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_term";
            version = "1.7.3";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.7.3";
              sha256 =
                "82a9e02f13083ea8179854eaa285bad178c8fe317b21f24643b634b769aab912";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          } // packageOverrides)
      ) {};

    erlang_term = erlang_term_1_7_3;

    erlang_version_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_version";
            version = "0.2.0";
            src = fetchHex {
              pkg = "erlang_version";
              version = "0.2.0";
              sha256 =
                "74daddba65a247ec57913e5de8f243af42bbbc3d6a0c411a1252da81c09ae661";
            };

            meta = {
              description = ''Retrieve Erlang/OTP version like `18.1`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sapporo-beam/erlang_version";
            };
          } // packageOverrides)
      ) {};

    erlang_version = erlang_version_0_2_0;

    erlangzmq_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlangzmq";
            version = "1.1.2";
            src = fetchHex {
              pkg = "erlangzmq";
              version = "1.1.2";
              sha256 =
                "d8069ab63b9488f3d7389b9c18102ecb3e04158e3938b846c850bfee4f8863c2";
            };

            meta = {
              description = ''THIS PROJECT HAS BEEN RENAMED TO chumak.'';
              license = with stdenv.lib.licenses; [ free free ];
              homepage = "https://github.com/chovencorp/erlangzmq";
            };
          } // packageOverrides)
      ) {};

    erlangzmq = erlangzmq_1_1_2;

    erlaudio_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "erlaudio";
            version = "0.2.3";
            src = fetchHex {
              pkg = "erlaudio";
              version = "0.2.3";
              sha256 =
                "cb9efb0ce80faae003ab39f8cc2d3fccbb4bd1c8f5f525aea392f28662517032";
            };

            meta = {
              description = ''Erlang audio bindings to portaudio'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/asonge/erlaudio";
            };
          } // packageOverrides)
      ) {};

    erlaudio = erlaudio_0_2_3;

    erlavro_2_6_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsone_1_4_6 }:
          buildRebar3 ({
            name = "erlavro";
            version = "2.6.3";
            src = fetchHex {
              pkg = "erlavro";
              version = "2.6.3";
              sha256 =
                "bb0ac52470b623d960c846cb566ed0382242075c72dd2b942b72512e7428ae18";
            };

            beamDeps  = [ jsone_1_4_6 ];

            meta = {
              description = ''Apache Avro support for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/erlavro";
            };
          } // packageOverrides)
      ) {};

    erlavro_2_6_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsone_1_4_6 }:
          buildRebar3 ({
            name = "erlavro";
            version = "2.6.4";
            src = fetchHex {
              pkg = "erlavro";
              version = "2.6.4";
              sha256 =
                "b69ffb9e8a07216368dc1b6f85078242ce8c271f8a21597aad1558f4a2f4d7b1";
            };

            beamDeps  = [ jsone_1_4_6 ];

            meta = {
              description = ''Apache Avro support for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/erlavro";
            };
          } // packageOverrides)
      ) {};

    erlavro = erlavro_2_6_4;

    erlbus_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlbus";
            version = "0.2.1";
            src = fetchHex {
              pkg = "erlbus";
              version = "0.2.1";
              sha256 =
                "77a6ebec18cceef418ffe6ebdd6a8868a948b96cf05856a14544a64e6fea2c29";
            };

            meta = {
              description = ''Erlang Message Event Bus'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/erlbus";
            };
          } // packageOverrides)
      ) {};

    erlbus = erlbus_0_2_1;

    erlchronos_2_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlchronos";
            version = "2.0.1";
            src = fetchHex {
              pkg = "erlchronos";
              version = "2.0.1";
              sha256 =
                "b3b2bd1aaba9084d4e997fd508802c98bd5384483ddedc118918a5795bfe6e39";
            };

            meta = {
              description = ''gen_server wrapper with precise ticks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlchronos";
            };
          } // packageOverrides)
      ) {};

    erlchronos = erlchronos_2_0_1;

    erlcloud_2_2_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base16_1_0_0,
          eini_1_2_4,
          jsx_2_8_0,
          lhttpc_1_5_0
        }:
          buildRebar3 ({
            name = "erlcloud";
            version = "2.2.0";
            src = fetchHex {
              pkg = "erlcloud";
              version = "2.2.0";
              sha256 =
                "20833d6438332ff11bcce27818864c37ed57f18c9bd75a16033214fb4612b1ec";
            };

            beamDeps  = [ base16_1_0_0 eini_1_2_4 jsx_2_8_0 lhttpc_1_5_0 ];

            meta = {
              description = ''AWS APIs library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          } // packageOverrides)
      ) {};

    erlcloud_2_2_12 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base16_1_0_0,
          eini_1_2_4,
          jsx_2_8_0,
          lhttpc_1_5_3
        }:
          buildRebar3 ({
            name = "erlcloud";
            version = "2.2.12";
            src = fetchHex {
              pkg = "erlcloud";
              version = "2.2.12";
              sha256 =
                "12c029165941d7ae3a9dcb1b537c7b1bf929fbf95c9d3d803da23b0afa594a62";
            };

            beamDeps  = [ base16_1_0_0 eini_1_2_4 jsx_2_8_0 lhttpc_1_5_3 ];

            meta = {
              description = ''AWS APIs library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          } // packageOverrides)
      ) {};

    erlcloud_3_0_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base16_1_0_0,
          eini_1_2_4,
          jsx_2_8_0,
          lhttpc_1_5_4
        }:
          buildRebar3 ({
            name = "erlcloud";
            version = "3.0.5";
            src = fetchHex {
              pkg = "erlcloud";
              version = "3.0.5";
              sha256 =
                "b2fadb44ac5c0f1d59bd0a5bc482d6229b361a81dd4ad1621160975d60e5fb3b";
            };

            beamDeps  = [ base16_1_0_0 eini_1_2_4 jsx_2_8_0 lhttpc_1_5_4 ];

            meta = {
              description = ''AWS APIs library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          } // packageOverrides)
      ) {};

    erlcloud_3_1_9 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base16_1_0_0,
          eini_1_2_4,
          jsx_2_8_0,
          lhttpc_1_5_4
        }:
          buildRebar3 ({
            name = "erlcloud";
            version = "3.1.9";
            src = fetchHex {
              pkg = "erlcloud";
              version = "3.1.9";
              sha256 =
                "31723727380ba2c061c13564db446896dbe02c3c7ef7e6a1f17a8b3a0b63fe95";
            };

            beamDeps  = [ base16_1_0_0 eini_1_2_4 jsx_2_8_0 lhttpc_1_5_4 ];

            meta = {
              description = ''AWS APIs library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          } // packageOverrides)
      ) {};

    erlcloud = erlcloud_3_1_9;

    erldn_1_0_5 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "erldn";
            version = "1.0.5";
            src = fetchHex {
              pkg = "erldn";
              version = "1.0.5";
              sha256 =
                "b7fdafda24884ab52dc453a18a99ad3d31fa690770d2d50f8e5bdbc3fff0f166";
            };

            meta = {
              description = ''An edn parser for the Erlang platform.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marianoguerra/erldn";
            };
          } // packageOverrides)
      ) {};

    erldn = erldn_1_0_5;

    erlesy_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsx_2_9_0 }:
          buildRebar3 ({
            name = "erlesy";
            version = "1.0.3";
            src = fetchHex {
              pkg = "erlesy";
              version = "1.0.3";
              sha256 =
                "0e8ff6cf337c758183fb1716ab5d08f1c09348ec40f7d6ed48aca50f327b8e0b";
            };

            beamDeps  = [ jsx_2_9_0 ];

            meta = {
              description = ''Visual Erlang development'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/lrascao/rebar3_erlesy";
            };
          } // packageOverrides)
      ) {};

    erlesy = erlesy_1_0_3;

    erlexec_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.1.0";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.1.0";
              sha256 =
                "772162f0f0349f89ea11b9f27401cb437ccaabf480320284a13f2259bb63cb87";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlexec_1_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.2.2";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.2.2";
              sha256 =
                "d12ab523e4ca36998c677c218d55df3a36e877af396d340bcb0d9eaf2504edeb";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlexec_1_6_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.6.4";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.6.4";
              sha256 =
                "4f52a9f49b7349671544476f9233b6b3ea25e5b2f0d122db156698fe4430ce32";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlexec_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.7.1";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.7.1";
              sha256 =
                "2e625e6c155c94a2864859b2a71a370c01dba1eb4f8185c6095e6b8c8e3a9a93";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlexec_1_7_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.7.5";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.7.5";
              sha256 =
                "8cdbee7641bcfdf8481b966d386bc4886f71ee971251bc025840d3ffa6aa550a";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlffx_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlffx";
            version = "1.0.1";
            src = fetchHex {
              pkg = "erlffx";
              version = "1.0.1";
              sha256 =
                "f02dda422268e38949ab1dd1e09de0a5de0b4fa9cacc237b973ebceb9fffca09";
            };

            meta = {
              description = ''Format-Preserving Encryption - FFX'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlffx";
            };
          } // packageOverrides)
      ) {};

    erlffx = erlffx_1_0_1;

    erljson_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erljson";
            version = "0.2.1";
            src = fetchHex {
              pkg = "erljson";
              version = "0.2.1";
              sha256 =
                "8e5d5d2bf3917b0ab4bc2fcc4aecf6b036bcdae9b52f82280dabe37d38786d8c";
            };

            meta = {
              description = ''Erlang json encoder/decoder to/from maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexgal/erl-json.git";
            };
          } // packageOverrides)
      ) {};

    erljson = erljson_0_2_1;

    erlpack_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "erlpack";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlpack";
              version = "1.0.0";
              sha256 =
                "ee67b070ada9d647d791705c2aaf1c7c155ed9c97b10701d59e4c2f19aff698b";
            };

            meta = {
              description = ''High Performance Erlang Term Format Packer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/erlpack";
            };
          } // packageOverrides)
      ) {};

    erlpack = erlpack_1_0_0;

    erlpass_1_0_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bcrypt_1_0_0 }:
          buildRebar3 ({
            name = "erlpass";
            version = "1.0.4";
            src = fetchHex {
              pkg = "erlpass";
              version = "1.0.4";
              sha256 =
                "0f3b6ff0e854a78e6f356364aa91ae7da27fa4dddba633033b67848b37550d38";
            };

            beamDeps  = [ bcrypt_1_0_0 ];

            meta = {
              description = ''Safely handle passwords with bcrypt and Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/erlpass/";
            };
          } // packageOverrides)
      ) {};

    erlpass = erlpass_1_0_4;

    erlport_0_9_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlport";
            version = "0.9.8";
            src = fetchHex {
              pkg = "erlport";
              version = "0.9.8";
              sha256 =
                "df57d99455d4bf2bab83e12f242d4e5513ad094b6c73179a85d084c929ce697c";
            };

            meta = {
              description = ''Erlang port protocol'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/hdima/erlport";
            };
          } // packageOverrides)
      ) {};

    erlport = erlport_0_9_8;

    erlquad_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlquad";
            version = "1.1.1";
            src = fetchHex {
              pkg = "erlquad";
              version = "1.1.1";
              sha256 =
                "6288b06fc971f59cd25f1abb044536d468b86c5dd431ca4ed9f012494c9c0542";
            };

            meta = {
              description = ''Quadtrees for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlquad";
            };
          } // packageOverrides)
      ) {};

    erlquad = erlquad_1_1_1;

    erlsci_getopt_0_8_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlsci_getopt";
            version = "0.8.4";
            src = fetchHex {
              pkg = "erlsci_getopt";
              version = "0.8.4";
              sha256 =
                "f76d5947e9f6e77ae6454c5db8e6549a0ef6c83318fc35e55745a993a82a019b";
            };

            meta = {
              description = ''Command-line options parser for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/erlsci/getopt";
            };
          } // packageOverrides)
      ) {};

    erlsci_getopt = erlsci_getopt_0_8_4;

    erlsh_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlsh";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlsh";
              version = "0.1.0";
              sha256 =
                "94ef1492dd59fef211f01ffd40c47b6e51c0f59e2a3d0739366e4890961332d9";
            };
            compilePorts = true;

            meta = {
              longDescription = ''Family of functions and ports involving
                                interacting with the system shell, paths and
                                external programs.'';

            };
          } // packageOverrides)
      ) {};

    erlsh = erlsh_0_1_0;

    erlsom_1_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlsom";
            version = "1.4.1";
            src = fetchHex {
              pkg = "erlsom";
              version = "1.4.1";
              sha256 =
                "57b777fe2522e342badfa35873b2266c6961e3a9f4d2ac195d761985c40c3247";
            };

            meta = {
              longDescription = ''XML parser. Supports SAX style parsing as
                                well as XML Schema based data mapping: create
                                records from XML (and vice versa)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/willemdj/erlsom";
            };
          } // packageOverrides)
      ) {};

    erlsom_1_4_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlsom";
            version = "1.4.2";
            src = fetchHex {
              pkg = "erlsom";
              version = "1.4.2";
              sha256 =
                "ac989e850a5a4c1641694f77506804710315f3d1193c977a36b223a32859edd3";
            };

            meta = {
              longDescription = ''XML parser. Supports SAX style parsing as
                                well as XML Schema based data mapping: create
                                records from XML (and vice versa)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/willemdj/erlsom";
            };
          } // packageOverrides)
      ) {};

    erlsom = erlsom_1_4_2;

    erlware_commons_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_2 }:
          buildRebar3 ({
            name = "erlware_commons";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "1.0.0";
              sha256 =
                "a77f1beb3e4a0501c7b8bf3db646f88a718c0ad822f96679eb348529f3827772";
            };

            beamDeps  = [ cf_0_2_2 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          } // packageOverrides)
      ) {};

    erlware_commons_1_0_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_2 }:
          buildRebar3 ({
            name = "erlware_commons";
            version = "1.0.4";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "1.0.4";
              sha256 =
                "594d4495dbfb1be8acd4d859d99a89d24f1e863086f9f91c5fac258c6c5c48a2";
            };

            beamDeps  = [ cf_0_2_2 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          } // packageOverrides)
      ) {};

    erlware_commons_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_3_1 }:
          buildRebar3 ({
            name = "erlware_commons";
            version = "1.2.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "1.2.0";
              sha256 =
                "873a7d066c45100dba4a4287e1731678985c0ec1cf4f55e97e9225f6929d3391";
            };

            beamDeps  = [ cf_0_3_1 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          } // packageOverrides)
      ) {};

    erlware_commons = erlware_commons_1_2_0;

    erlydtl_0_11_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlydtl";
            version = "0.11.1";
            src = fetchHex {
              pkg = "erlydtl";
              version = "0.11.1";
              sha256 =
                "b1958c0ec95de69458c6af8b5bffbdde0070d5042710a63b1616cacdf39ae188";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          } // packageOverrides)
      ) {};

    erlydtl_0_12_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlydtl";
            version = "0.12.0";
            src = fetchHex {
              pkg = "erlydtl";
              version = "0.12.0";
              sha256 =
                "a2bd1239f7e964d55f6e1917b64d7ba293377e24aed8c5debbfb5120921f7875";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          } // packageOverrides)
      ) {};

    erlydtl_0_12_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlydtl";
            version = "0.12.1";
            src = fetchHex {
              pkg = "erlydtl";
              version = "0.12.1";
              sha256 =
                "5bf1e474153662d8e17743549cd56828306fdb4ac05c85b4bec1f740bdc7976f";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          } // packageOverrides)
      ) {};

    erlydtl = erlydtl_0_12_1;

    erlydtl2_0_11_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlydtl2";
            version = "0.11.1";
            src = fetchHex {
              pkg = "erlydtl2";
              version = "0.11.1";
              sha256 =
                "ae0d9f293ce8a2eeaabedf2b5f950d21e14570e67e5a38c11fe1e4ca598e6d5b";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          } // packageOverrides)
      ) {};

    erlydtl2 = erlydtl2_0_11_1;

    erlyfix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_2 }:
          buildMix ({
            name = "erlyfix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlyfix";
              version = "0.1.0";
              sha256 =
                "d06d3370dcc54754a6d1a2a203ee288b3fb19991aee80bae25600f98a33cf48c";
            };
            beamDeps  = [ erlsom_1_4_2 ];

            meta = {
              description = ''FIX (Foreign Information Exchange) protocol
                            implementation for Erlang.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basiliscos/erl-erlyfix";
            };
          } // packageOverrides)
      ) {};

    erlyfix = erlyfix_0_1_0;

    erlz_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlz";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlz";
              version = "0.1.0";
              sha256 =
                "7daff757498358c0ad7d950f2d0efdb436f38284bccf0c1e357b4c0a8c848527";
            };

            meta = {
              description = ''Set of helpers functions for more convenient
                            functional programming'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/habibutsu/erlz";
            };
          } // packageOverrides)
      ) {};

    erlz = erlz_0_1_0;

    erlzk_0_6_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlzk";
            version = "0.6.4";
            src = fetchHex {
              pkg = "erlzk";
              version = "0.6.4";
              sha256 =
                "64aa8731fbbbf82b35e5e8c283a1c19e4903e0931d36231d6d6fcb51bc24fe8e";
            };

            meta = {
              description = ''A Pure Erlang ZooKeeper Client (no C
                            dependency)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/huaban/erlzk";
            };
          } // packageOverrides)
      ) {};

    erlzk = erlzk_0_6_4;

    erlzk_pd_0_6_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlzk_pd";
            version = "0.6.4";
            src = fetchHex {
              pkg = "erlzk_pd";
              version = "0.6.4";
              sha256 =
                "5b680488b63a945051f33d481da594615af8d6fee86a6428f7c9c7bd2b644eaf";
            };

            meta = {
              description = ''A Pure Erlang ZooKeeper Client (no C
                            dependency)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/huaban/erlzk";
            };
          } // packageOverrides)
      ) {};

    erlzk_pd = erlzk_pd_0_6_4;

    erlzord_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlzord";
            version = "1.0.2";
            src = fetchHex {
              pkg = "erlzord";
              version = "1.0.2";
              sha256 =
                "f057e22fa49cc16eac05d5241a0cf918ce03a6a44aaf812d584e0c423979e476";
            };

            meta = {
              description = ''N-dimensional Z-order curves'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlzord";
            };
          } // packageOverrides)
      ) {};

    erlzord = erlzord_1_0_2;

    erpcgen_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erpcgen";
            version = "1.1.1";
            src = fetchHex {
              pkg = "erpcgen";
              version = "1.1.1";
              sha256 =
                "b1bbe31c8a1cc9436dd163f884e5a1b73cff27e94484551fed002a992a41d7d8";
            };

            meta = {
              description = ''Erlang RPC stub generator `erpcgen`'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/msantos/erpcgen";
            };
          } // packageOverrides)
      ) {};

    erpcgen = erpcgen_1_1_1;

    errors_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "errors";
            version = "0.1.0";
            src = fetchHex {
              pkg = "errors";
              version = "0.1.0";
              sha256 =
                "3ab09247350300b737672e7be642b672d0407b5436631815c15fd847515a720b";
            };

            meta = {
              longDescription = ''Errors is an Elixir package that adds
                                debugging context to error reasons. It is meant
                                to be used in the tagged tuple style of error
                                handling, where a function may return `{:ok,
                                result}` or `{:error, reason}`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nucleartide/errors";
            };
          } // packageOverrides)
      ) {};

    errors = errors_0_1_0;

    escher_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "escher";
            version = "0.2.0";
            src = fetchHex {
              pkg = "escher";
              version = "0.2.0";
              sha256 =
                "1a857807668adae2b3fd29685fd16d15ae5b2762ea00bf3bef9dace162d40b20";
            };

            meta = {
              description = ''Elixir implementation of Escher Auth'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qw3r/escher-elixir";
            };
          } // packageOverrides)
      ) {};

    escher = escher_0_2_0;

    esel_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esel";
            version = "0.1.2";
            src = fetchHex {
              pkg = "esel";
              version = "0.1.2";
              sha256 =
                "874d1775c86d27d9e88486a37351ffc09f826ef062c8ea211e65d08e103f946c";
            };

            meta = {
              description = ''An wrapper around openssl'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    esel = esel_0_1_2;

    esi_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "esi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "esi";
              version = "0.1.1";
              sha256 =
                "41cdf601512376d4d26777925acde3d616510f1c0b6e38fec1d938473057078b";
            };
            beamDeps  = [ hackney_1_13_0 poison_2_2_0 ];

            meta = {
              description = ''Elixir support for EveOnline Swagger Interface
                            (ESI)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://eveonline.com/bruce/esi";
            };
          } // packageOverrides)
      ) {};

    esi = esi_0_1_1;

    esmpp_0_0_13 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esmpp";
            version = "0.0.13";
            src = fetchHex {
              pkg = "esmpp";
              version = "0.0.13";
              sha256 =
                "469a8aacccfd80ee648c6e8f754a6e6a359fff923c181300c2cf7f8af4c59e21";
            };

            meta = {
              description = ''SMPP client library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/VoyagerInnovations/esmpp";
            };
          } // packageOverrides)
      ) {};

    esmpp = esmpp_0_0_13;

    esnowflake_0_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, eredis_1_1_0 }:
          buildRebar3 ({
            name = "esnowflake";
            version = "0.4.1";
            src = fetchHex {
              pkg = "esnowflake";
              version = "0.4.1";
              sha256 =
                "4739d6769fa8131ca529aa7d611f454b83ef2885c2b3513078c1285ed8d06666";
            };

            beamDeps  = [ eredis_1_1_0 ];

            meta = {
              description = ''Twitter`s Snowflake UUID generator in Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tkyshm/esnowflake";
            };
          } // packageOverrides)
      ) {};

    esnowflake = esnowflake_0_4_1;

    espec_1_4_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_7 }:
          buildMix ({
            name = "espec";
            version = "1.4.5";
            src = fetchHex {
              pkg = "espec";
              version = "1.4.5";
              sha256 =
                "9d23e4a4081fbae18358f0551acf4554bd1cd83297678e1a1ebdfc590f0400e0";
            };
            beamDeps  = [ meck_0_8_7 ];

            meta = {
              description = ''BDD testing framework for Elixir inspired by
                            RSpec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/espec";
            };
          } // packageOverrides)
      ) {};

    espec_1_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_9 }:
          buildMix ({
            name = "espec";
            version = "1.5.1";
            src = fetchHex {
              pkg = "espec";
              version = "1.5.1";
              sha256 =
                "525b6a55c4bd22225015917f9c0f70e685667cf0bd240bb34ef33df7f9c2ba10";
            };
            beamDeps  = [ meck_0_8_9 ];

            meta = {
              description = ''BDD testing framework for Elixir inspired by
                            RSpec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/espec";
            };
          } // packageOverrides)
      ) {};

    espec = espec_1_5_1;

    espec_json_api_matchers_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          espec_1_4_5,
          ignorant_0_1_0
        }:
          buildMix ({
            name = "espec_json_api_matchers";
            version = "0.3.0";
            src = fetchHex {
              pkg = "espec_json_api_matchers";
              version = "0.3.0";
              sha256 =
                "28e49e2c0ca6d5e16b72d0cfebca8c21e3088668e716356610fc8368c72e0739";
            };
            beamDeps  = [ espec_1_4_5 ignorant_0_1_0 ];

            meta = {
              description = ''Custom ESpec matchers to ease testing of JSON API
                            endpoints.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MYOB-Technology/espec_json_api_matchers";
            };
          } // packageOverrides)
      ) {};

    espec_json_api_matchers = espec_json_api_matchers_0_3_0;

    espec_junit_formatter_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, espec_1_5_1 }:
          buildMix ({
            name = "espec_junit_formatter";
            version = "0.1.1";
            src = fetchHex {
              pkg = "espec_junit_formatter";
              version = "0.1.1";
              sha256 =
                "df983b21ccabba647c39e334618dbde7bb02b98b64d7e2c16e6eec93f8911297";
            };
            beamDeps  = [ espec_1_5_1 ];

            meta = {
              description = ''An ESpec formatter for the JUnit XML format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwean/espec_junit_formatter";
            };
          } // packageOverrides)
      ) {};

    espec_junit_formatter = espec_junit_formatter_0_1_1;

    esqlcipher_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esqlcipher";
            version = "1.0.0";
            src = fetchHex {
              pkg = "esqlcipher";
              version = "1.0.0";
              sha256 =
                "f3a47df8cf7277b9352054e96a9745c77aa475a51ea36a18692a437b2af79b0b";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''sqlcipher nif interface'';

            };
          } // packageOverrides)
      ) {};

    esqlcipher = esqlcipher_1_0_0;

    esqlite_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esqlite";
            version = "0.2.3";
            src = fetchHex {
              pkg = "esqlite";
              version = "0.2.3";
              sha256 =
                "115bc72a3a5bb5a723606106e81b5c13ca0d6df2b6902d743eef14869d3d8b05";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''sqlite nif interface'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mmzeeman/esqlite";
            };
          } // packageOverrides)
      ) {};

    esqlite_0_2_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esqlite";
            version = "0.2.4";
            src = fetchHex {
              pkg = "esqlite";
              version = "0.2.4";
              sha256 =
                "232a51e63d0cd2b6b9d3607ac0e8dd24eca022893d8037ad05b7c71e4168ed40";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''sqlite nif interface'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mmzeeman/esqlite";
            };
          } // packageOverrides)
      ) {};

    esqlite = esqlite_0_2_4;

    essence_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exprof_0_2_3 }:
          buildMix ({
            name = "essence";
            version = "0.2.0";
            src = fetchHex {
              pkg = "essence";
              version = "0.2.0";
              sha256 =
                "720a57004a8cf913c2c805bd026e993dd7db3a8b46873e44363dd80948a5ab7f";
            };
            beamDeps  = [ exprof_0_2_3 ];

            meta = {
              longDescription = ''Essence is a library for Natural Language
                                Processing and Text Summarization in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicbet/essence";
            };
          } // packageOverrides)
      ) {};

    essence = essence_0_2_0;

    essex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "essex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "essex";
              version = "0.0.1";
              sha256 =
                "29291708726682279189f0647cf388851887bae0e4430c654ca9d773a6f0841a";
            };

            meta = {
              description = ''Event Sourcing made simple(r)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sunny-g/essex";
            };
          } // packageOverrides)
      ) {};

    essex = essex_0_0_1;

    esshd_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "esshd";
            version = "0.1.0";
            src = fetchHex {
              pkg = "esshd";
              version = "0.1.0";
              sha256 =
                "98d0f3c6f4b8a0333170df770c6fe772b3d04564fb514c1a09504cf5ab2f48a5";
            };

            meta = {
              description = ''A simple way to add SSH server capabilities to
                            your Elixir or Erlang application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jbenden/esshd";
            };
          } // packageOverrides)
      ) {};

    esshd = esshd_0_1_0;

    estore_0_1_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "estore";
            version = "0.1.10";
            src = fetchHex {
              pkg = "estore";
              version = "0.1.10";
              sha256 =
                "97d00de9ae5cde6827a5a74ea0fc7ee24f21150735ab3f68ac9c8dcd35feaf3d";
            };

            meta = {
              description = ''Simple event store'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/estore";
            };
          } // packageOverrides)
      ) {};

    estore = estore_0_1_10;

    estree_2_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "estree";
            version = "2.6.1";
            src = fetchHex {
              pkg = "estree";
              version = "2.6.1";
              sha256 =
                "c669aa3294e1b060323a451fcd7f2c367efa8e3f457d5e6e136e84ba3aef5177";
            };

            meta = {
              longDescription = ''Represents the JavaScript AST from the ESTree
                                spec. Includes tools for building an AST and
                                generating code from it.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/elixir-estree";
            };
          } // packageOverrides)
      ) {};

    estree = estree_2_6_1;

    esub_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "esub";
            version = "0.1.1";
            src = fetchHex {
              pkg = "esub";
              version = "0.1.1";
              sha256 =
                "35fe07e2c4120f787626d8cfb8f9e41390091805f3dd75a670486583b8e99693";
            };

            meta = {
              description = ''A simple event subscription framework.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jessiahr/esub";
            };
          } // packageOverrides)
      ) {};

    esub = esub_0_1_1;

    esync_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "esync";
            version = "0.0.1";
            src = fetchHex {
              pkg = "esync";
              version = "0.0.1";
              sha256 =
                "28a59a0cbe885ec39dec4992aac8495147d1ec9b623883b01e8aa775cb334f03";
            };

            meta = {
              description = ''Concurrently sync two or more directories so that
                            their contents are identical'';

              homepage = "https://github.com/GrahamGoudeau21/ElixirSync";
            };
          } // packageOverrides)
      ) {};

    esync = esync_0_0_1;

    esyslog_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "esyslog";
            version = "0.1.0";
            src = fetchHex {
              pkg = "esyslog";
              version = "0.1.0";
              sha256 =
                "2c52faee916f80953e4727d2f72350cf0f6b94149b8b24eebf4357f5371db407";
            };

            meta = {
              description = ''Simple Syslog Collector'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jbenden/esyslog";
            };
          } // packageOverrides)
      ) {};

    esyslog = esyslog_0_1_0;

    etcdc_0_3_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hackney_1_12_1,
          lejson_0_7_1
        }:
          buildRebar3 ({
            name = "etcdc";
            version = "0.3.1";
            src = fetchHex {
              pkg = "etcdc";
              version = "0.3.1";
              sha256 =
                "fc9061fb692e76e1ff21c9559221dbd18672a391365bdb75533715ac74e2629e";
            };

            beamDeps  = [ hackney_1_12_1 lejson_0_7_1 ];

            meta = {
              description = ''etcd client for v2 API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/cvik/etcdc";
            };
          } // packageOverrides)
      ) {};

    etcdc = etcdc_0_3_1;

    eternal_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eternal";
            version = "1.2.0";
            src = fetchHex {
              pkg = "eternal";
              version = "1.2.0";
              sha256 =
                "e5a04291aa775eeb5a5583f99118be6b77e81e8e43e84a2e8a974bf95793c7d7";
            };

            meta = {
              description = ''Make your ETS tables live forever'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/eternal";
            };
          } // packageOverrides)
      ) {};

    eternal = eternal_1_2_0;

    etfs_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "etfs";
            version = "0.1.3";
            src = fetchHex {
              pkg = "etfs";
              version = "0.1.3";
              sha256 =
                "74b8579a5c0b7456dbfbef6f7d43919bc67277b2aec2f636b96206d0e8b95986";
            };

            meta = {
              longDescription = ''A simple streamable binary-serialization
                                container format based on Erlang`s External Term
                                Format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/etfs";
            };
          } // packageOverrides)
      ) {};

    etfs = etfs_0_1_3;

    ether_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ether";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ether";
              version = "0.0.1";
              sha256 =
                "867752143aa09e07d0a50ae9526b7c8f620e189f509326a635c304b453496f16";
            };

            meta = {
              description = ''Elixir Debugger '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maarek/ether";
            };
          } // packageOverrides)
      ) {};

    ether = ether_0_0_1;

    etherchain_org_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0,
          vex_0_8_0
        }:
          buildMix ({
            name = "etherchain_org";
            version = "0.0.7";
            src = fetchHex {
              pkg = "etherchain_org";
              version = "0.0.7";
              sha256 =
                "a6975e7d853ac3ef2c24433b75e8ea4cb51cb6b249ba143e53e2cd627f1f9ba5";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 vex_0_8_0 ];

            meta = {
              longDescription = ''WIP Elixir API wrapper for etherchain.org.
                                Provides access to ethereum blockchain data.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/etherchain_org_ex";
            };
          } // packageOverrides)
      ) {};

    etherchain_org = etherchain_org_0_0_7;

    ethereum_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ethereum";
            version = "0.0.0";
            src = fetchHex {
              pkg = "ethereum";
              version = "0.0.0";
              sha256 =
                "7240e0ea540c4ced4caf7805a5c315b43e254af99ae07f738bd97fe00554ad36";
            };

            meta = {
              description = ''Ethereum`s implementation in Elixir [WIP]'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exthereum/ethereum";
            };
          } // packageOverrides)
      ) {};

    ethereum = ethereum_0_0_0;

    ethereumex_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_0_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ethereumex";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ethereumex";
              version = "0.3.2";
              sha256 =
                "2dec42348d1f837e8ca22d83426c9cbd2d07ddfe86d9cf600f71082fa91d0b9c";
            };
            beamDeps  = [ httpoison_1_0_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir JSON-RPC client for the Ethereum
                            blockchain'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exthereum/ethereumex";
            };
          } // packageOverrides)
      ) {};

    ethereumex = ethereumex_0_3_2;

    etherscan_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "etherscan";
            version = "2.0.1";
            src = fetchHex {
              pkg = "etherscan";
              version = "2.0.1";
              sha256 =
                "9d9e288d5135b88087d4f6cd3b3dafe366d7d0a30b65ae01fb1ff40646fca9f5";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Etherscan.io API wrapper for Elixir. Provides
                                access to ethereum blockchain data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/l1h3r/etherscan";
            };
          } // packageOverrides)
      ) {};

    etherscan = etherscan_2_0_1;

    etoml_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "etoml";
            version = "0.1.0";
            src = fetchHex {
              pkg = "etoml";
              version = "0.1.0";
              sha256 =
                "0ce759092b50a8ea9681402185df1b3eeb9b551fc923c42d3e0c180979021851";
            };

            meta = {
              description = ''TOML language parser'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/JoshRagem/etoml";
            };
          } // packageOverrides)
      ) {};

    etoml = etoml_0_1_0;

    etr_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_2,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "etr";
            version = "1.0.0";
            src = fetchHex {
              pkg = "etr";
              version = "1.0.0";
              sha256 =
                "84feeee109560865b1ff6c16b13b40a7be96613ee7e839f3b6f20fe8436ee221";
            };

            beamDeps  = [ ebs_1_1_2 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of tr(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-tr";
            };
          } // packageOverrides)
      ) {};

    etr = etr_1_0_0;

    ets_helper_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ets_helper";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ets_helper";
              version = "0.1.0";
              sha256 =
                "f70b7f372e745dd542c49c45445cea7388cafa85119049818bbbb6f4acbaf220";
            };

            meta = {
              description = ''ETS Wrapper to help in your Elixir projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/ets_helper";
            };
          } // packageOverrides)
      ) {};

    ets_helper = ets_helper_0_1_0;

    ets_map_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ets_map";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ets_map";
              version = "0.0.1";
              sha256 =
                "c33d714212c56d99b2472d522e24db808cd8a407101051d407be310412d61eae";
            };

            meta = {
              description = ''A Map-like Elixir data structure that is backed
                            by an ETS table.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/ets_map";
            };
          } // packageOverrides)
      ) {};

    ets_map = ets_map_0_0_1;

    ets_owner_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ets_owner";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ets_owner";
              version = "1.0.0";
              sha256 =
                "54c0228a9134f4afe5c2a5418712a8b010bbc3f3e4864f3c854110f6cb65bca9";
            };

            meta = {
              description = ''A simple GenServer that owns your ETS tables and
                            won`t die, even if you do.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/ets_owner";
            };
          } // packageOverrides)
      ) {};

    ets_owner = ets_owner_1_0_0;

    etude_1_0_0_beta_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nile_0_1_3,
          poison_2_1_0
        }:
          buildMix ({
            name = "etude";
            version = "1.0.0-beta.0";
            src = fetchHex {
              pkg = "etude";
              version = "1.0.0-beta.0";
              sha256 =
                "f5a2896982cd062fe188dcb0216ef5c960959aa2ba77f4d31b00d0dda56890dd";
            };
            beamDeps  = [ nile_0_1_3 poison_2_1_0 ];

            meta = {
              description = ''futures for elixir/erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/etude";
            };
          } // packageOverrides)
      ) {};

    etude_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "etude";
            version = "1.0.1";
            src = fetchHex {
              pkg = "etude";
              version = "1.0.1";
              sha256 =
                "540f12da635db145e89c693ee67bbf43f1def9444301fcdc3cb2d4d7a29ceb89";
            };

            meta = {
              description = ''futures for elixir/erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/etude";
            };
          } // packageOverrides)
      ) {};

    etude = etude_1_0_1;

    euniq_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_0_3,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "euniq";
            version = "1.0.0";
            src = fetchHex {
              pkg = "euniq";
              version = "1.0.0";
              sha256 =
                "445d189208576a3de54cd8111380bf5ee25ccfb9c966c5898b121b6df551d308";
            };

            beamDeps  = [ ebs_1_0_3 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of uniq(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-uniq";
            };
          } // packageOverrides)
      ) {};

    euniq = euniq_1_0_0;

    eunit_addons_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eunit_addons";
            version = "0.3.0";
            src = fetchHex {
              pkg = "eunit_addons";
              version = "0.3.0";
              sha256 =
                "6d3255451f920d43954a0dd760d4175774fc305872eb44708f601630b82b0eb0";
            };

            meta = {
              description = ''Addons for eunit'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/klajo/eunit_addons";
            };
          } // packageOverrides)
      ) {};

    eunit_addons = eunit_addons_0_3_0;

    eunit_formatters_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eunit_formatters";
            version = "0.5.0";
            src = fetchHex {
              pkg = "eunit_formatters";
              version = "0.5.0";
              sha256 =
                "d6c8ba213424944e6e05bbc097c32001cdd0abe3925d02454f229b20d68763c9";
            };

            meta = {
              description = ''Better output for eunit suites'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/seancribbs/eunit_formatters";
            };
          } // packageOverrides)
      ) {};

    eunit_formatters = eunit_formatters_0_5_0;

    eunit_sugar_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eunit_sugar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eunit_sugar";
              version = "0.1.0";
              sha256 =
                "f30c41d711650270d8654f9067a3b5d16d73242e0eed19082b70676e9f05bb6e";
            };

            meta = {
              description = ''Helpers and sugars for eunit tests'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/xenolinguist/eunit_sugar";
            };
          } // packageOverrides)
      ) {};

    eunit_sugar = eunit_sugar_0_1_0;

    euri_0_9_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "euri";
            version = "0.9.3";
            src = fetchHex {
              pkg = "euri";
              version = "0.9.3";
              sha256 =
                "22567cb39783721bc9cbcf6f2990e2da38af73c703514b04a4592e36b9e31cd6";
            };

            meta = {
              description = ''An Erlang library for constructing URIs'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/truqu/euri";
            };
          } // packageOverrides)
      ) {};

    euri = euri_0_9_3;

    euros_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_19_3,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "euros";
            version = "0.3.0";
            src = fetchHex {
              pkg = "euros";
              version = "0.3.0";
              sha256 =
                "4a7fe0c28c9be1a7f9a04bd4930b65ceb809cd975048af0eb8a9fba4f891e713";
            };
            beamDeps  = [ floki_0_19_3 httpoison_0_13_0 ];

            meta = {
              description = ''Euros web-spider framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kytiken/euros";
            };
          } // packageOverrides)
      ) {};

    euros = euros_0_3_0;

    evel_0_1_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, hash_ring_0_4_0
        }:
          buildRebar3 ({
            name = "evel";
            version = "0.1.1";
            src = fetchHex {
              pkg = "evel";
              version = "0.1.1";
              sha256 =
                "b849699912f797e2b0082b43d0f58b18de838379b499c47dc24194d9fec03e6e";
            };

            beamDeps  = [ hash_ring_0_4_0 ];

            meta = {
              description = ''An Eventual Leader Election Library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/evel";
            };
          } // packageOverrides)
      ) {};

    evel = evel_0_1_1;

    event_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_13_1 }:
          buildMix ({
            name = "event";
            version = "0.1.3";
            src = fetchHex {
              pkg = "event";
              version = "0.1.3";
              sha256 =
                "3b6073285347461491a2d646dfd231e0d9c81e1d8ea9da9c49b5f3fc3bfeaafd";
            };
            beamDeps  = [ gen_stage_0_13_1 ];

            meta = {
              description = ''GenStage wrapper for simplifying event
                            consumption and production'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wrren/event.ex";
            };
          } // packageOverrides)
      ) {};

    event = event_0_1_3;

    event_bus_1_3_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "event_bus";
            version = "1.3.7";
            src = fetchHex {
              pkg = "event_bus";
              version = "1.3.7";
              sha256 =
                "fd6322ee1aee3d3d0a269719cbe6192c2df28f729547810dfde87617584861d7";
            };

            meta = {
              longDescription = ''Traceable, extendable and minimalist event
                                bus implementation for Elixir with built-in
                                event store and event watcher based on ETS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/event_bus";
            };
          } // packageOverrides)
      ) {};

    event_bus = event_bus_1_3_7;

    event_bus_logger_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, event_bus_1_3_7 }:
          buildMix ({
            name = "event_bus_logger";
            version = "0.1.6";
            src = fetchHex {
              pkg = "event_bus_logger";
              version = "0.1.6";
              sha256 =
                "5b41672a694f2a0a4e255f4c1831897a8eb166a3b65e2b046527cf73bd746a9e";
            };
            beamDeps  = [ event_bus_1_3_7 ];

            meta = {
              description = ''Log handler for event_bus'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/event_bus_logger";
            };
          } // packageOverrides)
      ) {};

    event_bus_logger = event_bus_logger_0_1_6;

    event_nanny_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "event_nanny";
            version = "0.1.1";
            src = fetchHex {
              pkg = "event_nanny";
              version = "0.1.1";
              sha256 =
                "4d46b285e5187fc8e63f7911087dcff54fb46ca347b457013e9bd9901f9cc9d1";
            };

            meta = {
              description = ''Nanny for GenEvent restart handler when it exit
                            abnormally'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ammbot/event-nanny.git";
            };
          } // packageOverrides)
      ) {};

    event_nanny = event_nanny_0_1_1;

    event_queues_1_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "event_queues";
            version = "1.1.3";
            src = fetchHex {
              pkg = "event_queues";
              version = "1.1.3";
              sha256 =
                "5754201cd6c8c2f92d01e72e06b16a75e3045c9902ffd7782f07701cdad22504";
            };
            beamDeps  = [ gen_stage_0_14_0 uuid_1_1_8 ];

            meta = {
              longDescription = ''Provides helpers in Elixir to create
                                GenStage, Exq, or AMQP based event queues and
                                handlers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cenurv/event_queues";
            };
          } // packageOverrides)
      ) {};

    event_socket_outbound_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ranch_1_3_2 }:
          buildMix ({
            name = "event_socket_outbound";
            version = "0.1.0";
            src = fetchHex {
              pkg = "event_socket_outbound";
              version = "0.1.0";
              sha256 =
                "3a6b37255bf48fe323efa158faad9beb72e3fafd6436a0e33f5586bfe1d90e59";
            };
            beamDeps  = [ ranch_1_3_2 ];

            meta = {
              longDescription = ''An Elixir protocol for the FreeSWITCH`s Event
                                Socket, providing support for outbound
                                method.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/davec82/freeswitch-outboundsocket";
            };
          } // packageOverrides)
      ) {};

    event_socket_outbound = event_socket_outbound_0_1_0;

    eventsource_ex_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "eventsource_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "eventsource_ex";
              version = "0.0.2";
              sha256 =
                "a172543b8112e162b42ee07f6b9ffab2a80bc8efa649d0f368b1c762da3ce455";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''An EventSource (Server-Sent Events) client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cwc/eventsource_ex";
            };
          } // packageOverrides)
      ) {};

    eventsource_ex = eventsource_ex_0_0_2;

    eventsourced_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eventsourced";
            version = "0.2.1";
            src = fetchHex {
              pkg = "eventsourced";
              version = "0.2.1";
              sha256 =
                "9e55b6223421685a80ca2a418c11206ded06eba8f96db3e23f918d3ab48a9fe7";
            };

            meta = {
              description = ''Build functional, event-sourced domain models.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashdotdash/eventsourced";
            };
          } // packageOverrides)
      ) {};

    eventsourced = eventsourced_0_2_1;

    eventstore_client_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "eventstore_client";
            version = "0.1.4";
            src = fetchHex {
              pkg = "eventstore_client";
              version = "0.1.4";
              sha256 =
                "fa77e1a7906b3ed27c0dfa0bd41f27b3129285857948aa23a3f888b0dd531109";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 uuid_1_1_8 ];

            meta = {
              description = ''HTTP Client for EventStore (geteventstore.com)'';

              homepage =
                "https://github.com/tbug/elixir-eventstore-http-client";
            };
          } // packageOverrides)
      ) {};

    eventstore_client = eventstore_client_0_1_4;

    everyoneapi_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_6_2,
          poison_1_3_1
        }:
          buildMix ({
            name = "everyoneapi";
            version = "0.0.1";
            src = fetchHex {
              pkg = "everyoneapi";
              version = "0.0.1";
              sha256 =
                "8214fa434a10716f252bcbcb5660faddbc20909d1058d1b491c95132eb4b3182";
            };
            beamDeps  = [ httpoison_0_6_2 poison_1_3_1 ];

            meta = {
              description = ''API Client for EveryoneAPI.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/knewter/everyoneapi";
            };
          } // packageOverrides)
      ) {};

    everyoneapi = everyoneapi_0_0_1;

    evil_left_pad_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "evil_left_pad";
            version = "0.3.0";
            src = fetchHex {
              pkg = "evil_left_pad";
              version = "0.3.0";
              sha256 =
                "10c035cf9350878218d1e34ebed781f5e52c51fa4b3d4b0f5080aef6a95a87e2";
            };

            meta = {
              longDescription = ''DO NOT USE THIS PACKAGE! evil_left_pad is an
                                example of how unexpected malicious code can be
                                injected into your project. See `hoplon` package
                                for details'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nietaki/evil_left_pad";
            };
          } // packageOverrides)
      ) {};

    evil_left_pad = evil_left_pad_0_3_0;

    evil_transform_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "evil_transform";
            version = "0.2.0";
            src = fetchHex {
              pkg = "evil_transform";
              version = "0.2.0";
              sha256 =
                "763fe01d22dfc1fcbf7d44db5e4af45078bcfce58f2a1314c625a668de2390d9";
            };

            meta = {
              description = ''Transform coordinate between WGS-84 and GCJ-02'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/weij/eviltransform";
            };
          } // packageOverrides)
      ) {};

    evil_transform = evil_transform_0_2_0;

    evo_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gproc_0_6_1 }:
          buildMix ({
            name = "evo";
            version = "0.4.1";
            src = fetchHex {
              pkg = "evo";
              version = "0.4.1";
              sha256 =
                "5e3a9312c0267c2ab47a6c02fa029ce7227b7a25a3b181407f3840a16724369a";
            };
            beamDeps  = [ gproc_0_6_1 ];

            meta = {
              description = ''An OTP cart meant for use in eCommerce
                            applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cas27/evo";
            };
          } // packageOverrides)
      ) {};

    evo = evo_0_4_1;

    ewc_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_1,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ewc";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ewc";
              version = "1.0.0";
              sha256 =
                "78cf20bb1cd7243e82aa19c023c0000a958a1117e018b24886558bc7992802cb";
            };

            beamDeps  = [ ebs_1_1_1 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of wc(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-wc";
            };
          } // packageOverrides)
      ) {};

    ewc = ewc_1_0_0;

    ex2ms_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex2ms";
            version = "1.5.0";
            src = fetchHex {
              pkg = "ex2ms";
              version = "1.5.0";
              sha256 =
                "670d7314fd792b320bd133d44dc0e1e484db7a375614fe3b769101a3b34f708f";
            };

            meta = {
              description = ''Translates Elixir functions to match
                            specifications for use with `ets`.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/ex2ms";
            };
          } // packageOverrides)
      ) {};

    ex2ms = ex2ms_1_5_0;

    ex_abnf_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_abnf";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_abnf";
              version = "0.3.0";
              sha256 =
                "35030990fd9fe584a0638231f1f0c8492330bfb6d95f37a7f134dc94bd0c8f6d";
            };

            meta = {
              longDescription = ''A parser and interpreter for ABNF grammars.
                                This is not a parser generator, but an
                                interpreter. It will load up an ABNF grammar,
                                and generate an AST for it. Then one can apply
                                any of the rules to an input and the interpreter
                                will parse the input according to the rule.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_abnf";
            };
          } // packageOverrides)
      ) {};

    ex_abnf = ex_abnf_0_3_0;

    ex_ami_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_state_machine_2_0_2,
          gen_state_machine_helpers_0_1_0
        }:
          buildMix ({
            name = "ex_ami";
            version = "0.3.3";
            src = fetchHex {
              pkg = "ex_ami";
              version = "0.3.3";
              sha256 =
                "cb6f459a6ead068e2cf5ce629065cc26eb8436ccf179bdf3b29991760843d9c9";
            };
            beamDeps  = [
                          gen_state_machine_2_0_2
                          gen_state_machine_helpers_0_1_0
                        ];

            meta = {
              description = ''An Elixir Asterisk AMI Client Library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/ex_ami";
            };
          } // packageOverrides)
      ) {};

    ex_ami = ex_ami_0_3_3;

    ex_api_1_0_0_rc_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_pubsub_1_0_2
        }:
          buildMix ({
            name = "ex_api";
            version = "1.0.0-rc.2";
            src = fetchHex {
              pkg = "ex_api";
              version = "1.0.0-rc.2";
              sha256 =
                "d2992e0994ad63633033025ab038b2cdd57069e5df8fdfd98690001e5df21565";
            };
            beamDeps  = [ phoenix_pubsub_1_0_2 ];

            meta = {
              description = ''Library for creating and managing apis and their
                            implementations'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    ex_api = ex_api_1_0_0_rc_2;

    ex_api_ai_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_api_ai";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_api_ai";
              version = "0.2.2";
              sha256 =
                "28e751ac0246d227010c2e0d066125c8a12014825e17aa24ef4814b2644997b8";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for @api_ai'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_api_ai";
            };
          } // packageOverrides)
      ) {};

    ex_api_ai = ex_api_ai_0_2_2;

    ex_app_info_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_app_info";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_app_info";
              version = "0.3.0";
              sha256 =
                "c30a16c3a82da9ea55f989b8e7232ec27d537ee313c11dcf78488a80881848d3";
            };

            meta = {
              description = ''Helper mix tasks that are useful with CI
                            systems.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ntrepid8/ex_app_info";
            };
          } // packageOverrides)
      ) {};

    ex_app_info = ex_app_info_0_3_0;

    ex_avro_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_avro";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_avro";
              version = "0.2.0";
              sha256 =
                "6cdfb48c04adc0793a6ba4f6f630cf74569816c5db9e263ccd235b561cf925db";
            };

            meta = {
              description = ''A light Elixir wrapper around eavro for parsing
                            Avro protocol files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/ex_avro";
            };
          } // packageOverrides)
      ) {};

    ex_avro = ex_avro_0_2_0;

    ex_azure_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_azure";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_azure";
              version = "0.1.1";
              sha256 =
                "ec38b97e7197322ad8c967825d8f561ac07a900aee02f09b214dcc71c77a58d5";
            };

            meta = {
              description = ''Azure wrapper for Elixir using :erlazure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gullitmiranda/ex_azure";
            };
          } // packageOverrides)
      ) {};

    ex_azure = ex_azure_0_1_1;

    ex_backlog_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_backlog";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_backlog";
              version = "0.1.2";
              sha256 =
                "dd99aa7385902665578ba682e71648aadc8ba84100fd49303ef500af6e92225b";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client library for Backlog.(It is not
                            official.)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yujikawa/ex_backlog";
            };
          } // packageOverrides)
      ) {};

    ex_backlog = ex_backlog_0_1_2;

    ex_bcrypt_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bcrypt_0_5_0_p3a }:
          buildMix ({
            name = "ex_bcrypt";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_bcrypt";
              version = "0.0.1";
              sha256 =
                "c6c91e333f3e84733bb8fca08af9fda01b20f3b2a8801e456b31103118418e81";
            };
            beamDeps  = [ bcrypt_0_5_0_p3a ];

            meta = {
              description = ''Elixir wrapper for the OpenBSD bcrypt password
                            hashing algorithm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manelli/ex_bcrypt";
            };
          } // packageOverrides)
      ) {};

    ex_bcrypt = ex_bcrypt_0_0_1;

    ex_bencode_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_bencode";
            version = "2.0.1";
            src = fetchHex {
              pkg = "ex_bencode";
              version = "2.0.1";
              sha256 =
                "f19b951620a91d4d6f516efebe4cc4e5648e067c8ff2490d249915dda0809a8c";
            };

            meta = {
              description = ''An Elixir library for encoding and decoding
                            BitTorrent`s bencoding.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Cantido/ex_bencode";
            };
          } // packageOverrides)
      ) {};

    ex_bencode = ex_bencode_2_0_1;

    ex_bert_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_bert";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ex_bert";
              version = "1.0.1";
              sha256 =
                "13335e33ae41698dcfcad20f1fd8ac8049a631b603350ee9601d24eab1f11b4e";
            };

            meta = {
              description = ''Secure Elixir BERT wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rvlzzr/bert";
            };
          } // packageOverrides)
      ) {};

    ex_bert = ex_bert_1_0_1;

    ex_bitstamp_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_bitstamp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_bitstamp";
              version = "0.1.1";
              sha256 =
                "fe33965088b641d6053c222673b72909fc43f951d3aa223d755539000f630863";
            };
            beamDeps  = [ ex_doc_0_18_3 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client library for Bitstamp HTTP API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mvrkljan/ex_bitstamp";
            };
          } // packageOverrides)
      ) {};

    ex_bitstamp = ex_bitstamp_0_1_1;

    ex_blocktrail_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_1_2_0,
          poison_3_1_0,
          vex_0_8_0,
          yuri_1_0_0
        }:
          buildMix ({
            name = "ex_blocktrail";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_blocktrail";
              version = "0.2.2";
              sha256 =
                "a9c25a738be7dceb760e9af5ea0777882bb93f37d406b16307136dc348e7199b";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_1_2_0
                          poison_3_1_0
                          vex_0_8_0
                          yuri_1_0_0
                        ];

            meta = {
              description = ''WIP. Elixir wrapper for blocktrail.com Bitcoin
                            api and some utility functions.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ex_blocktrail = ex_blocktrail_0_2_2;

    ex_bot_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0,
          websocket_client_1_3_0
        }:
          buildMix ({
            name = "ex_bot";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_bot";
              version = "0.1.1";
              sha256 =
                "68eee11416b3cbfd339ee7291cdaa27cfab52ae02cc917394c083aea1842cd69";
            };
            beamDeps  = [
                          httpoison_0_13_0 poison_3_1_0 websocket_client_1_3_0
                        ];

            meta = {
              description = ''Like Plug, but for Slack Bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattbaker/ex-bot";
            };
          } // packageOverrides)
      ) {};

    ex_bot = ex_bot_0_1_1;

    ex_brace_expansion_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_brace_expansion";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_brace_expansion";
              version = "0.0.2";
              sha256 =
                "d7470a00cffe4425f89e83d7288c24b641c3f6cbde136a08089e7420467cd237";
            };

            meta = {
              longDescription = ''Brace expansion, as known from sh/bash, in
                                Elixir. Quick example:
                                ExBraceExpansion.expand(\"file-{a,b,c}.jpg\") =>
                                [\"file-a.jpg\", \"file-b.jpg\", \"file-c.jpg\"]
                                '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gniquil/ex_brace_expansion";
            };
          } // packageOverrides)
      ) {};

    ex_brace_expansion = ex_brace_expansion_0_0_2;

    ex_callfire_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_callfire";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_callfire";
              version = "0.1.1";
              sha256 =
                "a0f4b0432e2665a0aee531d25a55434f0fa38fe219aeced13a4a37bb6fc76fe3";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Micro wrapper for the CallFire REST API'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ex_callfire = ex_callfire_0_1_1;

    ex_chatwork_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_chatwork";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_chatwork";
              version = "0.2.0";
              sha256 =
                "964a8e499b7c52c1757052ee063c728dc1e51e316a106b6d0f6a5eea6668c070";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''simple HTTP client for Chatwork'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuki-toida/ex_chatwork";
            };
          } // packageOverrides)
      ) {};

    ex_chatwork = ex_chatwork_0_2_0;

    ex_clearbit_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_clearbit";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_clearbit";
              version = "0.1.3";
              sha256 =
                "8587cdba52854fc1294a9c1bb89f20250da0a86e28df7a92927483e912094ab4";
            };
            beamDeps  = [ exconstructor_1_1_0 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A lightweight API client for Clearbit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keithmattix/ex_clearbit";
            };
          } // packageOverrides)
      ) {};

    ex_clearbit = ex_clearbit_0_1_3;

    ex_cli_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_cli";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_cli";
              version = "0.1.4";
              sha256 =
                "26db42b3dfa5b86014a403a12e0aa70da3791471c6a293851475b5304881412b";
            };

            meta = {
              description = ''Library to build CLI applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/ex_cli";
            };
          } // packageOverrides)
      ) {};

    ex_cli = ex_cli_0_1_4;

    ex_clockwork_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_clockwork";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_clockwork";
              version = "0.2.0";
              sha256 =
                "deed8bcf1c9690454663e68753b376a750fd17d48d7e7983062d1e1022897d58";
            };

            meta = {
              longDescription = ''This package allows you to run tasks at
                                specified periods of time. Similar to ruby
                                `clockwork` gem.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Mehonoshin/ex_clockwork";
            };
          } // packageOverrides)
      ) {};

    ex_clockwork = ex_clockwork_0_2_0;

    ex_closeio_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_closeio";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_closeio";
              version = "0.3.0";
              sha256 =
                "fe9ac3e154fec0e06b57b345b745bd8dd81a437ed488ec3d2c1525627f7e90a7";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Close.io client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/taylorbrooks/ex_closeio";
            };
          } // packageOverrides)
      ) {};

    ex_closeio = ex_closeio_0_3_0;

    ex_clubhouse_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_clubhouse";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_clubhouse";
              version = "0.1.0";
              sha256 =
                "fa53b1e11d4713415ccaaef6c64dd59dded49f15e4706805e1e1be63fa727624";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A client library for the clubhouse.io v2 REST and
                            webhook APIs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmartinson/ex_clubhouse";
            };
          } // packageOverrides)
      ) {};

    ex_clubhouse = ex_clubhouse_0_1_0;

    ex_codapay_0_1_12 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          jason_1_1_1,
          uuid_1_1_8
        }:
          buildMix ({
            name = "ex_codapay";
            version = "0.1.12";
            src = fetchHex {
              pkg = "ex_codapay";
              version = "0.1.12";
              sha256 =
                "f5f6f02ebbcc4f97bc9e345b33f12ee047a1d4942ac3e3d657725ee42af99626";
            };
            beamDeps  = [ httpoison_1_2_0 jason_1_1_1 uuid_1_1_8 ];

            meta = {
              description = ''Codapay API wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ex_codapay = ex_codapay_0_1_12;

    ex_cogmint_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_cogmint";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_cogmint";
              version = "0.0.1";
              sha256 =
                "729bf669e19fa0b961c1b10fa656604efc524113764dd82637e3e36d61a481c7";
            };

            meta = {
              description = ''Client for Cogmint Project'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    ex_cogmint = ex_cogmint_0_0_1;

    ex_compatible_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_compatible";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_compatible";
              version = "0.2.0";
              sha256 =
                "9e227e78174f1c67cb8008938f5011b4c8b62f150e6bbce5b6d9e910a4f2d40b";
            };

            meta = {
              longDescription = ''ExCompatible strives to make your Elixir code
                                compatible with as many Elixir versions as
                                possible, while reducing the number of compiler
                                warnings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thecodeboss/ex_compatible";
            };
          } // packageOverrides)
      ) {};

    ex_compatible = ex_compatible_0_2_0;

    ex_compose_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_compose";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_compose";
              version = "1.0.0";
              sha256 =
                "38d995eb963cf0ca2c3be6c5f8eb4551467e9b13a4209bc663901cdf93dfe5c4";
            };

            meta = {
              longDescription = ''A library for composing XLSX files based off
                                templates, with full support of template
                                styling.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Seiyial/ExCompose";
            };
          } // packageOverrides)
      ) {};

    ex_compose = ex_compose_1_0_0;

    ex_const_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_const";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_const";
              version = "0.1.0";
              sha256 =
                "7c17c83d9c2d167884610a118ae7206e5313e54369690bfd8fe7ac37077e08e6";
            };

            meta = {
              description = ''Constants and Enumerated Values for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/ex_const";
            };
          } // packageOverrides)
      ) {};

    ex_const_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_const";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_const";
              version = "0.2.2";
              sha256 =
                "87c28aefc864bb97555772c45199f2812e7b3f325cd070debc28b70a2030ae7b";
            };

            meta = {
              description = ''Constants and Enumerated Values for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/ex_const";
            };
          } // packageOverrides)
      ) {};

    ex_const = ex_const_0_2_2;

    ex_contract_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_contract";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_contract";
              version = "0.1.2";
              sha256 =
                "a5f258da3645156d529771fe0295af0f9d82b259fc20208c6eef69052936eb76";
            };

            meta = {
              longDescription = ''This is Elixir library application that adds
                                support for design by contract. For intro to DbC
                                methodology see
                                https://en.wikipedia.org/wiki/Design_by_contract.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JDUnity/ex_contract";
            };
          } // packageOverrides)
      ) {};

    ex_contract = ex_contract_0_1_2;

    ex_craft_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, aspire_0_1_0 }:
          buildMix ({
            name = "ex_craft";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_craft";
              version = "0.1.0";
              sha256 =
                "984dec96eea76007202f844f84296856ae35f794849cfa81efa80b7fc2f36929";
            };
            beamDeps  = [ aspire_0_1_0 ];

            meta = {
              description = ''Smart Elixir structures constructors'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tim2CF/ex_craft";
            };
          } // packageOverrides)
      ) {};

    ex_craft = ex_craft_0_1_0;

    ex_crc_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_crc";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_crc";
              version = "1.0.0";
              sha256 =
                "ecf6403881eefd97d40671ab9728d7898b29e982d5d712131c06e7a6ce9591e8";
            };

            meta = {
              description = ''Pure Elixir implementation of CRC16 algorithm in
                            a few different variants.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cthree/ExCRC";
            };
          } // packageOverrides)
      ) {};

    ex_crc = ex_crc_1_0_0;

    ex_cron_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_cron";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_cron";
              version = "0.0.3";
              sha256 =
                "db6122c2f4c9745115aef4e9fd4e0902f0092861cdc39e4afdd50bc18fd7a304";
            };

            meta = {
              description = ''Cron schedule generator for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codestuffers/ex-cron";
            };
          } // packageOverrides)
      ) {};

    ex_cron = ex_cron_0_0_3;

    ex_crypto_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "ex_crypto";
            version = "0.9.0";
            src = fetchHex {
              pkg = "ex_crypto";
              version = "0.9.0";
              sha256 =
                "321834487b06963a851ff73c24b4fccfd06a2e28c8fb3986f84afe2f78c6ec67";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''A wrapper around the Erlang Crypto module
                                with sensible defaults for common tasks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ntrepid8/ex_crypto";
            };
          } // packageOverrides)
      ) {};

    ex_crypto = ex_crypto_0_9_0;

    ex_csv_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_csv";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ex_csv";
              version = "0.1.5";
              sha256 =
                "52a284295bab0ee1d7a74f66ffc46c4b0086028a981e25fda0ec2146b335b656";
            };

            meta = {
              description = ''CSV for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_csv";
            };
          } // packageOverrides)
      ) {};

    ex_csv = ex_csv_0_1_5;

    ex_cut_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_cut";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_cut";
              version = "0.1.0";
              sha256 =
                "08d267be79c1f8f6362d3f44e1dd19a5e0ecc2045bff2122f4c1238ef1e25d27";
            };

            meta = {
              longDescription = ''ExCut provides an annotation mechanism to
                                inject cross-cutting concerns to a function.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/derailed/ex_cut";
            };
          } // packageOverrides)
      ) {};

    ex_cut = ex_cut_0_1_0;

    ex_data_dog_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "ex_data_dog";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_data_dog";
              version = "0.1.0";
              sha256 =
                "71ab595c763f426f5cf5f2307d40c14b75eee88aac5f284bccb27ed0c64b2f56";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Elixir DataDog integration'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/KamilLelonek/ex-data-dog";
            };
          } // packageOverrides)
      ) {};

    ex_data_dog = ex_data_dog_0_1_0;

    ex_dice_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_dice";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_dice";
              version = "0.3.0";
              sha256 =
                "f1253d4c0f0648e4dbe75f55ef0b28b1bbc5d3cd93e373c28f5a133ce641de8e";
            };

            meta = {
              description = ''A basic dice rolling package.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/matthewsecrist/Dice";
            };
          } // packageOverrides)
      ) {};

    ex_dice = ex_dice_0_3_0;

    ex_dinheiro_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_dinheiro";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_dinheiro";
              version = "0.2.1";
              sha256 =
                "2fd4038b03304eb9b5971ce8cc21a662c2e8a9bce071d3796036b602da5c5533";
            };

            meta = {
              description = ''Elixir library for money manipulation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ramondelemos/ex_dinheiro";
            };
          } // packageOverrides)
      ) {};

    ex_dinheiro = ex_dinheiro_0_2_1;

    ex_dns_client_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_dns_client";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_dns_client";
              version = "0.1.1";
              sha256 =
                "a84004c9ed3b8af3a76b40f4f7b867c4dcae578e9743d7b1b90346172d4719d3";
            };

            meta = {
              description = ''A rudimentary DNS client. Thin wrapper around
                            erlang`s `inet_res` library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kagux/ex_dns_client";
            };
          } // packageOverrides)
      ) {};

    ex_dns_client = ex_dns_client_0_1_1;

    ex_doc_0_16_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_5 }:
          buildMix ({
            name = "ex_doc";
            version = "0.16.3";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.16.3";
              sha256 =
                "f6cb2e47fe57ff86de725e44d5969575c5f9968f31eebfe3c6a39651579464ca";
            };
            beamDeps  = [ earmark_1_2_5 ];

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          } // packageOverrides)
      ) {};

    ex_doc_0_16_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_5 }:
          buildMix ({
            name = "ex_doc";
            version = "0.16.4";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.16.4";
              sha256 =
                "90e39c592b4952d35eb122b70d656a8b2ffa248d7b0fa428b314ce2176c69861";
            };
            beamDeps  = [ earmark_1_2_5 ];

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          } // packageOverrides)
      ) {};

    ex_doc_0_18_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_5 }:
          buildMix ({
            name = "ex_doc";
            version = "0.18.3";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.18.3";
              sha256 =
                "33d7b70d87d45ed899180fb0413fb77c7c48843188516e15747e00fdecf572b6";
            };
            beamDeps  = [ earmark_1_2_5 ];

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          } // packageOverrides)
      ) {};

    ex_doc = ex_doc_0_18_3;

    ex_doc_dash_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "ex_doc_dash";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_doc_dash";
              version = "0.3.1";
              sha256 =
                "04477a9c17578b01147d346fbb332806e5d09897c4817af487bb31835b4e1e02";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Formatter for ExDoc to generate docset
                            documentation for use in Dash.app.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/ExDocDash";
            };
          } // packageOverrides)
      ) {};

    ex_doc_dash = ex_doc_dash_0_3_1;

    ex_doc_epub_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_1_19,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "ex_doc_epub";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_doc_epub";
              version = "0.0.3";
              sha256 =
                "a91ed3ea7bc10ee97916240187e111c2cad4712578c5ec1fdcb1a33bd2db6633";
            };
            beamDeps  = [ earmark_0_1_19 ex_doc_0_18_3 ];

            meta = {
              description = ''Create documentation for Elixir projects in EPUB
                            format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/milmazz/ex_doc_epub";
            };
          } // packageOverrides)
      ) {};

    ex_doc_epub = ex_doc_epub_0_0_3;

    ex_doc_simple_markdown_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          simple_markdown_0_5_3
        }:
          buildMix ({
            name = "ex_doc_simple_markdown";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_doc_simple_markdown";
              version = "0.3.0";
              sha256 =
                "6b2179b7165144a0c9226086fa7c71058ff5f7622dbd63f60f00ad2ee46854f1";
            };
            beamDeps  = [ ex_doc_0_18_3 simple_markdown_0_5_3 ];

            meta = {
              description = ''A SimpleMarkdown processor for ExDoc.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/ExDocSimpleMarkdown";
            };
          } // packageOverrides)
      ) {};

    ex_doc_simple_markdown = ex_doc_simple_markdown_0_3_0;

    ex_docker_compose_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, porcelain_2_0_3 }:
          buildMix ({
            name = "ex_docker_compose";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_docker_compose";
              version = "0.2.0";
              sha256 =
                "7e0aee7d87c2e174087795a7536d5a5b4125c63170fff788e1b9437eb5072e2e";
            };
            beamDeps  = [ porcelain_2_0_3 ];

            meta = {
              longDescription = ''A simple wrapper library on top of
                                docker-compose binary, allows control of
                                docker-compose command via Elixir code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amitizle/ex_docker_compose";
            };
          } // packageOverrides)
      ) {};

    ex_docker_compose = ex_docker_compose_0_2_0;

    ex_enum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_15_0 }:
          buildMix ({
            name = "ex_enum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_enum";
              version = "0.1.0";
              sha256 =
                "f6685959ef337018e42c4baccdce98cc9618974759d1fdb969fcf9a266e590ea";
            };
            beamDeps  = [ gettext_0_15_0 ];

            meta = {
              description = ''Enum library for Elixir inspired by
                            ActiveHash::Enum.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-aktsk/ex_enum";
            };
          } // packageOverrides)
      ) {};

    ex_enum = ex_enum_0_1_0;

    ex_erlstats_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_erlstats";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ex_erlstats";
              version = "0.1.6";
              sha256 =
                "7ef6f411ab18301f1b519a74578b5a6bee67fe5ad9025ffbd04d5613a451db33";
            };

            meta = {
              description = ''A simple module to get erlang VM stats'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://samar.techgaun.com";
            };
          } // packageOverrides)
      ) {};

    ex_erlstats = ex_erlstats_0_1_6;

    ex_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_ex";
              version = "0.1.0";
              sha256 =
                "67e946f2eeb631552730d4c172072b0524d932e220d447778379a52f69c2114b";
            };

            meta = {
              longDescription = ''A collection of functions that extend the
                                capabilities of Elixir`s standard library
                                modules.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wistia/ex_ex";
            };
          } // packageOverrides)
      ) {};

    ex_ex = ex_ex_0_1_0;

    ex_fabricators_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_fabricators";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_fabricators";
              version = "0.1.0";
              sha256 =
                "edde1017f8a8fc3dbb3915c8791a6d0801f06fbe72f69ec50222dc47930c57d9";
            };

            meta = {
              description = ''Easy way to cook your structs for tests'';

              homepage = "https://github.com/alterego-labs/ex_fabricators";
            };
          } // packageOverrides)
      ) {};

    ex_fabricators = ex_fabricators_0_1_0;

    ex_farmhash_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_farmhash";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_farmhash";
              version = "0.1.2";
              sha256 =
                "21d7a6c51277f45a29fae098fad96d563dddfbc12e501232d8f0fb032ae5be50";
            };

            meta = {
              description = ''Google Farmhash for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/steffenix/ex_farmhash";
            };
          } // packageOverrides)
      ) {};

    ex_farmhash = ex_farmhash_0_1_2;

    ex_flatten_breadth_first_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_flatten_breadth_first";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_flatten_breadth_first";
              version = "0.1.0";
              sha256 =
                "48687cf63afd79272b67c7bdb5b6a6483217735be0ddfac82e2406d55d38176c";
            };

            meta = {
              description = ''Flatten lists breadth first'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/jamesandariese/ex_flatten_breadth_first";
            };
          } // packageOverrides)
      ) {};

    ex_flatten_breadth_first = ex_flatten_breadth_first_0_1_0;

    ex_flux_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "ex_flux";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_flux";
              version = "0.1.4";
              sha256 =
                "b3a912ea37eda9e3fdb95359500dee3327572e632cc8c758f2d787b8e1df4411";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 poolboy_1_5_1 ];

            meta = {
              description = ''InfluxDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pylon/ex_flux";
            };
          } // packageOverrides)
      ) {};

    ex_flux = ex_flux_0_1_4;

    ex_force_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jason_1_1_1,
          tesla_1_0_0
        }:
          buildMix ({
            name = "ex_force";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_force";
              version = "0.2.0";
              sha256 =
                "7de31f807ff1ed4dce5f85c64e9fc6aec8824819499892f34162aac6e34552f1";
            };
            beamDeps  = [ jason_1_1_1 tesla_1_0_0 ];

            meta = {
              description = ''Simple Elixir wrapper for Salesforce REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chulkilee/ex_force";
            };
          } // packageOverrides)
      ) {};

    ex_force = ex_force_0_2_0;

    ex_format_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_format";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_format";
              version = "0.1.0";
              sha256 =
                "4d9b2c9fabc7d6a3981d6858be98856658544fc782c4ac66f4c2a5c5386f67c2";
            };

            meta = {
              description = ''ExFormat formats Elixir source code according to
                            a standard set of rules.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/uohzxela/ex_format";
            };
          } // packageOverrides)
      ) {};

    ex_format = ex_format_0_1_0;

    ex_gdax_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_gdax";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_gdax";
              version = "0.1.3";
              sha256 =
                "a8ea6d8cd1c755a1b2897d992bd88a57d6891b683be4677ed018646a9e6c9591";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''GDAX API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bnhansn/ex_gdax";
            };
          } // packageOverrides)
      ) {};

    ex_gdax = ex_gdax_0_1_3;

    ex_gecko_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "ex_gecko";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_gecko";
              version = "0.1.0";
              sha256 =
                "cc90138f95a0a79b3c0437dfffbb40eebfec8ef0f0c0e20ccab85bc1f9943bc4";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 porcelain_2_0_3 ];

            meta = {
              description = ''Elixir SDK to communicate with Geckoboard`s
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/techgaun/ex_gecko";
            };
          } // packageOverrides)
      ) {};

    ex_gecko = ex_gecko_0_1_0;

    ex_ghpr_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          croma_0_9_3,
          git_cli_0_2_5,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_ghpr";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ex_ghpr";
              version = "0.3.2";
              sha256 =
                "1768d3bf950d92cf79831b3bcd8e999e27363bd2425fe6c4033977c2a8e1607e";
            };
            beamDeps  = [
                          croma_0_9_3
                          git_cli_0_2_5
                          httpoison_0_13_0
                          poison_2_2_0
                        ];

            meta = {
              description = ''CLI to work with GitHub Pull Request'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/ymtszw/ex_ghpr";
            };
          } // packageOverrides)
      ) {};

    ex_ghpr = ex_ghpr_0_3_2;

    ex_green_yet_core_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          jason_1_1_1,
          phoenix_pubsub_1_0_2
        }:
          buildMix ({
            name = "ex_green_yet_core";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_green_yet_core";
              version = "0.0.1";
              sha256 =
                "bd41fb810fdcbd058e76bfefac8dec32bf947d0c1355633def91fd4ee075b531";
            };
            beamDeps  = [ httpoison_1_2_0 jason_1_1_1 phoenix_pubsub_1_0_2 ];

            meta = {
              longDescription = ''Core component used in ExGreenYet for
                                monitoring services and their depending
                                components.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Plangora/ex_green_yet_core";
            };
          } // packageOverrides)
      ) {};

    ex_green_yet_core = ex_green_yet_core_0_0_1;

    ex_grok_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_grok";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_grok";
              version = "0.1.0";
              sha256 =
                "48785c5a1185ca8bd8b5d59e5c1d2a33bc046972d9d9925b8e34d996591ad43c";
            };

            meta = {
              description = ''Low dependencies ngrok wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pdawczak/ex_grok";
            };
          } // packageOverrides)
      ) {};

    ex_grok = ex_grok_0_1_0;

    ex_gtin_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_gtin";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_gtin";
              version = "0.3.1";
              sha256 =
                "fa5f845be646e2ed4af7e6e76467f04c580257f3d7ca24e7da331051105d5000";
            };

            meta = {
              longDescription = ''Elixir GTIN Validation Library for GS1,
                                UPC-12, and GLN. Validates GTIN-8, GTIN-12
                                (UPC-12), GTIN-13 (GLN), GTIN-14 codes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kickinespresso/ex_gtin";
            };
          } // packageOverrides)
      ) {};

    ex_gtin = ex_gtin_0_3_1;

    ex_guard_1_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_2_11_0 }:
          buildMix ({
            name = "ex_guard";
            version = "1.3.2";
            src = fetchHex {
              pkg = "ex_guard";
              version = "1.3.2";
              sha256 =
                "d7b1d08c67f2db806bc7532e2e44869eb9bdc166540297fb5d019969bfc0c49b";
            };
            beamDeps  = [ fs_2_11_0 ];

            meta = {
              longDescription = ''ExGuard automates various tasks by running
                                custom rules whenever file or directories are
                                modified.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashmili/ex_guard";
            };
          } // packageOverrides)
      ) {};

    ex_guard = ex_guard_1_3_2;

    ex_hash_ring_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_hash_ring";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_hash_ring";
              version = "1.0.0";
              sha256 =
                "e48d55063756cb43988e5360b480533c7e8e6f39e3efc1d1bd34ce04fc0cfece";
            };

            meta = {
              description = ''A fast consistent hash ring implementation in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/ex_hash_ring";
            };
          } // packageOverrides)
      ) {};

    ex_hash_ring = ex_hash_ring_1_0_0;

    ex_heroku_client_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          json_hyperschema_client_builder_0_9_1
        }:
          buildMix ({
            name = "ex_heroku_client";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ex_heroku_client";
              version = "0.4.0";
              sha256 =
                "2a01e68516dbd10513d5b6c8f9fe19f3c0c26adfff69b4485fc0ca655cda78f3";
            };
            beamDeps  = [ json_hyperschema_client_builder_0_9_1 ];

            meta = {
              description = ''An Elixir client for the Heroku API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cantierecreativo/ex_heroku_client";
            };
          } // packageOverrides)
      ) {};

    ex_heroku_client = ex_heroku_client_0_4_0;

    ex_hl7_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_hl7";
            version = "0.4.2";
            src = fetchHex {
              pkg = "ex_hl7";
              version = "0.4.2";
              sha256 =
                "fa1f76e6e3a9a9c3a48cd7dacc84c4b507c40f56c742ebcac17b0c9a6019ac1f";
            };

            meta = {
              description = ''HL7 Parser for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/ex_hl7";
            };
          } // packageOverrides)
      ) {};

    ex_hl7 = ex_hl7_0_4_2;

    ex_ibus_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_ibus";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_ibus";
              version = "0.1.2";
              sha256 =
                "a3ab07d163e4eeecd1d1dfde892000a150e39dbd8fec7ed57a4c75d4949f2ec7";
            };

            meta = {
              description = ''Ibus helper modules'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/konstantinzolotarev/ex_ibus";
            };
          } // packageOverrides)
      ) {};

    ex_ibus = ex_ibus_0_1_2;

    ex_image_info_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_image_info";
            version = "0.2.3";
            src = fetchHex {
              pkg = "ex_image_info";
              version = "0.2.3";
              sha256 =
                "a07888f097d835f5065b282aea160475f0c9c794ef249a4b650ae168319a04e6";
            };

            meta = {
              longDescription = ''ExImageInfo is an Elixir library to parse
                                images (binaries) and get the dimensions (size),
                                detected mime-type and overall validity for a
                                set of image formats. It is the fastest and
                                supports multiple formats.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Group4Layers/ex_image_info";
            };
          } // packageOverrides)
      ) {};

    ex_image_info = ex_image_info_0_2_3;

    ex_imdb_sniffer_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_2,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_imdb_sniffer";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_imdb_sniffer";
              version = "0.1.1";
              sha256 =
                "af71163eba065282cbc0883058b444c3d4efa4c0b0ba05fdbcb73da2488e2e41";
            };
            beamDeps  = [ floki_0_20_2 httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              description = ''IMDb connection to get some information about
                            personnalities.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/FTV-Subtil/ex_imdb_sniffer";
            };
          } // packageOverrides)
      ) {};

    ex_imdb_sniffer = ex_imdb_sniffer_0_1_1;

    ex_insights_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decorator_1_2_3,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_insights";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_insights";
              version = "0.3.1";
              sha256 =
                "b63511aa475205ac8d648b02e4e9ab87323f60bb61858fcb25bf026263d52d39";
            };
            beamDeps  = [ decorator_1_2_3 httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client library to log telemetry data on
                            Azure Application Insights.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/StoiximanServices/ex_insights";
            };
          } // packageOverrides)
      ) {};

    ex_insights = ex_insights_0_3_1;

    ex_jira_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_jira";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_jira";
              version = "0.0.3";
              sha256 =
                "8b15af54a55b289589c4936571b285f0ae4efbc0708527863e461251198da06c";
            };
            beamDeps  = [ httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the JIRA REST API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-ex_jira.git";
            };
          } // packageOverrides)
      ) {};

    ex_jira = ex_jira_0_0_3;

    ex_job_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_job";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_job";
              version = "0.2.1";
              sha256 =
                "f87efc47a87e9ee71c88337c222b6755db248ab28e06811eabc703f77337e37b";
            };

            meta = {
              description = ''Zero dependency, ultra-fast, background job
                            processing library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eidge/ex_job";
            };
          } // packageOverrides)
      ) {};

    ex_job = ex_job_0_2_1;

    ex_json_schema_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_json_schema";
            version = "0.5.4";
            src = fetchHex {
              pkg = "ex_json_schema";
              version = "0.5.4";
              sha256 =
                "f48c3ced9cc184cc333f15d1047b0189325317c6920ea313bd4f7a7952e20d4c";
            };

            meta = {
              longDescription = ''A JSON Schema validator with full support for
                                the draft 4 specification and zero
                                dependencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonasschmidt/ex_json_schema";
            };
          } // packageOverrides)
      ) {};

    ex_json_schema_0_5_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_json_schema";
            version = "0.5.7";
            src = fetchHex {
              pkg = "ex_json_schema";
              version = "0.5.7";
              sha256 =
                "8f3a4ade2d16fd91e627d18af855a7a466caf957ce4445ae3559fa435f1f1a0d";
            };

            meta = {
              longDescription = ''A JSON Schema validator with full support for
                                the draft 4 specification and zero
                                dependencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonasschmidt/ex_json_schema";
            };
          } // packageOverrides)
      ) {};

    ex_json_schema = ex_json_schema_0_5_7;

    ex_junk_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_junk";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_junk";
              version = "0.1.0";
              sha256 =
                "53d6fb0d9bd8036073d499a57509a53ff48717c95504704977ab9c0cd969074c";
            };

            meta = {
              longDescription = ''Junk is a module for generating Junk data in
                                your tests. For when you don`t care about the
                                content, just that it has the right `shape`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/felix-starman/ex_junk";
            };
          } // packageOverrides)
      ) {};

    ex_junk = ex_junk_0_1_0;

    ex_kafka_logger_3_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          kafka_ex_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_kafka_logger";
            version = "3.1.0";
            src = fetchHex {
              pkg = "ex_kafka_logger";
              version = "3.1.0";
              sha256 =
                "f62495d35c1dfa2d9b1e3ef321212dbec0dbc7895ab963f5c133fafcc6e2c1a7";
            };
            beamDeps  = [ kafka_ex_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Elixir logger that serializes to JSON and publish
                            it to Apache Kafka'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffhsta/ExKafkaLogger";
            };
          } // packageOverrides)
      ) {};

    ex_kafka_logger = ex_kafka_logger_3_1_0;

    ex_keypair_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_keypair";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_keypair";
              version = "0.0.3";
              sha256 =
                "bbfad1089b7589df578ac8d58b911cf0715947f524349255f044a56a95950c23";
            };

            meta = {
              description = ''RSA key pair generation in Elixir, using OpenSSL
                            ports.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elefthei/ex_keypair";
            };
          } // packageOverrides)
      ) {};

    ex_keypair = ex_keypair_0_0_3;

    ex_lcd_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_6_2 }:
          buildMix ({
            name = "ex_lcd";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ex_lcd";
              version = "0.4.0";
              sha256 =
                "23558761386c12da4dc0389d78a8f0faef3bc4f9e628d113300085cbfd9af730";
            };
            beamDeps  = [ elixir_ale_0_6_2 ];

            meta = {
              longDescription = ''Hex package to use character matrix LCD
                                displays including HD44780 in your Elixir/nerves
                                projects. Uses elixir_ale for IO.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cthree/ex_lcd";
            };
          } // packageOverrides)
      ) {};

    ex_lcd = ex_lcd_0_4_0;

    ex_levenshtein_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_levenshtein";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_levenshtein";
              version = "0.1.0";
              sha256 =
                "ee70b0e8f61994e5f825651f57303c0dc769ae955639651ea6c005e28fa48de7";
            };

            meta = {
              description = ''Calc Levenshtein distance'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/parallel588/ex_levenshtein";
            };
          } // packageOverrides)
      ) {};

    ex_levenshtein = ex_levenshtein_0_1_0;

    ex_lingua_sentence_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_4 }:
          buildMix ({
            name = "ex_lingua_sentence";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_lingua_sentence";
              version = "0.1.1";
              sha256 =
                "120aad5b7b0e3a39ecf4cdf648fff07ea4bfaf988b65d4c7e88d6876e16dc232";
            };
            beamDeps  = [ exactor_2_2_4 ];

            meta = {
              longDescription = ''Separates a paragraph into sentences in
                                several languages. A port of perl`s
                                Lingua::Sentence'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/stephen-riley/ex_lingua_sentence";
            };
          } // packageOverrides)
      ) {};

    ex_lingua_sentence = ex_lingua_sentence_0_1_1;

    ex_link_header_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_link_header";
            version = "0.0.5";
            src = fetchHex {
              pkg = "ex_link_header";
              version = "0.0.5";
              sha256 =
                "d3cd6b305cfea7db5ce9876e9a9f10f842d53241a966152be43ad3c60c5a13fe";
            };

            meta = {
              description = ''Parse HTTP link headers in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/simonrand/ex_link_header";
            };
          } // packageOverrides)
      ) {};

    ex_link_header = ex_link_header_0_0_5;

    ex_loader_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          jason_1_1_1,
          nanoid_1_0_1
        }:
          buildMix ({
            name = "ex_loader";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ex_loader";
              version = "0.4.1";
              sha256 =
                "2850c3089163fa5270aa2d5b85bad4cc648d2708f6b62a777af616227ba111a7";
            };
            beamDeps  = [ httpoison_1_2_0 jason_1_1_1 nanoid_1_0_1 ];

            meta = {
              longDescription = ''Load a single beam file, an app (a set of
                                beams), or an erlang release (a set of apps) to
                                a node.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tubitv/ex_loader";
            };
          } // packageOverrides)
      ) {};

    ex_loader = ex_loader_0_4_1;

    ex_loglite_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_loglite";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_loglite";
              version = "0.1.1";
              sha256 =
                "8726596646524208a15dc44351eed7b1beeacd051911da9e91455ea7cce08ce8";
            };

            meta = {
              description = ''An Elixir Logger Backend for EVE LogLite.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ElaWorkshop/ex_loglite";
            };
          } // packageOverrides)
      ) {};

    ex_loglite = ex_loglite_0_1_1;

    ex_lttb_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_lttb";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_lttb";
              version = "0.3.0";
              sha256 =
                "6937bf70307d85781200912c3dcf5e32efdcbdf958e9107ee0a61d4fefc1fddb";
            };

            meta = {
              longDescription = ''An Elixir downsampling library that retains
                                the visual characteristics of your data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ispirata/ex_lttb";
            };
          } // packageOverrides)
      ) {};

    ex_lttb = ex_lttb_0_3_0;

    ex_magery_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_1_1_0,
          floki_0_19_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_magery";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_magery";
              version = "0.1.0";
              sha256 =
                "ab17e436bb01ecbc4fe812866ef74fe4a7a12f1d1e5ed7ca513145f699302d76";
            };
            beamDeps  = [ apex_1_1_0 floki_0_19_3 poison_3_1_0 ];

            meta = {
              description = ''Backend for a Magery HTML template system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattschlobohm/ex_magery/";
            };
          } // packageOverrides)
      ) {};

    ex_magery = ex_magery_0_1_0;

    ex_magick_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_magick";
            version = "0.2.4";
            src = fetchHex {
              pkg = "ex_magick";
              version = "0.2.4";
              sha256 =
                "67259d396f95502c5a4006805b7df8e08849cede543650d103340dd4adaa35ab";
            };

            meta = {
              description = ''Simply ImageMagick wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/giraphme/ex_magick";
            };
          } // packageOverrides)
      ) {};

    ex_magick = ex_magick_0_2_4;

    ex_mark2pdf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_0_1_19 }:
          buildMix ({
            name = "ex_mark2pdf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_mark2pdf";
              version = "0.1.0";
              sha256 =
                "d1458c9b01bc53b9c365d4d12ac8187b09e06f02667639d4a63c4543427dfb1d";
            };
            beamDeps  = [ earmark_0_1_19 ];

            meta = {
              description = ''Generate a PDF from Markdown file.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/darui00kara/ex_mark2pdf";
            };
          } // packageOverrides)
      ) {};

    ex_mark2pdf = ex_mark2pdf_0_1_0;

    ex_markdown_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_markdown";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_markdown";
              version = "0.1.0";
              sha256 =
                "727e8d048341e046af49de10163ee9b36bb77c46618154cbad880370f47a9946";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gialib/ex_markdown";
            };
          } // packageOverrides)
      ) {};

    ex_markdown = ex_markdown_0_1_0;

    ex_marshal_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "ex_marshal";
            version = "0.0.10";
            src = fetchHex {
              pkg = "ex_marshal";
              version = "0.0.10";
              sha256 =
                "2f9d392f65fc019522e079e15ac389afce71656b65895bed118a76e8d94d2b8a";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''Ruby Marshal format implemented in Elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/gaynetdinov/ex_marshal";
            };
          } // packageOverrides)
      ) {};

    ex_marshal = ex_marshal_0_0_10;

    ex_matchers_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_matchers";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_matchers";
              version = "0.1.3";
              sha256 =
                "7798c830f59959e2e716aad88f0f267102de43c745a715f009406fa12bdebf23";
            };

            meta = {
              description = ''Matchers for ExUnit assertions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/10Pines/ex_matchers";
            };
          } // packageOverrides)
      ) {};

    ex_matchers = ex_matchers_0_1_3;

    ex_matrix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_matrix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_matrix";
              version = "0.1.0";
              sha256 =
                "48b6f728aafeeeceaaaf6b166296e3eb1a22e8337799cf391ec9f40c7dceebb1";
            };

            meta = {
              longDescription = ''ExMatrix is a new Matrix library for Elixir.
                                This library helps you to create a
                                matrix,manipulate it with values and
                                add/subtract two matrices.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jat10/ex_matrix";
            };
          } // packageOverrides)
      ) {};

    ex_matrix = ex_matrix_0_1_0;

    ex_maybe_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_maybe";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ex_maybe";
              version = "1.0.1";
              sha256 =
                "e7906f0633747f2b9f17b63509f39d8f43f4db20949365580c5e9a9582a4124b";
            };

            meta = {
              longDescription = ''This library fills a bunch of important
                                niches. A Maybe can help you with optional
                                arguments, error handling, and records with
                                optional fields.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/s-m-i-t-a/ex_maybe";
            };
          } // packageOverrides)
      ) {};

    ex_maybe = ex_maybe_1_0_1;

    ex_meck_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "ex_meck";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_meck";
              version = "0.2.0";
              sha256 =
                "8af3041959a7dd5256690782eeb6b2e8d191ffeed699745d66bc45652b2caf7c";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {
              description = ''A mocking library particularly suitable for
                            stateful property based testing.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MaartenFaddegon/ex_meck";
            };
          } // packageOverrides)
      ) {};

    ex_meck = ex_meck_0_2_0;

    ex_metra_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_metra";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_metra";
              version = "0.1.1";
              sha256 =
                "e8b24388c10791dd39cb022e449be34ae8af0586a22ab70a7de0efbf6249ff5a";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              longDescription = ''ExMetra is a wrapper for the Chicago Metra`s
                                (Chicago commuter light rail) JSON API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jhartwell/ExMetra";
            };
          } // packageOverrides)
      ) {};

    ex_metra = ex_metra_0_1_1;

    ex_microsoft_azure_management_generator_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "ex_microsoft_azure_management_generator";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_microsoft_azure_management_generator";
              version = "0.1.0";
              sha256 =
                "899b0a6c9f70d2e06dc74c9a23b094974381abe5a567bc7205e96f4c37cee624";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''An SDK generator for the Microsoft Azure
                                platform`s resource management API (ARM).'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/chgeuer/ex_microsoft_azure_management_generator";
            };
          } // packageOverrides)
      ) {};

    ex_microsoft_azure_management_generator =
      ex_microsoft_azure_management_generator_0_1_0;

    ex_minimatch_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_brace_expansion_0_0_2
        }:
          buildMix ({
            name = "ex_minimatch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_minimatch";
              version = "0.0.1";
              sha256 =
                "3255bb8496635d3ef5d86ec6829958a3573ff730ca01534b0fead9c2e3af7de4";
            };
            beamDeps  = [ ex_brace_expansion_0_0_2 ];

            meta = {
              longDescription = ''Globbing paths without walking the tree!
                                Elixir and Erlang provide `wildcard` functions
                                in the stdlib. But these will walk the directory
                                tree. If you simply want to test whether a file
                                path matches a glob, ExMinimatch is for you. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gniquil/ex_minimatch";
            };
          } // packageOverrides)
      ) {};

    ex_minimatch = ex_minimatch_0_0_1;

    ex_mnable_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_mnable";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_mnable";
              version = "0.1.0";
              sha256 =
                "163625d2e90738b3c5dad6f52473080e92d9ec9865cde89790fc8092da328823";
            };

            meta = {
              description = ''Mnesia helpers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/portnet/ex_mnable";
            };
          } // packageOverrides)
      ) {};

    ex_mnable = ex_mnable_0_1_0;

    ex_mock_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "ex_mock";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_mock";
              version = "0.1.1";
              sha256 =
                "3e1d52efaee5adecc49cb96c7d75c4382e22abedee4e3e4ed849b54f45f6baab";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {
              longDescription = ''A mocking libary for the Elixir language. We
                                use the Erlang meck library to provide module
                                mocking functionality for Elixir. It uses macros
                                in Elixir to expose the functionality in a
                                convenient manner for integrating in Elixir
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/ex_mock";
            };
          } // packageOverrides)
      ) {};

    ex_mock = ex_mock_0_1_1;

    ex_modbus_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          nerves_uart_1_2_0
        }:
          buildMix ({
            name = "ex_modbus";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_modbus";
              version = "0.1.4";
              sha256 =
                "6e1300631ff6d66ccc2ab99f131056ba7a525ba263293204fd5c52ad0a8470f9";
            };
            beamDeps  = [ connection_1_0_4 nerves_uart_1_2_0 ];

            meta = {
              description = ''An Elixir Modbus TCP/RTU client
                            implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirschenberger/ex_modbus";
            };
          } // packageOverrides)
      ) {};

    ex_modbus = ex_modbus_0_1_4;

    ex_multihash_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_multihash";
            version = "2.0.0";
            src = fetchHex {
              pkg = "ex_multihash";
              version = "2.0.0";
              sha256 =
                "66a08a86a1ba00d95736c595d7975696e5691308cdf7770c50b0f84a2a1172b0";
            };

            meta = {
              description = ''This library is the Multihash implementation in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/multiformats/ex_multihash";
            };
          } // packageOverrides)
      ) {};

    ex_multihash = ex_multihash_2_0_0;

    ex_nexmo_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_nexmo";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_nexmo";
              version = "0.1.2";
              sha256 =
                "078eb818397659d438450699e0b282edb6c5abaf2a160d2ca1c24a1c12dfb8f3";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Elixir Nexmo API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KindyNowApp/ex_nexmo";
            };
          } // packageOverrides)
      ) {};

    ex_nexmo = ex_nexmo_0_1_2;

    ex_ngrok_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_ngrok";
            version = "0.3.3";
            src = fetchHex {
              pkg = "ex_ngrok";
              version = "0.3.3";
              sha256 =
                "95bb2b0432b9b2c5e79f26fd2219363cd97703b07255fe61ce601f04e5b8a713";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              longDescription = ''A wrapper around Ngrok providing a secure
                                tunnel to localhost for demoing your
                                Elixir/Phoenix web application or testing
                                webhook integrations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshuafleck/ex_ngrok";
            };
          } // packageOverrides)
      ) {};

    ex_ngrok = ex_ngrok_0_3_3;

    ex_nip_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_nip";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_nip";
              version = "0.1.0";
              sha256 =
                "8a014fc1e63710430e3aca2a85322a38fd13947c72a17648c9e43d895845c89e";
            };

            meta = {
              description = ''Library for NIP number.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crabonature/ex_nip";
            };
          } // packageOverrides)
      ) {};

    ex_nip = ex_nip_0_1_0;

    ex_nsq_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_1_0,
          ibrowse_4_4_0,
          poison_3_1_0,
          socket_0_3_13,
          uuid_1_1_8
        }:
          buildMix ({
            name = "ex_nsq";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ex_nsq";
              version = "1.1.0";
              sha256 =
                "8da6e005d8e08005d22a3a91cb6415e468c9e559f5d60fed328990a469941958";
            };
            beamDeps  = [
                          httpotion_2_1_0
                          ibrowse_4_4_0
                          poison_3_1_0
                          socket_0_3_13
                          uuid_1_1_8
                        ];

            meta = {
              longDescription = ''A client library for NSQ, `ex_nsq` aims to be
                                complete, easy to use, and well tested.
                                Originally developed at Wistia
                                (http://wistia.com) as `elixir_nsq`, `ex_nsq`
                                was forked to make a version with merged PRs and
                                updated dependencies available on Hex.pm for
                                other projects to depend upon.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lambdafn/ex_nsq";
            };
          } // packageOverrides)
      ) {};

    ex_nsq = ex_nsq_1_1_0;

    ex_openpay_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_openpay";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_openpay";
              version = "0.1.2";
              sha256 =
                "c078bc693a6813bf48e93f7fcf224f5f7b416c2b70dd4e47a272e1ae3bdad551";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A OpenPay Library for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/grvty-labs/ex_openpay";
            };
          } // packageOverrides)
      ) {};

    ex_openpay = ex_openpay_0_1_2;

    ex_optional_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_optional";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_optional";
              version = "0.1.2";
              sha256 =
                "b7d25284fd73ad77111c3f641ef7bd85b48b8728fa6d80bb611533936d11b713";
            };

            meta = {
              description = ''A set of functions to easily use \"Optional\"
                            types in Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/stephen-riley/ex_lingua_sentence";
            };
          } // packageOverrides)
      ) {};

    ex_optional = ex_optional_0_1_2;

    ex_orient_rest_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_orient_rest";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_orient_rest";
              version = "0.1.2";
              sha256 =
                "3c775fe7223810b1334e07d921753ea70c9fbdcd527bf381c9b4581347b89d5c";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''REST interface to OrientDB.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DouglasSanders/ex_orient_rest";
            };
          } // packageOverrides)
      ) {};

    ex_orient_rest = ex_orient_rest_0_1_2;

    ex_owm_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          nebulex_1_0_0_rc_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_owm";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_owm";
              version = "1.0.0";
              sha256 =
                "5fb24cb1d556ad557c84b01d32d10dc2e24371ae158f012d2feb09c074eb6ba0";
            };
            beamDeps  = [ httpoison_1_2_0 nebulex_1_0_0_rc_1 poison_3_1_0 ];

            meta = {
              description = ''OpenWeatherMap API Elixir client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kociamber/ex_owm";
            };
          } // packageOverrides)
      ) {};

    ex_owm = ex_owm_1_0_0;

    ex_paidy_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_paidy";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_paidy";
              version = "0.3.0";
              sha256 =
                "19945908287e99e323159488e1e99ae17a7e4e33902001549fb84c71ede138b3";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''simple HTTP client for Paidy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuki-toida/ex_paidy";
            };
          } // packageOverrides)
      ) {};

    ex_paidy = ex_paidy_0_3_0;

    ex_parametarized_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_parametarized";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_parametarized";
              version = "1.0.0";
              sha256 =
                "daa04087cc41608f1604f2cc52dfe3e3c3ee4612c3b6091d7b6025d10d79f31a";
            };

            meta = {
              description = ''Simple macro for parametarized testing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/ex_parametarized";
            };
          } // packageOverrides)
      ) {};

    ex_parametarized = ex_parametarized_1_0_0;

    ex_parameterize_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_parameterize";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_parameterize";
              version = "1.0.0";
              sha256 =
                "24fea3625bf3fbe1ffda0136738ac73b92070cffea312709a538410db0b10448";
            };

            meta = {
              description = ''An Elixir library to parameterize strings in any
                            language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paveltyk/ex_parameterize";
            };
          } // packageOverrides)
      ) {};

    ex_parameterize = ex_parameterize_1_0_0;

    ex_parameterized_1_3_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_parameterized";
            version = "1.3.4";
            src = fetchHex {
              pkg = "ex_parameterized";
              version = "1.3.4";
              sha256 =
                "328317a821dc47397c988a4a571c93e9ccea9e167a0443423cbf9443933cf133";
            };

            meta = {
              description = ''Simple macro for parameterized testing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/ex_parameterized";
            };
          } // packageOverrides)
      ) {};

    ex_parameterized = ex_parameterized_1_3_4;

    ex_payjp_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_payjp";
            version = "0.5.0";
            src = fetchHex {
              pkg = "ex_payjp";
              version = "0.5.0";
              sha256 =
                "5f077865b89dddce9a45885d0de0a949162b961e3b9c0dd1cd5819537d9b5ca5";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''simple HTTP client for PAY.JP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuki-toida/ex_payjp";
            };
          } // packageOverrides)
      ) {};

    ex_payjp = ex_payjp_0_5_0;

    ex_pesel_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_pesel";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_pesel";
              version = "0.2.0";
              sha256 =
                "54f970635ee3eed562f39d3948e359edbd14a26b7fb22233fcd40b825d6ffeaf";
            };

            meta = {
              description = ''Library for PESEL number.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crabonature/ex_pesel";
            };
          } // packageOverrides)
      ) {};

    ex_pesel = ex_pesel_0_2_0;

    ex_phaxio_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_phaxio";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_phaxio";
              version = "0.2.2";
              sha256 =
                "9ab700f92735f1a74c84eaf79284db62346bf35d95b04e811d47f05ee5edf958";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A simple Phaxio client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bnns/ex_phaxio";
            };
          } // packageOverrides)
      ) {};

    ex_phaxio = ex_phaxio_0_2_2;

    ex_phone_number_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sweet_xml_0_6_5 }:
          buildMix ({
            name = "ex_phone_number";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_phone_number";
              version = "0.1.1";
              sha256 =
                "27628565dad81553b0af1fdcc433331eb5afd8f6845964a27ee40c8641d95e48";
            };
            beamDeps  = [ sweet_xml_0_6_5 ];

            meta = {
              longDescription = ''A library for parsing, formatting, and
                                validating international phone numbers. Based on
                                Google`s libphonenumber.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/socialpaymentsbv/ex_phone_number";
            };
          } // packageOverrides)
      ) {};

    ex_phone_number = ex_phone_number_0_1_1;

    ex_ping_server_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_ping_server";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_ping_server";
              version = "0.1.0";
              sha256 =
                "844913b33a82fdb361da0a70fe616552ac1357d75e7a2f808e8b69b73c2c5527";
            };

            meta = {
              description = ''A GenServer which pings itself on an interval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesandariese/ex_ping_server";
            };
          } // packageOverrides)
      ) {};

    ex_ping_server = ex_ping_server_0_1_0;

    ex_pool_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_pool";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_pool";
              version = "0.1.1";
              sha256 =
                "0e2a945acefa067f902dbfa6cb683884838099d6be496dc43cb7dccf31df978d";
            };

            meta = {
              description = ''A generic pooling library for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/jcabotc/ex_pool";
            };
          } // packageOverrides)
      ) {};

    ex_pool = ex_pool_0_1_1;

    ex_postmark_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          hackney_1_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_postmark";
            version = "1.3.0";
            src = fetchHex {
              pkg = "ex_postmark";
              version = "1.3.0";
              sha256 =
                "eaafe4a24a81e6c8c95806e7dc584cd994731701913e59a810c6ab9bd4cea725";
            };
            beamDeps  = [ ex_doc_0_18_3 hackney_1_13_0 poison_3_1_0 ];

            meta = {
              description = ''Postmark email adapter for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/ex_postmark";
            };
          } // packageOverrides)
      ) {};

    ex_postmark = ex_postmark_1_3_0;

    ex_postmen_0_1_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_postmen";
            version = "0.1.10";
            src = fetchHex {
              pkg = "ex_postmen";
              version = "0.1.10";
              sha256 =
                "c0344f49b5526552e8dc810583b6d1141b6e39ee21b21cfb720b99eacc91f3b9";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir SDK for Postmen API https://postmen.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dwarvesf/ex_postmen";
            };
          } // packageOverrides)
      ) {};

    ex_postmen = ex_postmen_0_1_10;

    ex_prima_toolbox_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_cli_0_1_4 }:
          buildMix ({
            name = "ex_prima_toolbox";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ex_prima_toolbox";
              version = "0.0.4";
              sha256 =
                "ce43316f0aee197253bad6c63a179e829f85a794e464e699bcc3facb1678c860";
            };
            beamDeps  = [ ex_cli_0_1_4 ];

            meta = {
              description = ''elixir toolbox for prima.it'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/primait/ex_toolbox";
            };
          } // packageOverrides)
      ) {};

    ex_prima_toolbox = ex_prima_toolbox_0_0_4;

    ex_progress_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_progress";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_progress";
              version = "0.1.0";
              sha256 =
                "b4b50aa5a917c0d66fd43eb17fd53a80e6e0201f2dfb628a009ca95282917d60";
            };

            meta = {
              description = ''A library for tracking progress across many
                            cooperating tasks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/acj/ex_progress";
            };
          } // packageOverrides)
      ) {};

    ex_progress = ex_progress_0_1_0;

    ex_prompt_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_prompt";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_prompt";
              version = "0.1.3";
              sha256 =
                "3b1439fe0499e759d3e536b9d2a04582d5e0cc50d6f8a61ff55762163aee3057";
            };

            meta = {
              longDescription = ''ExPrompt is a helper package to add
                                interactivity to your command line applications
                                as easy as possible.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/behind-design/ex_prompt";
            };
          } // packageOverrides)
      ) {};

    ex_prompt = ex_prompt_0_1_3;

    ex_propisju_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_propisju";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_propisju";
              version = "0.1.4";
              sha256 =
                "3ed9564368c144299f76134766ffb2b143c4a24939a808857db25c29ff2fb280";
            };

            meta = {
              description = ''Copypast gem ru_propisju to elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sergey-chechaev/ex_propisju";
            };
          } // packageOverrides)
      ) {};

    ex_propisju = ex_propisju_0_1_4;

    ex_queue_0_4_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_queue";
            version = "0.4.7";
            src = fetchHex {
              pkg = "ex_queue";
              version = "0.4.7";
              sha256 =
                "ddd312214bb0ca2cdfb930e57ee26937894078054b254fea0c9f7141a2b899f5";
            };

            meta = {
              description = ''A FIFO queue wrapped around GenServer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_queue";
            };
          } // packageOverrides)
      ) {};

    ex_queue = ex_queue_0_4_7;

    ex_raja_ongkir_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "ex_raja_ongkir";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_raja_ongkir";
              version = "0.1.3";
              sha256 =
                "79202073d93d2acd7780cc80bc8eb72e0aa2cf64d29d8e5c9a58f25f3b78d4f3";
            };
            beamDeps  = [ httpotion_3_1_0 jason_1_1_1 ];

            meta = {
              description = ''API wrapper of RajaOngkir for Elixir.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ex_raja_ongkir = ex_raja_ongkir_0_1_3;

    ex_rated_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex2ms_1_5_0 }:
          buildMix ({
            name = "ex_rated";
            version = "1.3.1";
            src = fetchHex {
              pkg = "ex_rated";
              version = "1.3.1";
              sha256 =
                "24e863783609f2fde4102e6f7e4232b7d07182cc94b33afed89c525ba9aaf030";
            };
            beamDeps  = [ ex2ms_1_5_0 ];

            meta = {
              longDescription = ''ExRated, the OTP GenServer with the naughty
                                name that allows you to rate-limit calls to any
                                service that requires it. For example,
                                rate-limit calls to your favorite API which
                                requires no more than `limit` API calls within a
                                `scale` milliseconds time window.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/grempe/ex_rated";
            };
          } // packageOverrides)
      ) {};

    ex_rated = ex_rated_1_3_1;

    ex_ray_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, otter_0_4_0 }:
          buildMix ({
            name = "ex_ray";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_ray";
              version = "0.1.4";
              sha256 =
                "eab2f4656e4f682b4400735583a5801b1ecbcf2d63971afe58ec7a7cbc5ec94c";
            };
            beamDeps  = [ otter_0_4_0 ];

            meta = {
              longDescription = ''ExRay enables tracing for your Elixir/Phoenix
                                applications using OpenTracing powered by
                                Otter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/derailed/ex_ray";
            };
          } // packageOverrides)
      ) {};

    ex_ray = ex_ray_0_1_4;

    ex_ray_casting_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_ray_casting";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_ray_casting";
              version = "0.1.0";
              sha256 =
                "00e9023b567c17f5bbf1ea29bece2ea881e1d29bb644a7b6c3bce3e4aa941b6c";
            };

            meta = {
              description = ''A Ray Casting algorithm for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/grvty-labs/ex_ray_casting";
            };
          } // packageOverrides)
      ) {};

    ex_ray_casting = ex_ray_casting_0_1_0;

    ex_redi_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_7_1 }:
          buildMix ({
            name = "ex_redi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_redi";
              version = "0.1.1";
              sha256 =
                "6ef209694db22be61caa531bb383ed40e9ea4004083789774d7d862eae9f2ad2";
            };
            beamDeps  = [ redix_0_7_1 ];

            meta = {
              description = ''A simple Elixir client for RediSearch'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/l1h3r/ex_redi";
            };
          } // packageOverrides)
      ) {};

    ex_redi = ex_redi_0_1_1;

    ex_redis_pool_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eredis_1_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "ex_redis_pool";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_redis_pool";
              version = "0.2.1";
              sha256 =
                "997af1bbdc3c61e00f63c4559a5e87c1ac848da093660130c0c5f11f85b8520e";
            };
            beamDeps  = [ eredis_1_1_0 poolboy_1_5_1 ];

            meta = {
              longDescription = ''Elixir Redis client with sync/async
                                connection pools, sharding, and one-time
                                hostname resolution.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ntrepid8/ex_redis_pool";
            };
          } // packageOverrides)
      ) {};

    ex_redis_pool = ex_redis_pool_0_2_1;

    ex_regon_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_regon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_regon";
              version = "0.1.0";
              sha256 =
                "e06856ddfe0cb26380f8fbde1e30b46bff4a33f0b12cc87299ae54cd610b4639";
            };

            meta = {
              description = ''Library for REGON number.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crabonature/ex_regon";
            };
          } // packageOverrides)
      ) {};

    ex_regon = ex_regon_0_1_0;

    ex_remote_dockers_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_remote_dockers";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_remote_dockers";
              version = "0.1.2";
              sha256 =
                "27a100b0702feef44c10cb3de68a49c3cf223e14485125df8d743af19240e071";
            };
            beamDeps  = [ httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Elixir library to manage containers from
                                several remote dockers, using the Docker Engine
                                API v1.35.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/FTV-Subtil/ex_remote_dockers";
            };
          } // packageOverrides)
      ) {};

    ex_remote_dockers = ex_remote_dockers_0_1_2;

    ex_rfc3966_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_abnf_0_3_0 }:
          buildMix ({
            name = "ex_rfc3966";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_rfc3966";
              version = "0.3.0";
              sha256 =
                "e9eaff0435eea3c2f45251d3effd6f7788ae91b956398c00c74a1dc46c13701f";
            };
            beamDeps  = [ ex_abnf_0_3_0 ];

            meta = {
              longDescription = ''A \"tel\" URI parser trying to be strictly
                                compatible with RFC3966. Uses official ABNF
                                grammar and ex_abnf as interpreter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_rfc3966";
            };
          } // packageOverrides)
      ) {};

    ex_rfc3966 = ex_rfc3966_0_3_0;

    ex_rfc3986_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_abnf_0_3_0 }:
          buildMix ({
            name = "ex_rfc3986";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_rfc3986";
              version = "0.3.0";
              sha256 =
                "addf8f1e0949c69451ba4d1f2a233194e9b08d358c277a9489a32435db686b8c";
            };
            beamDeps  = [ ex_abnf_0_3_0 ];

            meta = {
              longDescription = ''An URI parser trying to be strictly
                                compatible with RFC3986. Uses official ABNF
                                grammar and ex_abnf as interpreter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_rfc3986";
            };
          } // packageOverrides)
      ) {};

    ex_rfc3986 = ex_rfc3986_0_3_0;

    ex_rlp_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_rlp";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_rlp";
              version = "0.2.1";
              sha256 =
                "3a524ee871392ed2891390285a26507aee0a0c2a7789145e45730321a788e50a";
            };

            meta = {
              description = ''Ethereum`s Recursive Length Prefix (RLP)
                            encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exthereum/ex_rlp";
            };
          } // packageOverrides)
      ) {};

    ex_rlp_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_rlp";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_rlp";
              version = "0.3.0";
              sha256 =
                "75b68d4033ea77d95e166694122e9f27aaeeeb3313dccf1e49c787e22751e534";
            };

            meta = {
              description = ''Ethereum`s Recursive Length Prefix (RLP)
                            encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exthereum/ex_rlp";
            };
          } // packageOverrides)
      ) {};

    ex_rlp = ex_rlp_0_3_0;

    ex_rollbar_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "ex_rollbar";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_rollbar";
              version = "0.1.3";
              sha256 =
                "9fb7ee71c46c55fd4eb9a46ee40c8ef2148b1237bd9f1624e90451388cebffea";
            };
            beamDeps  = [ poison_3_1_0 uuid_1_1_8 ];

            meta = {
              description = ''A Rollbar Client for working in non serverside
                            environments.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ConnorRigby/ex_rollbar";
            };
          } // packageOverrides)
      ) {};

    ex_rollbar = ex_rollbar_0_1_3;

    ex_rsagen_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_rsagen";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_rsagen";
              version = "0.1.0";
              sha256 =
                "5ac7abab465e501f0d69842b695eeda7808b66cdbad8e12a4cfe62cc097320c5";
            };

            meta = {
              description = ''Crypto module with NIF`s for generate RSA keys
                            with DES3 + encrypt/decrypt data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kiopro/ex_rsagen";
            };
          } // packageOverrides)
      ) {};

    ex_rsagen = ex_rsagen_0_1_0;

    ex_schedule_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_schedule";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_schedule";
              version = "0.1.0";
              sha256 =
                "df763cb6299cca695c0b4f7bf28592840c8b4cf07ea721c1d7c38ed301b5381c";
            };

            meta = {
              description = ''Library to run tasks in an interval basis'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/QuiqUpLTD/ex_schedule";
            };
          } // packageOverrides)
      ) {};

    ex_schedule = ex_schedule_0_1_0;

    ex_shards_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex2ms_1_5_0,
          shards_0_5_1
        }:
          buildMix ({
            name = "ex_shards";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_shards";
              version = "0.2.1";
              sha256 =
                "e81a99fc702a90a35b4059dee0c707f05060d27f3820af5c4fe0e1e2dc258dbf";
            };
            beamDeps  = [ ex2ms_1_5_0 shards_0_5_1 ];

            meta = {
              description = ''ExShards – Elixir Wrapper for cabol/shards'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/ex_shards";
            };
          } // packageOverrides)
      ) {};

    ex_shards = ex_shards_0_2_1;

    ex_shla_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "ex_shla";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ex_shla";
              version = "0.1.5";
              sha256 =
                "1c4fba6c2d5de3bab7d00859f058d1cd60f05d04baa7f31d1b5ad490d7a8ca50";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''Elixir client for the Rick and Morty API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/l1h3r/ex_shla";
            };
          } // packageOverrides)
      ) {};

    ex_shla = ex_shla_0_1_5;

    ex_sider_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_sider";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_sider";
              version = "0.2.0";
              sha256 =
                "9015a56ddf135475eeb9800b9d9388a73648742ea2e771b582e53a74a4dc789c";
            };

            meta = {
              description = ''Elixir Map/List/Set interfaces for Redis
                            datastructures.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/ephe-meral/ex_sider";
            };
          } // packageOverrides)
      ) {};

    ex_sider = ex_sider_0_2_0;

    ex_sitemap_parser_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_0_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "ex_sitemap_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_sitemap_parser";
              version = "0.1.0";
              sha256 =
                "acf45903168ba511b65e7f41036b6314b4a489208b9de5e267a8b1638c4d3dae";
            };
            beamDeps  = [ httpoison_1_0_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''Tool for parsing sitemaps and sitemap indices'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ValleyHosting/ex_sitemap_parser";
            };
          } // packageOverrides)
      ) {};

    ex_sitemap_parser = ex_sitemap_parser_0_1_0;

    ex_slack_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0,
          websockex_0_4_1
        }:
          buildMix ({
            name = "ex_slack";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_slack";
              version = "0.2.2";
              sha256 =
                "e97de80f7264ab5300d83f83bc3edffbb0734cf078b584aabce8891ace791d31";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 websockex_0_4_1 ];

            meta = {
              description = ''Elixir API for Slack.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ConnorRigby/ex_slack";
            };
          } // packageOverrides)
      ) {};

    ex_slack = ex_slack_0_2_2;

    ex_slp_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_5,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "ex_slp";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_slp";
              version = "0.1.2";
              sha256 =
                "9964f4a3498731b4371be85b913d057b21308d0cbcdc1b99ec18d242d87928c5";
            };
            beamDeps  = [ earmark_1_2_5 ex_doc_0_18_3 ];

            meta = {
              longDescription = ''Zero-config local network Elixir/Erlang node
                                discovery lib. Allows an Elixir node to register
                                itself as a local netowrk service and discover
                                the orher registered services.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/4pcbr/ex_slp_tk";
            };
          } // packageOverrides)
      ) {};

    ex_slp = ex_slp_0_1_2;

    ex_sonar_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_sonar";
            version = "1.0.3";
            src = fetchHex {
              pkg = "ex_sonar";
              version = "1.0.3";
              sha256 =
                "85870c1a718383eeeeaeec8a1e73ba38838d938d6fed004c6db7f3c8a973dae9";
            };
            beamDeps  = [ floki_0_20_3 httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''A Send Sonar API interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_sonar";
            };
          } // packageOverrides)
      ) {};

    ex_sonar_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_sonar";
            version = "2.0.1";
            src = fetchHex {
              pkg = "ex_sonar";
              version = "2.0.1";
              sha256 =
                "feac0c92456761edecd438a363a5f8223b56c2d7b6c98419bbf68a61f5c366fe";
            };
            beamDeps  = [ floki_0_20_3 httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''A Send Sonar API interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_sonar";
            };
          } // packageOverrides)
      ) {};

    ex_sonar = ex_sonar_2_0_1;

    ex_spec_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_spec";
            version = "2.0.1";
            src = fetchHex {
              pkg = "ex_spec";
              version = "2.0.1";
              sha256 =
                "b44fe5054497411a58341ece5bf7756c219d9d6c1303b5ac467f557a0a4c31ac";
            };

            meta = {
              description = ''BDD-like syntax for ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/ex_spec";
            };
          } // packageOverrides)
      ) {};

    ex_spec = ex_spec_2_0_1;

    ex_spirit_0_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_spirit";
            version = "0.3.5";
            src = fetchHex {
              pkg = "ex_spirit";
              version = "0.3.5";
              sha256 =
                "8da0ef6baa663f4bcb613e95865abd4849449bb666c1a5c0a90d903a8b016c01";
            };

            meta = {
              description = ''Spirit-style PEG-like parsing library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/ex_spirit";
            };
          } // packageOverrides)
      ) {};

    ex_spirit_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_spirit";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ex_spirit";
              version = "0.4.0";
              sha256 =
                "442063817ad8a4c5f632644a9b0b086f11e08b2599a7d32e0ae4e752f4e29e23";
            };

            meta = {
              description = ''Spirit-style PEG-like parsing library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/ex_spirit";
            };
          } // packageOverrides)
      ) {};

    ex_spirit = ex_spirit_0_4_0;

    ex_sshd_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_sshd";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_sshd";
              version = "0.1.0";
              sha256 =
                "363f9fea0167fb1f48b659aa6a15cb98f240992ca60e95dc93d691265f481d90";
            };

            meta = {
              longDescription = ''Simple Elixir SSH worker that provides an
                                Elixir shell over SSH into your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tverlaan/ex_sshd";
            };
          } // packageOverrides)
      ) {};

    ex_sshd = ex_sshd_0_1_0;

    ex_stats_agg_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exprof_0_2_3 }:
          buildMix ({
            name = "ex_stats_agg";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ex_stats_agg";
              version = "0.1.5";
              sha256 =
                "923e3278c5eaf238b8f09c0337db10a27def2d3733998ae6da890bb82a765b53";
            };
            beamDeps  = [ exprof_0_2_3 ];

            meta = {
              longDescription = ''StatsAgg is a library that allows the
                                developer to instrument functions so that
                                execution times are logged. Stats can then be
                                retrieved and used to populate dashboards and
                                other Information Radiators.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciroque/ex_stats_agg";
            };
          } // packageOverrides)
      ) {};

    ex_stats_agg = ex_stats_agg_0_1_5;

    ex_stats_tracker_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_stats_tracker";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_stats_tracker";
              version = "0.1.2";
              sha256 =
                "357da2783329f7c6e17221fb0d4ea93d2748654fa97209ec0a5d3aa2ee2ee98c";
            };

            meta = {
              description = ''ExStatsTracker is a StatsD client for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/postmates/ex-stats-tracker";
            };
          } // packageOverrides)
      ) {};

    ex_stats_tracker = ex_stats_tracker_0_1_2;

    ex_statsd_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_statsd";
            version = "0.5.3";
            src = fetchHex {
              pkg = "ex_statsd";
              version = "0.5.3";
              sha256 =
                "357c616a327a40133e49a54db1d46b0d7c9ab2de186f7bfecdc0efca6394adf6";
            };

            meta = {
              description = ''A StatsD client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_statsd";
            };
          } // packageOverrides)
      ) {};

    ex_statsd = ex_statsd_0_5_3;

    ex_statsd_pd_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_statsd_pd";
            version = "0.6.0";
            src = fetchHex {
              pkg = "ex_statsd_pd";
              version = "0.6.0";
              sha256 =
                "7b939abb24641429be69b9ce8d70c315d4d69646af086c9fe3a3cd54d371e3a0";
            };

            meta = {
              description = ''A StatsD client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PagerDuty/ex_statsd";
            };
          } // packageOverrides)
      ) {};

    ex_statsd_pd = ex_statsd_pd_0_6_0;

    ex_string_util_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_string_util";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_string_util";
              version = "0.1.0";
              sha256 =
                "dec0915b75c1c235c6d153fbb98585f8df269aee4e95503540961e1d10a5ea0a";
            };

            meta = {
              longDescription = ''String Utility module. It helps perform some
                                validation during application development
                                particularly the ones that involve user input
                                like REST API or Web Applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Tochemey/ExString.git";
            };
          } // packageOverrides)
      ) {};

    ex_string_util = ex_string_util_0_1_0;

    ex_structable_0_3_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, exconstructor_1_1_0
        }:
          buildMix ({
            name = "ex_structable";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_structable";
              version = "0.3.1";
              sha256 =
                "cf639fd5457ae90c6050a19b458b62a7b8c7381d5b274d3080ff58f81993e4cd";
            };
            beamDeps  = [ exconstructor_1_1_0 ];

            meta = {
              longDescription = ''Reduce boilerplate by generating struct `new`
                                and `put` functions. and validate your structs
                                when they are created and updated.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dylan-chong/ex_structable";
            };
          } // packageOverrides)
      ) {};

    ex_structable = ex_structable_0_3_1;

    ex_stub_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_stub";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_stub";
              version = "0.2.0";
              sha256 =
                "ca2f1dbdf74a951a9639398bd3ebdaf08d112776e68a3cfdc588ff9c56c566db";
            };

            meta = {
              longDescription = ''ExStub provides an easy way to stub a module
                                to facilitate writing clean, isolated unit
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oarrabi/ex_stub";
            };
          } // packageOverrides)
      ) {};

    ex_stub = ex_stub_0_2_0;

    ex_sync_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "ex_sync";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ex_sync";
              version = "0.0.4";
              sha256 =
                "017df08232a3bff5254bb910c9a8bf8ac3be551fc0e224bc96b97b637ce2b49a";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 ];

            meta = {
              longDescription = ''A library to handle [Differential
                                Synchroniazation](https://neil.fraser.name/writing/sync/)
                                in an Elixir app.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/invrs/exsync";
            };
          } // packageOverrides)
      ) {};

    ex_sync = ex_sync_0_0_4;

    ex_taxjar_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "ex_taxjar";
            version = "0.5.0";
            src = fetchHex {
              pkg = "ex_taxjar";
              version = "0.5.0";
              sha256 =
                "8290be34688b71b4c9d947982a4becd2139a579cb5440730f9c6100f5b426f5c";
            };
            beamDeps  = [ exjsx_4_0_0 httpoison_1_2_0 ];

            meta = {
              description = ''A client library for use with v2 of the TaxJar
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cas27/ex_taxjar";
            };
          } // packageOverrides)
      ) {};

    ex_taxjar = ex_taxjar_0_5_0;

    ex_termbox_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "ex_termbox";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_termbox";
              version = "0.2.0";
              sha256 =
                "ca79b0a51be640f1727781ab9a367ec42039c28b372940dbd97f96207f07919d";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Low-level termbox bindings and a high-level
                            terminal UI kit for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ndreynolds/ex_termbox";
            };
          } // packageOverrides)
      ) {};

    ex_termbox = ex_termbox_0_2_0;

    ex_test_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_test";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_test";
              version = "0.0.2";
              sha256 =
                "fdc33e0fa2fdab921fa54f0484645681ed0695f69439a6f40430e31fbc589756";
            };

            meta = {
              description = ''Wrapper around ExUnit to support BBD (rspec) like
                            syntax'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mcb/ex_test";
            };
          } // packageOverrides)
      ) {};

    ex_test = ex_test_0_0_2;

    ex_text_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_text";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_text";
              version = "0.1.0";
              sha256 =
                "92e68f6e00ae8b8baf08762dcbbd96f58444e41c956cd4a1e43db83e4ec4c2e0";
            };

            meta = {
              description = ''A collection of text algorithms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gottfrois/ex_text";
            };
          } // packageOverrides)
      ) {};

    ex_text = ex_text_0_1_0;

    ex_timer_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_timer";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_timer";
              version = "0.1.2";
              sha256 =
                "2c86df0a00e9c9bde1df9b5b696b0e86882b514e934c173986a0dceeb3c668cf";
            };

            meta = {
              description = ''Better performance timer in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kminwoog/ex_timer";
            };
          } // packageOverrides)
      ) {};

    ex_timer = ex_timer_0_1_2;

    ex_tm_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_tm";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ex_tm";
              version = "1.1.0";
              sha256 =
                "fb62352265fa1d837567d485df2131fb3824a28e8195bc07f16a25a1d447cf69";
            };

            meta = {
              description = ''Turing machine simulator in Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/SekiT/ex_tm";
            };
          } // packageOverrides)
      ) {};

    ex_tm = ex_tm_1_1_0;

    ex_tools_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_tools";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_tools";
              version = "0.1.1";
              sha256 =
                "8c2c28b0a4b889200413271218f4e7b8c06c4a712bdc31c880f41cae4b19810d";
            };

            meta = {
              description = ''Elixir Tools.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/relayr/pdm-ex-tools";
            };
          } // packageOverrides)
      ) {};

    ex_tools = ex_tools_0_1_1;

    ex_trello_1_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          oauther_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_trello";
            version = "1.1.1";
            src = fetchHex {
              pkg = "ex_trello";
              version = "1.1.1";
              sha256 =
                "d80270c7b474b2f1da5df77056754fed21b91e780581aeaa466a084632192fd8";
            };
            beamDeps  = [ httpoison_0_13_0 oauther_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''An Elixir package to interface with the Trello
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ChrisYammine/ex_trello";
            };
          } // packageOverrides)
      ) {};

    ex_trello = ex_trello_1_1_1;

    ex_twilio_lookup_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "ex_twilio_lookup";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_twilio_lookup";
              version = "0.1.0";
              sha256 =
                "326dc4a9b7a2d34ff7aba24ae5efa0daf278ec9c0f4590d6a448877932cf4191";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''A @twilio lookup API interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HiOperator/ex_twilio_lookup";
            };
          } // packageOverrides)
      ) {};

    ex_twilio_lookup = ex_twilio_lookup_0_1_0;

    ex_twiml_2_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_twiml";
            version = "2.1.3";
            src = fetchHex {
              pkg = "ex_twiml";
              version = "2.1.3";
              sha256 =
                "f576dc688445afb441b6b3318ba9b09b6feda8aae93de7e1007c0e879a7da787";
            };

            meta = {
              description = ''Generate TwiML with Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/ex_twiml";
            };
          } // packageOverrides)
      ) {};

    ex_twiml = ex_twiml_2_1_3;

    ex_twitch_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_twitch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_twitch";
              version = "0.0.1";
              sha256 =
                "19141f28dc4ec747667433b2694ca3ff852a1e5d0cec9f046b7de609aaa1b90e";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Simple Elixir wrapper for the Twitch V5 API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plackemacher/ex_twitch";
            };
          } // packageOverrides)
      ) {};

    ex_twitch = ex_twitch_0_0_1;

    ex_uc_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_uc";
            version = "1.2.0";
            src = fetchHex {
              pkg = "ex_uc";
              version = "1.2.0";
              sha256 =
                "464c7b5096b92eb663646b17ab611219c5e86e1a31c879a79939558ec020a674";
            };

            meta = {
              longDescription = ''Utility to convert values between different
                                units of the same kind. Extremely easy to extend
                                and to use.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carturoch/ex_uc";
            };
          } // packageOverrides)
      ) {};

    ex_uc = ex_uc_1_2_0;

    ex_ulid_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_ulid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_ulid";
              version = "0.1.0";
              sha256 =
                "a2befd477aebc4639563de7e233e175cacf8a8f42c8f6778c88d60c13bf20860";
            };

            meta = {
              description = ''Universally Unique Lexicographically Sortable
                            Identifier (ULID) in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/omisego/ex_ulid";
            };
          } // packageOverrides)
      ) {};

    ex_ulid = ex_ulid_0_1_0;

    ex_unit_assertions_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_assertions";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_unit_assertions";
              version = "0.2.0";
              sha256 =
                "e6e44f67ef56e64f2638cee54b709708b7df75c452f0dd0091bd97a0ba56eece";
            };

            meta = {
              description = ''useful ExUnit assertions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/ex_unit_assertions";
            };
          } // packageOverrides)
      ) {};

    ex_unit_assertions = ex_unit_assertions_0_2_0;

    ex_unit_fixtures_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_fixtures";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_unit_fixtures";
              version = "0.3.1";
              sha256 =
                "b4b988211bf4cd08a26eb76756e4563c94c6648c195e45af26ea62e4d37a65f6";
            };

            meta = {
              description = ''A modular fixture system for ExUnit, inspired by
                            py.test fixtures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/ex_unit_fixtures";
            };
          } // packageOverrides)
      ) {};

    ex_unit_fixtures = ex_unit_fixtures_0_3_1;

    ex_unit_let_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_let";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_unit_let";
              version = "0.1.0";
              sha256 =
                "a92bebf5f2395f1dd797366b26d7e97bd33ce2030d11311d85e27683e06d8f16";
            };

            meta = {
              description = ''A simple let macro for ExUnit.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rzane/ex_unit_let";
            };
          } // packageOverrides)
      ) {};

    ex_unit_let = ex_unit_let_0_1_0;

    ex_unit_notifier_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_notifier";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_unit_notifier";
              version = "0.1.4";
              sha256 =
                "fddf5054dd5fd2f809e837b749570baa5c9798e11d0163921baec49b7d5762f2";
            };

            meta = {
              description = ''Show status notifications for ExUnit test runs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/navinpeiris/ex_unit_notifier";
            };
          } // packageOverrides)
      ) {};

    ex_unit_notifier = ex_unit_notifier_0_1_4;

    ex_utils_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_utils";
            version = "0.1.7";
            src = fetchHex {
              pkg = "ex_utils";
              version = "0.1.7";
              sha256 =
                "66d4fe75285948f2d1e69c2a5ddd651c398c813574f8d36a9eef11dc20356ef6";
            };

            meta = {
              description = ''Collection of Awesome Elixir shortcuts and
                            utilities ⚡'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sheharyarn/ex_utils";
            };
          } // packageOverrides)
      ) {};

    ex_utils = ex_utils_0_1_7;

    ex_utils_caddr_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_utils_caddr";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_utils_caddr";
              version = "0.2.0";
              sha256 =
                "fdd517e46707531e7a8bcf404022501e4e52f6394a580387c350a3d34ee9142e";
            };

            meta = {
              description = ''Things I didn`t want to have to write again.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jamesandariese/ex-utils-caddr";
            };
          } // packageOverrides)
      ) {};

    ex_utils_caddr = ex_utils_caddr_0_2_0;

    ex_validator_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_validator";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_validator";
              version = "0.1.1";
              sha256 =
                "f38c9b86c7f497c8317b394b6c262a5823e296f50175807414252ac33e0eefbb";
            };

            meta = {
              description = ''Helpers for validating and normalizing Elixir
                            data structures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/costaraphael/ex_validator";
            };
          } // packageOverrides)
      ) {};

    ex_validator = ex_validator_0_1_1;

    ex_versions_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_versions";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_versions";
              version = "0.0.1";
              sha256 =
                "d2ea030fdfe5576807065a7e7131aa5681cd1cae253c88377177fcdd323506e9";
            };

            meta = {
              longDescription = ''A module that updates your README.md with
                                version numbers for specified dependencies'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MainShayne233/ex_versions";
            };
          } // packageOverrides)
      ) {};

    ex_versions = ex_versions_0_0_1;

    ex_victor_ops_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_0_0
        }:
          buildMix ({
            name = "ex_victor_ops";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ex_victor_ops";
              version = "0.4.1";
              sha256 =
                "dd3484e5ee9958bfa8905ddcdf85ee254eba2bf6d090a1503ab3832d840a205e";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_0_0 ];

            meta = {
              description = ''VictorOps API library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cagedata/ex_victor_ops";
            };
          } // packageOverrides)
      ) {};

    ex_victor_ops = ex_victor_ops_0_4_1;

    ex_video_factory_0_3_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_video_factory";
            version = "0.3.6";
            src = fetchHex {
              pkg = "ex_video_factory";
              version = "0.3.6";
              sha256 =
                "c3511988b08a533c1307fd065841f117ef6bb95dd98afa8aa02aa6b8659b52a8";
            };
            beamDeps  = [ httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Elixir library to consume the public part
                                REST API of FranceTélévisions Video
                                Factory.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/FTV-Subtil/ex_video_factory";
            };
          } // packageOverrides)
      ) {};

    ex_video_factory = ex_video_factory_0_3_6;

    ex_vmstats_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_vmstats";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_vmstats";
              version = "0.0.1";
              sha256 =
                "587d088696b51b0e053b2626c6de51ca7be67b5e3a49c7320da5b4e7cd96d347";
            };

            meta = {
              description = ''An Elixir package for pushing Erlang VM stats
                            into StatsD.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fanduel/ex_vmstats";
            };
          } // packageOverrides)
      ) {};

    ex_vmstats = ex_vmstats_0_0_1;

    ex_watcher_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          fs_2_11_0
        }:
          buildMix ({
            name = "ex_watcher";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_watcher";
              version = "0.1.0";
              sha256 =
                "5ddd39c27759b90732ad077216080dc5d84c202d510b128fa7a0e23926e2bda7";
            };
            beamDeps  = [ ex_doc_0_18_3 fs_2_11_0 ];

            meta = {
              description = ''An Elixir file change watcher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/ex_watcher";
            };
          } // packageOverrides)
      ) {};

    ex_watcher = ex_watcher_0_1_0;

    ex_webpack_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_webpack";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_webpack";
              version = "0.1.1";
              sha256 =
                "df9dd6d60399248ca568179473ce66f92d54e790a8fdaea4a62afd9e86e8a6cf";
            };

            meta = {
              description = ''A wrapper for webpack'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ConnorRigby/ex_webpack";
            };
          } // packageOverrides)
      ) {};

    ex_webpack = ex_webpack_0_1_1;

    ex_wirecard_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_2,
          tesla_0_10_0
        }:
          buildMix ({
            name = "ex_wirecard";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_wirecard";
              version = "0.1.2";
              sha256 =
                "773da69ddfd302dc8e159c3504bcbad57e88740f2bbabe109ab007ae4c0e8a71";
            };
            beamDeps  = [ erlsom_1_4_2 tesla_0_10_0 ];

            meta = {
              description = ''API Wrapper for WireCard.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jshmrtn/ex-wirecard";
            };
          } // packageOverrides)
      ) {};

    ex_wirecard = ex_wirecard_0_1_2;

    ex_wpvulndb_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_wpvulndb";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_wpvulndb";
              version = "0.2.0";
              sha256 =
                "ecd8088e2fdc612c8511a9e3d21a5606ce0c2fbf9e436e8331a3c6875553f31c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A minimal API wrapper for the WPScan
                            Vulnerability Database API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/juhalehtonen/ex_wpvulndb";
            };
          } // packageOverrides)
      ) {};

    ex_wpvulndb = ex_wpvulndb_0_2_0;

    ex_zenhub_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_zenhub";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_zenhub";
              version = "0.1.1";
              sha256 =
                "3b930cb9348ccefd7ab012add32c42be9720ec4ddf4700d9c35e87a0268ac450";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Unofficial Elixir client for the ZenHub API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ChrisYammine/ex_zen_hub";
            };
          } // packageOverrides)
      ) {};

    ex_zenhub = ex_zenhub_0_1_1;

    ex_zipper_0_1_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, stream_data_0_4_2
        }:
          buildMix ({
            name = "ex_zipper";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_zipper";
              version = "0.1.3";
              sha256 =
                "783b768f313f9be65bf0b3ef31e21a345afd8522e316286957131c13d77df1c0";
            };
            beamDeps  = [ stream_data_0_4_2 ];

            meta = {
              description = ''Huet`s zippers in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mikowitz/ex_zipper.git";
            };
          } // packageOverrides)
      ) {};

    ex_zipper = ex_zipper_0_1_3;

    exa_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exa";
            version = "0.0.0";
            src = fetchHex {
              pkg = "exa";
              version = "0.0.0";
              sha256 =
                "d76ec41dfe1a1220834c60d096f05e152ef37f4780c1ad78132dc999b98c1455";
            };

            meta = {
              description = ''Exa'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/exa-vm/exa";
            };
          } // packageOverrides)
      ) {};

    exa = exa_0_0_0;

    exactor_2_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exactor";
            version = "2.2.4";
            src = fetchHex {
              pkg = "exactor";
              version = "2.2.4";
              sha256 =
                "1222419f706e01bfa1095aec9acf6421367dcfab798a6f67c54cf784733cd6b5";
            };

            meta = {
              description = ''Simplified creation of GenServer based processes
                            in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/exactor";
            };
          } // packageOverrides)
      ) {};

    exactor = exactor_2_2_4;

    exalgebra_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exalgebra";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exalgebra";
              version = "0.0.5";
              sha256 =
                "b84a96ffb7a2dd0c497f176c2e9d0ef07c719f09702d71fb8a801a3f2db1ab50";
            };

            meta = {
              longDescription = ''The ExAlgebra library is a collection of
                                functions that are commonly used in linear
                                algebra.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/leighshepperson/exalgebra";
            };
          } // packageOverrides)
      ) {};

    exalgebra = exalgebra_0_0_5;

    example_files_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "example_files";
            version = "1.0.0";
            src = fetchHex {
              pkg = "example_files";
              version = "1.0.0";
              sha256 =
                "2bec589998a631a1e62183f9d67326070c6cde1b64ca604c4a442fca99f73056";
            };

            meta = {
              description = ''Mix tasks for managing example files in your
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/njonsson/example_files";
            };
          } // packageOverrides)
      ) {};

    example_files = example_files_1_0_0;

    exbackoff_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exbackoff";
            version = "0.0.4";
            src = fetchHex {
              pkg = "exbackoff";
              version = "0.0.4";
              sha256 =
                "be0ac50c5f9a2bf028e5af5d6da94d8f80a8e77574ecd971a174fc55578f4721";
            };

            meta = {
              description = ''Simple exponential backoffs in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mingchuno/exbackoff";
            };
          } // packageOverrides)
      ) {};

    exbackoff = exbackoff_0_0_4;

    exbee_0_0_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_1_1_1
        }:
          buildMix ({
            name = "exbee";
            version = "0.0.4";
            src = fetchHex {
              pkg = "exbee";
              version = "0.0.4";
              sha256 =
                "0aa493032136125147b0615a509da47013eef7e77e803a7bef6e4857397d7ce2";
            };
            beamDeps  = [ nerves_uart_1_1_1 ];

            meta = {
              description = ''Communicate with XBee wireless radios in
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rockwood/exbee";
            };
          } // packageOverrides)
      ) {};

    exbee = exbee_0_0_4;

    exboost_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exboost";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exboost";
              version = "0.2.2";
              sha256 =
                "447114fc8f1df9d11ede03c2f9130bff8bee21c56d80e90c3dc64215b85f5f9d";
            };

            meta = {
              description = ''Provides an elixir wrapper for the C++ Boost
                            library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/piisgaaf/exboost";
            };
          } // packageOverrides)
      ) {};

    exboost = exboost_0_2_2;

    exbot_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exbot";
            version = "0.1.3";
            src = fetchHex {
              pkg = "exbot";
              version = "0.1.3";
              sha256 =
                "a3b1209c978dc3e80cc8d1c4925efad6b07b6dbf11f917d5069be4ffbb0ae20a";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Telegram API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/yeospace/exbot";
            };
          } // packageOverrides)
      ) {};

    exbot = exbot_0_1_3;

    exbouncer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exbouncer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exbouncer";
              version = "0.0.1";
              sha256 =
                "1152124b31dd00eddfb59fff015d92632744fa5cd4630a7eb8976a82aa012e41";
            };

            meta = {
              longDescription = ''An authorization library in Elixir for Plug
                                applications that restricts what resources the
                                current user/admin or any role is allowed to
                                access,'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vysakh0/exbouncer";
            };
          } // packageOverrides)
      ) {};

    exbouncer = exbouncer_0_0_1;

    exbox_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exchalk_1_0_2,
          termsize_1_0_1
        }:
          buildMix ({
            name = "exbox";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exbox";
              version = "1.0.0";
              sha256 =
                "2306ff5bfab69c13c8ea917cb5afff94198d7890510c01691914a588c949d045";
            };
            beamDeps  = [ exchalk_1_0_2 termsize_1_0_1 ];

            meta = {
              description = ''Create boxes in the terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/exbox";
            };
          } // packageOverrides)
      ) {};

    exbox = exbox_1_0_0;

    exbtc_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exbtc";
            version = "0.1.4";
            src = fetchHex {
              pkg = "exbtc";
              version = "0.1.4";
              sha256 =
                "1906d7a1cde465d78fb9685ac73ee823bbb03e573aa31e6132d276b8ff336cb5";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Elixir ECC (Elliptic curve cryptography)
                                utils, port from Python Bitcoin tool
                                (https://github.com/vbuterin/pybitcointools)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lonex/exbtc";
            };
          } // packageOverrides)
      ) {};

    exbtc = exbtc_0_1_4;

    exbug_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exbug";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exbug";
              version = "0.0.1";
              sha256 =
                "6cbb447526cc5845b35474e034d8a9e71c5799b89fcdd1cf60ac8100bdbbd9b4";
            };

            meta = {
              description = ''A more traditional experience for the :debugger
                            module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gwash3189/exbug";
            };
          } // packageOverrides)
      ) {};

    exbug = exbug_0_0_1;

    exbuilder_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exbuilder";
            version = "0.1.5";
            src = fetchHex {
              pkg = "exbuilder";
              version = "0.1.5";
              sha256 =
                "e1cf737e1cd6dfb481b3f8cf7706f6d10928d49e6910cc27242236347475cdd3";
            };
            beamDeps  = [ inflex_1_10_0 poison_3_1_0 ];

            meta = {
              description = ''Macros to support Ruby-like jbuilder/builder
                            templates to generate JSON and XML'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aportnov/exbuilder.git";
            };
          } // packageOverrides)
      ) {};

    exbuilder = exbuilder_0_1_5;

    excache_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "excache";
              version = "0.1.0";
              sha256 =
                "b5bbefc2b8a82bc92b848fd1da5b32cfb856fe4ff4ffd615aa77e16de772500f";
            };

            meta = {
              description = ''Superfast, pipelined, resilient Redis driver for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/postgrex";
            };
          } // packageOverrides)
      ) {};

    excache = excache_0_1_0;

    excal_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excal";
            version = "0.1.0";
            src = fetchHex {
              pkg = "excal";
              version = "0.1.0";
              sha256 =
                "efaffda196dfa707e1f053f41f09c81e1f794329e6010a7b7c47252e7521c62b";
            };

            meta = {
              description = ''NIF bindings to libical providing icalendar rrule
                            expansion.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peek-travel/excal";
            };
          } // packageOverrides)
      ) {};

    excal = excal_0_1_0;

    excalibur_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excalibur";
            version = "0.1.0";
            src = fetchHex {
              pkg = "excalibur";
              version = "0.1.0";
              sha256 =
                "b913ee6c08ee8bad9df1dcd4da41db35be6f5cc2c6f86ebce9e7eaa27cd1120a";
            };

            meta = {
              description = ''A modern Elixir utility library delivering
                            modularity, performance & extras.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kaddopur/excalibur";
            };
          } // packageOverrides)
      ) {};

    excalibur = excalibur_0_1_0;

    excaliper_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excaliper";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excaliper";
              version = "0.0.1";
              sha256 =
                "d43430518ffcf8de60a1d44355f6a200f348ec1ca8bc4287ca17c97543e86732";
            };

            meta = {
              description = ''Fast image dimension detector inspired by the
                            Node.JS module Calipers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgartner/excaliper";
            };
          } // packageOverrides)
      ) {};

    excaliper = excaliper_0_0_1;

    excelion_0_0_5 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xlsx_parser_0_0_10
        }:
          buildMix ({
            name = "excelion";
            version = "0.0.5";
            src = fetchHex {
              pkg = "excelion";
              version = "0.0.5";
              sha256 =
                "f3f794ad2fc9c072108f83d72269c859f2c725fc8aa0059cff51d37e695df27e";
            };
            beamDeps  = [ xlsx_parser_0_0_10 ];

            meta = {
              description = ''Excel (xlsx) file reader for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/faithandbrave/excelion";
            };
          } // packageOverrides)
      ) {};

    excelion = excelion_0_0_5;

    excellent_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excellent";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excellent";
              version = "0.0.1";
              sha256 =
                "a0628dce02de6a33cf441883723c480b0f07fdacade46f6d608465bb717491bd";
            };

            meta = {
              description = ''A OpenXL (Excel files ending with .xlsx) parser
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/leifg/excellent";
            };
          } // packageOverrides)
      ) {};

    excellent = excellent_0_0_1;

    exceptional_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exceptional";
            version = "2.1.0";
            src = fetchHex {
              pkg = "exceptional";
              version = "2.1.0";
              sha256 =
                "aafe9e470fcc8e4de953aeae23e225d70ee0247855efe0553cf97af9530b196e";
            };

            meta = {
              description = ''Error & exception handling helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/exceptional";
            };
          } // packageOverrides)
      ) {};

    exceptional = exceptional_2_1_0;

    excess_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excess";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excess";
              version = "0.0.1";
              sha256 =
                "15b147663aa654e743ca43868c15cc2db67cb34df68890e99b03f790974cb599";
            };

            meta = {
              description = ''Excess'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vic/excess";
            };
          } // packageOverrides)
      ) {};

    excess = excess_0_0_1;

    exchalk_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exchalk";
            version = "1.0.2";
            src = fetchHex {
              pkg = "exchalk";
              version = "1.0.2";
              sha256 =
                "21479406da07ebe2c3a0e74eaad93e8d25f3a6f4ede142c1e313bd45f10aded1";
            };

            meta = {
              description = ''Easier terminal styling'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/exchalk";
            };
          } // packageOverrides)
      ) {};

    exchalk = exchalk_1_0_2;

    exchatwork_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "exchatwork";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exchatwork";
              version = "0.1.0";
              sha256 =
                "a96f76179e35da1ae49b75bcea57aaf2241fb88f08a457c058f8b2e9be35937d";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              description = ''ChatWork API Interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alea12/exchatwork";
            };
          } // packageOverrides)
      ) {};

    exchatwork = exchatwork_0_1_0;

    exchema_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exchema";
            version = "0.3.0";
            src = fetchHex {
              pkg = "exchema";
              version = "0.3.0";
              sha256 =
                "b91eda512fcc70259c855cb3006a0cf17e6058d4d61437954b8be26c982d23af";
            };

            meta = {
              description = ''Exchema is a library to define data types and
                            validate it'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bamorim/exchema";
            };
          } // packageOverrides)
      ) {};

    exchema = exchema_0_3_0;

    excoap_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excoap";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excoap";
              version = "0.0.1";
              sha256 =
                "06caae698590da85aded80db7996300127d48a4e9cf7bdca8d35113c094e5094";
            };

            meta = {
              description = ''CoAP implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbialon/excoap";
            };
          } // packageOverrides)
      ) {};

    excoap = excoap_0_0_1;

    excollections_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excollections";
            version = "0.0.2";
            src = fetchHex {
              pkg = "excollections";
              version = "0.0.2";
              sha256 =
                "1924fd5bd3c1c7418a9150ca8fcb2d2700a82671f3a76972edc9bc51d32a2093";
            };

            meta = {
              longDescription = ''A collection of data-structures and related
                                algorithms for Elixir, implemented in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/metabrain/elixir-playground/tree/master/excollections";
            };
          } // packageOverrides)
      ) {};

    excollections = excollections_0_0_2;

    exconstructor_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exconstructor";
            version = "1.0.2";
            src = fetchHex {
              pkg = "exconstructor";
              version = "1.0.2";
              sha256 =
                "e8cd1c88d5ea044a340fed75deb1fda2edc71afaac157dce561288a6bf733035";
            };

            meta = {
              longDescription = ''ExConstructor generates constructor functions
                                for your structs, handling map-vs-keyword-list,
                                string-vs-atom-keys, and
                                camelCase-vs-under_score issues
                                automatically.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/exconstructor";
            };
          } // packageOverrides)
      ) {};

    exconstructor_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exconstructor";
            version = "1.1.0";
            src = fetchHex {
              pkg = "exconstructor";
              version = "1.1.0";
              sha256 =
                "0edd55e8352e04dabf71f35453a57650175c7d7e6af707b1d3df610e5052afe0";
            };

            meta = {
              longDescription = ''ExConstructor generates constructor functions
                                for your structs, handling map-vs-keyword-list,
                                string-vs-atom-keys, and
                                camelCase-vs-under_score issues
                                automatically.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/exconstructor";
            };
          } // packageOverrides)
      ) {};

    exconstructor = exconstructor_1_1_0;

    exconsul_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "exconsul";
            version = "1.0.2";
            src = fetchHex {
              pkg = "exconsul";
              version = "1.0.2";
              sha256 =
                "19d0c7a00f3bc543cac015c81481c51200befebb3e21a20922b462897adddd3c";
            };
            beamDeps  = [ exjsx_4_0_0 httpoison_1_2_0 ];

            meta = {
              description = ''An Elixir client for Consul`s HTTP API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kiopro/exconsul";
            };
          } // packageOverrides)
      ) {};

    exconsul = exconsul_1_0_2;

    excov_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excov";
            version = "0.1.7";
            src = fetchHex {
              pkg = "excov";
              version = "0.1.7";
              sha256 =
                "adaa49e73b67d48f764b1f241370e48d1dac9251c81835cfd2f3feca37152892";
            };

            meta = {
              description = ''Code Coverage Reports for Elixir code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrinalwadhwa/excov";
            };
          } // packageOverrides)
      ) {};

    excov = excov_0_1_7;

    excov_reporter_console_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, excov_0_1_7 }:
          buildMix ({
            name = "excov_reporter_console";
            version = "0.1.8";
            src = fetchHex {
              pkg = "excov_reporter_console";
              version = "0.1.8";
              sha256 =
                "c04d8379ce4be7fba392cf0d1429418db52de46a6ff6dc0cd64b23cb4ac496d1";
            };
            beamDeps  = [ excov_0_1_7 ];

            meta = {
              description = ''Console Reporter for ExCov'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/mrinalwadhwa/excov_reporter_console";
            };
          } // packageOverrides)
      ) {};

    excov_reporter_console = excov_reporter_console_0_1_8;

    excoverage_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excoverage";
            version = "0.1.0";
            src = fetchHex {
              pkg = "excoverage";
              version = "0.1.0";
              sha256 =
                "40a000eccc0ee6234ed9e8798a6b466505e70dc4379f62cf0de44c608740bfac";
            };

            meta = {
              longDescription = ''A tool for calculating test coverage written
                                from the beginning to the end in elixir. Only
                                function coverage support - WIP: lines and
                                branches.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/RJSkorski/excoverage";
            };
          } // packageOverrides)
      ) {};

    excoverage = excoverage_0_1_0;

    excoveralls_0_7_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          hackney_1_13_0
        }:
          buildMix ({
            name = "excoveralls";
            version = "0.7.4";
            src = fetchHex {
              pkg = "excoveralls";
              version = "0.7.4";
              sha256 =
                "19b4b21e609c87cd28d0e2e58b85a7322accaa93cf341aa9898231303916da61";
            };
            beamDeps  = [ exjsx_4_0_0 hackney_1_13_0 ];

            meta = {
              description = ''Coverage report tool for Elixir with coveralls.io
                            integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excoveralls";
            };
          } // packageOverrides)
      ) {};

    excoveralls_0_7_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          hackney_1_13_0
        }:
          buildMix ({
            name = "excoveralls";
            version = "0.7.5";
            src = fetchHex {
              pkg = "excoveralls";
              version = "0.7.5";
              sha256 =
                "36422936691b6a8a728fe42c528e7b2719b2fde1a56d19fc7e3de31cb2271017";
            };
            beamDeps  = [ exjsx_4_0_0 hackney_1_13_0 ];

            meta = {
              description = ''Coverage report tool for Elixir with coveralls.io
                            integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excoveralls";
            };
          } // packageOverrides)
      ) {};

    excoveralls_0_9_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "excoveralls";
            version = "0.9.1";
            src = fetchHex {
              pkg = "excoveralls";
              version = "0.9.1";
              sha256 =
                "8dbe3ee998a803c2e7a54dd1077e59b2f86be5180d0ffcd3c2ee081f64e10ec9";
            };
            beamDeps  = [ hackney_1_13_0 jason_1_1_1 ];

            meta = {
              description = ''Coverage report tool for Elixir with coveralls.io
                            integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excoveralls";
            };
          } // packageOverrides)
      ) {};

    excoveralls = excoveralls_0_9_1;

    excows_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excows";
            version = "1.0.0";
            src = fetchHex {
              pkg = "excows";
              version = "1.0.0";
              sha256 =
                "41b1e5f224440d891b862d4c5bee59a54c1932ab3396455e7cbee87271138de5";
            };

            meta = {
              description = ''Gets ASCII cows'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/excows";
            };
          } // packageOverrides)
      ) {};

    excows = excows_1_0_0;

    excribe_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excribe";
            version = "0.1.1";
            src = fetchHex {
              pkg = "excribe";
              version = "0.1.1";
              sha256 =
                "e6b26840f340cb20e6dbf774c556a6cbd4e8a3aec3a34f366749ba6d98dba3e3";
            };

            meta = {
              description = ''Simple text formatting utility for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dalgona/excribe";
            };
          } // packageOverrides)
      ) {};

    excribe = excribe_0_1_1;

    exdash_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exdash";
            version = "0.3.1";
            src = fetchHex {
              pkg = "exdash";
              version = "0.3.1";
              sha256 =
                "6a2a3e3c8ea80e5a9e6641db4a109a0a1e0a09c6b7bf190a8b98fa9a650325c5";
            };

            meta = {
              description = ''Lodash implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TFarla/exdash";
            };
          } // packageOverrides)
      ) {};

    exdash = exdash_0_3_1;

    exdatauri_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exdatauri";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exdatauri";
              version = "0.2.0";
              sha256 =
                "d2da1d25721bb818fcb3e7b1379dd22dadcd9dde25881041a0179959522f8043";
            };

            meta = {
              description = ''A RFC 2397 URI parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flupke/exdatauri";
            };
          } // packageOverrides)
      ) {};

    exdatauri = exdatauri_0_2_0;

    exddb_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlcloud_2_2_0 }:
          buildMix ({
            name = "exddb";
            version = "0.1.3";
            src = fetchHex {
              pkg = "exddb";
              version = "0.1.3";
              sha256 =
                "e57bd285110585476a457a843fdcff3cce6923c9472b6bec95ac9bf986dd27e4";
            };
            beamDeps  = [ erlcloud_2_2_0 ];

            meta = {
              description = ''Simple library for working with data in
                            DynamoDB.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/muhmi/exddb";
            };
          } // packageOverrides)
      ) {};

    exddb = exddb_0_1_3;

    exdiff_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exdiff";
            version = "0.1.3";
            src = fetchHex {
              pkg = "exdiff";
              version = "0.1.3";
              sha256 =
                "ac42a9a8e45dd683b98cc523fb2ad05ee28d6bd5d5597543f2af4472de8284c2";
            };

            meta = {
              description = ''Text difference library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jung-hunsoo/exdiff";
            };
          } // packageOverrides)
      ) {};

    exdiff = exdiff_0_1_3;

    exdisque_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eredis_1_1_0 }:
          buildMix ({
            name = "exdisque";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exdisque";
              version = "0.0.1";
              sha256 =
                "c3b7ec89217df46ae6cf1adadb81118877c66272266f0ee5e2c7ff45d048fb31";
            };
            beamDeps  = [ eredis_1_1_0 ];

            meta = {
              description = ''Elixir client library for Disque:
                            https://github.com/antirez/disque'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mosic/exdisque";
            };
          } // packageOverrides)
      ) {};

    exdisque = exdisque_0_0_1;

    exec_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "exec";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exec";
              version = "1.0.1";
              sha256 =
                "87c7ef2dea2bb503bb0eec8cb34776172999aecc6e12d90f7629796a7a3ccb1f";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    exec = exec_1_0_1;

    execjs_1_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "execjs";
            version = "1.1.3";
            src = fetchHex {
              pkg = "execjs";
              version = "1.1.3";
              sha256 =
                "a0992d14ccc3458563be305d70fd6f6f6e9db6e8b62dd4e15bf69aeb382eb074";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Run JavaScript code from Elixir'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/execjs";
            };
          } // packageOverrides)
      ) {};

    execjs = execjs_1_1_3;

    execs_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, qlc_1_0_1 }:
          buildMix ({
            name = "execs";
            version = "0.4.1";
            src = fetchHex {
              pkg = "execs";
              version = "0.4.1";
              sha256 =
                "3a80e9368940bf6d321b4fdd21061e012ba9f966b04c26ddb039e4f466a29262";
            };
            beamDeps  = [ qlc_1_0_1 ];

            meta = {
              longDescription = ''Provides an interface for reading and writing
                                data in an Entity Component System. Note that it
                                is up to the consuming application to implement
                                the `Systems` as this package simply makes
                                working with data easier.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mononym/execs";
            };
          } // packageOverrides)
      ) {};

    execs_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, qlc_1_0_1 }:
          buildMix ({
            name = "execs";
            version = "0.5.0";
            src = fetchHex {
              pkg = "execs";
              version = "0.5.0";
              sha256 =
                "5afb64d2052bd042276b355d93bb966dbbb684c59b6b5279a5e19e7b3bd7e705";
            };
            beamDeps  = [ qlc_1_0_1 ];

            meta = {
              longDescription = ''Provides an interface for reading and writing
                                data in an Entity Component System. Note that it
                                is up to the consuming application to implement
                                the `Systems` as this package simply makes
                                working with data easier.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mononym/execs";
            };
          } // packageOverrides)
      ) {};

    execs = execs_0_5_0;

    executor_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "executor";
            version = "0.0.3";
            src = fetchHex {
              pkg = "executor";
              version = "0.0.3";
              sha256 =
                "63610870d60ed30c3bd73e5c45684b42ecd8230a2edfbdcd983272a8308eebfd";
            };

            meta = {
              description = ''Allows for code execution in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MainShayne233/executor";
            };
          } // packageOverrides)
      ) {};

    executor = executor_0_0_3;

    executus_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlexec_1_7_5,
          shorter_maps_2_2_5
        }:
          buildMix ({
            name = "executus";
            version = "0.4.0";
            src = fetchHex {
              pkg = "executus";
              version = "0.4.0";
              sha256 =
                "644caec457e41fe3835e744e49dd2765952349a864ca0a1d970a54db888deae9";
            };
            beamDeps  = [ erlexec_1_7_5 shorter_maps_2_2_5 ];

            meta = {
              description = ''A Majordomo for your OS!'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    executus = executus_0_4_0;

    execv_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "execv";
            version = "0.1.2";
            src = fetchHex {
              pkg = "execv";
              version = "0.1.2";
              sha256 =
                "ef0aa10ac9d67c24f7d18ca0316768d43d9f44d59437201cb82485a6fa6b9bce";
            };

            meta = {
              description = ''Elixir interface to exec system call'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/savonarola/execv";
            };
          } // packageOverrides)
      ) {};

    execv = execv_0_1_2;

    exelli_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exelli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exelli";
              version = "0.1.0";
              sha256 =
                "9777493429d5b4e3f3a9391ede7706deba65b253aa0d810efa9e26859b6f269c";
            };

            meta = {
              longDescription = ''Elli wrapper in elixir, with some sugar
                                syntax. (even 2 times faster than Plug on
                                Cowboy) '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pigmej/exelli";
            };
          } // packageOverrides)
      ) {};

    exelli = exelli_0_1_0;

    exenum_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exenum";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exenum";
              version = "0.0.1";
              sha256 =
                "362323e683182fbc437d5938aae02a1edf5627a6c9bb77edc17eda91d0e8bf1f";
            };

            meta = {
              description = ''A simple enumeration library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efcasado/exenum";
            };
          } // packageOverrides)
      ) {};

    exenum = exenum_0_0_1;

    exenv_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exenv";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exenv";
              version = "0.1.1";
              sha256 =
                "233ff27403d1187e2d42baa1132f0adca2777ccdc179f1e30752f8735d3fd719";
            };

            meta = {
              description = ''Exenv makes loading environment variables from
                            external sources easy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/exenv";
            };
          } // packageOverrides)
      ) {};

    exenv = exenv_0_1_1;

    exexec_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlexec_1_6_4 }:
          buildMix ({
            name = "exexec";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exexec";
              version = "0.0.1";
              sha256 =
                "890122cae91cc739f84dad66b7358c9e7961dadbebeb650e71ccdeab8963ff91";
            };
            beamDeps  = [ erlexec_1_6_4 ];

            meta = {
              description = ''An idiomatic Elixir wrapper for erlexec.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/exexec";
            };
          } // packageOverrides)
      ) {};

    exexif_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exexif";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exexif";
              version = "0.0.5";
              sha256 =
                "8ce9a19abe0bdae4a9a5dcda1469b98a34b7097776a2ca933a65104b27d14fa0";
            };

            meta = {
              longDescription = ''Read TIFF and EXIF information from a
                                JPEG-format image. iex> {:ok, info} =
                                Exexif.exif_from_jpeg_buffer(buffer) iex>
                                info.x_resolution 72 iex> info.model
                                \"DSC-RX100M2\" ...> Exexif.Data.Gps.inspect
                                info \"41°23´16˝N,2°11´50˝E\"'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/exexif";
            };
          } // packageOverrides)
      ) {};

    exexif = exexif_0_0_5;

    exfacts_0_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "exfacts";
            version = "0.1.9";
            src = fetchHex {
              pkg = "exfacts";
              version = "0.1.9";
              sha256 =
                "f7244cfba939e61fb5809211f1ceb89c10f4205c91f318a3443e51920a74fbfd";
            };
            beamDeps  = [ poison_3_1_0 porcelain_2_0_3 ];

            meta = {
              description = ''A library for collection a variety of system
                            facts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nwlucas/exfacts";
            };
          } // packageOverrides)
      ) {};

    exfacts = exfacts_0_1_9;

    exfasta_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfasta";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exfasta";
              version = "1.0.0";
              sha256 =
                "8e476a2c6bcdbaf974a01539920b78a73da7a987a8897d33139f6e5f8a295b0e";
            };

            meta = {
              description = ''A simple module for working with FASTA-formatted
                            strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nscyclone/exfasta";
            };
          } // packageOverrides)
      ) {};

    exfasta = exfasta_1_0_0;

    exfavicon_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "exfavicon";
            version = "0.3.3";
            src = fetchHex {
              pkg = "exfavicon";
              version = "0.3.3";
              sha256 =
                "f1c5aa3506c90ba28e6f3ddcf3e9feda8518af1b4b12a6d2f518f86a10d1719b";
            };
            beamDeps  = [ floki_0_20_3 httpoison_0_13_0 ];

            meta = {
              description = ''A exfavicon to detect a site`s favicon.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exfavicon";
            };
          } // packageOverrides)
      ) {};

    exfavicon = exfavicon_0_3_3;

    exfmt_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfmt";
            version = "0.5.0";
            src = fetchHex {
              pkg = "exfmt";
              version = "0.5.0";
              sha256 =
                "97569ddada83f077c6d8caf0411139e454fc3bcff6311615342f338bbe095f6d";
            };

            meta = {
              description = ''An opinionated Elixir source code formatter'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lpil/exfmt";
            };
          } // packageOverrides)
      ) {};

    exfmt = exfmt_0_5_0;

    exfswatch_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_2_11_0 }:
          buildMix ({
            name = "exfswatch";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exfswatch";
              version = "0.2.1";
              sha256 =
                "53eac4d43f907688051422cc4d5f99677a1c1515939dec1c659b6f8337b3d251";
            };
            beamDeps  = [ fs_2_11_0 ];

            meta = {
              description = ''A file change watcher wrapper based on
                            [fs](https://github.com/synrc/fs)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/exfswatch";
            };
          } // packageOverrides)
      ) {};

    exfswatch_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfswatch";
            version = "0.4.2";
            src = fetchHex {
              pkg = "exfswatch";
              version = "0.4.2";
              sha256 =
                "6d1b5e0d07b6a7b83b3efff9e64faa6e1215cf24094dbd68cc2e87d126c2c175";
            };

            meta = {
              description = ''A file change watcher wrapper based on
                            [fs](https://github.com/synrc/fs)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/exfswatch";
            };
          } // packageOverrides)
      ) {};

    exfswatch = exfswatch_0_4_2;

    exfuck_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfuck";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfuck";
              version = "0.1.0";
              sha256 =
                "c71358ae7a31682d84f89f7f5fdc1c6b545ea93f70391a9ec15987458d70dbe8";
            };

            meta = {
              description = ''Brainfuck interpreter written in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/exfuck";
            };
          } // packageOverrides)
      ) {};

    exfuck = exfuck_0_1_0;

    exfunky_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_4 }:
          buildMix ({
            name = "exfunky";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exfunky";
              version = "0.0.1";
              sha256 =
                "e3342682f60492e40a7159aa224330e23df88ef90fdf63ce84fd2e145f4d8682";
            };
            beamDeps  = [ ex_doc_0_16_4 ];

            meta = {
              description = ''Fun, funky and functional programming in
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/iskandersierra/exfunky";
            };
          } // packageOverrides)
      ) {};

    exfunky = exfunky_0_0_1;

    exgencode_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exgencode";
            version = "1.2.0";
            src = fetchHex {
              pkg = "exgencode";
              version = "1.2.0";
              sha256 =
                "ff9237b472a6ef69194f391cb5abffdded453185effa9eff7d71871976936350";
            };

            meta = {
              longDescription = ''Library for defining binary protocol
                                messages, that provides a protocol for
                                transforming between binary and Elixir structure
                                representation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/haljin/exgencode";
            };
          } // packageOverrides)
      ) {};

    exgencode = exgencode_1_2_0;

    exgenius_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "exgenius";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exgenius";
              version = "0.0.5";
              sha256 =
                "f0f4463ac9ad79a102a1bf0ded91d77ed87ce262da6045990be51450ef240fd5";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              longDescription = '' Elixir library for the (undocumented) Rap
                                Genius (and also Rock, Tech, Pop, Country, etc)
                                API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/exgenius";
            };
          } // packageOverrides)
      ) {};

    exgenius = exgenius_0_0_5;

    exgravatar_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exgravatar";
            version = "2.0.1";
            src = fetchHex {
              pkg = "exgravatar";
              version = "2.0.1";
              sha256 =
                "f4f4d053affaf2989eaa4ed167a76aefee3d03973c6232edd64a00ad32d3f3f6";
            };

            meta = {
              description = ''An Elixir module for generating Gravatar urls.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/exgravatar";
            };
          } // packageOverrides)
      ) {};

    exgravatar = exgravatar_2_0_1;

    exhcl_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exhcl";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exhcl";
              version = "0.2.1";
              sha256 =
                "9c7ab6216cd978b2dd3f6573dd3ccf0a9d5055b36008a0ada01d9431198c17f7";
            };

            meta = {
              description = ''Configuration language inspired by HCL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asakura/exhcl";
            };
          } // packageOverrides)
      ) {};

    exhcl = exhcl_0_2_1;

    exhtml_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exhtml";
            version = "0.3.1";
            src = fetchHex {
              pkg = "exhtml";
              version = "0.3.1";
              sha256 =
                "a3d380cfeda40a8785328a5c14f3878a9d37a3155ab39d76307da1c8baf8a047";
            };

            meta = {
              description = ''An HTML page server used for quickly update
                            contents.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qhwa/exhtml";
            };
          } // packageOverrides)
      ) {};

    exhtml = exhtml_0_3_1;

    exhue_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exhue";
            version = "0.1.7";
            src = fetchHex {
              pkg = "exhue";
              version = "0.1.7";
              sha256 =
                "7911d43f5d5f129a95940ece03bd6b812484784ce9757d8ec50a7120fcc166ec";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A simple api client for the phillips hue light
                            bridge.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jodyalbritton/exhue";
            };
          } // packageOverrides)
      ) {};

    exhue = exhue_0_1_7;

    exi18n_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_1_0_0,
          yaml_elixir_1_3_2
        }:
          buildMix ({
            name = "exi18n";
            version = "0.8.0";
            src = fetchHex {
              pkg = "exi18n";
              version = "0.8.0";
              sha256 =
                "2f2d14d632f791106d05e5a569eb0083665a924a0aaea0997061c3337ebed2d9";
            };
            beamDeps  = [ poison_3_1_0 tesla_1_0_0 yaml_elixir_1_3_2 ];

            meta = {
              description = ''ExI18n - key-based internationalization
                            library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gvl/exi18n";
            };
          } // packageOverrides)
      ) {};

    exi18n = exi18n_0_8_0;

    exiban_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exiban";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exiban";
              version = "0.0.5";
              sha256 =
                "acddde30fb316000425a741cd731b20099a4193144ea149d138ddcfbf97ee0e8";
            };

            meta = {
              description = ''Library for manipulating and validating IBAN
                            account numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kkempin/exiban";
            };
          } // packageOverrides)
      ) {};

    exiban = exiban_0_0_5;

    exif_parser_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exif_parser";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exif_parser";
              version = "0.2.1";
              sha256 =
                "3e9f62dd4a54abc859d7dddbf1f54820a72bc6b724160a83c94b8115acbf954f";
            };

            meta = {
              description = ''Parse EXIF/TIFF metadata from JPEG and TIFF
                            files.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/srivathsanmurali/exif_parser";
            };
          } // packageOverrides)
      ) {};

    exif_parser = exif_parser_0_2_1;

    eximap_0_1_1_dev = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eximap";
            version = "0.1.1-dev";
            src = fetchHex {
              pkg = "eximap";
              version = "0.1.1-dev";
              sha256 =
                "d5fff0033a61af33a752d05f992e13f78b5601f110a4bdead2a1dcb160477b97";
            };

            meta = {
              description = ''A simple library to interact with an IMAP
                            server'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/around25/eximap";
            };
          } // packageOverrides)
      ) {};

    eximap = eximap_0_1_1_dev;

    exirc_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exirc";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exirc";
              version = "1.0.1";
              sha256 =
                "15b39f1b5146e4f18e599e1a86e5eafb7e126ad7a602d2d87d4fd2e7d76095f2";
            };

            meta = {
              description = ''An IRC client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exirc";
            };
          } // packageOverrides)
      ) {};

    exirc = exirc_1_0_1;

    exjpet_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ejpet_0_7_1,
          jason_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "exjpet";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exjpet";
              version = "0.2.0";
              sha256 =
                "ce35ccc616c68867332285513043580079cf630728b3c0d0cbb3d8e41709833a";
            };
            beamDeps  = [ ejpet_0_7_1 jason_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''The easy way to ejpet for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nmichel/Exjpet";
            };
          } // packageOverrides)
      ) {};

    exjpet = exjpet_0_2_0;

    exjsx_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_7_2 }:
          buildMix ({
            name = "exjsx";
            version = "3.0.0";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.0.0";
              sha256 =
                "01bc8e0cff327e67634e9617b850357d3b775b3a022e2d18c2fe92d97373b2ad";
            };
            beamDeps  = [ jsx_2_7_2 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx_3_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_7_2 }:
          buildMix ({
            name = "exjsx";
            version = "3.0.2";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.0.2";
              sha256 =
                "2cd67240a54e9cd2616bc83c0c352d47f87bccd2ec599eceedc00bcbe9063f07";
            };
            beamDeps  = [ jsx_2_7_2 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx_3_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_7_2 }:
          buildMix ({
            name = "exjsx";
            version = "3.1.0";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.1.0";
              sha256 =
                "588a0b67ed0c45b21f018515fc478efac83c088661bd588831e41c9073a818fb";
            };
            beamDeps  = [ jsx_2_7_2 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx_3_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_3 }:
          buildMix ({
            name = "exjsx";
            version = "3.2.1";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.2.1";
              sha256 =
                "b55727b206dab96feb025267e5c122ddb448f55b6648f9156b8d481215d80290";
            };
            beamDeps  = [ jsx_2_8_3 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx_4_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_3 }:
          buildMix ({
            name = "exjsx";
            version = "4.0.0";
            src = fetchHex {
              pkg = "exjsx";
              version = "4.0.0";
              sha256 =
                "32e95820a97cffea67830e91514a2ad53b888850442d6d395f53a1ac60c82e07";
            };
            beamDeps  = [ jsx_2_8_3 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx = exjsx_4_0_0;

    exkanji_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exromaji_1_0_0 }:
          buildMix ({
            name = "exkanji";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exkanji";
              version = "1.0.0";
              sha256 =
                "2990dcdab34e19c474cda7bd7fcb22eae5401af971f0b9a15277264cd61d4e66";
            };
            beamDeps  = [ exromaji_1_0_0 ];

            meta = {
              longDescription = ''A Elixir library for translating between
                                hiragana, katakana, romaji, kanji and sound. It
                                uses Mecab.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exkanji";
            };
          } // packageOverrides)
      ) {};

    exkanji = exkanji_1_0_0;

    exkorpion_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exkorpion";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exkorpion";
              version = "0.0.3";
              sha256 =
                "12b2409015a8223006fcec84db13377722cf7d5db66c2f91ca32941253de2c07";
            };

            meta = {
              description = ''Test framework to help developers to write tests
                            in a BDD form.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/wesovilabs/exkorpion";
            };
          } // packageOverrides)
      ) {};

    exkorpion = exkorpion_0_0_3;

    exkraken_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exkraken";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exkraken";
              version = "0.1.0";
              sha256 =
                "6c47663a00865e31844965fa605f19a3e719b0c8c8b0e4475d289b8b8fd4cedc";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for the kraken.com API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/1st8/exkraken";
            };
          } // packageOverrides)
      ) {};

    exkraken = exkraken_0_1_0;

    exkube_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_0_1
        }:
          buildMix ({
            name = "exkube";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exkube";
              version = "0.1.1";
              sha256 =
                "67fca7184e52e784e4b89778fba2cd452c775fb54aca8f04911b86217c8d6028";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_0_1 ];

            meta = {
              description = ''A module for interacting with Kubernetes
                            clusters'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhaynes/exkube";
            };
          } // packageOverrides)
      ) {};

    exkube = exkube_0_1_1;

    exlastic_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlastic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exlastic";
              version = "0.1.0";
              sha256 =
                "f5fb5c4e0052b022360552fdb8c6deabf537f1adf91af60eba506d34b2bf4bc2";
            };

            meta = {
              description = ''Work in progress.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    exlastic = exlastic_0_1_0;

    exldap_0_6_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exldap";
            version = "0.6.3";
            src = fetchHex {
              pkg = "exldap";
              version = "0.6.3";
              sha256 =
                "412fafabe43cfde52d85957776f54edad9258d88b261dab76e0458a43c618a2c";
            };

            meta = {
              description = ''A module for working with LDAP from Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jmerriweather/exldap";
            };
          } // packageOverrides)
      ) {};

    exldap = exldap_0_6_3;

    exleveldb_0_12_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eleveldb_2_2_20 }:
          buildMix ({
            name = "exleveldb";
            version = "0.12.2";
            src = fetchHex {
              pkg = "exleveldb";
              version = "0.12.2";
              sha256 =
                "8b354a6c277884975fd5132af0aa886e5e09a3a11a585cc8798278c26ff83072";
            };
            beamDeps  = [ eleveldb_2_2_20 ];

            meta = {
              longDescription = ''Exleveldb is a thin wrapper around the Erlang
                                module, eleveldb. At the moment, Exleveldb
                                exposes functions for all features of LevelDB as
                                well as an Elixir stream interface to Eleveldb`s
                                iterators.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/skovsgaard/exleveldb.git";
            };
          } // packageOverrides)
      ) {};

    exleveldb_0_13_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eleveldb_2_2_20 }:
          buildMix ({
            name = "exleveldb";
            version = "0.13.1";
            src = fetchHex {
              pkg = "exleveldb";
              version = "0.13.1";
              sha256 =
                "d6445b1c462fdccb85ea4d8fcd3cf307ae2ed147013ee7936c0bd1cd6d2a7284";
            };
            beamDeps  = [ eleveldb_2_2_20 ];

            meta = {
              longDescription = ''Exleveldb is a thin wrapper around the Erlang
                                module, eleveldb. At the moment, Exleveldb
                                exposes functions for all features of LevelDB as
                                well as an Elixir stream interface to Eleveldb`s
                                iterators.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/skovsgaard/exleveldb.git";
            };
          } // packageOverrides)
      ) {};

    exleveldb = exleveldb_0_13_1;

    exlibris_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlibris";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exlibris";
              version = "0.0.1";
              sha256 =
                "c6f957233b464eeddf590bad43368427ee9c715470e89d2f348d7d01935ad7be";
            };

            meta = {
              longDescription = ''A collection of random library functions I
                                use across multiple projects: pipe_while_ok:
                                Create pipelines that terminate early if any
                                step fails to return a tuple that starts {:ok,
                                ...} before_returning: Like Ruby`s returning, it
                                evaluates its first argument, then evalates the
                                do block. It always returns the value of its
                                first argument. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/exlibris";
            };
          } // packageOverrides)
      ) {};

    exlibris = exlibris_0_0_1;

    exling_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "exling";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exling";
              version = "0.1.2";
              sha256 =
                "563299af84e63dd4860229643d7eff964e405bc8adcbde529dc81335077cd6e4";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Exling is an HTTP request builder.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://gitlab.com/joshrotenberg/exling";
            };
          } // packageOverrides)
      ) {};

    exling = exling_0_1_2;

    exlingr_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlingr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exlingr";
              version = "0.0.1";
              sha256 =
                "b45acd0e10f719b88c943b3194b7fded6ece9874c7da2c1f18b2ce2425581701";
            };

            meta = {
              description = ''Lingr client library for elixir. '';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/mtwtkman/exlingr";
            };
          } // packageOverrides)
      ) {};

    exlingr = exlingr_0_0_1;

    exlist_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlist";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exlist";
              version = "0.1.2";
              sha256 =
                "78059c30851f1cfda58fb12be9aef753777709c6b482f0f6f3f06f908bac02a5";
            };

            meta = {
              longDescription = ''The extended functions of the lists which are
                                not available in the default List Module and
                                some basic mathematical operations on the list
                                alog with some regular functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/exlist";
            };
          } // packageOverrides)
      ) {};

    exlist = exlist_0_1_2;

    exlua_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlua";
            version = "0.3.0";
            src = fetchHex {
              pkg = "exlua";
              version = "0.3.0";
              sha256 =
                "f78e6e854f427e77d516a65300a7b11177e9aa7f9c736cb98b6c39acc0b69d6f";
            };

            meta = {
              description = ''Lua for Elixir.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/bendiken/exlua";
            };
          } // packageOverrides)
      ) {};

    exlua = exlua_0_3_0;

    exmapper_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "exmapper";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exmapper";
              version = "0.1.0";
              sha256 =
                "61bed429776752d5eaae970fdf34467b5c646f91296742afa23068b344c09509";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''Defining non trivial transformations from
                            incoming maps to Structs.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/chrisjowen/ExMapper";
            };
          } // packageOverrides)
      ) {};

    exmapper = exmapper_0_1_0;

    exmath_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmath";
            version = "0.2.5";
            src = fetchHex {
              pkg = "exmath";
              version = "0.2.5";
              sha256 =
                "8b5332e5d4c61c5a697df36e7461e040c42241431ee15f63ef15fb7734a9afc4";
            };

            meta = {
              longDescription = ''A library for performing some math operations
                                that I frequently use in maths at school. Mainly
                                related to probabilistic maths.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fredrikaugust/exmath";
            };
          } // packageOverrides)
      ) {};

    exmath = exmath_0_2_5;

    exmatrix_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, benchfella_0_3_3 }:
          buildMix ({
            name = "exmatrix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exmatrix";
              version = "0.0.1";
              sha256 =
                "58fe316b1ee31f9394f246ec91a6a9157dfae0c38ea649a4c11f70976ca1d13b";
            };
            beamDeps  = [ benchfella_0_3_3 ];

            meta = {
              longDescription = ''ExMatrix is a small library for working with
                                matrices, originally developed for testing
                                matrix multiplication in parallel.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/a115/exmatrix";
            };
          } // packageOverrides)
      ) {};

    exmatrix = exmatrix_0_0_1;

    exmen_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmen";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exmen";
              version = "0.1.0";
              sha256 =
                "13727408ee6c398698787e7101082c48d4c9f20d10abe2c70195d0c60aec8c22";
            };

            meta = {
              description = ''A marvelous mutation testing tool for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TFarla/exmen";
            };
          } // packageOverrides)
      ) {};

    exmen = exmen_0_1_0;

    exmerl_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmerl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exmerl";
              version = "0.1.1";
              sha256 =
                "4bb5d6c1863c5e381b460416c9b517a211db9abd9abf0f32c99b07e128b842aa";
            };

            meta = {
              description = ''An Elixir wrapper for parsing XML through the
                            xmerl_* suite of modules '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pwoolcoc/exmerl";
            };
          } // packageOverrides)
      ) {};

    exmerl = exmerl_0_1_1;

    exmetrics_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmetrics";
            version = "1.1.0";
            src = fetchHex {
              pkg = "exmetrics";
              version = "1.1.0";
              sha256 =
                "1f4645ca0e9ef9b1815c0b301ff2f9a5b5548bc45adb68386cb6529998513d1b";
            };

            meta = {
              longDescription = ''Exmetrics provides counters, gauges and
                                histograms for instrumenting an elixir
                                application.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    exmetrics = exmetrics_1_1_0;

    exmgur_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmgur";
            version = "0.0.0";
            src = fetchHex {
              pkg = "exmgur";
              version = "0.0.0";
              sha256 =
                "a56b1accfad7c06152181d701e11de3b346141611f9fc02fc51cbb0472451276";
            };

            meta = {
              description = ''Imgur client API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/monzita/exmgur";
            };
          } // packageOverrides)
      ) {};

    exmgur = exmgur_0_0_0;

    exml_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exml";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exml";
              version = "0.1.1";
              sha256 =
                "7e6928a1cdb6cbf470875c75b192b348ffff5adfabd661923585a87ee85535e1";
            };

            meta = {
              description = ''Most simple Elixir wrapper for xmerl xpath'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/expelledboy/exml";
            };
          } // packageOverrides)
      ) {};

    exml = exml_0_1_1;

    exmoji_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "exmoji";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exmoji";
              version = "0.2.2";
              sha256 =
                "d0123ec6fd14506da93b0e8fdb7c2efa819cc69addeb56a78f3c1e0b8a09d015";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Emoji encoding swiss army knife for dealing with
                            Unicode and other gotchas.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mroth/exmoji";
            };
          } // packageOverrides)
      ) {};

    exmoji = exmoji_0_2_2;

    exmqttc_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "exmqttc";
            version = "0.6.0";
            src = fetchHex {
              pkg = "exmqttc";
              version = "0.6.0";
              sha256 =
                "640bf6cbbfe8f73a70b846e484153471a55931f3392a7434a0cdc206116013a4";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              longDescription = ''Elixir wrapper for the emqttc library. Some
                                of the features: Reconnection, offline queueing,
                                gen_* like callback APIs, QoS 0-2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timbuchwaldt/exmqttc";
            };
          } // packageOverrides)
      ) {};

    exmqttc = exmqttc_0_6_0;

    exncf_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "exncf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exncf";
              version = "0.0.1";
              sha256 =
                "090c7ef512747b46409f58928afa0f8c9fba3f6198811465be7c113b69a033d0";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A small wrapper for SNCF Open API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/laibulle/exncf";
            };
          } // packageOverrides)
      ) {};

    exncf = exncf_0_0_1;

    exns_0_3_6_beta = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          msgpax_0_8_2,
          poison_2_2_0,
          poolboy_1_5_1,
          uuid_1_1_8
        }:
          buildMix ({
            name = "exns";
            version = "0.3.6-beta";
            src = fetchHex {
              pkg = "exns";
              version = "0.3.6-beta";
              sha256 =
                "eb41bac966ed72befbe6c7ea364f5d35afa319a19258f0bf0e6f0e8c515d96b5";
            };
            beamDeps  = [ msgpax_0_8_2 poison_2_2_0 poolboy_1_5_1 uuid_1_1_8
                      ];

            meta = {
              longDescription = ''A library for writing clients to communicate
                                with Python nanoservices via nanomsg.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/walkr/exns";
            };
          } // packageOverrides)
      ) {};

    exns = exns_0_3_6_beta;

    exnumerable_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exnumerable";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exnumerable";
              version = "0.0.1";
              sha256 =
                "ea6041540da09b96176a37bdd71e3c6fbacb8353aca3b084deedb17cee265e2e";
            };

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumerable";
            };
          } // packageOverrides)
      ) {};

    exnumerable = exnumerable_0_0_1;

    exnumterator_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exnumterator";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exnumterator";
              version = "1.0.0";
              sha256 =
                "895b1dfff48d0459e66338ca8a8b831c2f31654fc0758a24e11a2f54a9cb1106";
            };

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumterator";
            };
          } // packageOverrides)
      ) {};

    exnumterator = exnumterator_1_0_0;

    exo_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exo";
            version = "0.1.3";
            src = fetchHex {
              pkg = "exo";
              version = "0.1.3";
              sha256 =
                "d614bea31bd60b71b815898d94907c852c8ab1e14b45b2c5e9a7c23e614bf9f2";
            };

            meta = {
              description = ''Logic programming in elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/xieyuheng/exo";
            };
          } // packageOverrides)
      ) {};

    exo = exo_0_1_3;

    exoddic_1_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exoddic";
            version = "1.3.6";
            src = fetchHex {
              pkg = "exoddic";
              version = "1.3.6";
              sha256 =
                "639e76dab8b5ad81b4c56d4121595254c0322893425d216bec59e6463681c31c";
            };

            meta = {
              description = ''Odds and probability handling and conversions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/exoddic";
            };
          } // packageOverrides)
      ) {};

    exoddic = exoddic_1_3_6;

    exometer_statix_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, statix_1_1_0 }:
          buildMix ({
            name = "exometer_statix";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exometer_statix";
              version = "0.1.1";
              sha256 =
                "56c606e31435e178180d21f8665f268e8862e7c20dbf907071d01ee15981cb2c";
            };
            beamDeps  = [ statix_1_1_0 ];

            meta = {
              description = ''StatsD reporter backend for exometer_core'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deepblue/exometer_statix";
            };
          } // packageOverrides)
      ) {};

    exometer_statix = exometer_statix_0_1_1;

    exoml_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exoml";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exoml";
              version = "0.0.2";
              sha256 =
                "694300fce0fb1db7f88fe788191105a93ab4da06bf68939721d1897ee5dd02f9";
            };

            meta = {
              description = ''A module to decode/encode xml into a tree
                            structure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Overbryd/exoml";
            };
          } // packageOverrides)
      ) {};

    exoml = exoml_0_0_2;

    exop_0_4_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exop";
            version = "0.4.8";
            src = fetchHex {
              pkg = "exop";
              version = "0.4.8";
              sha256 =
                "c80fc4b5f9b46c055148e891c5225d74a4509986676f6b4a367f1fe43c53c736";
            };

            meta = {
              longDescription = ''A library that provides a few macros which
                                allow you to encapsulate business logic and
                                validate incoming params over predefined
                                contract.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/madeinussr/exop";
            };
          } // packageOverrides)
      ) {};

    exop_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exop";
            version = "0.5.0";
            src = fetchHex {
              pkg = "exop";
              version = "0.5.0";
              sha256 =
                "860b918cdca1ccc2a1099e2dee6454264104eca6d21ce6cff6872b97621b7eb1";
            };

            meta = {
              longDescription = ''A library that provides a few macros which
                                allow you to encapsulate business logic and
                                validate incoming params over predefined
                                contract.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/madeinussr/exop";
            };
          } // packageOverrides)
      ) {};

    exop = exop_0_5_0;

    exordia_0_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exordia";
            version = "0.8.2";
            src = fetchHex {
              pkg = "exordia";
              version = "0.8.2";
              sha256 =
                "fbe80d64a085ad5da480a70f392bd6954d31b5975f43258baca12835af269c90";
            };

            meta = {
              description = ''Convenience macros and functions for piping in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rvlzzr/exordia";
            };
          } // packageOverrides)
      ) {};

    exordia = exordia_0_8_2;

    exos_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exos";
            version = "1.0.3";
            src = fetchHex {
              pkg = "exos";
              version = "1.0.3";
              sha256 =
                "ae491c6b99fa4d28507e87cb9d619e52f7f99d7edfb8452ef3a319ad9874a21a";
            };

            meta = {
              longDescription = ''Create a GenServer in any language. Exos
                                contains a very simple GenServer which proxy
                                calls and casts to a given port command,
                                encoding and decoding the message to the port
                                using erlang external binary term format. (see
                                related projects : clojure|python|node_erlastic
                                on https://github.com/kbrw)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kbrw/exos";
            };
          } // packageOverrides)
      ) {};

    exos = exos_1_0_3;

    expand_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expand";
            version = "0.0.3";
            src = fetchHex {
              pkg = "expand";
              version = "0.0.3";
              sha256 =
                "5f2ce07ba074392100fc5f6b8e8af9ec728ce4716e592422c510997d543efa63";
            };

            meta = {
              description = ''A pretty printer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/expand";
            };
          } // packageOverrides)
      ) {};

    expand = expand_0_0_3;

    expander_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "expander";
            version = "0.0.1";
            src = fetchHex {
              pkg = "expander";
              version = "0.0.1";
              sha256 =
                "3fc3e76efd453a35250c19f8398faa78ce353fa5aab6f7c50344abb8d8d9931a";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_1_0 ];

            meta = {
              description = ''A library to expand/unshorten urls with unified
                            cache store.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mojaz-io/expander";
            };
          } // packageOverrides)
      ) {};

    expander = expander_0_0_1;

    expanse_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_5 }:
          buildMix ({
            name = "expanse";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expanse";
              version = "0.1.0";
              sha256 =
                "f62be77e685d03c108f425b3334e2bea5459d58bbc91fa9f63e33549275468ae";
            };
            beamDeps  = [ earmark_1_2_5 ];

            meta = {
              description = ''A Conversion package for Elixir. Convert between
                            different lengths.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mithereal/expanse";
            };
          } // packageOverrides)
      ) {};

    expanse = expanse_0_1_0;

    expat_1_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expat";
            version = "1.0.5";
            src = fetchHex {
              pkg = "expat";
              version = "1.0.5";
              sha256 =
                "067901c4ccdab8ebe6825bdc954d68f6e4392d99a84986863c4ce07bd74a3824";
            };

            meta = {
              description = ''Re-usable composable patterns with guards'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vic/expat";
            };
          } // packageOverrides)
      ) {};

    expat = expat_1_0_5;

    expatch_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expatch";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expatch";
              version = "0.1.0";
              sha256 =
                "508ebb92ac07cca58a621aecdc253097d793bce5909862528bb6dc8b3c006d9e";
            };

            meta = {
              description = ''An Elixir implementation of JSON Patch
                            http://jsonpatch.com/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/neerfri/expatch";
            };
          } // packageOverrides)
      ) {};

    expatch = expatch_0_1_0;

    experiment_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "experiment";
            version = "0.0.3";
            src = fetchHex {
              pkg = "experiment";
              version = "0.0.3";
              sha256 =
                "5acb6c232aff08719f97254ca27ed1eb165c3f2d229e03cda85e4d31ad7b3156";
            };

            meta = {
              description = ''Experiment is a library for carefully refactoring
                            critical paths in production.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewvy/experiment";
            };
          } // packageOverrides)
      ) {};

    experiment = experiment_0_0_3;

    expinboard_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpotion_2_1_0,
          ibrowse_4_4_0
        }:
          buildMix ({
            name = "expinboard";
            version = "0.0.1";
            src = fetchHex {
              pkg = "expinboard";
              version = "0.0.1";
              sha256 =
                "3ff152d837293c0f53ead6cba4180ced55308d2869faa698e459abbe23d59bdc";
            };
            beamDeps  = [ exjsx_3_2_1 httpotion_2_1_0 ibrowse_4_4_0 ];

            meta = {
              description = ''A simple elixir pinboard client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/thilko/expinboard";
            };
          } // packageOverrides)
      ) {};

    expinboard = expinboard_0_0_1;

    exping_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exping";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exping";
              version = "0.1.0";
              sha256 =
                "c2c081592511ee768b55d9a53c6180fa4fc5810eccbdbca8bb399ac7d5b9407a";
            };

            meta = {
              description = ''ExPing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kennyballou/exping.git";
            };
          } // packageOverrides)
      ) {};

    exping = exping_0_1_0;

    expletive_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expletive";
            version = "0.1.4";
            src = fetchHex {
              pkg = "expletive";
              version = "0.1.4";
              sha256 =
                "dfb9ac919526bcb7f28b5acadad634b7e9d220203874ef124a87264a078f24b4";
            };

            meta = {
              description = ''Profanity detection and sanitization library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/expletive";
            };
          } // packageOverrides)
      ) {};

    expletive = expletive_0_1_4;

    expline_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expline";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expline";
              version = "0.1.0";
              sha256 =
                "48a69520c0cf8abc9ca69d92fc6e540cf111b939d927967366efb1cf7acdf09d";
            };

            meta = {
              longDescription = ''A cubic spline interpolation library for
                                Elixir. Includes a GenServer. All required
                                Linear Algebra modules are built for the
                                library, but may be extracted individually.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/isaacsanders/expline";
            };
          } // packageOverrides)
      ) {};

    expline = expline_0_1_0;

    explot_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "explot";
            version = "0.1.0";
            src = fetchHex {
              pkg = "explot";
              version = "0.1.0";
              sha256 =
                "0bfd6009e51f03e789174205c07e454e08308c2691c63abb22b4e6c0128db04b";
            };

            meta = {
              description = ''Package to plot data using Python`s Matplotlib'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jordipolo/explot";
            };
          } // packageOverrides)
      ) {};

    explot = explot_0_1_0;

    expool_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expool";
            version = "0.2.0";
            src = fetchHex {
              pkg = "expool";
              version = "0.2.0";
              sha256 =
                "f0cc61c365d1950522ad5816cf638353602db5a5d74feb7c96748dfa2b6f9d07";
            };

            meta = {
              description = ''Simple process pooling and task submission'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/expool";
            };
          } // packageOverrides)
      ) {};

    expool = expool_0_2_0;

    export_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlport_0_9_8 }:
          buildMix ({
            name = "export";
            version = "0.1.1";
            src = fetchHex {
              pkg = "export";
              version = "0.1.1";
              sha256 =
                "3da7444ff4053f1824352f4bdb13fbd2c28c93c2011786fb686b649fdca1021f";
            };
            beamDeps  = [ erlport_0_9_8 ];

            meta = {
              description = ''Erlport wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fazibear/export";
            };
          } // packageOverrides)
      ) {};

    export = export_0_1_1;

    export_private_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "export_private";
            version = "1.0.0";
            src = fetchHex {
              pkg = "export_private";
              version = "1.0.0";
              sha256 =
                "5050587d82ce9c584697dde947e1a3ddef9802857f3c01b865aa3f92dc1433d3";
            };

            meta = {
              description = ''Export private functions for tests.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/ejpcmac/export_private";
            };
          } // packageOverrides)
      ) {};

    export_private = export_private_1_0_0;

    exporter_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exporter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exporter";
              version = "0.1.0";
              sha256 =
                "ec94254a9ff2cef5150ca7821515d7cc780b2f33f8ee24f0273947b04619b8c5";
            };

            meta = {
              longDescription = ''On the library side, you can specify
                                functions and macros that the caller can use by
                                default'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tokubass/ex_exporter";
            };
          } // packageOverrides)
      ) {};

    exporter = exporter_0_1_0;

    expres_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expres";
            version = "0.2.5";
            src = fetchHex {
              pkg = "expres";
              version = "0.2.5";
              sha256 =
                "f3d1b7a5faf253078eb4e059edac641d05c606c4078afdaa8e254e19d3092b37";
            };

            meta = {
              longDescription = ''Minimal SQL WHERE expression parser and
                                evaluator in Elixir. Tags: expres, sql where,
                                parse, parser, eval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ympons/expres";
            };
          } // packageOverrides)
      ) {};

    expres = expres_0_2_5;

    expreso_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expreso";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expreso";
              version = "0.1.0";
              sha256 =
                "baa61f4354691c9dd2d50dcf19436e42bd3cff5fe9ece12be69996205495999a";
            };

            meta = {
              longDescription = ''Boolean expression parser and evaluator in
                                Elixir. Tags: expreso, boolean, parse, parser,
                                eval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ympons/expreso";
            };
          } // packageOverrides)
      ) {};

    expreso = expreso_0_1_0;

    exprintf_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exprintf";
            version = "0.1.6";
            src = fetchHex {
              pkg = "exprintf";
              version = "0.1.6";
              sha256 =
                "7acb31f93cef83effd3aa1f0572f9e29d7d1b4f50a6d456e2830fa7594c16182";
            };

            meta = {
              description = ''A printf / sprintf library for Elixir. It works
                            as a wrapper for :io.format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprintf";
            };
          } // packageOverrides)
      ) {};

    exprintf_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exprintf";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exprintf";
              version = "0.2.1";
              sha256 =
                "20a0e8c880be90e56a77fcc82533c5d60c643915c7ce0cc8aa1e06ed6001da28";
            };

            meta = {
              description = ''A printf / sprintf library for Elixir. It works
                            as a wrapper for :io.format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprintf";
            };
          } // packageOverrides)
      ) {};

    exprintf = exprintf_0_2_1;

    exprof_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exprintf_0_2_1 }:
          buildMix ({
            name = "exprof";
            version = "0.2.3";
            src = fetchHex {
              pkg = "exprof";
              version = "0.2.3";
              sha256 =
                "040410c672e2403908f578fb1e203a178692bbcd61b11d3745912662532b1dad";
            };
            beamDeps  = [ exprintf_0_2_1 ];

            meta = {
              description = ''A simple code profiler for Elixir using eprof.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprof";
            };
          } // packageOverrides)
      ) {};

    exprof = exprof_0_2_3;

    exproto_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exproto";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exproto";
              version = "0.1.0";
              sha256 =
                "23824dacc3a9667a7761799fce05c3f40361af67ffc434c09854a1e351304521";
            };

            meta = {
              description = ''Elixir protobuf library with protoc plugin.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kiopro/exproto";
            };
          } // packageOverrides)
      ) {};

    exproto = exproto_0_1_0;

    expublica_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "expublica";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expublica";
              version = "0.1.0";
              sha256 =
                "4b686581bfc7dee9d34ccdc6118018e03b9c8e2975f355104da7860f87b25b00";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Library for accessing ProPublica`s data via their
                            APIs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dotdotdotpaul/expublica";
            };
          } // packageOverrides)
      ) {};

    expublica = expublica_0_1_0;

    expug_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expug";
            version = "0.9.2";
            src = fetchHex {
              pkg = "expug";
              version = "0.9.2";
              sha256 =
                "218c2a337f876921c991a375cdfe87641b3fee4179b73798bf976cca2e5fd306";
            };

            meta = {
              description = ''Indented shorthand templates for HTML.
                            (pre-release)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rstacruz/expug";
            };
          } // packageOverrides)
      ) {};

    expug = expug_0_9_2;

    expyplot_1_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_2_1,
          ex_doc_0_18_3,
          statistics_0_4_1
        }:
          buildMix ({
            name = "expyplot";
            version = "1.2.2";
            src = fetchHex {
              pkg = "expyplot";
              version = "1.2.2";
              sha256 =
                "ba9d80623d8c5e25bb3d21cd19cac28043dd9ef4ec9ac4013fcb26cac3fc6fb3";
            };
            beamDeps  = [ earmark_0_2_1 ex_doc_0_18_3 statistics_0_4_1 ];

            meta = {
              longDescription = ''Python`s matplotlib.pyplot ported to Elixir.
                                Inspired by https://github.com/JordiPolo/explot
                                This library provides a fairly transparent
                                wrapper for matplotlib.pyplot.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MaxStrange/expyplot";
            };
          } // packageOverrides)
      ) {};

    expyplot = expyplot_1_2_2;

    exq_0_10_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          redix_0_7_1,
          uuid_1_1_8
        }:
          buildMix ({
            name = "exq";
            version = "0.10.1";
            src = fetchHex {
              pkg = "exq";
              version = "0.10.1";
              sha256 =
                "4616dfca0e8708fef01e61350e997ae5c126733131e57393dbbcd2f11c77124a";
            };
            beamDeps  = [ poison_3_1_0 redix_0_7_1 uuid_1_1_8 ];

            meta = {
              longDescription = ''Exq is a job processing library compatible
                                with Resque / Sidekiq for the Elixir
                                language.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/akira/exq";
            };
          } // packageOverrides)
      ) {};

    exq_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          redix_0_7_1,
          uuid_1_1_8
        }:
          buildMix ({
            name = "exq";
            version = "0.11.0";
            src = fetchHex {
              pkg = "exq";
              version = "0.11.0";
              sha256 =
                "90354af76ec8a858a76446b057b229fecc362874eaa59f98cbd68766f2cacc16";
            };
            beamDeps  = [ poison_3_1_0 redix_0_7_1 uuid_1_1_8 ];

            meta = {
              longDescription = ''Exq is a job processing library compatible
                                with Resque / Sidekiq for the Elixir
                                language.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/akira/exq";
            };
          } // packageOverrides)
      ) {};

    exq = exq_0_11_0;

    exql_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tds_1_0_18 }:
          buildMix ({
            name = "exql";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exql";
              version = "0.0.3";
              sha256 =
                "0dea2cd0f6cb1ba6c1cd4298716131fafb4271f2c076df0dd6e73e37cecb4705";
            };
            beamDeps  = [ tds_1_0_18 ];

            meta = {
              description = ''A functional query tool for MSSQL.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/exql";
            };
          } // packageOverrides)
      ) {};

    exql = exql_0_0_3;

    exquery_0_0_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_1_19,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "exquery";
            version = "0.0.11";
            src = fetchHex {
              pkg = "exquery";
              version = "0.0.11";
              sha256 =
                "61b520599fa33dc8c97be32f41c8fe4a6eb9d8b98b72a72cb88185868692a0c1";
            };
            beamDeps  = [ earmark_0_1_19 ex_doc_0_18_3 ];

            meta = {
              longDescription = '' A library for parsing HTML and querying
                                elements within. Handy for web scraping or
                                autmated testing. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exquery";
            };
          } // packageOverrides)
      ) {};

    exquery = exquery_0_0_11;

    exqueue_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, flist_0_2_1 }:
          buildMix ({
            name = "exqueue";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exqueue";
              version = "0.1.2";
              sha256 =
                "ff5b6b6cd55f651f22b28e88ab703158f1d3c8a798d48d6a5d5b7854611404d0";
            };
            beamDeps  = [ flist_0_2_1 ];

            meta = {
              description = ''Several simple implements of functional queue
                            data structures in Elixir.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    exqueue = exqueue_0_1_2;

    exquickbooks_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          oauther_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "exquickbooks";
            version = "0.8.0";
            src = fetchHex {
              pkg = "exquickbooks";
              version = "0.8.0";
              sha256 =
                "571e6da93290e0e67bcf498c6b44d5eae169d3d34aaed74eaddd901f9abc6c9d";
            };
            beamDeps  = [ httpoison_0_13_0 oauther_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''QuickBooks Online API client for Elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/Boulevard/ExQuickBooks";
            };
          } // packageOverrides)
      ) {};

    exquickbooks = exquickbooks_0_8_0;

    exquisite_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exquisite";
            version = "0.1.8";
            src = fetchHex {
              pkg = "exquisite";
              version = "0.1.8";
              sha256 =
                "f9575a4fa4fcb835ed162b86293afe367cf94f9b0382c63255e7f4441d96e784";
            };

            meta = {
              description = ''DSL to match_spec'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/exquisite";
            };
          } // packageOverrides)
      ) {};

    exquisite = exquisite_0_1_8;

    exredis_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eredis_1_1_0 }:
          buildMix ({
            name = "exredis";
            version = "0.2.6";
            src = fetchHex {
              pkg = "exredis";
              version = "0.2.6";
              sha256 =
                "00eb125c8e93f139bda605e9e679d65e3a50e909922b2d63da098face1e29d77";
            };
            beamDeps  = [ eredis_1_1_0 ];

            meta = {
              description = ''Redis client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/exredis";
            };
          } // packageOverrides)
      ) {};

    exredis = exredis_0_2_6;

    exredis_poolboy_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_6,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "exredis_poolboy";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exredis_poolboy";
              version = "0.2.2";
              sha256 =
                "9d8fc83c879c4d57c6dec2029afad49a244052f80ea825e879246c1a396bcfdd";
            };
            beamDeps  = [ exredis_0_2_6 poolboy_1_5_1 ];

            meta = {
              description = ''Wrapper around exredis using poolboy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mkaszubowski/exredis_poolboy";
            };
          } // packageOverrides)
      ) {};

    exredis_poolboy = exredis_poolboy_0_2_2;

    exref_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exref";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exref";
              version = "0.1.1";
              sha256 =
                "92d73f1eff56f2d0493a2dbf5e932b48b99a2cdd2e3cc3fc0ffeb9c1ae5ed86c";
            };

            meta = {
              description = ''Damn simple mix integration of xref.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    exref = exref_0_1_1;

    exreg_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exreg";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exreg";
              version = "0.0.3";
              sha256 =
                "b4480c5730fdb160958663c2e47eccfce8fa69381406ac35e59acfb753d79584";
            };

            meta = {
              description = ''A simple process name registry using pg2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/exreg";
            };
          } // packageOverrides)
      ) {};

    exreg = exreg_0_0_3;

    exreleasy_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          optimus_0_1_8,
          poison_3_1_0
        }:
          buildMix ({
            name = "exreleasy";
            version = "0.4.1";
            src = fetchHex {
              pkg = "exreleasy";
              version = "0.4.1";
              sha256 =
                "728aca907c901bd366f956e4e7d5506339ca2fa4be3df3561eebe75c9f98fc5c";
            };
            beamDeps  = [ optimus_0_1_8 poison_3_1_0 ];

            meta = {
              description = ''A very simple tool for releasing elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/miros/exreleasy";
            };
          } // packageOverrides)
      ) {};

    exreleasy = exreleasy_0_4_1;

    exrm_1_0_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, relx_3_26_0 }:
          buildMix ({
            name = "exrm";
            version = "1.0.8";
            src = fetchHex {
              pkg = "exrm";
              version = "1.0.8";
              sha256 =
                "4e8eebc1298fc0848f1693c527036e064f62bb609195036ecf45c0d3f0b01a7b";
            };
            beamDeps  = [ relx_3_26_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          } // packageOverrides)
      ) {};

    exrm = exrm_1_0_8;

    exrm_docker_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_docker";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exrm_docker";
              version = "0.2.1";
              sha256 =
                "e25a976cd5b47f0a8ea351791f31fac45a34cb25d214218279003fdf65ddbe89";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''Exrm plugin to push your release into a Docker
                            image.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/kwrooijen/exrm_docker";
            };
          } // packageOverrides)
      ) {};

    exrm_docker = exrm_docker_0_2_1;

    exrm_heroku_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_heroku";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exrm_heroku";
              version = "0.1.1";
              sha256 =
                "19fc16f1cfcc1c86bc64796a287028b8a8d951f7737024893c1772ba658da76d";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''Publish Elixir releases created with exrm release
                            manager to Heroku. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ride/exrm-heroku";
            };
          } // packageOverrides)
      ) {};

    exrm_heroku = exrm_heroku_0_1_1;

    exrm_rpm_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_rpm";
            version = "0.3.3";
            src = fetchHex {
              pkg = "exrm_rpm";
              version = "0.3.3";
              sha256 =
                "11de82ed0ba9e265577f255cdad0693bf191b30d56dbd85977201882e3652e53";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              longDescription = ''Adds simple Red Hat Package Manager (RPM)
                                generation to the exrm package manager. The
                                generated RPM file includes the Elixir release
                                and an init.d script to manage the project`s
                                service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/exrm-rpm";
            };
          } // packageOverrides)
      ) {};

    exrm_rpm = exrm_rpm_0_3_3;

    exrm_smartos_gz_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_smartos_gz";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exrm_smartos_gz";
              version = "1.0.0";
              sha256 =
                "700c3c9e80d24d1e0404c54391e582d786dbb3f8da9a3bf5d2b7f082841ba5af";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              longDescription = ''Trying to package an Elixir application for a
                                SmartOS GZ but getting errors about ncurses?
                                This will cure what ails you.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adam12/exrm_smartos_gz";
            };
          } // packageOverrides)
      ) {};

    exrm_smartos_gz = exrm_smartos_gz_1_0_0;

    exromaji_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exromaji";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exromaji";
              version = "1.0.0";
              sha256 =
                "e809c6af66fed87dd5bae5a79afc389c301336621170bafa597aec7e59ab9ee4";
            };

            meta = {
              description = ''A Elixir library for translating between
                            hiragana, katakana, romaji and sound.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exromaji";
            };
          } // packageOverrides)
      ) {};

    exromaji = exromaji_1_0_0;

    exruby_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exruby";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exruby";
              version = "0.1.0";
              sha256 =
                "fc667eb4023eab0b613926e06b6056b60055c6a77d02df027420a9bfaca5150b";
            };

            meta = {
              description = ''Exruby ports Ruby and ActiveSupport (Rails)
                            methods to Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/StanBright/exruby";
            };
          } // packageOverrides)
      ) {};

    exruby = exruby_0_1_0;

    exrun_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exrun";
            version = "0.1.6";
            src = fetchHex {
              pkg = "exrun";
              version = "0.1.6";
              sha256 =
                "39307a3222b4ef2a6240d078c64e711125c3bfd7b90d452438aacea4eb449be8";
            };

            meta = {
              longDescription = ''Elixir - save and easy to use standalone,
                                tracing tools for running elixir and erlang
                                applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liveforeverx/exrun";
            };
          } // packageOverrides)
      ) {};

    exrun = exrun_0_1_6;

    exsamples_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exsamples";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exsamples";
              version = "0.1.0";
              sha256 =
                "92acafe7e8a5d6b1c1b5ca937b9dab887f9a4474cfd6510a7117690a6c6da86d";
            };

            meta = {
              longDescription = ''Initializes lists of maps, structs or keyword
                                lists using tabular data in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msaraiva/exsamples";
            };
          } // packageOverrides)
      ) {};

    exsamples = exsamples_0_1_0;

    exscm_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exscm";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exscm";
              version = "0.0.2";
              sha256 =
                "53ed98adb26c17773c6a18999c25c548c138010a6b6334540b47b4e9435835a2";
            };

            meta = {
              description = ''Manage release versions by scm tags'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/treebee/exscm";
            };
          } // packageOverrides)
      ) {};

    exscm = exscm_0_0_2;

    exscript_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exscript";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exscript";
              version = "0.1.0";
              sha256 =
                "cb255b1e7deb1faedab4e345ebda100cee6ac263d75fe4b5d58b3af786c70f68";
            };

            meta = {
              description = ''Escript generator'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liveforeverx/exscript";
            };
          } // packageOverrides)
      ) {};

    exscript = exscript_0_1_0;

    exshape_2_0_12 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "exshape";
            version = "2.0.12";
            src = fetchHex {
              pkg = "exshape";
              version = "2.0.12";
              sha256 =
                "b4d7c394c44694b13b4c6375f9ed3c179ba58f7c6d9552dea6bad8d3c0e422e8";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''Read ESRI Shapefiles as a stream of features and
                            their attributes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exshape";
            };
          } // packageOverrides)
      ) {};

    exshape = exshape_2_0_12;

    exsms_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_phone_number_0_1_1,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exsms";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exsms";
              version = "0.2.2";
              sha256 =
                "c65e0bdc6361bb4a10fbc3d6d10193e50daa3425e6d221c43c1bcb9340799f37";
            };
            beamDeps  = [ ex_phone_number_0_1_1 httpoison_1_2_0 poison_3_1_0
                      ];

            meta = {
              longDescription = ''Exsms: A Elixir library for sending
                                transactional SMS - supports Sendinblue,
                                mailjet, msg91, msg91_otp and textlocal'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    exsms = exsms_0_2_2;

    exsoda_4_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          nimble_csv_0_1_1,
          poison_2_2_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "exsoda";
            version = "4.0.2";
            src = fetchHex {
              pkg = "exsoda";
              version = "4.0.2";
              sha256 =
                "970fd568ddb958d44067b33d96c3cc38d5346abc5e870c533b1327110036aea1";
            };
            beamDeps  = [
                          httpoison_1_2_0
                          nimble_csv_0_1_1
                          poison_2_2_0
                          uuid_1_1_8
                        ];

            meta = {
              description = ''A Socrata Soda2 API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exsoda";
            };
          } // packageOverrides)
      ) {};

    exsoda = exsoda_4_0_2;

    exsom_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exsom";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exsom";
              version = "0.2.1";
              sha256 =
                "ec61dc809255bb5127213687873bac6c5df8e48dadda9323d9cb5eee62f8f790";
            };

            meta = {
              description = ''XML parser for Elixir (based on Erlsom)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/metalabdesign/exsom";
            };
          } // packageOverrides)
      ) {};

    exsom = exsom_0_2_1;

    exstatsd_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_4 }:
          buildMix ({
            name = "exstatsd";
            version = "0.1.5";
            src = fetchHex {
              pkg = "exstatsd";
              version = "0.1.5";
              sha256 =
                "4fcad707df57fdb91338dae212355704924bea8db10207715b95e3c110e7b219";
            };
            beamDeps  = [ exactor_2_2_4 ];

            meta = {
              description = ''An Elixir ports client for StatsD'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/upbit/ExStatsD";
            };
          } // packageOverrides)
      ) {};

    exstatsd = exstatsd_0_1_5;

    exstreme_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exstreme";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exstreme";
              version = "0.1.1";
              sha256 =
                "f48c2b78d2ab9417be27dc85b29c82440170145549e0137f294b880a0ff7c289";
            };

            meta = {
              longDescription = ''Exstreme is an implementation of a Stream
                                Push data structure in the way of a runnable
                                graph where all the nodes must be connected and
                                process a message and pass the result to next
                                node(s)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrkaspa/exstreme";
            };
          } // packageOverrides)
      ) {};

    exstreme = exstreme_0_1_1;

    exsync_0_2_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, file_system_0_2_6
        }:
          buildMix ({
            name = "exsync";
            version = "0.2.3";
            src = fetchHex {
              pkg = "exsync";
              version = "0.2.3";
              sha256 =
                "23b6b186a2caa1cf5c0c4dfea9bd181d21d80a4032594d2f7c27d7ca78caa51d";
            };
            beamDeps  = [ file_system_0_2_6 ];

            meta = {
              description = ''Yet another Elixir reloader.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/exsync";
            };
          } // packageOverrides)
      ) {};

    exsync = exsync_0_2_3;

    ext_run_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "ext_run";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ext_run";
              version = "0.1.1";
              sha256 =
                "1f5da2869cfee8f47c23160c3542bdefb9121d5659b4a8c10253958f84f74b12";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Small tool to run external process from elixir
                            that is not owned by the BEAM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hermanverschooten/ext_run";
            };
          } // packageOverrides)
      ) {};

    ext_run = ext_run_0_1_1;

    exted_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exted";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exted";
              version = "0.1.0";
              sha256 =
                "6fd986b234b48f6d5019fe17c658eac7421eb732e607705d9070b7bc5e4eb0aa";
            };

            meta = {
              longDescription = ''ExTed is a naive implementation of a tree
                                edit distance algorithm in Elixir. Please note
                                that this algorithm has exponential runtime
                                complexity!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Annoraaq/exted";
            };
          } // packageOverrides)
      ) {};

    exted = exted_0_1_0;

    extermit_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "extermit";
            version = "0.1.0";
            src = fetchHex {
              pkg = "extermit";
              version = "0.1.0";
              sha256 =
                "00961f34d0fd2b0579ad3468b5ddc054bde0c30be7e3d0afd428288bf960d196";
            };

            meta = {
              longDescription = ''ExTermit is an Elixir based, updated Termit.
                                https://github.com/dvv/termit Library for
                                serializing Erlang terms to signed encrypted
                                binaries and reliably deserializing them
                                back.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/InoMurko/extermit";
            };
          } // packageOverrides)
      ) {};

    extermit = extermit_0_1_0;

    external_config_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "external_config";
            version = "0.1.0";
            src = fetchHex {
              pkg = "external_config";
              version = "0.1.0";
              sha256 =
                "9be059028ab7e85570f978cafafb75f70599c5fecdd6a5b2eee569f5a59576a6";
            };

            meta = {
              longDescription = ''ExternalConfig provides a way to use an
                                external mix style configuration (to your
                                application) file in a release or
                                application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bradleyd/external_config";
            };
          } // packageOverrides)
      ) {};

    external_config = external_config_0_1_0;

    exthereum_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hexate_0_6_1,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "exthereum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exthereum";
              version = "0.1.0";
              sha256 =
                "e693643fd8fa9ff2a055d3f4a534cbbc9f0d05eaf2defe706e0aa0beea36261c";
            };
            beamDeps  = [ hexate_0_6_1 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''This library exists to present a convenient
                                interface to control a full Ethereum node from
                                Elixir, abstracting away the need to deal with
                                the JSON-RPC API directly.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alanwilhelm/exthereum";
            };
          } // packageOverrides)
      ) {};

    exthereum = exthereum_0_1_0;

    extika_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "extika";
            version = "0.0.3";
            src = fetchHex {
              pkg = "extika";
              version = "0.0.3";
              sha256 =
                "ac8e887d3fbccf90211441cd3484676540fb336c70ff867c8468ee1b5371b730";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Wrapper around Apache Tika'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrew-d/extika";
            };
          } // packageOverrides)
      ) {};

    extika = extika_0_0_3;

    extra_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          flow_0_14_0,
          shorter_maps_2_2_5
        }:
          buildMix ({
            name = "extra";
            version = "0.2.0";
            src = fetchHex {
              pkg = "extra";
              version = "0.2.0";
              sha256 =
                "910e8de5704bf76c5049dc20e0363098f220154f1507f9416c8720b5d9462a91";
            };
            beamDeps  = [ flow_0_14_0 shorter_maps_2_2_5 ];

            meta = {
              description = ''A collection of extra utilities and extensions to
                            the Elixir standard library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/urbint/extra";
            };
          } // packageOverrides)
      ) {};

    extra = extra_0_2_0;

    extractable_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "extractable";
            version = "0.2.0";
            src = fetchHex {
              pkg = "extractable";
              version = "0.2.0";
              sha256 =
                "db242b2b462d640c9b8daf0539f5b4ef58bbb3e9ff5509ea533dd67bb665f9cb";
            };

            meta = {
              longDescription = ''A lightweight reusable Extractable protocol,
                                allowing extracting elements one-at-a-time from
                                a collection.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Qqwy/elixir-extractable";
            };
          } // packageOverrides)
      ) {};

    extractable = extractable_0_2_0;

    exts_0_3_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, datastructures_0_2_8
        }:
          buildMix ({
            name = "exts";
            version = "0.3.4";
            src = fetchHex {
              pkg = "exts";
              version = "0.3.4";
              sha256 =
                "ac30c04a94052e9eea11509778688772ffc2412d61c4d03e60fab80469be406e";
            };
            beamDeps  = [ datastructures_0_2_8 ];

            meta = {
              description = ''ets wrapper'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/exts";
            };
          } // packageOverrides)
      ) {};

    exts = exts_0_3_4;

    extube_4_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "extube";
            version = "4.0.0";
            src = fetchHex {
              pkg = "extube";
              version = "4.0.0";
              sha256 =
                "d79fba3c54b540999631c44ffda4d90ed252f7e5da14113e914987ecb58d2ab8";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Extube is a wrapper for the hubtraffic API.
                                It gathers data from multiple tube sites
                                including [x] Pornhub [x] Redtube [ ] Tube8 [x]
                                Youporn [x] Xtube [ ] Spankwire [ ] Keezmovies [
                                ] Extremetube.'';
              license = stdenv.lib.licenses.gpl2;
              homepage = "https://github.com/Nixonite/extube";
            };
          } // packageOverrides)
      ) {};

    extube = extube_4_0_0;

    extv_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "extv";
            version = "0.3.0";
            src = fetchHex {
              pkg = "extv";
              version = "0.3.0";
              sha256 =
                "e6d437ff8caea6fd51ec633e2459a1195da88feb3f6823d1997321e7439b38c0";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir API client for theTVDB.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulfedory/extv";
            };
          } // packageOverrides)
      ) {};

    extv = extv_0_3_0;

    extwitter_0_9_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauther_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "extwitter";
            version = "0.9.3";
            src = fetchHex {
              pkg = "extwitter";
              version = "0.9.3";
              sha256 =
                "83e871c7e3a0d884ae87677ff457d987a3f7985dbbd93a513877ecff8e4c1dfb";
            };
            beamDeps  = [ oauther_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''Twitter client library for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/extwitter";
            };
          } // packageOverrides)
      ) {};

    extwitter = extwitter_0_9_3;

    exum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exum";
              version = "0.1.0";
              sha256 =
                "fb400a0f8238523b815bc8f9eff4dad09678d9dd1274e9bd3868e9924f216e78";
            };

            meta = {
              description = ''Enumerables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sammkj/exum";
            };
          } // packageOverrides)
      ) {};

    exum = exum_0_1_0;

    exunit_json_formatter_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "exunit_json_formatter";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exunit_json_formatter";
              version = "0.1.1";
              sha256 =
                "bd0b54f3fb4eaa92e7eb49b24d90ffca3dc64e1476402f8c5b834deeb73e7b6d";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''ExUnit formatter that outputs a stream of JSON
                            objects'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/findmypast-oss/exunit_json_formatter";
            };
          } // packageOverrides)
      ) {};

    exunit_json_formatter = exunit_json_formatter_0_1_1;

    exuvia_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_3_3_1,
          temp_0_4_5,
          tentacat_0_7_2
        }:
          buildMix ({
            name = "exuvia";
            version = "0.2.4";
            src = fetchHex {
              pkg = "exuvia";
              version = "0.2.4";
              sha256 =
                "e3811b79fe8ce5be520bb0d1008b0d85cfd94895bd19f50fe95b8ece3b4756e3";
            };
            beamDeps  = [ confex_3_3_1 temp_0_4_5 tentacat_0_7_2 ];

            meta = {
              longDescription = ''Exuvia abstracts away everything needed to
                                connect to your Elixir node, via both SSH and
                                the distribution protocol.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tsutsu/exuvia";
            };
          } // packageOverrides)
      ) {};

    exuvia = exuvia_0_2_4;

    exvcr_0_10_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exactor_2_2_4,
          exjsx_4_0_0,
          httpoison_1_2_0,
          httpotion_3_1_0,
          ibrowse_4_4_0,
          meck_0_8_11
        }:
          buildMix ({
            name = "exvcr";
            version = "0.10.2";
            src = fetchHex {
              pkg = "exvcr";
              version = "0.10.2";
              sha256 =
                "b8f300020fac255a9062cf6291f11c143b5e23b3548c399ef7b16ebe8fe4e5bc";
            };
            beamDeps  = [
                          exactor_2_2_4
                          exjsx_4_0_0
                          httpoison_1_2_0
                          httpotion_3_1_0
                          ibrowse_4_4_0
                          meck_0_8_11
                        ];

            meta = {
              description = ''HTTP request/response recording library for
                            elixir, inspired by VCR.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exvcr";
            };
          } // packageOverrides)
      ) {};

    exvcr = exvcr_0_10_2;

    exvcr_0_3_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exactor_2_2_4,
          exjsx_3_2_1,
          httpoison_0_13_0,
          httpotion_1_0_0,
          meck_0_8_11
        }:
          buildMix ({
            name = "exvcr";
            version = "0.3.9";
            src = fetchHex {
              pkg = "exvcr";
              version = "0.3.9";
              sha256 =
                "25645f6598111ba76ed30b4a2079169ae1aed0795ef87bf74d70a3a7ca8f2112";
            };
            beamDeps  = [
                          exactor_2_2_4
                          exjsx_3_2_1
                          httpoison_0_13_0
                          httpotion_1_0_0
                          meck_0_8_11
                        ];

            meta = {
              description = ''HTTP request/response recording library for
                            elixir, inspired by VCR.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exvcr";
            };
          } // packageOverrides)
      ) {};

    exyelp_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          oauther_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "exyelp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exyelp";
              version = "0.0.2";
              sha256 =
                "1be8553ea0369a092eac1b6a0b47652b7c0570911483aa3ca454bef05ddd4d5d";
            };
            beamDeps  = [ httpoison_1_2_0 oauther_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''An Elixir Yelp API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gaslight/exyelp";
            };
          } // packageOverrides)
      ) {};

    exyelp = exyelp_0_0_2;

    exyt_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exyt";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exyt";
              version = "0.2.1";
              sha256 =
                "64fedc07cdcc5059c0a7d103641d5b21691f28804279b8c8cbd5ebc11eba697f";
            };
            beamDeps  = [ httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir client library for the Youtube API
                            v3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/justahero/exyt";
            };
          } // packageOverrides)
      ) {};

    exyt = exyt_0_2_1;

    exyz_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exyz";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exyz";
              version = "1.0.0";
              sha256 =
                "b1d53964ca72f70dd71c91327bf912858619d0357a53765ed3a08671e6769ef5";
            };

            meta = {
              description = ''Z-combinator in elixir: recursive anonymous
                            functions.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Dkendal/exyz";
            };
          } // packageOverrides)
      ) {};

    exyz = exyz_1_0_0;

    ezcryptex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cryptex_0_0_1 }:
          buildMix ({
            name = "ezcryptex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ezcryptex";
              version = "0.0.1";
              sha256 =
                "0c1c295cf5500106f7288949021ccbdc0d3a9276c2ae9938e45254b7500017b5";
            };
            beamDeps  = [ cryptex_0_0_1 ];

            meta = {
              longDescription = ''Thin layer on top of Cryptex for more easily
                                encrypting/decrypting, signing/verifying data in
                                elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/ezcryptex";
            };
          } // packageOverrides)
      ) {};

    ezcryptex = ezcryptex_0_0_1;

    facebook_0_21_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          json_2_1_0_SNAPSHOT
        }:
          buildMix ({
            name = "facebook";
            version = "0.21.0";
            src = fetchHex {
              pkg = "facebook";
              version = "0.21.0";
              sha256 =
                "52ae0eb5b0ce00ae180d82e7e2766504ff747a57ddfa6f535cead2288d5b1efd";
            };
            beamDeps  = [ httpoison_0_13_0 json_2_1_0_SNAPSHOT ];

            meta = {
              longDescription = ''Facebook Graph API Wrapper written in Elixir.
                                Please note, this is very much a work in
                                progress. Feel free to contribute using pull
                                requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mweibel/facebook.ex";
            };
          } // packageOverrides)
      ) {};

    facebook = facebook_0_21_0;

    facebook_signed_request_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "facebook_signed_request";
            version = "0.1.1";
            src = fetchHex {
              pkg = "facebook_signed_request";
              version = "0.1.1";
              sha256 =
                "5499984e1697208b80550ab7a75359b0c5d63897d496d58c04784a590cde358d";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Elixir library for validating and parsing signed
                            requests from Facebook.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/gurschitz/facebook_signed_request";
            };
          } // packageOverrides)
      ) {};

    facebook_signed_request = facebook_signed_request_0_1_1;

    facsimilie_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "facsimilie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "facsimilie";
              version = "0.1.0";
              sha256 =
                "10125477db3b6eee3b1b962c80bb66b5da44524b0272c4e143c81415264c9f48";
            };

            meta = {
              description = ''Sync 2 or more mail servers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mithereal/facsimilie";
            };
          } // packageOverrides)
      ) {};

    facsimilie = facsimilie_0_1_0;

    factory_girl_elixir_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "factory_girl_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "factory_girl_elixir";
              version = "0.1.1";
              sha256 =
                "2e07de9813089c6e6a45f0584eb2bfd28d3acbf654073b9e2ed6d0fd531b8f7e";
            };

            meta = {
              description = ''Minimal implementation of Ruby`s factory_girl in
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sinetris/factory_girl_elixir";
            };
          } // packageOverrides)
      ) {};

    factory_girl_elixir = factory_girl_elixir_0_1_1;

    facts_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "facts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "facts";
              version = "0.1.0";
              sha256 =
                "0c8e8b3c8154a1c5a424ae63d92f956102d3ff7515b41ac917c8798303ab21d9";
            };
            beamDeps  = [ poison_3_1_0 porcelain_2_0_3 ];

            meta = {
              description = ''A library for collection a variety of system
                            facts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nwlucas/facts";
            };
          } // packageOverrides)
      ) {};

    facts = facts_0_1_0;

    fadex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fadex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fadex";
              version = "0.1.0";
              sha256 =
                "a1bd1233bb6c529e8a0095937e9b622c83512e9cc0aadb97a18cc528cf88778c";
            };

            meta = {
              description = ''Implements the OpenPixelControl-Protocol (for use
                            with fadecandy)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lschuermann/fadex";
            };
          } // packageOverrides)
      ) {};

    fadex = fadex_0_1_0;

    faker_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "faker";
            version = "0.10.0";
            src = fetchHex {
              pkg = "faker";
              version = "0.10.0";
              sha256 =
                "7f1cf111b04b25feac10d2b9483a6d8c0a4a85899e6f7b06f10d22503b921e77";
            };

            meta = {
              description = ''Faker is a pure Elixir library for generating
                            fake data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/faker";
            };
          } // packageOverrides)
      ) {};

    faker = faker_0_10_0;

    faker_elixir_octopus_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "faker_elixir_octopus";
            version = "1.0.2";
            src = fetchHex {
              pkg = "faker_elixir_octopus";
              version = "1.0.2";
              sha256 =
                "a332fd3c5c633c87e15f262109a5f141b3e2dd08324df71d2591ef918f20789d";
            };

            meta = {
              description = ''FakerElixir generates fake data for you.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GesJeremie/faker-elixir";
            };
          } // packageOverrides)
      ) {};

    faker_elixir_octopus = faker_elixir_octopus_1_0_2;

    fakeredis_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fakeredis";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fakeredis";
              version = "0.2.0";
              sha256 =
                "5fcc5911fd65967234df47032c7250551213fb9384fe192abfbd9e9a2967e411";
            };

            meta = {
              longDescription = ''FakeRedis recreates the Redis API using only
                                native Erlang/Elixir features, especially
                                ETS.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/roryqueue/fakeredis";
            };
          } // packageOverrides)
      ) {};

    fakeredis = fakeredis_0_2_0;

    faktory_worker_ex_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_2_3_1,
          connection_1_0_4,
          poison_3_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "faktory_worker_ex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "faktory_worker_ex";
              version = "0.5.0";
              sha256 =
                "cdb6fcde87f1af1475147f8cc7682b9b79605033e8caf928cac0bac24a24da56";
            };
            beamDeps  = [
                          certifi_2_3_1
                          connection_1_0_4
                          poison_3_1_0
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''Elixir worker for Faktory'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/cjbottaro/faktory_worker_ex";
            };
          } // packageOverrides)
      ) {};

    faktory_worker_ex = faktory_worker_ex_0_5_0;

    family_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "family";
            version = "0.3.0";
            src = fetchHex {
              pkg = "family";
              version = "0.3.0";
              sha256 =
                "8f1b95e4a8723de5b77bfc538df966ce576dc8c7b06e2bbbcc2e609d26db25d2";
            };

            meta = {
              longDescription = ''No man has ever lived that had enough of
                                children’s gratitude or woman’s love'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ahtung/family.ex";
            };
          } // packageOverrides)
      ) {};

    family = family_0_3_0;

    farmbot_simulator_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_make_0_4_2,
          nerves_uart_1_0_0
        }:
          buildMix ({
            name = "farmbot_simulator";
            version = "0.1.3";
            src = fetchHex {
              pkg = "farmbot_simulator";
              version = "0.1.3";
              sha256 =
                "39edccdb3bbe44f3dba9854ac890a5af483f3c24ee160faf78703652b68c89cf";
            };
            beamDeps  = [ elixir_make_0_4_2 nerves_uart_1_0_0 ];

            meta = {
              longDescription = ''Simulates (NOT EMULATES) Farmbot`s arduino
                                firmware and hardware. The firmware is pretty
                                stable and used in FarmbotOS`s testing
                                environment. The visual hardware simulator is
                                very much a WIP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/FarmBot-Labs/farmbot_simulator";
            };
          } // packageOverrides)
      ) {};

    farmbot_simulator = farmbot_simulator_0_1_3;

    fast_ensure_loaded_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fastglobal_1_0_0 }:
          buildMix ({
            name = "fast_ensure_loaded";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fast_ensure_loaded";
              version = "0.1.0";
              sha256 =
                "5c1e55e6d7787691ca43ed3e61795ad09289bbacb6c1c911155f8fd018cb7cda";
            };
            beamDeps  = [ fastglobal_1_0_0 ];

            meta = {
              description = ''Cache Code.ensure_loaded calls in FastGlobal.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timbuchwaldt/fast_ensure_loaded";
            };
          } // packageOverrides)
      ) {};

    fast_ensure_loaded = fast_ensure_loaded_0_1_0;

    fast_local_datetime_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_17 }:
          buildMix ({
            name = "fast_local_datetime";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fast_local_datetime";
              version = "0.3.0";
              sha256 =
                "fd81f4754738298d9a0e809b5abd5f6a0b40bb7c7fb9f2645c96b5bb1b60d73a";
            };
            beamDeps  = [ tzdata_0_5_17 ];

            meta = {
              longDescription = ''Fast conversion of a UTC epoch timestamp
                                (Unix timestamp) into a DateTime in a given
                                timezone.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    fast_local_datetime = fast_local_datetime_0_3_0;

    fasta_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, parallel_0_0_3 }:
          buildMix ({
            name = "fasta";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fasta";
              version = "0.1.0";
              sha256 =
                "ebacba161985bf3d1bc5cf35e6ab0c01ce7f1f0fcc52151a35605eb9a6fac44b";
            };
            beamDeps  = [ parallel_0_0_3 ];

            meta = {
              description = ''FASTA is a tool for parsing FASTA-formatted
                            strings in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annejohnson/FASTA";
            };
          } // packageOverrides)
      ) {};

    fasta = fasta_0_1_0;

    fastglobal_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fastglobal";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fastglobal";
              version = "1.0.0";
              sha256 =
                "cfdb7ed63910bc75f579cd09e2517618fa9418b56731d51d03f7ba4b400798d0";
            };

            meta = {
              description = ''Fast no copy globals for Elixir & Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/fastglobal";
            };
          } // packageOverrides)
      ) {};

    fastglobal = fastglobal_1_0_0;

    faust_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "faust";
            version = "0.1.0";
            src = fetchHex {
              pkg = "faust";
              version = "0.1.0";
              sha256 =
                "0ab347a6f377a97e621db0f659841436d6dbb31f1b7c8309e3fb543bec0c473e";
            };

            meta = {
              description = ''A Markov chain text generator for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jquadrin/faust";
            };
          } // packageOverrides)
      ) {};

    faust = faust_0_1_0;

    favicon_finder_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "favicon_finder";
            version = "0.1.0";
            src = fetchHex {
              pkg = "favicon_finder";
              version = "0.1.0";
              sha256 =
                "40053916f3356b37589760284046032be98b5341b541a9594c17b90d0acc4587";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 ];

            meta = {
              description = ''Extract favicon links from websites.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/matixmatix/favicon-finder";
            };
          } // packageOverrides)
      ) {};

    favicon_finder = favicon_finder_0_1_0;

    fdg_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fdg";
            version = "0.0.4";
            src = fetchHex {
              pkg = "fdg";
              version = "0.0.4";
              sha256 =
                "a5ec0f8214e52c63186e620a3556a3d61c6fa9118bf4a6b84b67ff236b8a98da";
            };

            meta = {
              longDescription = ''This project aims to be a simple library with
                                which to build force directed graphs. Ideally,
                                FDG will be used to produce visualiations of
                                networks and static analysis of code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnhamelink/elixir-fdg";
            };
          } // packageOverrides)
      ) {};

    fdg = fdg_0_0_4;

    feature_toggler_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exredis_0_2_6 }:
          buildMix ({
            name = "feature_toggler";
            version = "0.0.1";
            src = fetchHex {
              pkg = "feature_toggler";
              version = "0.0.1";
              sha256 =
                "dac607aa67971e87b9d8fb8eb3057246d4480c99e11951faa1ed9f204b7f48ae";
            };
            beamDeps  = [ exredis_0_2_6 ];

            meta = {
              description = ''This is a simple feature toggler/switch with
                            redis database written in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aravindgd/feature_toggler";
            };
          } // packageOverrides)
      ) {};

    feature_toggler = feature_toggler_0_0_1;

    feeder_2_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "feeder";
            version = "2.0.2";
            src = fetchHex {
              pkg = "feeder";
              version = "2.0.2";
              sha256 =
                "f2bd5e441772c659778ff8195f60a10866a6049dbdc315c5d0fae16a64191077";
            };

            meta = {
              description = ''Stream parse RSS and Atom formatted XML feeds.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaelnisi/feeder";
            };
          } // packageOverrides)
      ) {};

    feeder_2_2_4 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "feeder";
            version = "2.2.4";
            src = fetchHex {
              pkg = "feeder";
              version = "2.2.4";
              sha256 =
                "3ebe40655651a947c0be1c1d8746181875a9743b4aa2cc0e07aca002c0041151";
            };

            meta = {
              description = ''Stream parse RSS and Atom formatted XML feeds.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaelnisi/feeder";
            };
          } // packageOverrides)
      ) {};

    feeder = feeder_2_2_4;

    feeder_ex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, feeder_2_2_4 }:
          buildMix ({
            name = "feeder_ex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "feeder_ex";
              version = "1.1.0";
              sha256 =
                "3d06dfcc3e13a2fb66182dffc16e112b0ef9aea432a949f48b56c667ac09d07e";
            };
            beamDeps  = [ feeder_2_2_4 ];

            meta = {
              description = ''RSS feed parser. Simple wrapper for feeder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manukall/feeder_ex";
            };
          } // packageOverrides)
      ) {};

    feeder_ex = feeder_ex_1_1_0;

    feederer_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "feederer";
            version = "0.6.0";
            src = fetchHex {
              pkg = "feederer";
              version = "0.6.0";
              sha256 =
                "c5041617fc7e71db9a0763f36fbda3fa41598203ab8b47972e3e9dae81039861";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              longDescription = ''Parses XML syndication feeds such as RSS,
                                Atom, etc. Elixir feedparser wrapper using
                                erlport.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/draftli/feederer";
            };
          } // packageOverrides)
      ) {};

    feederer = feederer_0_6_0;

    feedparser_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "feedparser";
            version = "0.0.3";
            src = fetchHex {
              pkg = "feedparser";
              version = "0.0.3";
              sha256 =
                "ef19d82d5d0db4ca10e1a83c8eefe82678538cdeb143e707bf7ef738177c3eeb";
            };

            meta = {
              description = ''Discover and parse RSS and Atom feeds'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/l3kn/Elixir-Feedparser";
            };
          } // packageOverrides)
      ) {};

    feedparser = feedparser_0_0_3;

    fennec_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_2_0_1,
          jerboa_0_2_0,
          mix_docker_0_4_1
        }:
          buildMix ({
            name = "fennec";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fennec";
              version = "0.3.0";
              sha256 =
                "fc7065600ef9f2a09ce2126a0dc6009b2da38d624411fa5a9f42d13612e78b35";
            };
            beamDeps  = [ confex_2_0_1 jerboa_0_2_0 mix_docker_0_4_1 ];

            meta = {
              description = ''STUN/TURN server'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/fennec";
            };
          } // packageOverrides)
      ) {};

    fennec = fennec_0_3_0;

    fetch_favicon_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "fetch_favicon";
            version = "0.1.3";
            src = fetchHex {
              pkg = "fetch_favicon";
              version = "0.1.3";
              sha256 =
                "b76f3be52e886cb85684128d002e0044453e6f9832a9a2498d90829229eb3eb1";
            };
            beamDeps  = [ floki_0_20_3 httpoison_1_2_0 ];

            meta = {
              description = ''Fetch a favicon with multiple fallbacks,
                            returning the image itself.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ZakMiller/fetch-favicon";
            };
          } // packageOverrides)
      ) {};

    fetch_favicon = fetch_favicon_0_1_3;

    fetcher_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fetcher";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fetcher";
              version = "0.3.0";
              sha256 =
                "bd17fa9d29bb3d96ada614c800448a05dbb19bcc188a06bb010c232ef63eaf82";
            };

            meta = {
              longDescription = ''Fetcher allows to fetch list of data from
                                data structures and getting back meaningful
                                errors'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/matteosister/fetcher";
            };
          } // packageOverrides)
      ) {};

    fetcher = fetcher_0_3_0;

    fettle_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, deferred_config_0_1_1
        }:
          buildMix ({
            name = "fettle";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fettle";
              version = "1.0.0";
              sha256 =
                "3d57fc672966856e204e2f1401d846804f44d567ae1e4e1f9fa0d14ad000925c";
            };
            beamDeps  = [ deferred_config_0_1_1 ];

            meta = {
              description = ''Runs health-check functions periodically, and
                            aggregates health status reports.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Financial-Times/fettle";
            };
          } // packageOverrides)
      ) {};

    fettle = fettle_1_0_0;

    fettle_checks_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fettle_1_0_0,
          httpoison_0_6_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "fettle_checks";
            version = "0.2.2";
            src = fetchHex {
              pkg = "fettle_checks";
              version = "0.2.2";
              sha256 =
                "2753f798820d28029b3990b6a9221e41a2f861f6b500af8b24b10971067bc949";
            };
            beamDeps  = [ fettle_1_0_0 httpoison_0_6_2 poison_3_1_0 ];

            meta = {
              description = ''A library of health checker implementations for
                            Fettle.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Financial-Times/fettle_checks";
            };
          } // packageOverrides)
      ) {};

    fettle_checks = fettle_checks_0_2_2;

    fexr_yahoo_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          con_cache_0_13_0,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "fexr_yahoo";
            version = "0.2.3";
            src = fetchHex {
              pkg = "fexr_yahoo";
              version = "0.2.3";
              sha256 =
                "94d8fad7726601e97eaf08a5ea51eee79327ef2d6e8d006f0dc9a606364f7c7c";
            };
            beamDeps  = [ con_cache_0_13_0 httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              longDescription = ''FexrYahoo serve you the latest exchange rates
                                from Yahoo exchange in a simple developer
                                friendly map.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schultzer/fexr_yahoo";
            };
          } // packageOverrides)
      ) {};

    fexr_yahoo = fexr_yahoo_0_2_3;

    ffaker_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ffaker";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ffaker";
              version = "0.4.0";
              sha256 =
                "150485315472a9b57172cfecbd990282082ae5f07550c512a408052f6dfc392f";
            };

            meta = {
              description = ''elixir porting of
                            https://github.com/ffaker/ffaker'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marocchino/ffaker";
            };
          } // packageOverrides)
      ) {};

    ffaker = ffaker_0_4_0;

    ffmpex_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "ffmpex";
            version = "0.5.2";
            src = fetchHex {
              pkg = "ffmpex";
              version = "0.5.2";
              sha256 =
                "d12a87939ac42d30d9e5346f1ffb693df232172227c780068bb268dd248bdc65";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''FFmpeg command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talklittle/ffmpex";
            };
          } // packageOverrides)
      ) {};

    ffmpex = ffmpex_0_5_2;

    ffnerd_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ffnerd";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ffnerd";
              version = "0.2.1";
              sha256 =
                "7f0f2d52842e2201a90a0abda7f4761f60581de13661b4f58213cf703a708021";
            };
            beamDeps  = [ exconstructor_1_1_0 httpoison_0_13_0 poison_3_1_0
                      ];

            meta = {
              longDescription = ''An Elixir wrapper for the Fantasy Football
                                Nerd API
                                (http://www.fantasyfootballnerd.com/fantasy-football-api)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jessejanderson/ffnerd-api-elixir";
            };
          } // packageOverrides)
      ) {};

    ffnerd = ffnerd_0_2_1;

    fibonacci_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fibonacci";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fibonacci";
              version = "0.2.0";
              sha256 =
                "b33f43689a7b48b5fb7ed1225b08f2db2003ec8a9128de91ec25feb5083db725";
            };

            meta = {
              description = ''An Elixir interface to the Fibonacci series.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevegrossi/fibonacci";
            };
          } // packageOverrides)
      ) {};

    fibonacci = fibonacci_0_2_0;

    fiet_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, saxy_0_6_0 }:
          buildMix ({
            name = "fiet";
            version = "0.2.1";
            src = fetchHex {
              pkg = "fiet";
              version = "0.2.1";
              sha256 =
                "2be6a9937a6b5e2a58c1b11cfcf51da0c894767dd1906888d7bb907c8c04ab5b";
            };
            beamDeps  = [ saxy_0_6_0 ];

            meta = {
              longDescription = ''Fiết is a feeds parser in Elixir, which
                                aims to provide extensibility, speed, and
                                standard compliance to feed parsing.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qcam/fiet";
            };
          } // packageOverrides)
      ) {};

    fiet = fiet_0_2_1;

    fifocache_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fifocache";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fifocache";
              version = "1.0.1";
              sha256 =
                "363f03e2871b8d8c7564a47133162ce18c362bd70897f5bd58fa246a0e169a43";
            };

            meta = {
              description = ''Fixed size FIFO cache implementation'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mururu/fifocache";
            };
          } // packageOverrides)
      ) {};

    fifocache = fifocache_1_0_1;

    figaro_elixir_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_3_3 }:
          buildMix ({
            name = "figaro_elixir";
            version = "1.0.1";
            src = fetchHex {
              pkg = "figaro_elixir";
              version = "1.0.1";
              sha256 =
                "0a9483c754a9064dff30de2df4b12720ef4726ee9c1ca2b63307acadefb551de";
            };
            beamDeps  = [ yamerl_0_3_3 ];

            meta = {
              description = ''Environmental variables manager and configuration
                            management tool.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/figaro-elixir";
            };
          } // packageOverrides)
      ) {};

    figaro_elixir = figaro_elixir_1_0_1;

    file_cache_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "file_cache";
            version = "0.2.0";
            src = fetchHex {
              pkg = "file_cache";
              version = "0.2.0";
              sha256 =
                "60e47706e4817cb1a59558ef1cc51ab3152aa419b9c2bca84b97c8b2d7b4a209";
            };

            meta = {
              description = ''Store and load data from file system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/webdeb/file_cache";
            };
          } // packageOverrides)
      ) {};

    file_cache = file_cache_0_2_0;

    file_info_0_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mimetype_parser_0_1_3
        }:
          buildMix ({
            name = "file_info";
            version = "0.0.2";
            src = fetchHex {
              pkg = "file_info";
              version = "0.0.2";
              sha256 =
                "f28456aafd014c01a4188fee36c1571e9669b0506eb22c830db357084c0c9cb2";
            };
            beamDeps  = [ mimetype_parser_0_1_3 ];

            meta = {
              description = ''Get MIME-type of a file by its magic number
                            (linux only)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NobbZ/file_info";
            };
          } // packageOverrides)
      ) {};

    file_info = file_info_0_0_2;

    file_signatures_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "file_signatures";
            version = "0.1.7";
            src = fetchHex {
              pkg = "file_signatures";
              version = "0.1.7";
              sha256 =
                "21ea1f1d410f293d4c6566e21abf33221cfd1439af347197ec49686b9df36bdc";
            };

            meta = {
              description = ''File signatures module for OTP'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/file_signatures";
            };
          } // packageOverrides)
      ) {};

    file_signatures = file_signatures_0_1_7;

    file_system_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "file_system";
            version = "0.1.5";
            src = fetchHex {
              pkg = "file_system";
              version = "0.1.5";
              sha256 =
                "918a58459be8d26c4a12f0bb932b903b8b11ad8aa93933b2916bac1b49e956ea";
            };

            meta = {
              description = ''A file system change watcher wrapper based on
                            [fs](https://github.com/synrc/fs)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/file_system";
            };
          } // packageOverrides)
      ) {};

    file_system_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "file_system";
            version = "0.2.6";
            src = fetchHex {
              pkg = "file_system";
              version = "0.2.6";
              sha256 =
                "0d50da6b04c58e101a3793b1600f9a03b86e3a8057b192ac1766013d35706fa6";
            };

            meta = {
              description = ''A file system change watcher wrapper based on
                            [fs](https://github.com/synrc/fs)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/file_system";
            };
          } // packageOverrides)
      ) {};

    file_system = file_system_0_2_6;

    file_system_utils_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jason_1_1_1 }:
          buildMix ({
            name = "file_system_utils";
            version = "0.1.0";
            src = fetchHex {
              pkg = "file_system_utils";
              version = "0.1.0";
              sha256 =
                "fd5fa695c934f46e31f38663f3b99368c45e372fea0068f85b87711eadf0abef";
            };
            beamDeps  = [ jason_1_1_1 ];

            meta = {
              description = ''Wrapper around common file system linux
                            utilties.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/srivathsanmurali/file_system_utils";
            };
          } // packageOverrides)
      ) {};

    file_system_utils = file_system_utils_0_1_0;

    filesize_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "filesize";
            version = "0.1.1";
            src = fetchHex {
              pkg = "filesize";
              version = "0.1.1";
              sha256 =
                "c973b07220df28ffd5f14d982e8533f6a95f724d4d1f24f6d3bc22574dcf686f";
            };

            meta = {
              description = ''Very small module to turn a bytes value into a
                            human readable format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slickcoach/filesize";
            };
          } // packageOverrides)
      ) {};

    filesize = filesize_0_1_1;

    filter_query_parser_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nimble_parsec_0_3_2
        }:
          buildMix ({
            name = "filter_query_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "filter_query_parser";
              version = "0.1.0";
              sha256 =
                "fe48eb24db4b84e20e07c35b934830bb0744e30245fc9485e18125dbb40ca9be";
            };
            beamDeps  = [ nimble_parsec_0_3_2 ];

            meta = {
              description = ''Small library to handle parsing of github style
                            filter queries.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/LostKobrakai/filter_query_parser";
            };
          } // packageOverrides)
      ) {};

    filter_query_parser = filter_query_parser_0_1_0;

    filterable_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "filterable";
            version = "0.6.0";
            src = fetchHex {
              pkg = "filterable";
              version = "0.6.0";
              sha256 =
                "50b76f82102c05c2940dbf076fa6ee9d426fd0187c8dddd68c003f9a7efa5c1b";
            };

            meta = {
              description = ''Filtering from incoming params in
                            Elixir/Ecto/Phoenix with easy to use DSL.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/omohokcoj/filterable";
            };
          } // packageOverrides)
      ) {};

    filterable = filterable_0_6_0;

    find_type_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "find_type";
            version = "0.1.1";
            src = fetchHex {
              pkg = "find_type";
              version = "0.1.1";
              sha256 =
                "3fd1f7a80e1e0e7419eaeed09477d3e429505822f9e92e6b7f2c08b11a2f776e";
            };

            meta = {
              description = ''Simple package to find the type of an item in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JoeBanks13/find_type";
            };
          } // packageOverrides)
      ) {};

    find_type = find_type_0_1_1;

    fingerprint_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fingerprint";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fingerprint";
              version = "0.3.0";
              sha256 =
                "8e193ad3855d8c555cd85f2e43afd41486eeeec54731dfea3f7f81d6aec423d0";
            };

            meta = {
              longDescription = ''Fingerprint provides system information like
                                memory, CPU, os-release, block devices and
                                network.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bradleyd/fingerprint";
            };
          } // packageOverrides)
      ) {};

    fingerprint = fingerprint_0_3_0;

    finicity_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpotion_2_1_0,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "finicity";
            version = "0.0.5";
            src = fetchHex {
              pkg = "finicity";
              version = "0.0.5";
              sha256 =
                "b58ef39987976cf50851311a95b40504ba763c0d82256b012f5b1246bd92d9b4";
            };
            beamDeps  = [ floki_0_20_3 httpotion_2_1_0 xml_builder_2_1_0 ];

            meta = {
              description = ''Client library for Finicity.'';

            };
          } // packageOverrides)
      ) {};

    finicity = finicity_0_0_5;

    firebase_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "firebase";
            version = "0.0.1";
            src = fetchHex {
              pkg = "firebase";
              version = "0.0.1";
              sha256 =
                "4fe7782dcb130dc5fbaf832cc4d07ece2672db752db0384738a9d648d97b91c5";
            };

            meta = {
              description = ''Elixir SDK for Firebase Database, Cloud Messaging
                            and User Authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smart-commut/firebase";
            };
          } // packageOverrides)
      ) {};

    firebase = firebase_0_0_1;

    firebase_pushid_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "firebase_pushid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "firebase_pushid";
              version = "0.1.0";
              sha256 =
                "80710a9c3f9b687291aa2e3fcfe2cfd3e0e6b270befdae5b7e2857285847241c";
            };

            meta = {
              description = ''Generates a timestamp based id as Firebase
                            does.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arturictus/firebase_pushid";
            };
          } // packageOverrides)
      ) {};

    firebase_pushid = firebase_pushid_0_1_0;

    firebase_token_1_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jose_1_7_9,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "firebase_token";
            version = "1.1.1";
            src = fetchHex {
              pkg = "firebase_token";
              version = "1.1.1";
              sha256 =
                "665486895ec9b68565f1db2d559954be8312e0430ae87917bde57af70e1dea27";
            };

            beamDeps  = [ jose_1_7_9 jsx_2_8_0 ];

            meta = {
              description = ''Custom Firebase token generator library for
                            Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruel/firebase-token-erlang";
            };
          } // packageOverrides)
      ) {};

    firebase_token = firebase_token_1_1_1;

    firex_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bunt_0_1_6 }:
          buildMix ({
            name = "firex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "firex";
              version = "0.3.0";
              sha256 =
                "9d8354a30f1ef2825fd80a40af7c02e8a1ea397be9e3b1cbe49c865f952f0d5a";
            };
            beamDeps  = [ bunt_0_1_6 ];

            meta = {
              longDescription = ''Firex is a library for automatically
                                generating command line interfaces (CLIs) from
                                an elixir module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msoedov/firex";
            };
          } // packageOverrides)
      ) {};

    firex = firex_0_3_0;

    firmata_0_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_1_0_0
        }:
          buildMix ({
            name = "firmata";
            version = "0.0.2";
            src = fetchHex {
              pkg = "firmata";
              version = "0.0.2";
              sha256 =
                "362bf6379d7703374e5ca340c896a757e9f62362d9554328f211b9d6d5a21333";
            };
            beamDeps  = [ nerves_uart_1_0_0 ];

            meta = {
              longDescription = ''This package implements the Firmata protocol.
                                Firmata is a MIDI-based protocol for
                                communicating with microcontrollers.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/entone/firmata";
            };
          } // packageOverrides)
      ) {};

    firmata = firmata_0_0_2;

    fitreader_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, flow_0_14_0 }:
          buildMix ({
            name = "fitreader";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fitreader";
              version = "0.1.0";
              sha256 =
                "defa6cd45ebf41543de3288e84707c4470ba41ab939fd8cf6a4a626b755dd3e6";
            };
            beamDeps  = [ flow_0_14_0 ];

            meta = {
              description = ''Package for reading FIT files generated by Garmin
                            and Wahoo devices.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    fitreader = fitreader_0_1_0;

    fix_warnings_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fix_warnings";
            version = "0.1.3";
            src = fetchHex {
              pkg = "fix_warnings";
              version = "0.1.3";
              sha256 =
                "97f039722423eac633d317f4359aa80df6ef28c47cf152bb859b8af37c3d2601";
            };

            meta = {
              description = ''A mix task that automatically fixes compiler
                            warnings in your Elixir project'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hasclass/fix_warnings";
            };
          } // packageOverrides)
      ) {};

    fix_warnings = fix_warnings_0_1_3;

    fixby_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fixby";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fixby";
              version = "0.0.1";
              sha256 =
                "e361bb9324c616e397fc78bda81a3629a39189f4675aefdeb54e85dfa74a629f";
            };

            meta = {
              description = ''FIXBY comments that raise after a given version
                            of Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CoderDennis/fixby-elixir";
            };
          } // packageOverrides)
      ) {};

    fixby = fixby_0_0_1;

    fixer_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bucs_1_0_16,
          doteki_1_0_6,
          jsx_2_8_3
        }:
          buildMix ({
            name = "fixer";
            version = "0.2.4";
            src = fetchHex {
              pkg = "fixer";
              version = "0.2.4";
              sha256 =
                "fa25c48f2692e73fa00f11138e7ea3f6425eab5a1cfe442f0442e2ce6a58f519";
            };
            beamDeps  = [ bucs_1_0_16 doteki_1_0_6 jsx_2_8_3 ];

            meta = {
              longDescription = ''Erlang/Elixir module for fixer.io - foreign
                                exchange rates and currency conversion'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/fixer";
            };
          } // packageOverrides)
      ) {};

    fixer = fixer_0_2_4;

    fixme_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fixme";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fixme";
              version = "0.1.0";
              sha256 =
                "232308226bbbb9959a9796957f610edbc4694bc1240792b8af84d9c19c367af7";
            };

            meta = {
              description = ''FIXME comments that raise after a certain point
                            in time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/fixme-elixir";
            };
          } // packageOverrides)
      ) {};

    fixme = fixme_0_1_0;

    flac_parser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flac_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "flac_parser";
              version = "0.1.0";
              sha256 =
                "052972fcb633449aa86b22b4351d9a23505b533046b20ca3514f29b1d51bf66c";
            };

            meta = {
              description = ''Parses a FLAC file metadata.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jesvs/flac_parser";
            };
          } // packageOverrides)
      ) {};

    flac_parser = flac_parser_0_1_0;

    flasked_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flasked";
            version = "0.4.0";
            src = fetchHex {
              pkg = "flasked";
              version = "0.4.0";
              sha256 =
                "8499535ce20f8e9d2e38ce7e9ecac1a9fc5f402f3f0ab58661c1ed8795f3178c";
            };

            meta = {
              longDescription = ''Flasked injects application environment
                                configuration at runtime based on given ENV
                                variables and a mapping. This is pretty useful
                                for applications following the 12factor app
                                principle or which are deployed in
                                containerization infrastructures like Docker.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/flasked";
            };
          } // packageOverrides)
      ) {};

    flasked = flasked_0_4_0;

    flat_json_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flat_json";
            version = "0.1.1";
            src = fetchHex {
              pkg = "flat_json";
              version = "0.1.1";
              sha256 =
                "fbda728fad3ef37762f82aa399860c3717097206c05b73f88e93975850eacf5d";
            };

            meta = {
              description = ''Decode string with flat JSON to Map'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/flat-json/flat-json";
            };
          } // packageOverrides)
      ) {};

    flat_json = flat_json_0_1_1;

    flex_logger_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flex_logger";
            version = "0.2.1";
            src = fetchHex {
              pkg = "flex_logger";
              version = "0.2.1";
              sha256 =
                "8be277e49613e50f2079370ac8f4e63ed31425840390e75b837a0fe8780941ad";
            };

            meta = {
              description = ''FlexLogger adds module/application specific log
                            levels to Elixir`s Logger.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arnomi/elixir-flex-logger";
            };
          } // packageOverrides)
      ) {};

    flex_logger = flex_logger_0_2_1;

    flexid_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flexid";
            version = "0.1.1";
            src = fetchHex {
              pkg = "flexid";
              version = "0.1.1";
              sha256 =
                "560d046ea4f20a1ee9444a4dc77b1220a2be969f9ac7543393a88d08b4d2a0b0";
            };

            meta = {
              longDescription = ''Generator for distributed time-based ids. Ids
                                are composed of time in ms, sequence counter,
                                partition/shard, checksum.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wjanssens/flexid-elixir";
            };
          } // packageOverrides)
      ) {};

    flexid = flexid_0_1_1;

    fling_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_5_1 }:
          buildRebar3 ({
            name = "fling";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fling";
              version = "1.0.1";
              sha256 =
                "32fc119516ce99289926d364e13ae1b674ede7f2525486982504b9eb1eb8b4fb";
            };

            beamDeps  = [ lager_3_5_1 ];

            meta = {
              description = ''Library that abuses module constant pool'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho-labs/fling";
            };
          } // packageOverrides)
      ) {};

    fling = fling_1_0_1;

    flip_text_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flip_text";
            version = "0.1.3";
            src = fetchHex {
              pkg = "flip_text";
              version = "0.1.3";
              sha256 =
                "0065affe22d63a1488fde42be8fa5ea35a2a2bc510354c7a6149f7e90722238b";
            };

            meta = {
              description = ''˙ʎɹɐɹqıʃ ƃuıddıʃɟ ʇxǝʇ ǝʃdɯıs
                            ∀'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/brienw/flipex";
            };
          } // packageOverrides)
      ) {};

    flip_text = flip_text_0_1_3;

    flist_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flist";
            version = "0.2.1";
            src = fetchHex {
              pkg = "flist";
              version = "0.2.1";
              sha256 =
                "9a9eaadb56163a487cc8588e7186343d11c80cdfd4ed124feee2b1ef41491789";
            };

            meta = {
              longDescription = ''FList a functional list implement using the
                                efficient data structure of fingertree. Any
                                operation in the front and the back is amortized
                                O(1) and the operations involved randomly
                                visiting are O(log n).'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    flist = flist_0_2_1;

    flock_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flock";
            version = "0.0.1";
            src = fetchHex {
              pkg = "flock";
              version = "0.0.1";
              sha256 =
                "3a533d32a450cb0e5b78880c421080fb34fb95d4cf3c1ee053b4e97c6cadd4c8";
            };

            meta = {
              description = ''Distributed Services '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/flock";
            };
          } // packageOverrides)
      ) {};

    flock = flock_0_0_1;

    floki_0_17_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.17.0";
            src = fetchHex {
              pkg = "floki";
              version = "0.17.0";
              sha256 =
                "e4064581d1de2af19e52e260158a902a9600db8667aa7e1b7e8b788679dddbd3";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_17_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.17.2";
            src = fetchHex {
              pkg = "floki";
              version = "0.17.2";
              sha256 =
                "28c0da0b4aada38a0fba819e5872e8d05f3dea54d9b21017ac73321db4d6ca14";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_18_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.18.1";
            src = fetchHex {
              pkg = "floki";
              version = "0.18.1";
              sha256 =
                "84136f0b9fab8299cd0a526704786d62c4a26a774a444c1db78ce25d939e59f1";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_19_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_4_0,
          mochiweb_2_15_0
        }:
          buildMix ({
            name = "floki";
            version = "0.19.3";
            src = fetchHex {
              pkg = "floki";
              version = "0.19.3";
              sha256 =
                "1c8da482a0848c55a1d22af49ce6547790077adac2a04cf265e1f26583781adb";
            };
            beamDeps  = [ html_entities_0_4_0 mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_20_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_4_0,
          mochiweb_2_15_0
        }:
          buildMix ({
            name = "floki";
            version = "0.20.2";
            src = fetchHex {
              pkg = "floki";
              version = "0.20.2";
              sha256 =
                "b58f81afcc3fa1134f13ab220928614e073ede82302028b26e6e509c975d5bc2";
            };
            beamDeps  = [ html_entities_0_4_0 mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_20_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_4_0,
          mochiweb_2_15_0
        }:
          buildMix ({
            name = "floki";
            version = "0.20.3";
            src = fetchHex {
              pkg = "floki";
              version = "0.20.3";
              sha256 =
                "77032ea4d961b7e0895e6b84ca4dae45671ae3aaec706db8614077a19bb62d6e";
            };
            beamDeps  = [ html_entities_0_4_0 mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki = floki_0_20_3;

    flow_0_12_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_12_2 }:
          buildMix ({
            name = "flow";
            version = "0.12.0";
            src = fetchHex {
              pkg = "flow";
              version = "0.12.0";
              sha256 =
                "652c7c8e332f7ec709e57bc5006d3ad3982effec278dcdacfc4b4868a3a8242f";
            };
            beamDeps  = [ gen_stage_0_12_2 ];

            meta = {
              description = ''Computational parallel flows for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/flow";
            };
          } // packageOverrides)
      ) {};

    flow_0_13_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_13_1 }:
          buildMix ({
            name = "flow";
            version = "0.13.0";
            src = fetchHex {
              pkg = "flow";
              version = "0.13.0";
              sha256 =
                "e99178487e164ecb4849f4319164de596b09277b4699a9c2ddb8c573862ffed7";
            };
            beamDeps  = [ gen_stage_0_13_1 ];

            meta = {
              description = ''Computational parallel flows for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/flow";
            };
          } // packageOverrides)
      ) {};

    flow_0_14_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_14_0 }:
          buildMix ({
            name = "flow";
            version = "0.14.0";
            src = fetchHex {
              pkg = "flow";
              version = "0.14.0";
              sha256 =
                "a247fd5ffa8961a20c858690a2d04fc48d05b7a1cde666475fb91188f78342f5";
            };
            beamDeps  = [ gen_stage_0_14_0 ];

            meta = {
              description = ''Computational parallel flows for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/flow";
            };
          } // packageOverrides)
      ) {};

    flow = flow_0_14_0;

    flow_producers_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_12_2 }:
          buildMix ({
            name = "flow_producers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "flow_producers";
              version = "0.1.0";
              sha256 =
                "78e95b2d6797de0cfa552cd63a2450c6e11a00994ab54f11a4f8c30e6506f1af";
            };
            beamDeps  = [ gen_stage_0_12_2 ];

            meta = {
              description = ''Queue and Poller behaviours for Elixir Flow'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/youroff/flow_producers";
            };
          } // packageOverrides)
      ) {};

    flow_producers = flow_producers_0_1_0;

    flow_viz_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, flow_0_14_0 }:
          buildMix ({
            name = "flow_viz";
            version = "0.1.0";
            src = fetchHex {
              pkg = "flow_viz";
              version = "0.1.0";
              sha256 =
                "ca954c617246682d91425e7a6a4bae76eba239d6a53ebba055d9211579fec574";
            };
            beamDeps  = [ flow_0_14_0 ];

            meta = {
              longDescription = ''A utility to track and graph throughput in a
                                Flow workflow to help optimize performance'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukegalea/flow_viz";
            };
          } // packageOverrides)
      ) {};

    flow_viz = flow_viz_0_1_0;

    flowex_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_13_1 }:
          buildMix ({
            name = "flowex";
            version = "0.5.4";
            src = fetchHex {
              pkg = "flowex";
              version = "0.5.4";
              sha256 =
                "8f4b3ce3131a46c46b39e68b508e2a42ea5da9bd442249f8ceb05f090a0dd251";
            };
            beamDeps  = [ gen_stage_0_13_1 ];

            meta = {
              description = ''Flow-Based Programming with Elixir GenStage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/flowex";
            };
          } // packageOverrides)
      ) {};

    flowex = flowex_0_5_4;

    flub_1_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ets_owner_1_0_0,
          ex2ms_1_5_0,
          gproc_0_8_0,
          shorter_maps_2_2_5
        }:
          buildMix ({
            name = "flub";
            version = "1.1.4";
            src = fetchHex {
              pkg = "flub";
              version = "1.1.4";
              sha256 =
                "f8a0c00f3f469dd56b2c8a9141108b811b5db8d467ab331e1f99d287a803b9b0";
            };
            beamDeps  = [
                          ets_owner_1_0_0
                          ex2ms_1_5_0
                          gproc_0_8_0
                          shorter_maps_2_2_5
                        ];

            meta = {
              description = ''Sane pub/sub within and across nodes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/flub";
            };
          } // packageOverrides)
      ) {};

    flub = flub_1_1_4;

    fluent_client_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          msgpax_0_8_1,
          poison_1_3_1,
          socket_0_3_11
        }:
          buildMix ({
            name = "fluent_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fluent_client";
              version = "0.1.0";
              sha256 =
                "df1d05da9475938422a734cd311564eef44bfebea3c37b06ab167368875c2d15";
            };
            beamDeps  = [ msgpax_0_8_1 poison_1_3_1 socket_0_3_11 ];

            meta = {
              description = ''fluentd client library'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/trustatom-oss/elixir-fluent-client";
            };
          } // packageOverrides)
      ) {};

    fluent_client = fluent_client_0_1_0;

    flux_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flux";
            version = "0.1.0";
            src = fetchHex {
              pkg = "flux";
              version = "0.1.0";
              sha256 =
                "1b1fcacd4a4fad8d4e6a2890ad73a0d5de118c6996c1f9960be8dc30805f7387";
            };

            meta = {
              description = ''Flux - an Elixir web server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfreeze/flux";
            };
          } // packageOverrides)
      ) {};

    flux = flux_0_1_0;

    fluxter_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fluxter";
            version = "0.7.1";
            src = fetchHex {
              pkg = "fluxter";
              version = "0.7.1";
              sha256 =
                "02aa9fff6e01610477e7673d2c9690c7e6d89f347202778d92c3ca1593e8ef76";
            };

            meta = {
              description = ''An InfluxDB writer for Elixir'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/fluxter";
            };
          } // packageOverrides)
      ) {};

    fluxter = fluxter_0_7_1;

    fml_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_1 }:
          buildMix ({
            name = "fml";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fml";
              version = "0.1.0";
              sha256 =
                "8d142cdc6ec618260d19bcf527cc13e3d78448426e1d4e25fc3c6a0d8cbd73d4";
            };
            beamDeps  = [ erlsom_1_4_1 ];

            meta = {
              description = ''Flexible, fast, fun XML parser in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qcam/fml";
            };
          } // packageOverrides)
      ) {};

    fml = fml_0_1_0;

    fn_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fn";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fn";
              version = "1.0.0";
              sha256 =
                "1433b353c8739bb28ac0d6826c9f6a05033f158e8c8195faf01a863668b3bbc7";
            };

            meta = {
              description = ''More functional Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/fn";
            };
          } // packageOverrides)
      ) {};

    fn = fn_1_0_0;

    fn_expr_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, version_tasks_0_11_1
        }:
          buildMix ({
            name = "fn_expr";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fn_expr";
              version = "0.3.0";
              sha256 =
                "be6319036659de6be4126ef9eda8ba8d2a24076f406638ee598bdb5721f9cd5f";
            };
            beamDeps  = [ version_tasks_0_11_1 ];

            meta = {
              longDescription = ''The && operator (and invoke macro) for use
                                with |> and anonymous functions / captures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/fn_expr";
            };
          } // packageOverrides)
      ) {};

    fn_expr = fn_expr_0_3_0;

    fn_load_tester_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fn_load_tester";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fn_load_tester";
              version = "0.1.0";
              sha256 =
                "184248ac1eced6b0c0966f879272d9d17a47cfc14f311fd30c3bce8bc74a986f";
            };

            meta = {
              longDescription = ''FnLoadTester is a helper tool to execute load
                                tests against your functions, especially your
                                GenServers, and calculate statistics of the
                                test'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/fn_load_tester";
            };
          } // packageOverrides)
      ) {};

    fn_load_tester = fn_load_tester_0_1_0;

    fnv_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hexate_0_6_1 }:
          buildMix ({
            name = "fnv";
            version = "0.3.2";
            src = fetchHex {
              pkg = "fnv";
              version = "0.3.2";
              sha256 =
                "1993ca598fe7ca402f89ed1836c4a5de320330177104ca7eaac230312e069fe5";
            };
            beamDeps  = [ hexate_0_6_1 ];

            meta = {
              longDescription = ''Some string transformation functions for
                                Elixir. Heavily inspired by ActiveSupport`s
                                String extensions (Ruby).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/strinx.ex";
            };
          } // packageOverrides)
      ) {};

    fnv = fnv_0_3_2;

    fnv1a_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fnv1a";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fnv1a";
              version = "0.1.0";
              sha256 =
                "66db30319b52afb71692b8f4c37583aee0d7859439999aba42758db7a00a37f6";
            };

            meta = {
              description = ''FNV-1a 32-bit hash algorithm implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jeremytregunna/fnv1a.git";
            };
          } // packageOverrides)
      ) {};

    fnv1a = fnv1a_0_1_0;

    focus_0_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "focus";
            version = "0.3.5";
            src = fetchHex {
              pkg = "focus";
              version = "0.3.5";
              sha256 =
                "962390084c8fffc134bb23e38dbd51da63e7e05462fd91ca16be478b513fc982";
            };

            meta = {
              longDescription = ''A functional optics library. Create and
                                compose lenses to view, set, and modify data
                                inside arbitrarily nested maps, lists, and
                                tuples.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tpoulsen/focus";
            };
          } // packageOverrides)
      ) {};

    focus = focus_0_3_5;

    folsom_0_8_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bear_0_8_3 }:
          buildRebar3 ({
            name = "folsom";
            version = "0.8.3";
            src = fetchHex {
              pkg = "folsom";
              version = "0.8.3";
              sha256 =
                "afaa1ea4cd2a10a32242ac5d76fa7b17e98d202883859136b791d9a383b26820";
            };

            beamDeps  = [ bear_0_8_3 ];

            meta = {
              description = ''Erlang based metrics system'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-folsom/folsom";
            };
          } // packageOverrides)
      ) {};

    folsom_0_8_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bear_0_8_5 }:
          buildRebar3 ({
            name = "folsom";
            version = "0.8.5";
            src = fetchHex {
              pkg = "folsom";
              version = "0.8.5";
              sha256 =
                "2381e94df3d1fbc48281abfd433eb14c8e4a5f62ca07db5d87bb7a7204c9b1c9";
            };

            beamDeps  = [ bear_0_8_5 ];

            meta = {
              description = ''Erlang based metrics system'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-folsom/folsom";
            };
          } // packageOverrides)
      ) {};

    folsom_0_8_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bear_0_8_7 }:
          buildRebar3 ({
            name = "folsom";
            version = "0.8.7";
            src = fetchHex {
              pkg = "folsom";
              version = "0.8.7";
              sha256 =
                "f7b644fc002a75af00b8bfbd3cc5c2bd955e09a118d2982d9a6c04e5646ff367";
            };

            beamDeps  = [ bear_0_8_7 ];

            meta = {
              description = ''Erlang based metrics system'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-folsom/folsom";
            };
          } // packageOverrides)
      ) {};

    folsom = folsom_0_8_7;

    folsomite_1_2_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, folsom_0_8_3 }:
          buildRebar3 ({
            name = "folsomite";
            version = "1.2.9";
            src = fetchHex {
              pkg = "folsomite";
              version = "1.2.9";
              sha256 =
                "93f6836b08ecb144ffbb7b0aaa286f954a8469867afba188dec40f4ac64cc528";
            };

            beamDeps  = [ folsom_0_8_3 ];

            meta = {
              description = ''Blow up your Graphite server with Folsom
                            metrics'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    folsomite = folsomite_1_2_9;

    fona_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_1_0_0
        }:
          buildMix ({
            name = "fona";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fona";
              version = "0.1.0";
              sha256 =
                "fcb24211df33c8829db5a8ce8ad57dcd56e85b8d2b0c487b22ccbd790f4da2d9";
            };
            beamDeps  = [ nerves_uart_1_0_0 ];

            meta = {
              description = ''A hex package to control the Fona 808 shield by
                            Adafruit Industries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/st23am/fona";
            };
          } // packageOverrides)
      ) {};

    fona = fona_0_1_0;

    forecastr_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          mogrify_0_6_1,
          poison_3_1_0,
          table_0_0_5
        }:
          buildMix ({
            name = "forecastr";
            version = "0.1.5";
            src = fetchHex {
              pkg = "forecastr";
              version = "0.1.5";
              sha256 =
                "7f0e76a1443935c8fb2c69f251f066f411dbf9996f702cb36abaa749bfc797d8";
            };
            beamDeps  = [
                          httpoison_1_2_0 mogrify_0_6_1 poison_3_1_0 table_0_0_5
                        ];

            meta = {
              description = ''Forecastr, the Elixir way to check the weather
                            forecast'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kpanic/forecastr";
            };
          } // packageOverrides)
      ) {};

    forecastr = forecastr_0_1_5;

    foretoken_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, croma_0_9_3 }:
          buildMix ({
            name = "foretoken";
            version = "0.1.1";
            src = fetchHex {
              pkg = "foretoken";
              version = "0.1.1";
              sha256 =
                "c0d70cddc42000fd798d345c6132dad6d845220274c0e2ec9651a852fb12601c";
            };
            beamDeps  = [ croma_0_9_3 ];

            meta = {
              description = ''An ETS-based implementation of the token bucket
                            algorithm'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    foretoken = foretoken_0_1_1;

    forma_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "forma";
            version = "0.7.0";
            src = fetchHex {
              pkg = "forma";
              version = "0.7.0";
              sha256 =
                "4082a16b06bcfc5477a471537c2e3a83905b8c229f26d343228a5eebf0865bd0";
            };

            meta = {
              description = ''Provides structured parsing of JSON-like data
                            based on modules` Typespecs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soundtrackyourbrand/forma";
            };
          } // packageOverrides)
      ) {};

    forma = forma_0_7_0;

    format_parser_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "format_parser";
            version = "1.3.0";
            src = fetchHex {
              pkg = "format_parser";
              version = "1.3.0";
              sha256 =
                "008e17623a309466f11c8a577afea54ee6c26f1818b5466fbc6b276123a291e5";
            };

            meta = {
              description = ''The owls are not what they seem'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ahtung/format_parser.ex";
            };
          } // packageOverrides)
      ) {};

    format_parser = format_parser_1_3_0;

    formulae_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, iteraptor_1_2_1 }:
          buildMix ({
            name = "formulae";
            version = "0.4.1";
            src = fetchHex {
              pkg = "formulae";
              version = "0.4.1";
              sha256 =
                "866e21d89a7a4245762d020a3714fcededb9f6bb82e484bbfedcb843f2124d23";
            };
            beamDeps  = [ iteraptor_1_2_1 ];

            meta = {
              description = ''A set of functions to deal with analytical
                            formulae.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/formulae";
            };
          } // packageOverrides)
      ) {};

    formulae = formulae_0_4_1;

    fox_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fox";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fox";
              version = "1.0.1";
              sha256 =
                "e790c4dec0f840283c3e93825db259075ee45953ff1c29758a2aec22164c6865";
            };

            meta = {
              longDescription = ''Collection of support utility functions and
                                extensions for day-to-day web development with
                                Elixir. Includes utility extension to strings,
                                uri, dicts, integers, functions, parallel,
                                records, random, and time'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/fox";
            };
          } // packageOverrides)
      ) {};

    fox = fox_1_0_1;

    fraction_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fraction";
            version = "0.1.1";
            src = fetchHex {
              pkg = "fraction";
              version = "0.1.1";
              sha256 =
                "fb87d160d94f656a49cf296885a8c49e5b97130f6336bd4cdb3290e457ba7ec1";
            };

            meta = {
              description = ''A library for handling mathematical fractions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lermannen/elixir-fraction";
            };
          } // packageOverrides)
      ) {};

    fraction = fraction_0_1_1;

    freedom_formatter_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "freedom_formatter";
            version = "1.0.0";
            src = fetchHex {
              pkg = "freedom_formatter";
              version = "1.0.0";
              sha256 =
                "a002337e51c23d14ec10a17272d0dbca0cf03f247e4032ab202530a4f378708f";
            };

            meta = {
              description = ''A fork of the Elixir code formatter, with added
                            freedom'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gamache/freedom_formatter";
            };
          } // packageOverrides)
      ) {};

    freedom_formatter = freedom_formatter_1_0_0;

    freshdesk_export_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "freshdesk_export";
            version = "0.1.1";
            src = fetchHex {
              pkg = "freshdesk_export";
              version = "0.1.1";
              sha256 =
                "5143fa15545fc782f6656b726419ffeb4acbfbc9d790742fc6d57fd4a4afb08a";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''A simple tool that will retrieve all of the
                                tickets from your Freshdesk instance. You can
                                write it into a JSON file or utilize the data as
                                a list of maps.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mwarnerdotme/freshdesk_export";
            };
          } // packageOverrides)
      ) {};

    freshdesk_export = freshdesk_export_0_1_1;

    freshman_test_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "freshman_test";
            version = "0.2.1";
            src = fetchHex {
              pkg = "freshman_test";
              version = "0.2.1";
              sha256 =
                "f2d71c70e9cbd07254780a8f87da310828e552823c931fdc0826622ae862f0c4";
            };

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/huangjiale/freshman_test";
            };
          } // packageOverrides)
      ) {};

    freshman_test = freshman_test_0_2_1;

    frex_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          oauther_1_0_2,
          secure_random_0_5_1,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "frex";
            version = "0.1.5";
            src = fetchHex {
              pkg = "frex";
              version = "0.1.5";
              sha256 =
                "7b0e094fd6096df121ac9ab3eef4cb54169e24fc784901d6ef3f5d9caa53ca53";
            };
            beamDeps  = [
                          httpotion_3_1_0
                          oauther_1_0_2
                          secure_random_0_5_1
                          xml_builder_2_1_0
                        ];

            meta = {
              description = ''A full-featured Elixir client for Freshbooks.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/littlelines/frex";
            };
          } // packageOverrides)
      ) {};

    frex = frex_0_1_5;

    friendly_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_20_3 }:
          buildMix ({
            name = "friendly";
            version = "1.1.0";
            src = fetchHex {
              pkg = "friendly";
              version = "1.1.0";
              sha256 =
                "bdbb72f90f9265f91761d364047dc6dde380aa19bf9fed8480251af769655589";
            };
            beamDeps  = [ floki_0_20_3 ];

            meta = {
              longDescription = ''HTML and XML parser with the most friendly
                                API in Elixir land. CSS selector in, list of
                                elements out.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qertoip/friendly/";
            };
          } // packageOverrides)
      ) {};

    friendly = friendly_1_1_0;

    fritz_api_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "fritz_api";
            version = "1.0.2";
            src = fetchHex {
              pkg = "fritz_api";
              version = "1.0.2";
              sha256 =
                "180bdddd2e127857803cf0ec0d449b43a11502c773c25c1d7a3095c5a73700fc";
            };
            beamDeps  = [ httpoison_1_2_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''FritzBox Home Automation API Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adriankumpf/fritz-api";
            };
          } // packageOverrides)
      ) {};

    fritz_api = fritz_api_1_0_2;

    fs_2_11_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fs";
            version = "2.11.0";
            src = fetchHex {
              pkg = "fs";
              version = "2.11.0";
              sha256 =
                "b7eb76ee5770adb63e954329b871405870d64945adc9b91c5c037b35f640248c";
            };

            meta = {
              description = ''Erlang File System Listener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/fs";
            };
          } // packageOverrides)
      ) {};

    fs_3_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fs";
            version = "3.4.0";
            src = fetchHex {
              pkg = "fs";
              version = "3.4.0";
              sha256 =
                "94ee6e298db543a861faa1911b9a9a1d1bdc58da03fbe8d991e83e6c9551595f";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang File System Listener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/fs";
            };
          } // packageOverrides)
      ) {};

    fs = fs_3_4_0;

    fs_event_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fs_event";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fs_event";
              version = "1.0.0";
              sha256 =
                "fd73f81bc9a4340c29f47ad4eb1d0c15f02e9d76e2e9de40ab92a9ec00a0c3d9";
            };

            meta = {
              description = ''File system events'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jamhed/fs_event";
            };
          } // packageOverrides)
      ) {};

    fs_event = fs_event_1_0_0;

    fsdb_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsdb";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fsdb";
              version = "0.3.0";
              sha256 =
                "865103e6f1c446afa122fea976a76a2efa42257e0023e14e4a36147ee3fc1a48";
            };

            meta = {
              description = ''Minimal filesystem Erlang term text database.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/fsdb/";
            };
          } // packageOverrides)
      ) {};

    fsdb = fsdb_0_3_0;

    fsharpy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsharpy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fsharpy";
              version = "0.1.0";
              sha256 =
                "73b234fb3cf2f79c34a8863b6cb3eeb7e9cfaaa0cd3ff2521c5be659adb489ba";
            };

            meta = {
              longDescription = ''Provides access to F# interactive (FSI) from
                                Elixir. This is still in early stages so please
                                just use it for fun until v1.0.0.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanhunter/fsharpy";
            };
          } // packageOverrides)
      ) {};

    fsharpy = fsharpy_0_1_0;

    fsm_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsm";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fsm";
              version = "0.2.0";
              sha256 =
                "dbc7b316d37f258db4f1a897109da14c2c76aa706fe85859532eff2ea30986bf";
            };

            meta = {
              description = ''Finite state machine as a functional data
                            structure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/fsm";
            };
          } // packageOverrides)
      ) {};

    fsm_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsm";
            version = "0.3.1";
            src = fetchHex {
              pkg = "fsm";
              version = "0.3.1";
              sha256 =
                "fbf0d53f89e9082b326b0b5828b94b4c549ff9d1452bbfd00b4d1ac082208e96";
            };

            meta = {
              description = ''Finite state machine as a functional data
                            structure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/fsm";
            };
          } // packageOverrides)
      ) {};

    fsm = fsm_0_3_1;

    fulcrum_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "fulcrum";
            version = "0.0.6";
            src = fetchHex {
              pkg = "fulcrum";
              version = "0.0.6";
              sha256 =
                "9cddd3906bad693cad791841d19b2be089e064a5f2dd35d340f46e6cd15d7930";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              longDescription = ''Fulcrum library for Elixir. The aim is to
                                present the Fulcrum API as a replacement for an
                                Ecto Repo. So, instead of Repo.all(Form), you
                                can write Fulcrum.all(Form). In this way, you
                                only have to make minor changes to your
                                controllers, to work with Fulcrum.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pinx/fulcrum";
            };
          } // packageOverrides)
      ) {};

    fulcrum = fulcrum_0_0_6;

    fumanchu_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fumanchu";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fumanchu";
              version = "0.0.1";
              sha256 =
                "3ae3f825b598d2af9ace3f9ef25ff23b7724507cddb2dddb2176e4a49afabc89";
            };

            meta = {
              description = ''An (almost) spec-compliant Mustache parser
                            written in Elixir'';

            };
          } // packageOverrides)
      ) {};

    fumanchu = fumanchu_0_0_1;

    fun_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_4 }:
          buildMix ({
            name = "fun";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fun";
              version = "0.1.0";
              sha256 =
                "a9b0fde311c87a5e54065ca495478c87bc78cad73ff1ded6d2c2552c1abd16b8";
            };
            beamDeps  = [ ex_doc_0_16_4 ];

            meta = {
              description = ''A collection of functions to help write more
                            functional code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minhajuddin/funs";
            };
          } // packageOverrides)
      ) {};

    fun = fun_0_1_0;

    fun_func_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fun_func";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fun_func";
              version = "0.2.0";
              sha256 =
                "1bf9f2d689c54a74345ce665d364c430a067d770bf152d25c7a45b0bcee81f21";
            };

            meta = {
              description = ''Fun Functions for general purpose.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/techno-tanoC/fun_func";
            };
          } // packageOverrides)
      ) {};

    fun_func = fun_func_0_2_0;

    fun_land_0_9_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          currying_1_0_3,
          numbers_5_1_0
        }:
          buildMix ({
            name = "fun_land";
            version = "0.9.2";
            src = fetchHex {
              pkg = "fun_land";
              version = "0.9.2";
              sha256 =
                "a8b20a81ed9a61eff0568c63a8fc2431030f7f251cf1de2e746c19092393c5b2";
            };
            beamDeps  = [ currying_1_0_3 numbers_5_1_0 ];

            meta = {
              longDescription = ''FunLand adds Behaviours to define Algebraic
                                Data Types (`Container` data types) to Elixir,
                                such as Functors, Monoids and Monads.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir_fun_land";
            };
          } // packageOverrides)
      ) {};

    fun_land = fun_land_0_9_2;

    func_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "func";
            version = "0.4.1";
            src = fetchHex {
              pkg = "func";
              version = "0.4.1";
              sha256 =
                "94101a1602c674710074d990430625b0886e662105e2d5fa3a1878899d4a1650";
            };

            meta = {
              description = ''Functions for functional programming.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/techno-tanoC/func";
            };
          } // packageOverrides)
      ) {};

    func = func_0_4_1;

    funchaku_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "funchaku";
            version = "0.6.0";
            src = fetchHex {
              pkg = "funchaku";
              version = "0.6.0";
              sha256 =
                "af7c089d22917b0aca8bf29ee76b736f52b58f16347f8e3634de0f7d643c29e3";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for the Nu HTML Checker'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sitevalidator/funchaku";
            };
          } // packageOverrides)
      ) {};

    funchaku = funchaku_0_6_0;

    function_decorating_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "function_decorating";
            version = "0.0.6";
            src = fetchHex {
              pkg = "function_decorating";
              version = "0.0.6";
              sha256 =
                "8faf5588f98c833a25c9463df27e709cc5c645083a592b1a5add25fbb9e68d9a";
            };

            meta = {
              longDescription = ''A function decorator macro for Elixir. Used
                                mainly for adding log statements to the function
                                calls.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/elpddev/elixir-function-decorating";
            };
          } // packageOverrides)
      ) {};

    function_decorating = function_decorating_0_0_6;

    function_invoker_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "function_invoker";
            version = "0.1.0";
            src = fetchHex {
              pkg = "function_invoker";
              version = "0.1.0";
              sha256 =
                "99b5b0ed9afcf68939e054469e6f817c7a11144626048250778819c487f767f5";
            };

            meta = {
              longDescription = ''This is a GenServer-ish implementation of an
                                apply function, which allows you to invoke
                                function call on a different node.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    function_invoker = function_invoker_0_1_0;

    functorflow_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "functorflow";
            version = "0.1.0";
            src = fetchHex {
              pkg = "functorflow";
              version = "0.1.0";
              sha256 =
                "71cfdf75fc929463489548595b276c91d2d97e1ef4c30fb96100bacccff0a062";
            };

            meta = {
              description = ''FunctorFlow for Elixir. Coming soon... Learn
                            more: http://functorflow.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://functorflow.com";
            };
          } // packageOverrides)
      ) {};

    functorflow = functorflow_0_1_0;

    funkspector_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          friendly_1_1_0,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "funkspector";
            version = "0.5.0";
            src = fetchHex {
              pkg = "funkspector";
              version = "0.5.0";
              sha256 =
                "e0204dd54c694a80c6b658d5aa362cc08cf1c8cc5a15d1f3b68a8634c1a2c931";
            };
            beamDeps  = [ floki_0_20_3 friendly_1_1_0 httpoison_1_2_0 ];

            meta = {
              description = ''Web page inspector for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jaimeiniesta/funkspector";
            };
          } // packageOverrides)
      ) {};

    funkspector = funkspector_0_5_0;

    furlex_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "furlex";
            version = "0.3.3";
            src = fetchHex {
              pkg = "furlex";
              version = "0.3.3";
              sha256 =
                "7e943898fb12ed11ed4ae843fd5ce76da5864baf6d9d388331f2e6a1c458a5a0";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Furlex is a structured data extraction tool
                                written in Elixir. It currently supports
                                unfurling oEmbed, Twitter Card, Facebook Open
                                Graph, JSON-LD and plain ole` HTML `<meta />`
                                data out of any url you supply.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://github.com/claytongentry/furlex";
            };
          } // packageOverrides)
      ) {};

    furlex = furlex_0_3_3;

    fusco_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fusco";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fusco";
              version = "0.1.0";
              sha256 =
                "763756df36130b7746cfbbbcf47096b3e0b005e44448bdeefa3034679b2c19b8";
            };

            meta = {
              description = ''Fast and Ultra Slim Connection Oriented HTTP
                            Client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/fusco";
            };
          } // packageOverrides)
      ) {};

    fusco = fusco_0_1_0;

    fuse_2_4_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fuse";
            version = "2.4.2";
            src = fetchHex {
              pkg = "fuse";
              version = "2.4.2";
              sha256 =
                "d733fe913ba3e61ca51f78a3958237e5a24295a03d2ee358288d53bd947f7788";
            };

            meta = {
              description = ''A Circuit breaker implementation for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jlouis/fuse";
            };
          } // packageOverrides)
      ) {};

    fuse = fuse_2_4_2;

    fuzzyurl_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fuzzyurl";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fuzzyurl";
              version = "1.0.1";
              sha256 =
                "337b532aec966078841e0d65c44081739b0b8c97ba3d87f06bd86758c6a27988";
            };

            meta = {
              longDescription = ''Fuzzyurl is a library for non-strict parsing,
                                construction, and fuzzy-matching of URLs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gamache/fuzzyurl.ex";
            };
          } // packageOverrides)
      ) {};

    fuzzyurl = fuzzyurl_1_0_1;

    fwatch_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_5,
          fs_2_11_0
        }:
          buildMix ({
            name = "fwatch";
            version = "0.5.0";
            src = fetchHex {
              pkg = "fwatch";
              version = "0.5.0";
              sha256 =
                "1cd46bcae7074c10a4a4d25989ef20ab515d075d762af8e6c86e8d50c011604c";
            };
            beamDeps  = [ earmark_1_2_5 fs_2_11_0 ];

            meta = {
              description = ''A file watcher for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/fwatch-ex";
            };
          } // packageOverrides)
      ) {};

    fwatch = fwatch_0_5_0;

    fx_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "fx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fx";
              version = "0.1.0";
              sha256 =
                "4c94abdeafe35da9dbf21308911e8cc2e6dff4e35dd2ce504590973364e1e1da";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Simple FX rates library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelvintaywl/fx";
            };
          } // packageOverrides)
      ) {};

    fx = fx_0_1_0;

    galena_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_11_0 }:
          buildMix ({
            name = "galena";
            version = "0.1.2";
            src = fetchHex {
              pkg = "galena";
              version = "0.1.2";
              sha256 =
                "66352581d6a17ff9be9129f279f23e1a61bf8681328b4969a774e0f8773d148f";
            };
            beamDeps  = [ gen_stage_0_11_0 ];

            meta = {
              description = ''Topic producer-consumer library built on top of
                            GenStage for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/galena";
            };
          } // packageOverrides)
      ) {};

    galena = galena_0_1_2;

    game_of_life_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "game_of_life";
            version = "1.0.0";
            src = fetchHex {
              pkg = "game_of_life";
              version = "1.0.0";
              sha256 =
                "4a7e64722d5841d91152352a19db51476fa3e950d7316aba089870248019958b";
            };

            meta = {
              description = ''Distributed Game of Life with Board Server API.
                            Run it on multiple nodes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BeyondScheme/elixir-game_of_life";
            };
          } // packageOverrides)
      ) {};

    game_of_life = game_of_life_1_0_0;

    gandi_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_2,
          httpoison_0_11_2,
          poison_3_1_0,
          xmlrpc_1_1_0
        }:
          buildMix ({
            name = "gandi";
            version = "0.1.2";
            src = fetchHex {
              pkg = "gandi";
              version = "0.1.2";
              sha256 =
                "23b11ecca9fde1ab8c14213eef40f644d9ce0b1cdb31a3e53a8341bb07422a63";
            };
            beamDeps  = [
                          erlsom_1_4_2
                          httpoison_0_11_2
                          poison_3_1_0
                          xmlrpc_1_1_0
                        ];

            meta = {
              description = ''Gandi Access over Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ahamtech/elixir-gandi";
            };
          } // packageOverrides)
      ) {};

    gandi = gandi_0_1_2;

    garbage_man_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "garbage_man";
            version = "0.1.1";
            src = fetchHex {
              pkg = "garbage_man";
              version = "0.1.1";
              sha256 =
                "d179ed45a951f701be51df8e241a704e8ff380031e8083e83134677461271ab7";
            };

            meta = {
              description = ''Some code to trigger garbage collection in Erlang
                            and Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/digimondo/elixir-garbage-man";
            };
          } // packageOverrides)
      ) {};

    garbage_man = garbage_man_0_1_1;

    gardien_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gardien";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gardien";
              version = "1.0.0";
              sha256 =
                "24f584f72309db016ae2d206e00801dfea18d38b76d366760b6e2f6410ef0bba";
            };

            meta = {
              description = ''Simple, protocol based authorization, for Phoenix
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rpelyush/gardien";
            };
          } // packageOverrides)
      ) {};

    gardien = gardien_1_0_0;

    garph_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "garph";
            version = "0.0.1";
            src = fetchHex {
              pkg = "garph";
              version = "0.0.1";
              sha256 =
                "32829d25bdc8cf78256c8fdf1e7294707f94b683ec6ce6d1da0a6a8cd4d77c9e";
            };

            meta = {
              longDescription = ''Garph is a simple way to implement complex
                                decision trees by using graphs. It can be used
                                with plain elixir or beneath a phoenix
                                project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/faber-lotto/garph";
            };
          } // packageOverrides)
      ) {};

    garph = garph_0_0_1;

    gasrate_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpotion_3_1_0
        }:
          buildMix ({
            name = "gasrate";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gasrate";
              version = "0.2.0";
              sha256 =
                "087aba0669545e5a95c1511b3492115b6b20a3f68e4798b4e1e77efcb6ab4ff3";
            };
            beamDeps  = [ floki_0_20_3 httpotion_3_1_0 ];

            meta = {
              description = ''Fetch Gas Rates from gasprices.aaa.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mithereal/elixir-gasrate";
            };
          } // packageOverrides)
      ) {};

    gasrate = gasrate_0_2_0;

    gatekeeper_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gatekeeper";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gatekeeper";
              version = "0.0.1";
              sha256 =
                "d1ad9549998054c6ca4d4c7954687937e46b97f2ca4176c7e1d5bfdaf683ac2c";
            };

            meta = {
              description = ''An opinionated authorization framework for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/gatekeeper";
            };
          } // packageOverrides)
      ) {};

    gatekeeper = gatekeeper_0_0_1;

    gateway_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fox_1_0_1,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "gateway";
            version = "0.0.6";
            src = fetchHex {
              pkg = "gateway";
              version = "0.0.6";
              sha256 =
                "4d0de05b0168ee0cc41c9c38491a4b4641d446f38170ca170d0d7440b0c8f619";
            };
            beamDeps  = [ fox_1_0_1 httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              longDescription = ''A generic set of macros and conventions to
                                build clients to communicate with JSON REST
                                APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/gateway";
            };
          } // packageOverrides)
      ) {};

    gateway = gateway_0_0_6;

    gatling_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gatling";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gatling";
              version = "1.0.0";
              sha256 =
                "8140754171ec1eaf0c853d6aeb020fad789ee4a01814fda5a965580424568580";
            };

            meta = {
              description = ''Enjoy heroku like deployments with Distillery and
                            your own server'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hashrocket/gatling";
            };
          } // packageOverrides)
      ) {};

    gatling = gatling_1_0_0;

    gb2260_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "gb2260";
            version = "0.6.1";
            src = fetchHex {
              pkg = "gb2260";
              version = "0.6.1";
              sha256 =
                "e7edf0c71f86324096d6148ad187839ef8bd70d5dfced1aa41fb411ede6eaca1";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''The Elixir implementation for looking up the
                            Chinese administrative divisions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LcpMarvel/gb2260";
            };
          } // packageOverrides)
      ) {};

    gb2260 = gb2260_0_6_1;

    gc_nlp_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          goth_0_3_2,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "gc_nlp";
            version = "0.2.2";
            src = fetchHex {
              pkg = "gc_nlp";
              version = "0.2.2";
              sha256 =
                "5e5421d24fc2de0db1cfbbff258650ca76e6255216802b463330c044f36e49c1";
            };
            beamDeps  = [ cachex_2_1_0 goth_0_3_2 httpoison_0_13_0 ];

            meta = {
              description = ''Elixir wrapper for Google Cloud Natural Language
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seymores/gc_nlp";
            };
          } // packageOverrides)
      ) {};

    gc_nlp = gc_nlp_0_2_2;

    gcm_1_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "gcm";
            version = "1.5.0";
            src = fetchHex {
              pkg = "gcm";
              version = "1.5.0";
              sha256 =
                "494c2309fea406c97aeef1efad56f08ed9b1ad535ebeced4af89f8e6d30b9ff9";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''GCM library to send pushes through GCM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carnivalmobile/gcm";
            };
          } // packageOverrides)
      ) {};

    gcm = gcm_1_5_0;

    gcs_signer_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gcs_signer";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gcs_signer";
              version = "0.2.0";
              sha256 =
                "82124ba05e55dd61cd2f632258f5860fb0e02b25ea4a64ce12510aff3cb1d5d7";
            };

            meta = {
              description = ''Simple signed URL generator for Google Cloud
                            Storage'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shakrmedia/gcs-signer-elixir";
            };
          } // packageOverrides)
      ) {};

    gcs_signer = gcs_signer_0_2_0;

    gdex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0,
          websocket_client_1_3_0
        }:
          buildMix ({
            name = "gdex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gdex";
              version = "0.1.0";
              sha256 =
                "f172066433e7cb8d474d1ecf3c0fd3abfbcae7cbedda55d5e11557b2c1ee05c1";
            };
            beamDeps  = [
                          httpoison_0_13_0 poison_3_1_0 websocket_client_1_3_0
                        ];

            meta = {
              description = ''REST and Websocket client for GDAX Exchange'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fracek/gdex";
            };
          } // packageOverrides)
      ) {};

    gdex = gdex_0_1_0;

    gealts_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gealts";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gealts";
              version = "0.0.1";
              sha256 =
                "c23b96986b19801c3428ff961e26e5b7327cd38141c2161951fdba233b71ac2b";
            };

            meta = {
              description = ''A crude genetic programming library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/0010-IO/gealts";
            };
          } // packageOverrides)
      ) {};

    gealts = gealts_0_0_1;

    geetest_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "geetest";
            version = "0.0.1";
            src = fetchHex {
              pkg = "geetest";
              version = "0.0.1";
              sha256 =
                "61b6ca074e7d2123eb9da2da34b0dd37680e7d7a9d257ca824656ffb7afe8fc4";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''Elixir toolkit for Geetest'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/linjunpop/geetest";
            };
          } // packageOverrides)
      ) {};

    geetest = geetest_0_0_1;

    gelf_logger_0_7_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "gelf_logger";
            version = "0.7.5";
            src = fetchHex {
              pkg = "gelf_logger";
              version = "0.7.5";
              sha256 =
                "e716415220f1de4e6ef6f5e047c794b1d7bbf1de61bbe317b6e12bf7319bffa3";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''A Logger backend that will generate Graylog
                                Extended Log Format messages and send them to a
                                compatible server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jschniper/gelf_logger";
            };
          } // packageOverrides)
      ) {};

    gelf_logger = gelf_logger_0_7_5;

    gelfex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_1_5_2
        }:
          buildMix ({
            name = "gelfex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gelfex";
              version = "0.0.1";
              sha256 =
                "35ca2deb8221379fc8eb2d4e33888ce590defe91dbbaaa10ef352d6654723279";
            };
            beamDeps  = [ connection_1_0_4 poison_1_5_2 ];

            meta = {
              description = ''Elixir client for logging GELF messages to
                            Graylog.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/donpinkster/gelfex";
            };
          } // packageOverrides)
      ) {};

    gelfex = gelfex_0_0_1;

    gen_client_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_client";
            version = "1.0.1";
            src = fetchHex {
              pkg = "gen_client";
              version = "1.0.1";
              sha256 =
                "e9fb8d84edcdcbf80bdc77a11a7096dee2bedcbd25460d16a0b381ad9e0d1f91";
            };

            meta = {
              longDescription = ''GenClient is metaprogramming library made to
                                generate boilerplate code that I found myself
                                repeatedly writing and changing when working
                                with GenServers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LukeWood/GenClient/";
            };
          } // packageOverrides)
      ) {};

    gen_client = gen_client_1_0_1;

    gen_debug_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_debug";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gen_debug";
              version = "0.2.0";
              sha256 =
                "03185766b32abc02fbecfdee264d06737bd447a0bb7148450240d622a20deca4";
            };

            meta = {
              description = ''GenDebug is a set of utilities to debug the state
                            and messages of a GenServer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrkaspa/gen_debug";
            };
          } // packageOverrides)
      ) {};

    gen_debug = gen_debug_0_2_0;

    gen_delegate_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_delegate";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gen_delegate";
              version = "1.0.0";
              sha256 =
                "9790952ba41538e835613f064774189bd819c79fde8fa09c2ab2bc5143b9efbf";
            };

            meta = {
              description = ''Easy delegation of internal function to a
                            GenServer interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/gen_delegate";
            };
          } // packageOverrides)
      ) {};

    gen_delegate = gen_delegate_1_0_0;

    gen_flow_0_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_flow";
            version = "0.0.5";
            src = fetchHex {
              pkg = "gen_flow";
              version = "0.0.5";
              sha256 =
                "aa139c67942475a08b73d754587ffd4694ce92a149a26d16ddb16ebd6cc19eb4";
            };

            meta = {
              description = ''Generic abstraction for building dataflow
                            computations.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lasp-lang/gen_flow";
            };
          } // packageOverrides)
      ) {};

    gen_flow = gen_flow_0_0_5;

    gen_frp_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, petick_0_0_1 }:
          buildMix ({
            name = "gen_frp";
            version = "0.5.0";
            src = fetchHex {
              pkg = "gen_frp";
              version = "0.5.0";
              sha256 =
                "88d8215feca77825bbad32f802259c82a19a81fe777bc77ad33a3b2bd6683f09";
            };
            beamDeps  = [ petick_0_0_1 ];

            meta = {
              description = ''A library that allows for doing Functional
                            Reactive Programming in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_gen_frp/";
            };
          } // packageOverrides)
      ) {};

    gen_frp = gen_frp_0_5_0;

    gen_fsm_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_fsm";
            version = "0.0.4";
            src = fetchHex {
              pkg = "gen_fsm";
              version = "0.0.4";
              sha256 =
                "c92bf89ea8dee0f924362b12b61d3cd02306e77a0e8174354044238329b6506a";
            };

            meta = {
              description = ''Elixir wrapper around Erlang`s OTP gen_fsm.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pavlos/gen_fsm";
            };
          } // packageOverrides)
      ) {};

    gen_fsm_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_fsm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_fsm";
              version = "0.1.0";
              sha256 =
                "273281dbb6cf6171a6fb963538fde67146a11f6025a80113eae4b29822083a62";
            };

            meta = {
              description = ''Elixir wrapper around Erlang`s OTP gen_fsm.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pavlos/gen_fsm";
            };
          } // packageOverrides)
      ) {};

    gen_fsm = gen_fsm_0_1_0;

    gen_fsm_compat_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_fsm_compat";
            version = "0.3.0";
            src = fetchHex {
              pkg = "gen_fsm_compat";
              version = "0.3.0";
              sha256 =
                "7153d11bad328933d4b24e663d8cec52874e14176c7fb392fa1ff768b17460d9";
            };

            buildPlugins  = [ rebar_erl_vsn ];


            meta = {
              description = ''gen_fsm backwards compatibility'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    gen_fsm_compat = gen_fsm_compat_0_3_0;

    gen_fsm_helpers_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_fsm_helpers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_fsm_helpers";
              version = "0.1.0";
              sha256 =
                "fa2021f43834e291f1e27e136f37a78c4f679c01c48a7f2a0d12e7e7fa18e7b6";
            };

            meta = {
              description = ''A helper library for GenFSM.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/gen_fsm_helpers";
            };
          } // packageOverrides)
      ) {};

    gen_fsm_helpers = gen_fsm_helpers_0_1_0;

    gen_fst_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_state_machine_2_0_2,
          libgraph_0_12_0
        }:
          buildMix ({
            name = "gen_fst";
            version = "0.4.1";
            src = fetchHex {
              pkg = "gen_fst";
              version = "0.4.1";
              sha256 =
                "92eb7f1efc13d9ba1b88711bd5486aacefa23ddc255451245d76841c62ca3271";
            };
            beamDeps  = [ gen_state_machine_2_0_2 libgraph_0_12_0 ];

            meta = {
              longDescription = ''GenFST implements a generic finite state
                                transducer with customizable rules elegantly
                                expressed in a DSL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xiamx/gen_fst";
            };
          } // packageOverrides)
      ) {};

    gen_fst = gen_fst_0_4_1;

    gen_ircclient_0_1_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, gen_pnet_0_1_7
        }:
          buildRebar3 ({
            name = "gen_ircclient";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gen_ircclient";
              version = "0.1.1";
              sha256 =
                "ae8af9bd77fc2aacc127f825b0587ad40b0c71026457e6de1d26a8c4269e3291";
            };

            beamDeps  = [ gen_pnet_0_1_7 ];

            meta = {
              description = ''A scaffold for Erlang IRC bots.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/gen_ircclient/";
            };
          } // packageOverrides)
      ) {};

    gen_ircclient = gen_ircclient_0_1_1;

    gen_listener_tcp_0_3_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_listener_tcp";
            version = "0.3.2";
            src = fetchHex {
              pkg = "gen_listener_tcp";
              version = "0.3.2";
              sha256 =
                "b3c3fbc525ba2b32d947b06811d38470d5b0abe2ca81b623192a71539ed22336";
            };

            meta = {
              description = ''Generic TCP Server'';

              homepage = "https://github.com/travelping/gen_listener_tcp";
            };
          } // packageOverrides)
      ) {};

    gen_listener_tcp = gen_listener_tcp_0_3_2;

    gen_loop_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_loop";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_loop";
              version = "0.1.0";
              sha256 =
                "3e33b8198cec618e1d978c481491bbf770e4069b166ccb1c7c166827bc040664";
            };

            meta = {
              longDescription = ''A supervised free-form loop function. Elixir
                                adapter for plain_fsm, with receive / sync-call
                                macros and GenServer-like starting, stopping and
                                name registration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/gen_loop";
            };
          } // packageOverrides)
      ) {};

    gen_loop = gen_loop_0_1_0;

    gen_metrics_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          statix_1_1_0
        }:
          buildMix ({
            name = "gen_metrics";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gen_metrics";
              version = "0.2.0";
              sha256 =
                "72cccd6321fa54ff72684af7fe1c54d129629f62064348fec31b6578f6a1db45";
            };
            beamDeps  = [ gen_stage_0_14_0 statix_1_1_0 ];

            meta = {
              description = ''Elixir GenServer and GenStage runtime metrics.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onetapbeyond/gen_metrics";
            };
          } // packageOverrides)
      ) {};

    gen_metrics_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          statix_1_1_0
        }:
          buildMix ({
            name = "gen_metrics";
            version = "0.3.0";
            src = fetchHex {
              pkg = "gen_metrics";
              version = "0.3.0";
              sha256 =
                "32d5ea273faf2441e9217939c4f7e72f379c3f31fa45588280ced4114cfc24e7";
            };
            beamDeps  = [ gen_stage_0_14_0 statix_1_1_0 ];

            meta = {
              description = ''Elixir GenServer and GenStage runtime metrics.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onetapbeyond/gen_metrics";
            };
          } // packageOverrides)
      ) {};

    gen_metrics = gen_metrics_0_3_0;

    gen_metrics_bench_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, gen_metrics_0_2_0
        }:
          buildMix ({
            name = "gen_metrics_bench";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_metrics_bench";
              version = "0.1.0";
              sha256 =
                "ef301cec2be86c6f075bb0fcddedc2054a69bc60f15d702c2a2777e6d4af2868";
            };
            beamDeps  = [ gen_metrics_0_2_0 ];

            meta = {
              description = ''An Elixir GenMetrics benchmarking tool for
                            GenServer and GenStage applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onetapbeyond/gen_metrics_bench";
            };
          } // packageOverrides)
      ) {};

    gen_metrics_bench = gen_metrics_bench_0_1_0;

    gen_pnet_0_1_6 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, lib_combin_0_1_5
        }:
          buildRebar3 ({
            name = "gen_pnet";
            version = "0.1.6";
            src = fetchHex {
              pkg = "gen_pnet";
              version = "0.1.6";
              sha256 =
                "2f9690ee3febcfe4c8e51c4af1863535a2455654fdf3cd3a36c1159edbfe9ab8";
            };

            beamDeps  = [ lib_combin_0_1_5 ];

            meta = {
              description = ''A generic Petri net OTP behavior.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/gen_pnet/";
            };
          } // packageOverrides)
      ) {};

    gen_pnet_0_1_7 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, lib_combin_0_1_5
        }:
          buildRebar3 ({
            name = "gen_pnet";
            version = "0.1.7";
            src = fetchHex {
              pkg = "gen_pnet";
              version = "0.1.7";
              sha256 =
                "30c19eecf0c0a974f0ed53dc7143d25a4b9a3f203071094bd3970bb907427b98";
            };

            beamDeps  = [ lib_combin_0_1_5 ];

            meta = {
              description = ''A generic Petri net OTP behavior.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/gen_pnet/";
            };
          } // packageOverrides)
      ) {};

    gen_pnet = gen_pnet_0_1_7;

    gen_poller_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_poller";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_poller";
              version = "0.1.0";
              sha256 =
                "531732166cec13c781a4a1e3c7b502064707d1bd1a25012c5c6f311d29afbdef";
            };

            meta = {
              description = ''a simple, generic behaviour for doing stuff on
                            some interval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wistia/gen_poller";
            };
          } // packageOverrides)
      ) {};

    gen_poller = gen_poller_0_1_0;

    gen_queue_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_queue";
            version = "0.1.7";
            src = fetchHex {
              pkg = "gen_queue";
              version = "0.1.7";
              sha256 =
                "3c0e4cc01673b7d999a4e4fd8740051a03aed7d6fedae72cc19599163140cbb7";
            };

            meta = {
              description = ''Queue specification with adapter support for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/gen_queue";
            };
          } // packageOverrides)
      ) {};

    gen_queue = gen_queue_0_1_7;

    gen_queue_exq_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exq_0_10_1,
          gen_queue_0_1_7
        }:
          buildMix ({
            name = "gen_queue_exq";
            version = "0.1.3";
            src = fetchHex {
              pkg = "gen_queue_exq";
              version = "0.1.3";
              sha256 =
                "7310e40bd16cea0ee5e1623cfb92a6b3d19445b4725b99fa86b0beee6df565c3";
            };
            beamDeps  = [ exq_0_10_1 gen_queue_0_1_7 ];

            meta = {
              description = ''GenQueue adapter for Exq'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/gen_queue_exq";
            };
          } // packageOverrides)
      ) {};

    gen_queue_exq = gen_queue_exq_0_1_3;

    gen_queue_opq_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_queue_0_1_7,
          opq_3_0_1
        }:
          buildMix ({
            name = "gen_queue_opq";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gen_queue_opq";
              version = "0.1.1";
              sha256 =
                "ca68dfef0ecf92d2102b83188a323d4875df32aaab5aa5595c3260f116c28606";
            };
            beamDeps  = [ gen_queue_0_1_7 opq_3_0_1 ];

            meta = {
              description = ''GenQueue adapter for OPQ'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/gen_queue_opq";
            };
          } // packageOverrides)
      ) {};

    gen_queue_opq = gen_queue_opq_0_1_1;

    gen_queue_toniq_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_6,
          gen_queue_0_1_7,
          toniq_1_2_3
        }:
          buildMix ({
            name = "gen_queue_toniq";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_queue_toniq";
              version = "0.1.0";
              sha256 =
                "78c33172bcfcb73221e92447bcedac214fed80dbc1435a84b95d6bc912fa3173";
            };
            beamDeps  = [ exredis_0_2_6 gen_queue_0_1_7 toniq_1_2_3 ];

            meta = {
              description = ''GenQueue adapter for Toniq'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/gen_queue_toniq";
            };
          } // packageOverrides)
      ) {};

    gen_queue_toniq = gen_queue_toniq_0_1_0;

    gen_queue_verk_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_queue_0_1_7,
          verk_1_4_0
        }:
          buildMix ({
            name = "gen_queue_verk";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gen_queue_verk";
              version = "0.1.1";
              sha256 =
                "c69c2841ce4dfe170b1bede0b142f104198fd5fc521a6def777b39d1ad6e9579";
            };
            beamDeps  = [ gen_queue_0_1_7 verk_1_4_0 ];

            meta = {
              description = ''GenQueue adapter for Verk'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/gen_queue_verk";
            };
          } // packageOverrides)
      ) {};

    gen_queue_verk = gen_queue_verk_0_1_1;

    gen_retry_1_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, exconstructor_1_1_0
        }:
          buildMix ({
            name = "gen_retry";
            version = "1.0.2";
            src = fetchHex {
              pkg = "gen_retry";
              version = "1.0.2";
              sha256 =
                "78840468bf4fff982357277c83f5d493e2390507a70ef36055a48e18d8727595";
            };
            beamDeps  = [ exconstructor_1_1_0 ];

            meta = {
              longDescription = ''GenRetry provides utilities for retrying
                                Elixir functions, with configurable delay and
                                backoff characteristics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/gen_retry";
            };
          } // packageOverrides)
      ) {};

    gen_retry = gen_retry_1_0_2;

    gen_server_async_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_server_async";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gen_server_async";
              version = "0.0.1";
              sha256 =
                "d44c829686af45ab3046eff3a862245f7e47ce34efb23da9b7cfd11382fdb502";
            };

            meta = {
              longDescription = ''GenServerAsync behaviour module for
                                implementing the server of a client-server
                                relation.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Kr00lIX/gen_server_async";
            };
          } // packageOverrides)
      ) {};

    gen_server_async = gen_server_async_0_0_1;

    gen_server_magic_0_0_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_server_magic";
            version = "0.0.9";
            src = fetchHex {
              pkg = "gen_server_magic";
              version = "0.0.9";
              sha256 =
                "c9606e849975109f59fd1c5977dc782f7cdef6a34c662e121c9d9593326dbdce";
            };

            meta = {
              description = ''Unashamedly magic, opinionated GenServer macros
                            for greater sanity'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/andrewtimberlake/gen_server_magic";
            };
          } // packageOverrides)
      ) {};

    gen_server_magic = gen_server_magic_0_0_9;

    gen_smtp_0_11_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_smtp";
            version = "0.11.0";
            src = fetchHex {
              pkg = "gen_smtp";
              version = "0.11.0";
              sha256 =
                "91df291503e0c0d3d5ddb00ed85f3d8da521a9a0936d141f647bb752f0295f02";
            };

            meta = {
              description = ''A generic Erlang SMTP server/client framework'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/Vagabond/gen_smtp";
            };
          } // packageOverrides)
      ) {};

    gen_smtp_0_12_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_smtp";
            version = "0.12.0";
            src = fetchHex {
              pkg = "gen_smtp";
              version = "0.12.0";
              sha256 =
                "7b4d2e5338f98518414bae6b85d2be51d6715c6f2695c7967567af5426bf00e5";
            };

            meta = {
              description = ''A generic Erlang SMTP server/client framework'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/Vagabond/gen_smtp";
            };
          } // packageOverrides)
      ) {};

    gen_smtp = gen_smtp_0_12_0;

    gen_spoxy_0_0_14_beta_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "gen_spoxy";
            version = "0.0.14-beta.3";
            src = fetchHex {
              pkg = "gen_spoxy";
              version = "0.0.14-beta.3";
              sha256 =
                "997e9a12ffe9662732ac7bf3c0b5c85bae7efe8eb47988adc37a7a64fd36ca8a";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''caching made fun!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spotim/gen_spoxy";
            };
          } // packageOverrides)
      ) {};

    gen_spoxy = gen_spoxy_0_0_14_beta_3;

    gen_stage_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.10.0";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.10.0";
              sha256 =
                "3222454a29f9cc09cc75d14733444e55edacb9b1a605be2ddc20c7de5cf2344f";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_stage_0_11_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.11.0";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.11.0";
              sha256 =
                "e3c22b2e003970a8c5f58b763bdf645c298a035833b2f241c468fe330108cebf";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_stage_0_12_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.12.2";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.12.2";
              sha256 =
                "548b2673146cf234a1fb6ecb5b474525f84ac65ca93ed2c0413148a67802aaea";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_stage_0_13_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.13.1";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.13.1";
              sha256 =
                "307544601361efdc80620f8762c8e9afc7e65187640ed260b17a035d58db865c";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_stage_0_14_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.14.0";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.14.0";
              sha256 =
                "095d38418e538af99ac82043985d26724164b78736a1d0f137c308332ad46250";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_stage = gen_stage_0_14_0;

    gen_stage_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.9.0";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.9.0";
              sha256 =
                "40b445241df1843384e6ac7701ad8eae57924121ef8c17903e4f8f56dc90f42c";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_state_machine_2_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_state_machine";
            version = "2.0.2";
            src = fetchHex {
              pkg = "gen_state_machine";
              version = "2.0.2";
              sha256 =
                "cd7b9d4e7b05974f9d84776fe47c068aa82bee04d40771c7aa9ae76e20d0c942";
            };

            meta = {
              description = ''An Elixir wrapper for gen_statem.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericentin/gen_state_machine";
            };
          } // packageOverrides)
      ) {};

    gen_state_machine = gen_state_machine_2_0_2;

    gen_state_machine_helpers_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_state_machine_helpers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_state_machine_helpers";
              version = "0.1.0";
              sha256 =
                "600842df71175d9b5133f327c410b36847cfc3b83bedf07c844f43c07363bc31";
            };

            meta = {
              description = ''A helper library for GenStateMachine.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/smpallen99/gen_state_machine_helpers";
            };
          } // packageOverrides)
      ) {};

    gen_state_machine_helpers = gen_state_machine_helpers_0_1_0;

    gen_task_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_task";
            version = "0.1.4";
            src = fetchHex {
              pkg = "gen_task";
              version = "0.1.4";
              sha256 =
                "4419dcec86dac557974ce93cb38d78d1eddd00e8dfa5ec0c8896a25d04586ca1";
            };

            meta = {
              longDescription = ''Generic Task behavior that helps to
                                encapsulate worker errors and recover from them
                                in classic GenStage`s.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/gen_task";
            };
          } // packageOverrides)
      ) {};

    gen_task = gen_task_0_1_4;

    gen_template_api_client_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mix_templates_0_2_1,
          version_tasks_0_11_1
        }:
          buildMix ({
            name = "gen_template_api_client";
            version = "0.3.0";
            src = fetchHex {
              pkg = "gen_template_api_client";
              version = "0.3.0";
              sha256 =
                "c0da3fcf8deb2ae11e6c3447868ca0a7ebf52a683005fb82aaa9af5913cc654b";
            };
            beamDeps  = [ mix_templates_0_2_1 version_tasks_0_11_1 ];

            meta = {
              longDescription = ''A template for building API clients to 3rd
                                party REST applications. This will generate
                                templates for get, post functions. You then
                                extend the project with convenience functions to
                                access the API like it were just another Elixir
                                lib.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aforward/gen_template_api_client";
            };
          } // packageOverrides)
      ) {};

    gen_template_api_client = gen_template_api_client_0_3_0;

    gen_template_component_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mix_templates_0_2_1,
          version_tasks_0_11_1
        }:
          buildMix ({
            name = "gen_template_component";
            version = "0.2.1";
            src = fetchHex {
              pkg = "gen_template_component";
              version = "0.2.1";
              sha256 =
                "1ae6e72ce10eaaa61aed14b5caa7ead2be311ce833d007bbdf0f661d5cffc0a9";
            };
            beamDeps  = [ mix_templates_0_2_1 version_tasks_0_11_1 ];

            meta = {
              longDescription = ''A template for building Elixir components
                                (projects that hold state). This project is an
                                extremely paired down version of `mix new
                                «project_name» --sup` based on Dave Thomas`
                                view of simplifying our Elixir code. Let`s see
                                how this plays out.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aforward/gen_template_component";
            };
          } // packageOverrides)
      ) {};

    gen_template_component = gen_template_component_0_2_1;

    gen_template_ecto_server_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "gen_template_ecto_server";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gen_template_ecto_server";
              version = "0.1.1";
              sha256 =
                "b92f0bc31f9749045cecf326c052c6bc9cb75b4063cfb2a11496e897da34a19c";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              longDescription = ''Generate a simple free-standing application
                                with an ecto layer, intended to be used as a
                                database resource in an application written
                                using decoupled resources.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/pragdave/gen_template_ecto_server";
            };
          } // packageOverrides)
      ) {};

    gen_template_ecto_server = gen_template_ecto_server_0_1_1;

    gen_template_ecto_service_0_2_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "gen_template_ecto_service";
            version = "0.2.2";
            src = fetchHex {
              pkg = "gen_template_ecto_service";
              version = "0.2.2";
              sha256 =
                "981bf677280010d6ffa36928111fd23c2a095beaf799354a2be8355f1b86d7c7";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              longDescription = ''A template `mix gen ecto_service «project»`
                                that generates a project for building stand
                                alone ecto services (using Posgres)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/aforward/gen_template_ecto_service";
            };
          } // packageOverrides)
      ) {};

    gen_template_ecto_service = gen_template_ecto_service_0_2_2;

    gen_template_escript_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "gen_template_escript";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_template_escript";
              version = "0.1.0";
              sha256 =
                "e11b39f6d4fb6b6efe87a2e34a737f82b8a81f3e48034cb6be34c2db813e9313";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              longDescription = ''Generates escript projects. Elixir scripts
                                have a module with a `main` function. This mix
                                gen template acts as template for such
                                scripts.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/meddle0x53/gen_template_escript";
            };
          } // packageOverrides)
      ) {};

    gen_template_escript = gen_template_escript_0_1_0;

    gen_template_library_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mix_templates_0_2_1,
          version_tasks_0_11_1
        }:
          buildMix ({
            name = "gen_template_library";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gen_template_library";
              version = "0.1.1";
              sha256 =
                "0b279672b4dc3eaae5cff6688d17b88c3498e0df6967dc234052060cddd6fb73";
            };
            beamDeps  = [ mix_templates_0_2_1 version_tasks_0_11_1 ];

            meta = {
              longDescription = ''A template for building Elixir libraries
                                (projects without any state, just functions).
                                This project is an extremely paired down version
                                of `mix new «project_name»` based on Dave
                                Thomas` view of simplifying our Elixir code.
                                Let`s see how this plays out.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aforward/gen_template_library";
            };
          } // packageOverrides)
      ) {};

    gen_template_library = gen_template_library_0_1_1;

    gen_template_project_0_1_10 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "gen_template_project";
            version = "0.1.10";
            src = fetchHex {
              pkg = "gen_template_project";
              version = "0.1.10";
              sha256 =
                "9e0a8d81ae47e7ca593253bddf96e2c96208ea28bb33cb36cc1095bf7bf38318";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              longDescription = ''A replacement for `mix new «project»` that
                                generates files which I believe to be easier to
                                read and maintain.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/gen_template_project";
            };
          } // packageOverrides)
      ) {};

    gen_template_project = gen_template_project_0_1_10;

    gen_template_slack_bot_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "gen_template_slack_bot";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_template_slack_bot";
              version = "0.1.0";
              sha256 =
                "f486dd539ca01f4b0b1d6dc066f240925dfd8072127d191623230be0d08ced4e";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              longDescription = ''Generates a Slack bot boilerplate that works
                                out of the box and is easily extensible. Support
                                for cron-like jobs and commands included.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lrosa007/gen_template_slack_bot";
            };
          } // packageOverrides)
      ) {};

    gen_template_slack_bot = gen_template_slack_bot_0_1_0;

    gen_template_template_0_1_5 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "gen_template_template";
            version = "0.1.5";
            src = fetchHex {
              pkg = "gen_template_template";
              version = "0.1.5";
              sha256 =
                "e3bb9ca6dd25dea2c96e4b14f67ddd9f364949274f17cd1b9537ef974f9c65c0";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              longDescription = ''A template that generates blank template
                                projects, intended to be used by folks creating
                                their own templates.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/gen_template_template";
            };
          } // packageOverrides)
      ) {};

    gen_template_template = gen_template_template_0_1_5;

    gen_template_umbrella_0_1_10 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "gen_template_umbrella";
            version = "0.1.10";
            src = fetchHex {
              pkg = "gen_template_umbrella";
              version = "0.1.10";
              sha256 =
                "a2f2fd102e5a8effb5cddce289a13017381ea265819f083743f3f43e12ae68e1";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              description = ''Generate a basic umbrella project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/gen_template_umbrella";
            };
          } // packageOverrides)
      ) {};

    gen_template_umbrella = gen_template_umbrella_0_1_10;

    gen_timer_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_timer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gen_timer";
              version = "0.0.2";
              sha256 =
                "c71cd9597604279df5762c56271aef151b7ef0322515bd9296d1e8e537023a4a";
            };

            meta = {
              description = ''A GenServer for asynchronously running a function
                            after some duration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thebriz24/gen_timer";
            };
          } // packageOverrides)
      ) {};

    gen_timer = gen_timer_0_0_2;

    gen_util_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_util";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_util";
              version = "0.1.0";
              sha256 =
                "b77e99fed05ebc9f87cd91f2279b51e213cb8e39f99b0f367a75a30f9ef9ade3";
            };

            meta = {
              description = ''A collection of Utility functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/gen_util";
            };
          } // packageOverrides)
      ) {};

    gen_util = gen_util_0_1_0;

    gencycle_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gencycle";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gencycle";
              version = "0.1.1";
              sha256 =
                "1cc493636d01b679516a20502b6b75fc55eea8030727f80078e06743d3b64dba";
            };

            meta = {
              description = ''An event-driven task manager to design GenServer
                            lifecycles'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/4knahs/gencycle";
            };
          } // packageOverrides)
      ) {};

    gencycle = gencycle_0_1_1;

    gendex_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gendex";
            version = "0.5.1";
            src = fetchHex {
              pkg = "gendex";
              version = "0.5.1";
              sha256 =
                "b3eedba31b1a76ab33e6b57689e4312625fafb2667ac7b485df22c05b4c9439f";
            };

            meta = {
              description = ''Gendex tells you the most likely gender of a
                            person based on first name.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dre1080/gendex";
            };
          } // packageOverrides)
      ) {};

    gendex = gendex_0_5_1;

    genetic_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "genetic";
            version = "0.0.1";
            src = fetchHex {
              pkg = "genetic";
              version = "0.0.1";
              sha256 =
                "9a517e329f8f8412446333f1d7a8d40c7f4ffb697b818a938210f7f87e8b1455";
            };

            meta = {
              longDescription = ''A genetic algorithm structure and abstraction
                                to ease any implementation of genetic algorithm
                                in Elixir. This project is in development not
                                ready for use. This description will be changed
                                as soon as it is functional and can be used.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fcevado/genetic";
            };
          } // packageOverrides)
      ) {};

    genetic = genetic_0_0_1;

    gengo_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "gengo";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gengo";
              version = "0.1.1";
              sha256 =
                "1b8d2434844ea990df51852af7f37aef7fa8a8a11b7651d82f7976a705ef66a4";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for Gengo API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelvintaywl/exgengo";
            };
          } // packageOverrides)
      ) {};

    gengo = gengo_0_1_1;

    genie_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "genie";
            version = "0.1.1";
            src = fetchHex {
              pkg = "genie";
              version = "0.1.1";
              sha256 =
                "2813e387fa78bc3c718da0bee5d980ee24040eea986a35e080f27d9935915d1f";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''An inference engine written 100% in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/costaraphael/genie";
            };
          } // packageOverrides)
      ) {};

    genie = genie_0_1_1;

    gentry_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gentry";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gentry";
              version = "0.1.1";
              sha256 =
                "2ed85003c388717174f87a2f8505ec958d219f4cc5637dbabf26b3c0e1dad7d0";
            };

            meta = {
              description = ''Generic retries with exponential backoff'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spreedly/gentry";
            };
          } // packageOverrides)
      ) {};

    gentry = gentry_0_1_1;

    geo_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geo";
            version = "3.0.0";
            src = fetchHex {
              pkg = "geo";
              version = "3.0.0";
              sha256 =
                "40a1acc0c8c437d548b5c58505de2800ab6c0fb40950b1e39b6f21dd08e5ba0d";
            };

            meta = {
              description = ''Encodes and decodes WKB, WKT, and GeoJSON
                            formats.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/geo";
            };
          } // packageOverrides)
      ) {};

    geo = geo_3_0_0;

    geo_pattern_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geo_pattern";
            version = "0.0.1";
            src = fetchHex {
              pkg = "geo_pattern";
              version = "0.0.1";
              sha256 =
                "507e9c27c2d967db9571db34540d332048f68041cb5537f2b5604e740b7fa83c";
            };

            meta = {
              description = ''An Elixir library for generating beautiful SVG
                            patterns from strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annejohnson/geo_pattern";
            };
          } // packageOverrides)
      ) {};

    geo_pattern = geo_pattern_0_0_1;

    geobox_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, geohash_1_1_0 }:
          buildMix ({
            name = "geobox";
            version = "0.1.0";
            src = fetchHex {
              pkg = "geobox";
              version = "0.1.0";
              sha256 =
                "01b4d7834ad49a877a7e20521b8144d6428ba1750d377fc634e46ca1917726ee";
            };
            beamDeps  = [ geohash_1_1_0 ];

            meta = {
              longDescription = ''Geobox - lookup set of overlapping geohashes
                                within bounding box or radius covering all
                                intersections in given resolution, usefull for
                                proximity search.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bartekupartek/geobox";
            };
          } // packageOverrides)
      ) {};

    geobox = geobox_0_1_0;

    geocalc_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geocalc";
            version = "0.6.1";
            src = fetchHex {
              pkg = "geocalc";
              version = "0.6.1";
              sha256 =
                "9e21076588e989c1234dd12b1f52605a59e13ab20e888991acd6c0cac7faee83";
            };

            meta = {
              description = ''Calculate distance, bearing and more between
                            latitude/longitude points.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yltsrc/geocalc";
            };
          } // packageOverrides)
      ) {};

    geocalc = geocalc_0_6_1;

    geocodex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "geocodex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "geocodex";
              version = "0.1.0";
              sha256 =
                "0185cbfe7c71500ae2cce62af10b1a546a8bf3a180d57e361bc8f3cb09c8baa8";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A Google Geocoding API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dsantosmerino/geocodex";
            };
          } // packageOverrides)
      ) {};

    geocodex = geocodex_0_1_0;

    geohash_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geohash";
            version = "1.0.0";
            src = fetchHex {
              pkg = "geohash";
              version = "1.0.0";
              sha256 =
                "cb533438cedbc589103fe23ef902010f474e546b7a8190b1ef25dfb9b06afaf5";
            };

            meta = {
              description = ''Geohash encode/decode implementation for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polmuz/elixir-geohash";
            };
          } // packageOverrides)
      ) {};

    geohash_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geohash";
            version = "1.1.0";
            src = fetchHex {
              pkg = "geohash";
              version = "1.1.0";
              sha256 =
                "2fb4f76d4b8f5243b8e287aab6d963c3af9602f57d233a0df479697527c01a61";
            };

            meta = {
              description = ''Geohash encode/decode implementation for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polmuz/elixir-geohash";
            };
          } // packageOverrides)
      ) {};

    geohash = geohash_1_1_0;

    geohax_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geohax";
            version = "0.2.1";
            src = fetchHex {
              pkg = "geohax";
              version = "0.2.1";
              sha256 =
                "414a99d36acbde8fe8355b49e0dd693548c1d9f818d6363d7fdc4c3dc3662561";
            };

            meta = {
              description = ''Geohash encoding and decoding for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evuez/geohax";
            };
          } // packageOverrides)
      ) {};

    geohax = geohax_0_2_1;

    geolite2data_0_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "geolite2data";
            version = "0.0.3";
            src = fetchHex {
              pkg = "geolite2data";
              version = "0.0.3";
              sha256 =
                "ad7bcc7669f06d29705ce7c757b3255cc8f6e30ccf5771a2b270e31541e553b4";
            };

            meta = {
              description = ''Periodically fetches the free MaxMind GeoLite2
                            databases'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-geolite2data";
            };
          } // packageOverrides)
      ) {};

    geolite2data = geolite2data_0_0_3;

    geolix_0_16_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mmdb2_decoder_0_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "geolix";
            version = "0.16.0";
            src = fetchHex {
              pkg = "geolix";
              version = "0.16.0";
              sha256 =
                "99eb5c34afb357877cdbcea76ebc4548f42c771a53566e9ec62e2234cff3ecdd";
            };
            beamDeps  = [ mmdb2_decoder_0_2_0 poolboy_1_5_1 ];

            meta = {
              description = ''MaxMind GeoIP2 database reader/decoder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-geolix/geolix";
            };
          } // packageOverrides)
      ) {};

    geolix = geolix_0_16_0;

    geolix_testdata_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geolix_testdata";
            version = "0.3.0";
            src = fetchHex {
              pkg = "geolix_testdata";
              version = "0.3.0";
              sha256 =
                "92ebeddfc0b2d334826b5e8ba281575f1549b70b09cc663fa7153edf593b8614";
            };

            meta = {
              description = ''Geolix Test Data Provider'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-geolix/testdata";
            };
          } // packageOverrides)
      ) {};

    geolix_testdata = geolix_testdata_0_3_0;

    geonames_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "geonames";
            version = "1.0.3";
            src = fetchHex {
              pkg = "geonames";
              version = "1.0.3";
              sha256 =
                "2b4a2797985fdf52d544d404bcf52dd3d94c0570639c2295c7ff3a2645c2f8e7";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A simple wrapper around the geonames.org JSON
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pareeohnos/geonames-elixir";
            };
          } // packageOverrides)
      ) {};

    geonames = geonames_1_0_3;

    gestalt_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gestalt";
            version = "0.1.2";
            src = fetchHex {
              pkg = "gestalt";
              version = "0.1.2";
              sha256 =
                "02b4b35a676d4f72837f744ff406229d5266ad3261e1dc2f0e876d1af990993c";
            };

            meta = {
              longDescription = ''A wrapper for `Application.get_config/3` and
                                `System.get_env/1` that makes it easy to swap in
                                process-specific overrides. Among other things,
                                this allows tests to provide async-safe
                                overrides.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sparta-science/elixir-gestalt";
            };
          } // packageOverrides)
      ) {};

    gestalt = gestalt_0_1_2;

    get_conf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "get_conf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "get_conf";
              version = "0.1.0";
              sha256 =
                "3b770e7e1b13f34e4fc9f3a692d489af9b412b20d2e5bf772d7bb2da3cf5532d";
            };

            meta = {
              description = ''A simple configuration manager for namespaced
                            modules.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    get_conf = get_conf_0_1_0;

    getopt_0_8_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "getopt";
            version = "0.8.2";
            src = fetchHex {
              pkg = "getopt";
              version = "0.8.2";
              sha256 =
                "736e6db3679fbbad46373efb96b69509f8e420281635e9d92989af9f0a0483f7";
            };

            meta = {
              description = ''Command-line options parser for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/jcomellas/getopt";
            };
          } // packageOverrides)
      ) {};

    getopt_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "getopt";
            version = "1.0.1";
            src = fetchHex {
              pkg = "getopt";
              version = "1.0.1";
              sha256 =
                "53e1ab83b9ceb65c9672d3e7a35b8092e9bdc9b3ee80721471a161c10c59959c";
            };

            meta = {
              description = ''Command-line options parser for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/jcomellas/getopt";
            };
          } // packageOverrides)
      ) {};

    getopt = getopt_1_0_1;

    gettext_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gettext";
            version = "0.10.0";
            src = fetchHex {
              pkg = "gettext";
              version = "0.10.0";
              sha256 =
                "c37747dced24fe00cb4245cb348a36556fa82851c10748cfe4c6a0253aea374e";
            };

            meta = {
              description = ''Internationalization and localization through
                            gettext'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/gettext";
            };
          } // packageOverrides)
      ) {};

    gettext_0_13_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gettext";
            version = "0.13.1";
            src = fetchHex {
              pkg = "gettext";
              version = "0.13.1";
              sha256 =
                "b233b4ab0d349a359b52592d2d591fc6e4b20fdbe0b15a624cc15a3ca509a1cc";
            };

            meta = {
              description = ''Internationalization and localization through
                            gettext'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/gettext";
            };
          } // packageOverrides)
      ) {};

    gettext_0_15_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gettext";
            version = "0.15.0";
            src = fetchHex {
              pkg = "gettext";
              version = "0.15.0";
              sha256 =
                "d17ac3aa40835f7feb92913fcdf655edea59938fa8b25f5ce5d423e76a695c3b";
            };

            meta = {
              description = ''Internationalization and localization through
                            gettext'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/gettext";
            };
          } // packageOverrides)
      ) {};

    gettext = gettext_0_15_0;

    gettext_schema_field_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_15_0 }:
          buildMix ({
            name = "gettext_schema_field";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gettext_schema_field";
              version = "0.1.0";
              sha256 =
                "2cbcb74f81f4c5de88d4b03a0545615ceaf0e4bc6f9f0dc29e1c97f47748b56e";
            };
            beamDeps  = [ gettext_0_15_0 ];

            meta = {
              longDescription = ''GettextSchemaField can be use to for the
                                internationalization of schema fields with
                                Gettext.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eafif/gettext_schema_field";
            };
          } // packageOverrides)
      ) {};

    gettext_schema_field = gettext_schema_field_0_1_0;

    gettexter_0_0_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gettexter";
            version = "0.0.6";
            src = fetchHex {
              pkg = "gettexter";
              version = "0.0.6";
              sha256 =
                "d97d63e6a9179ab1cfd089329b14fcbad9d11697908d93f7ce2f2b7f3a0d0cda";
            };

            meta = {
              description = ''GNU gettext compatible translation library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seriyps/gettexter";
            };
          } // packageOverrides)
      ) {};

    gettexter = gettexter_0_0_6;

    gherkin_1_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gherkin";
            version = "1.6.0";
            src = fetchHex {
              pkg = "gherkin";
              version = "1.6.0";
              sha256 =
                "9631845a23f3dbde97ae576c1e67e928392b12fb0d0e976acb0ec5d4b5fd1881";
            };

            meta = {
              description = ''Gherkin file parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabbage-ex/gherkin";
            };
          } // packageOverrides)
      ) {};

    gherkin = gherkin_1_6_0;

    ghibli_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_7_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "ghibli";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ghibli";
              version = "1.0.0";
              sha256 =
                "4333d6e02e0022d2fd8de0cf48a41b6190bf8a5c61941965fcd3f34a7de269fa";
            };
            beamDeps  = [ hackney_1_7_1 poison_3_1_0 ];

            meta = {
              description = ''Studio Ghibli API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/ghibli";
            };
          } // packageOverrides)
      ) {};

    ghibli = ghibli_1_0_0;

    ghoul_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_8_0,
          pattern_tap_0_4_0,
          shorter_maps_2_2_5
        }:
          buildMix ({
            name = "ghoul";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ghoul";
              version = "0.1.1";
              sha256 =
                "6deff77c2bcda9cc33e001d6865187e7aff6b261eaae4030000a9a127ca4245f";
            };
            beamDeps  = [ gproc_0_8_0 pattern_tap_0_4_0 shorter_maps_2_2_5 ];

            meta = {
              description = ''An undead cleanup crew for your processes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/ghoul";
            };
          } // packageOverrides)
      ) {};

    ghoul = ghoul_0_1_1;

    gialib_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gialib";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gialib";
              version = "0.1.0";
              sha256 =
                "e1efea4e4de441b2622f486ac3b5e874f2fd9e24a2f97fb27cd0125457b0aff0";
            };

            meta = {
              description = ''Util For Gialib'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gialib/gialib";
            };
          } // packageOverrides)
      ) {};

    gialib = gialib_0_1_0;

    gibran_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gibran";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gibran";
              version = "0.0.2";
              sha256 =
                "bdf0eb8c7469ac17e14e898b26fb47d4a360409f7a750bfde5d7d0765f327ca4";
            };

            meta = {
              description = ''An Elixir natural language processor.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abitdodgy/gibran";
            };
          } // packageOverrides)
      ) {};

    gibran = gibran_0_0_2;

    gibreel_6_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          async_2_0_0,
          cclock_2_0_0,
          columbo_2_0_0
        }:
          buildMix ({
            name = "gibreel";
            version = "6.0.1";
            src = fetchHex {
              pkg = "gibreel";
              version = "6.0.1";
              sha256 =
                "99b0b8072988751704b4a10513a4fccbcac84d4cee883468e95d07510b92e424";
            };
            beamDeps  = [ async_2_0_0 cclock_2_0_0 columbo_2_0_0 ];

            meta = {
              description = ''Distributed cache implemented in Elixir /
                            Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aruki-delivery/gibreel";
            };
          } // packageOverrides)
      ) {};

    gibreel = gibreel_6_0_1;

    gin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gin";
              version = "0.1.0";
              sha256 =
                "f6a479469c60bae5ff87844f1c6d83211d49e98543e6be4eae2590d3756f23ba";
            };

            meta = {
              description = ''An Elixir wrapper for various Erlang gen
                            modules.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/gin-elixir";
            };
          } // packageOverrides)
      ) {};

    gin = gin_0_1_0;

    giphy_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "giphy_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "giphy_ex";
              version = "0.1.0";
              sha256 =
                "76d2a4eeaf23f4cc37818e0dde08400e6ce6cc78c60d532debd5b864878df235";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              description = ''Elixir wrapper to consume Giphy`s API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dreamingechoes/giphy_ex";
            };
          } // packageOverrides)
      ) {};

    giphy_ex = giphy_ex_0_1_0;

    git_auto_version_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "git_auto_version";
            version = "0.2.0";
            src = fetchHex {
              pkg = "git_auto_version";
              version = "0.2.0";
              sha256 =
                "71c61fc7e078c5ab1a2286daf2b40649ffa60f35ffc50ff0a2494fcbee4c3d4a";
            };

            meta = {
              description = ''Auto version your apps with git tags'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/mjquinlan2000/elixir_git_auto_version";
            };
          } // packageOverrides)
      ) {};

    git_auto_version = git_auto_version_0_2_0;

    git_cli_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "git_cli";
            version = "0.2.5";
            src = fetchHex {
              pkg = "git_cli";
              version = "0.2.5";
              sha256 =
                "a28f672acc536ffe01269dffcde5e94083f6f138491d6287ac2c4e4122ee5f0a";
            };

            meta = {
              description = ''A simple interface to Git CLI'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/elixir-git-cli";
            };
          } // packageOverrides)
      ) {};

    git_cli = git_cli_0_2_5;

    git_diff_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "git_diff";
            version = "0.5.0";
            src = fetchHex {
              pkg = "git_diff";
              version = "0.5.0";
              sha256 =
                "4291014672e701dee8fddca685480d1c7a6c8d0980f7e02b571725c4538f7a93";
            };

            meta = {
              description = ''A simple parser for output from `git diff`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mononym/git_diff";
            };
          } // packageOverrides)
      ) {};

    git_diff = git_diff_0_5_0;

    git_hooks_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          blankable_0_0_1,
          recase_0_3_0
        }:
          buildMix ({
            name = "git_hooks";
            version = "0.2.0";
            src = fetchHex {
              pkg = "git_hooks";
              version = "0.2.0";
              sha256 =
                "8cd461735a8f6a75d2d60f96b61c3d40d4ebc2ad3c8691ddf5add6ea882fc946";
            };
            beamDeps  = [ blankable_0_0_1 recase_0_3_0 ];

            meta = {
              description = ''Add git hooks to your Elixir projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qgadrian/elixir_git_hooks";
            };
          } // packageOverrides)
      ) {};

    git_hooks = git_hooks_0_2_0;

    gitex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gitex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gitex";
              version = "0.2.0";
              sha256 =
                "68074becf5e9a01d00096c306a05b023d0107bafca178ff0f043f893b7b95450";
            };

            meta = {
              longDescription = ''Elixir implementation of the Git object
                                storage, but with the goal to implement the same
                                semantic with other storage and topics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/gitex";
            };
          } // packageOverrides)
      ) {};

    gitex = gitex_0_2_0;

    github_issues_0_4_14 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          io_ansi_table_0_4_13,
          jsx_2_9_0,
          logger_file_backend_0_0_10,
          persist_config_0_2_6
        }:
          buildMix ({
            name = "github_issues";
            version = "0.4.14";
            src = fetchHex {
              pkg = "github_issues";
              version = "0.4.14";
              sha256 =
                "3131514057dbedd46272b014bc1374ab3f4fd30f0b19864f86bd0353d1149228";
            };
            beamDeps  = [
                          httpoison_1_2_0
                          io_ansi_table_0_4_13
                          jsx_2_9_0
                          logger_file_backend_0_0_10
                          persist_config_0_2_6
                        ];

            meta = {
              description = ''Prints GitHub Issues to STDOUT in a table with
                            borders and colors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/github_issues";
            };
          } // packageOverrides)
      ) {};

    github_issues = github_issues_0_4_14;

    github_oauth_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "github_oauth";
            version = "0.1.1";
            src = fetchHex {
              pkg = "github_oauth";
              version = "0.1.1";
              sha256 =
                "4e68983af9ed8146a2505ad759cb151c3202471285f07df6132a4acd47aa91f2";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              description = ''simple github oauth library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/github_oauth";
            };
          } // packageOverrides)
      ) {};

    github_oauth = github_oauth_0_1_1;

    give_away_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "give_away";
            version = "0.0.1";
            src = fetchHex {
              pkg = "give_away";
              version = "0.0.1";
              sha256 =
                "b1dd9e45c9316ef4c74c4744e5d515157851254e8fd2bcd94b05dc639c4d063d";
            };

            meta = {
              longDescription = ''GiveAway is a simple, extensible library for
                                generating social media sharing URLs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/odiumediae/give_away";
            };
          } // packageOverrides)
      ) {};

    give_away = give_away_0_0_1;

    giza_sphinxsearch_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          mariaex_0_8_4
        }:
          buildMix ({
            name = "giza_sphinxsearch";
            version = "0.1.4";
            src = fetchHex {
              pkg = "giza_sphinxsearch";
              version = "0.1.4";
              sha256 =
                "fd45660fe76065d1ad3f110b029bb027f65ab9224ab554c13d316dcbd3f5c195";
            };
            beamDeps  = [ httpoison_0_13_0 mariaex_0_8_4 ];

            meta = {
              description = ''Sphinx Client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Tyler-pierce/giza_sphinxsearch";
            };
          } // packageOverrides)
      ) {};

    giza_sphinxsearch = giza_sphinxsearch_0_1_4;

    gizoogle_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "gizoogle";
            version = "0.0.3";
            src = fetchHex {
              pkg = "gizoogle";
              version = "0.0.3";
              sha256 =
                "15f95e4845312c6fee505dd91e231c7a8893c281ab444d63ce8d674dba7828b3";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              longDescription = ''Uses Gizoogle ta allow you ta drop a rhyme
                                like a thug n` retrieve links fo` translated
                                sitez'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/notdevinclark/gizoogle";
            };
          } // packageOverrides)
      ) {};

    gizoogle = gizoogle_0_0_3;

    gl_utils_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gl_utils";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gl_utils";
              version = "0.0.1";
              sha256 =
                "ae529fef193423baa50c673b3f852e0c3ca7b08a85817be7113615dbdacb53f3";
            };

            meta = {
              description = ''All of the Erlang gl macros exposed as normal
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/requnix/gl_utils";
            };
          } // packageOverrides)
      ) {};

    gl_utils = gl_utils_0_0_1;

    glicko_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "glicko";
            version = "0.6.0";
            src = fetchHex {
              pkg = "glicko";
              version = "0.6.0";
              sha256 =
                "799606571ca032c8f4df91607f28b355561acb6161ab13e43cf72365e17af04d";
            };

            meta = {
              description = ''Implementation of the Glicko rating system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avitex/elixir-glicko";
            };
          } // packageOverrides)
      ) {};

    glicko = glicko_0_6_0;

    glitchylicious_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "glitchylicious";
            version = "0.0.1";
            src = fetchHex {
              pkg = "glitchylicious";
              version = "0.0.1";
              sha256 =
                "2d7c55bd138722ff810006d4b36873d80ad0473e074ccc377e381c5a88f0a9db";
            };

            meta = {
              description = ''Glitching and image corruption library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/0010-IO/glitchylicious";
            };
          } // packageOverrides)
      ) {};

    glitchylicious = glitchylicious_0_0_1;

    global_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "global";
            version = "1.0.0";
            src = fetchHex {
              pkg = "global";
              version = "1.0.0";
              sha256 =
                "00b0637bc2d86154af2885807296d4b6616e6b50a2d52c8ce187ddfe317890ee";
            };

            meta = {
              description = ''A wrapper for Erlang`s :global module with
                            documentation.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mgwidmann/global";
            };
          } // packageOverrides)
      ) {};

    global = global_1_0_0;

    gm_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gm";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gm";
              version = "0.0.2";
              sha256 =
                "3dc6e1d336afe370219b8b465a651012168f6fe7b9e9d2b0609b6384e1bcb8f7";
            };

            meta = {
              description = ''Idiomatic GraphicsMagick wrapper for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/utkarshkukreti/gm.ex";
            };
          } // packageOverrides)
      ) {};

    gm = gm_0_0_2;

    gmbtest_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "gmbtest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gmbtest";
              version = "0.1.1";
              sha256 =
                "7c92e52cda43f829b478b52a3edb334f79f51dd02774b9eb33e5a64449da2ae1";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Test package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    gmbtest = gmbtest_0_1_1;

    gmex_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gmex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "gmex";
              version = "0.1.4";
              sha256 =
                "c69cb2106dd9778b78e394f80bb4fd054fccd9d90a08b49a6aa29ff9f7d0c0a2";
            };

            meta = {
              description = ''A simple GraphicsMagick wrapper for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/voodoo-child/gmex";
            };
          } // packageOverrides)
      ) {};

    gmex = gmex_0_1_4;

    gnat_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "gnat";
            version = "0.4.1";
            src = fetchHex {
              pkg = "gnat";
              version = "0.4.1";
              sha256 =
                "970dd03752369da74f5797424913a1094a005347cfc0a8a5d63f462dbcabaa68";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A nats client in pure elixir. Resiliance,
                            Performance, Ease-of-Use.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/gnat";
            };
          } // packageOverrides)
      ) {};

    gnat = gnat_0_4_1;

    gold_needle_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gold_needle";
            version = "0.0.3";
            src = fetchHex {
              pkg = "gold_needle";
              version = "0.0.3";
              sha256 =
                "9b6515cae2b112d30437397bcec27476ad5e5f5ebbe9db2b8716933042f86421";
            };

            meta = {
              description = ''Various web page generator in Phoenix(Elixir Web
                            Framework)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/piacere-ex/gold_needle";
            };
          } // packageOverrides)
      ) {};

    gold_needle = gold_needle_0_0_3;

    goldrush_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "goldrush";
            version = "0.1.7";
            src = fetchHex {
              pkg = "goldrush";
              version = "0.1.7";
              sha256 =
                "a94a74cd363ce5f4970ed8242c551ec62b71939db1bbfd2e030142cab25a4ffe";
            };

            meta = {
              description = ''Erlang event stream processor'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/DeadZen/goldrush";
            };
          } // packageOverrides)
      ) {};

    goldrush_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "goldrush";
            version = "0.1.8";
            src = fetchHex {
              pkg = "goldrush";
              version = "0.1.8";
              sha256 =
                "ba71e005bbb6ebbc3c510a58b2bd6d3b25a8d091a8e87ac3d33ef10522cdcd51";
            };

            meta = {
              description = ''Erlang event stream processor'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/DeadZen/goldrush";
            };
          } // packageOverrides)
      ) {};

    goldrush_0_1_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "goldrush";
            version = "0.1.9";
            src = fetchHex {
              pkg = "goldrush";
              version = "0.1.9";
              sha256 =
                "99cb4128cffcb3227581e5d4d803d5413fa643f4eb96523f77d9e6937d994ceb";
            };

            meta = {
              description = ''Erlang event stream processor'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/DeadZen/goldrush";
            };
          } // packageOverrides)
      ) {};

    goldrush = goldrush_0_1_9;

    gollum_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "gollum";
            version = "0.2.2";
            src = fetchHex {
              pkg = "gollum";
              version = "0.2.2";
              sha256 =
                "a2ea2929938eb225dd29e41551dabcd12cc3c95fcaf250f82c2d5076096c3b78";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''Robots.txt parser with caching. Modelled after
                            Kryten.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ravernkoh/gollum";
            };
          } // packageOverrides)
      ) {};

    gollum = gollum_0_2_2;

    good_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "good";
            version = "0.0.2";
            src = fetchHex {
              pkg = "good";
              version = "0.0.2";
              sha256 =
                "4321ef6eb2146ef3069977cafd7da02382470ca7467aa8ce74cd9bf50839aaa6";
            };

            meta = {
              description = ''Early Return like syntax for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/otiai10/good";
            };
          } // packageOverrides)
      ) {};

    good = good_0_0_2;

    good_enough_geoid_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_2_0_0_rc_0 }:
          buildMix ({
            name = "good_enough_geoid";
            version = "0.0.2";
            src = fetchHex {
              pkg = "good_enough_geoid";
              version = "0.0.2";
              sha256 =
                "7b2a556206f71e743d77c26a55b60b3282bd799b8254510f62afe2a4ec330746";
            };
            beamDeps  = [ csv_2_0_0_rc_0 ];

            meta = {
              description = ''Get EGM Geoid heights that are good enough for
                            some purposes (maybe yours).'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/code-lever/good-enough-geoid-elixir";
            };
          } // packageOverrides)
      ) {};

    good_enough_geoid = good_enough_geoid_0_0_2;

    good_times_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "good_times";
            version = "1.1.1";
            src = fetchHex {
              pkg = "good_times";
              version = "1.1.1";
              sha256 =
                "1ecb4524b506a5dde5fa9e2312d6f98249b4b45e49a74cf799a8577b52157b90";
            };

            meta = {
              description = ''Expressive and easy to use datetime functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/good_times";
            };
          } // packageOverrides)
      ) {};

    good_times = good_times_1_1_1;

    google_api_accelerated_mobile_page_url_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_accelerated_mobile_page_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_accelerated_mobile_page_url";
              version = "0.1.0";
              sha256 =
                "6b3ba2d731ba2a93c8e4a14c9e64bb7d8056d8784a28fcd5a4e28bc4ad025673";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Retrieves the list of AMP URLs (and
                                equivalent AMP Cache URLs) for a given list of
                                public URL(s).'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/accelerated_mobile_page_url";
            };
          } // packageOverrides)
      ) {};

    google_api_accelerated_mobile_page_url =
      google_api_accelerated_mobile_page_url_0_1_0;

    google_api_ad_exchange_buyer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_ad_exchange_buyer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_ad_exchange_buyer";
              version = "0.1.0";
              sha256 =
                "5e3f4e4eeaac35d08a23881d4d5dbfb5d26cd2fd371e461dac5042f3fedaf8ec";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Accesses your bidding-account information,
                                submits creatives for validation, finds
                                available direct deals, and retrieves
                                performance reports.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/ad_exchange_buyer";
            };
          } // packageOverrides)
      ) {};

    google_api_ad_exchange_buyer =
      google_api_ad_exchange_buyer_0_1_0;

    google_api_ad_exchange_seller_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_ad_exchange_seller";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_ad_exchange_seller";
              version = "0.1.0";
              sha256 =
                "af83ddb3808e743fcf2888af43b41d4d794a7e94b80b9c798d3bf1428617749c";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Accesses the inventory of Ad Exchange seller
                            users and generates reports.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/ad_exchange_seller";
            };
          } // packageOverrides)
      ) {};

    google_api_ad_exchange_seller =
      google_api_ad_exchange_seller_0_1_0;

    google_api_ad_experience_report_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_ad_experience_report";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_ad_experience_report";
              version = "0.1.0";
              sha256 =
                "ad41eed0e2cf7fdbb42a778b0807abdeeef183c2c383c1801edf47c8f2126393";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''View Ad Experience Report data, and get a
                                list of sites that have a significant number of
                                annoying ads.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/ad_experience_report";
            };
          } // packageOverrides)
      ) {};

    google_api_ad_experience_report =
      google_api_ad_experience_report_0_1_0;

    google_api_ad_sense_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_ad_sense";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_ad_sense";
              version = "0.1.0";
              sha256 =
                "46c2b3bbdfb417d1f17809dfa1ce00b7cb4687c0ef4f9d58592b32aada4560bd";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Accesses AdSense publishers&#39; inventory and
                            generates performance reports.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/ad_sense";
            };
          } // packageOverrides)
      ) {};

    google_api_ad_sense = google_api_ad_sense_0_1_0;

    google_api_ad_sense_host_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_ad_sense_host";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_ad_sense_host";
              version = "0.1.0";
              sha256 =
                "289621cd42594f84f927ab5ce48a6a7677b8c87a65214138c01866fdc33a2633";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Generates performance reports, generates ad
                                codes, and provides publisher management
                                capabilities for AdSense Hosts.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/ad_sense_host";
            };
          } // packageOverrides)
      ) {};

    google_api_ad_sense_host = google_api_ad_sense_host_0_1_0;

    google_api_admin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_admin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_admin";
              version = "0.1.0";
              sha256 =
                "e0938190e489678de7e287843009fe0dfd2ebd662030f43803c5779142a78c76";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Fetches reports for the administrators of G
                                Suite customers about the usage, collaboration,
                                security, and risk for their users.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/admin";
            };
          } // packageOverrides)
      ) {};

    google_api_admin = google_api_admin_0_1_0;

    google_api_analytics_reporting_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_analytics_reporting";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_analytics_reporting";
              version = "0.1.0";
              sha256 =
                "2d7c4e4390699c0d8be85634a03507a0b6c02e9729c21b1aaab11997d27dcc5d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Accesses Analytics report data.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/analytics_reporting";
            };
          } // packageOverrides)
      ) {};

    google_api_analytics_reporting =
      google_api_analytics_reporting_0_1_0;

    google_api_android_device_provisioning_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_android_device_provisioning";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_android_device_provisioning";
              version = "0.1.0";
              sha256 =
                "d8b1aee3511efcd5c5b04774bccc533d6ecde816f50d7f35bf8308d043d14896";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Automates reseller integration into Zero
                                Touch Provisioning by assigning devices to
                                customers and creating device reports.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/android_device_provisioning";
            };
          } // packageOverrides)
      ) {};

    google_api_android_device_provisioning =
      google_api_android_device_provisioning_0_1_0;

    google_api_android_enterprise_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_android_enterprise";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_android_enterprise";
              version = "0.1.0";
              sha256 =
                "7b8c1aa3a58631bee64503685d2e4b4ab8c43a83a6411cb8cc5f6c23618b5086";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Manages the deployment of apps to Android for
                            Work users.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/android_enterprise";
            };
          } // packageOverrides)
      ) {};

    google_api_android_enterprise =
      google_api_android_enterprise_0_1_0;

    google_api_android_management_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_android_management";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_android_management";
              version = "0.1.0";
              sha256 =
                "1f09cdb3d4f0715d4a34eb9c14bb645d8dabd38b9a8c230a7ecad1a15d5305f3";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''The Android Management API provides remote
                                enterprise management of Android devices and
                                apps.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/android_management";
            };
          } // packageOverrides)
      ) {};

    google_api_android_management =
      google_api_android_management_0_1_0;

    google_api_app_engine_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_app_engine";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_app_engine";
              version = "0.1.0";
              sha256 =
                "74c0696bc09d4ca1c54636cbf3b450a35071c71fceab1eb40c254038c9a3f9d4";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''The App Engine Admin API enables developers
                                to provision and manage their App Engine
                                applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/app_engine";
            };
          } // packageOverrides)
      ) {};

    google_api_app_engine = google_api_app_engine_0_1_0;

    google_api_app_state_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_app_state";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_app_state";
              version = "0.1.0";
              sha256 =
                "22fc6cf438bd1a827d1a17501e64180661efcf904bd0d4f97ed748a91475c992";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''The Google App State API.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/app_state";
            };
          } // packageOverrides)
      ) {};

    google_api_app_state = google_api_app_state_0_1_0;

    google_api_apps_activity_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_apps_activity";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_apps_activity";
              version = "0.1.0";
              sha256 =
                "0308c021685ec6345862136e0b17aeffbb357009827621b9e022988e6d59db3c";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Provides a historical view of activity.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/apps_activity";
            };
          } // packageOverrides)
      ) {};

    google_api_apps_activity = google_api_apps_activity_0_1_0;

    google_api_big_query_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_big_query";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_big_query";
              version = "0.1.0";
              sha256 =
                "d403e6a0e56acbd2ef02449c6295af27fef27db6fad68ee7862103d4fc44f5cd";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''A data platform for customers to create, manage,
                            share and query data.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/big_query";
            };
          } // packageOverrides)
      ) {};

    google_api_big_query = google_api_big_query_0_1_0;

    google_api_big_query_data_transfer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_big_query_data_transfer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_big_query_data_transfer";
              version = "0.1.0";
              sha256 =
                "2b795c82189fad6b17fe5f69d557792e86810918308599fccc30b76fa55a2950";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Transfers data from partner SaaS applications
                                to Google BigQuery on a scheduled, managed
                                basis.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/big_query_data_transfer";
            };
          } // packageOverrides)
      ) {};

    google_api_big_query_data_transfer =
      google_api_big_query_data_transfer_0_1_0;

    google_api_blogger_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_blogger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_blogger";
              version = "0.1.0";
              sha256 =
                "71f03f921355396c31258b333c0859218a8edf73cfea2444c2b6b0b850f20145";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''API for access to the data within Blogger.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/blogger";
            };
          } // packageOverrides)
      ) {};

    google_api_blogger = google_api_blogger_0_1_0;

    google_api_books_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_books";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_books";
              version = "0.1.0";
              sha256 =
                "d3833332c9e7b153954e8636b075923d85339b9717378a7dea7ed48e438020b7";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Searches for books and manages your Google Books
                            library.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/books";
            };
          } // packageOverrides)
      ) {};

    google_api_books = google_api_books_0_1_0;

    google_api_calendar_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_calendar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_calendar";
              version = "0.1.0";
              sha256 =
                "fd09065a66371654d39e0482e3ca7895b10710e3262b1d7466ed056bec19b300";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Manipulates events and other calendar data.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/calendar";
            };
          } // packageOverrides)
      ) {};

    google_api_calendar = google_api_calendar_0_1_0;

    google_api_civic_info_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_civic_info";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_civic_info";
              version = "0.1.0";
              sha256 =
                "b92b757c16d4493c1c354f0a6b8e7d56a77f0c8ca03be2bce50b0caeeae676d9";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Provides polling places, early vote
                                locations, contest data, election officials, and
                                government representatives for U.S. residential
                                addresses.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/civic_info";
            };
          } // packageOverrides)
      ) {};

    google_api_civic_info = google_api_civic_info_0_1_0;

    google_api_classroom_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_classroom";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_classroom";
              version = "0.1.0";
              sha256 =
                "a19ac47f1cfdb6822cee56339b33a88ccf2ea6dae4550bb8d7f9df42cbfe8822";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Manages classes, rosters, and invitations in
                            Google Classroom.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/classroom";
            };
          } // packageOverrides)
      ) {};

    google_api_classroom = google_api_classroom_0_1_0;

    google_api_cloud_billing_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_billing";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_billing";
              version = "0.1.0";
              sha256 =
                "355f6f5feb3ceddc5c22c21390576c49d1a802762eb4c9090f42335ba9b2a358";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Allows developers to manage billing for their
                                Google Cloud Platform projects
                                programmatically.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_billing";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_billing = google_api_cloud_billing_0_1_0;

    google_api_cloud_build_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_build";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_build";
              version = "0.1.0";
              sha256 =
                "68c2548d6b01989cc82c6418bc38dc0be3b4cf52b1ab6bc4aef2898124e0083c";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Builds container images in the cloud.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_build";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_build = google_api_cloud_build_0_1_0;

    google_api_cloud_debugger_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_debugger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_debugger";
              version = "0.1.0";
              sha256 =
                "55f67d7be3891a1b4dae3a15f280a5ab23d71153aafb3ebbf6ccec52ab457a11";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Examines the call stack and variables of a
                                running application without stopping or slowing
                                it down.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_debugger";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_debugger = google_api_cloud_debugger_0_1_0;

    google_api_cloud_error_reporting_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_error_reporting";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_error_reporting";
              version = "0.1.0";
              sha256 =
                "77365bd238acf69c521d5c7f00c16b3011a9066d921aab5e322dfae612b9e995";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Groups and counts similar errors from cloud
                                services and applications, reports new errors,
                                and provides access to error groups and their
                                associated errors.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_error_reporting";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_error_reporting =
      google_api_cloud_error_reporting_0_1_0;

    google_api_cloud_functions_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_functions";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_functions";
              version = "0.1.0";
              sha256 =
                "44335f425f7a284840d75f5d85ce2a413f8d8c599f17d5bc012d5724fea06d8b";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''API for managing lightweight user-provided
                                functions executed in response to events.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_functions";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_functions = google_api_cloud_functions_0_1_0;

    google_api_cloud_kms_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_kms";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_kms";
              version = "0.1.0";
              sha256 =
                "c62e9c7a33eb92645a89b847ca638dce33fb9ca3f7fd82a218b0e111d4f363cb";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Manages encryption for your cloud services
                                the same way you do on-premises. You can
                                generate, use, rotate, and destroy AES256
                                encryption keys.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_kms";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_kms = google_api_cloud_kms_0_1_0;

    google_api_cloud_resource_manager_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_resource_manager";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_resource_manager";
              version = "0.1.0";
              sha256 =
                "1015a38325e1a10eeaefee131201968f79b54f909d5874a7852cb7e8677cbc0e";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''The Google Cloud Resource Manager API
                                provides methods for creating, reading, and
                                updating project metadata.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_resource_manager";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_resource_manager =
      google_api_cloud_resource_manager_0_1_0;

    google_api_cloud_trace_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_cloud_trace";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_cloud_trace";
              version = "0.1.0";
              sha256 =
                "b55066ec71382db264531377a645a3722c364cb3f9deefa655baf01737fd0a10";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Send and retrieve trace data from Stackdriver
                                Trace. Data is generated and available by
                                default for all App Engine applications. Data
                                from other applications can be written to
                                Stackdriver Trace for display, reporting, and
                                analysis.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/cloud_trace";
            };
          } // packageOverrides)
      ) {};

    google_api_cloud_trace = google_api_cloud_trace_0_1_0;

    google_api_compute_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_compute";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_compute";
              version = "0.1.0";
              sha256 =
                "667aeb6902188b20517826c9a50528bd88cc887f6a191d4454e6e5c4b02fc4b2";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Creates and runs virtual machines on Google Cloud
                            Platform.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/compute";
            };
          } // packageOverrides)
      ) {};

    google_api_compute = google_api_compute_0_1_0;

    google_api_container_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_container";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_container";
              version = "0.1.0";
              sha256 =
                "c006ff411cc2a6b1b65e4819906d93930f3aff8f96bc9aae164b3d7db0f04f61";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''The Google Container Engine API is used for
                                building and managing container based
                                applications, powered by the open source
                                Kubernetes technology.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/container";
            };
          } // packageOverrides)
      ) {};

    google_api_container = google_api_container_0_1_0;

    google_api_content_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_content";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_content";
              version = "0.1.0";
              sha256 =
                "8866fd4dcebc497b6dc7077f895364d46d9e7ec3c41d7efecee92bb545fe1ff9";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Manages product items, inventory, and
                                Merchant Center accounts for Google Shopping.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/content";
            };
          } // packageOverrides)
      ) {};

    google_api_content = google_api_content_0_1_0;

    google_api_custom_search_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_custom_search";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_custom_search";
              version = "0.1.0";
              sha256 =
                "9ee81b2d1e24f4af704079d21847d8a496a3db6ce60a422128b3f7e245e582e4";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Searches over a website or collection of
                            websites'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/custom_search";
            };
          } // packageOverrides)
      ) {};

    google_api_custom_search = google_api_custom_search_0_1_0;

    google_api_dataflow_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_dataflow";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_dataflow";
              version = "0.1.0";
              sha256 =
                "47928320917c99aa6c4208b51b0863c5dcb5dd72d8f72a82e04d9637846207b3";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Manages Google Cloud Dataflow projects on Google
                            Cloud Platform.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/dataflow";
            };
          } // packageOverrides)
      ) {};

    google_api_dataflow = google_api_dataflow_0_1_0;

    google_api_dataproc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_dataproc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_dataproc";
              version = "0.1.0";
              sha256 =
                "3746e630031717af33f6ce5cff9e3bf28599a157f69cf6a1b87c6c497d4440b5";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Manages Hadoop-based clusters and jobs on Google
                            Cloud Platform.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/dataproc";
            };
          } // packageOverrides)
      ) {};

    google_api_dataproc = google_api_dataproc_0_1_0;

    google_api_datastore_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_datastore";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_datastore";
              version = "0.1.0";
              sha256 =
                "20f9e62b21f7f8b083fde8a2bc03444e8360ba8252874a35c5bbc08829f0823d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Accesses the schemaless NoSQL database to
                                provide fully managed, robust, scalable storage
                                for your application.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/datastore";
            };
          } // packageOverrides)
      ) {};

    google_api_datastore = google_api_datastore_0_1_0;

    google_api_deployment_manager_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_deployment_manager";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_deployment_manager";
              version = "0.1.0";
              sha256 =
                "7d0c82f4a1257a187250869091f4e82c4240fadafa4d136ddc5f2c4eb035cd80";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Declares, configures, and deploys complex
                            solutions on Google Cloud Platform.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/deployment_manager";
            };
          } // packageOverrides)
      ) {};

    google_api_deployment_manager =
      google_api_deployment_manager_0_1_0;

    google_api_dlp_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_dlp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_dlp";
              version = "0.1.0";
              sha256 =
                "b80875112b9b5bf941d67173148a7ef86ca284ac84911aac8959787786f7d82d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''The Google Data Loss Prevention API provides
                                methods for detection of privacy-sensitive
                                fragments in text, images, and Google Cloud
                                Platform storage repositories.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/dlp";
            };
          } // packageOverrides)
      ) {};

    google_api_dlp = google_api_dlp_0_1_0;

    google_api_dns_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_dns";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_dns";
              version = "0.1.0";
              sha256 =
                "8fceb49472a99e0efb6315b75e082a5f139dc8a9086b995bd0c0529feec9ded2";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Configures and serves authoritative DNS
                            records.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/dns";
            };
          } // packageOverrides)
      ) {};

    google_api_dns = google_api_dns_0_1_0;

    google_api_double_click_bid_manager_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_double_click_bid_manager";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_double_click_bid_manager";
              version = "0.1.0";
              sha256 =
                "d9c05d643fae7df37d79472a274a1659c8ab8ed56b293a1da0c77ed93825d531";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''API for viewing and managing your reports in
                            DoubleClick Bid Manager.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/double_click_bid_manager";
            };
          } // packageOverrides)
      ) {};

    google_api_double_click_bid_manager =
      google_api_double_click_bid_manager_0_1_0;

    google_api_double_click_search_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_double_click_search";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_double_click_search";
              version = "0.1.0";
              sha256 =
                "c95f4dc756b2cf5e27ab68013cf985977e4752383d89737c8679c38488b2011c";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Reports and modifies your advertising data in
                                DoubleClick Search (for example, campaigns, ad
                                groups, keywords, and conversions).'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/double_click_search";
            };
          } // packageOverrides)
      ) {};

    google_api_double_click_search =
      google_api_double_click_search_0_1_0;

    google_api_drive_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_drive";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_drive";
              version = "0.1.0";
              sha256 =
                "29a94542bcb79c08e6048200091999a516621d08ce7a402fddd3713268fc3209";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Manages files in Drive including uploading,
                                downloading, searching, detecting changes, and
                                updating sharing permissions.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/FIXME";
            };
          } // packageOverrides)
      ) {};

    google_api_drive = google_api_drive_0_1_0;

    google_api_firebase_dynamic_links_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_firebase_dynamic_links";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_firebase_dynamic_links";
              version = "0.1.0";
              sha256 =
                "b66bd3d1cfe927b1c003d2ce034908d8a893bc84b33ecb3917eaa20d5fedec81";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Programmatically creates and manages Firebase
                            Dynamic Links.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/firebase_dynamic_links";
            };
          } // packageOverrides)
      ) {};

    google_api_firebase_dynamic_links =
      google_api_firebase_dynamic_links_0_1_0;

    google_api_firebase_rules_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_firebase_rules";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_firebase_rules";
              version = "0.1.0";
              sha256 =
                "6d6dfacfc9269a42d0c9e7a614d82cccd5982de676a81e40861371ebf10b8759";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Creates and manages rules that determine when
                                a Firebase Rules-enabled service should permit a
                                request.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/FIXME";
            };
          } // packageOverrides)
      ) {};

    google_api_firebase_rules = google_api_firebase_rules_0_1_0;

    google_api_firestore_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_firestore";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_firestore";
              version = "0.1.0";
              sha256 =
                "1aba11955d592a19ff10dba9d50b295a81e0524073e6e40177023e783ca3b63e";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''API for managing the Firestore cloud database.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/firestore";
            };
          } // packageOverrides)
      ) {};

    google_api_firestore = google_api_firestore_0_1_0;

    google_api_fitness_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_fitness";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_fitness";
              version = "0.1.0";
              sha256 =
                "83a2c2198fa96881ec8ffabca8345f948a4e386820ccbd13ac1f322df3e7f60f";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Stores and accesses user data in the fitness
                            store from apps on any platform.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/fitness";
            };
          } // packageOverrides)
      ) {};

    google_api_fitness = google_api_fitness_0_1_0;

    google_api_fonts_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_fonts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_fonts";
              version = "0.1.0";
              sha256 =
                "777d771b05fe734e6bd3d60e0dfe49463eed2ee9c299d72f930c3528c2f62d57";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Accesses the metadata for all families served
                                by Google Fonts, providing a list of families
                                currently available (including available styles
                                and a list of supported script subsets).'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/FIXME";
            };
          } // packageOverrides)
      ) {};

    google_api_fonts = google_api_fonts_0_1_0;

    google_api_games_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_games";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_games";
              version = "0.1.0";
              sha256 =
                "444da1bfc8b68cf099ce55f6df437de05b22e636c3c33a2f8c33319ebf82d28a";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''The API for Google Play Game Services.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/games";
            };
          } // packageOverrides)
      ) {};

    google_api_games = google_api_games_0_1_0;

    google_api_games_management_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_games_management";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_games_management";
              version = "0.1.0";
              sha256 =
                "ede3c8ca231758d41ce77ecb0912b4a8ea09d271b340106415b091b66b087ee7";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''The Management API for Google Play Game
                            Services.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/FIXME";
            };
          } // packageOverrides)
      ) {};

    google_api_games_management = google_api_games_management_0_1_0;

    google_api_genomics_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_genomics";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_genomics";
              version = "0.1.0";
              sha256 =
                "f64cf55ac5bf544c157ca90efe722840d75abd6982ff24d28e4bbad31b9939d2";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Upload, process, query, and search Genomics data
                            in the cloud.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/genomics";
            };
          } // packageOverrides)
      ) {};

    google_api_genomics = google_api_genomics_0_1_0;

    google_api_groups_settings_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_groups_settings";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_groups_settings";
              version = "0.1.0";
              sha256 =
                "f139ace8dcf4a58b3504e919fc8e81c89da7fda30228de8a91e8bbd461c535cf";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Lets you manage permission levels and related
                            settings of a group.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/FIXME";
            };
          } // packageOverrides)
      ) {};

    google_api_groups_settings = google_api_groups_settings_0_1_0;

    google_api_iam_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_iam";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_iam";
              version = "0.1.0";
              sha256 =
                "39e5757439cb5bea00d72f432124783636493e7dab9481ecf12a04842bcbf24d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Manages identity and access control for
                                Google Cloud Platform resources, including the
                                creation of service accounts, which you can use
                                to authenticate to Google and make API calls.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/iam";
            };
          } // packageOverrides)
      ) {};

    google_api_iam = google_api_iam_0_1_0;

    google_api_identity_toolkit_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_identity_toolkit";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_identity_toolkit";
              version = "0.1.0";
              sha256 =
                "49807ef61f16959c8a5c4000130290ea752dc1c8aba171dd092a830c1cf118a5";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Help the third party sites to implement federated
                            login.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/identity_toolkit";
            };
          } // packageOverrides)
      ) {};

    google_api_identity_toolkit = google_api_identity_toolkit_0_1_0;

    google_api_knowledge_graph_search_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_knowledge_graph_search";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_knowledge_graph_search";
              version = "0.1.0";
              sha256 =
                "0bc51bf1d8b9a900b0e03c367c3942dd3d2f66551c18663f37c64544be222df8";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Searches the Google Knowledge Graph for
                            entities.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/knowledge_graph_search";
            };
          } // packageOverrides)
      ) {};

    google_api_knowledge_graph_search =
      google_api_knowledge_graph_search_0_1_0;

    google_api_language_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_language";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_language";
              version = "0.1.0";
              sha256 =
                "e7a288ccce7d8b9e9d72044f43db1696d373571d37854c69c550f418e1d2140f";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Provides natural language understanding
                                technologies to developers. Examples include
                                sentiment analysis, entity recognition, entity
                                sentiment analysis, and text annotations.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/language";
            };
          } // packageOverrides)
      ) {};

    google_api_language = google_api_language_0_1_0;

    google_api_licensing_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_licensing";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_licensing";
              version = "0.1.0";
              sha256 =
                "3cc36420e9fa09134e63fb8cb9b4f44ffbf9d9be1167cc0d2a34ec7c16db705c";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Views and manages licenses for your domain.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/licensing";
            };
          } // packageOverrides)
      ) {};

    google_api_licensing = google_api_licensing_0_1_0;

    google_api_logging_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_logging";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_logging";
              version = "0.1.0";
              sha256 =
                "666ea8bc146e1f1dc5ae6f8a12a0c988b7219745b730b0a2cb36ee7c0b5c9024";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Writes log entries and manages your Stackdriver
                            Logging configuration.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/logging";
            };
          } // packageOverrides)
      ) {};

    google_api_logging = google_api_logging_0_1_0;

    google_api_machine_learning_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_machine_learning";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_machine_learning";
              version = "0.1.0";
              sha256 =
                "f14efcee4e6c331a1b3b398ce8dc2fefa39f36b659fb6ef96f74840c3f2f66e4";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''An API to enable creating and using machine
                            learning models.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/machine_learning";
            };
          } // packageOverrides)
      ) {};

    google_api_machine_learning = google_api_machine_learning_0_1_0;

    google_api_manufacturers_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_manufacturers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_manufacturers";
              version = "0.1.0";
              sha256 =
                "8cc44af6740383f5200dcc293074823ab41e7267a44add05ae79d7c087332ee0";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Public API for managing Manufacturer Center
                            related data.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/manufacturers";
            };
          } // packageOverrides)
      ) {};

    google_api_manufacturers = google_api_manufacturers_0_1_0;

    google_api_monitoring_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_monitoring";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_monitoring";
              version = "0.1.0";
              sha256 =
                "6113b937cece9acd4de739c756c41d71d8c978a3be724ec8a80780febb312845";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Manages your Stackdriver Monitoring data and
                                configurations. Most projects must be associated
                                with a Stackdriver account, with a few
                                exceptions as noted on the individual method
                                pages.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/monitoring";
            };
          } // packageOverrides)
      ) {};

    google_api_monitoring = google_api_monitoring_0_1_0;

    google_api_o_auth2_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_o_auth2";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_o_auth2";
              version = "0.1.0";
              sha256 =
                "468584f0e812bcf29c0594f07d0826b3c3d2df95f45681f0459db5d639b7db37";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Obtains end-user authorization grants for use
                            with other Google APIs.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/o_auth2";
            };
          } // packageOverrides)
      ) {};

    google_api_o_auth2 = google_api_o_auth2_0_1_0;

    google_api_os_login_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_os_login";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_os_login";
              version = "0.1.0";
              sha256 =
                "80b40b8c10535244712c928b5060cb8087a15bbb8616fd3170463c2f35556df0";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Manages OS login configuration for Directory API
                            users.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/os_login";
            };
          } // packageOverrides)
      ) {};

    google_api_os_login = google_api_os_login_0_1_0;

    google_api_page_speed_online_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_page_speed_online";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_page_speed_online";
              version = "0.1.0";
              sha256 =
                "03bee9dce1105b3eee920797dddca274572bdacd612bd5e0f428943481d6813b";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Analyzes the performance of a web page and
                                provides tailored suggestions to make that page
                                faster.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/page_speed_online";
            };
          } // packageOverrides)
      ) {};

    google_api_page_speed_online =
      google_api_page_speed_online_0_1_0;

    google_api_partners_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_partners";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_partners";
              version = "0.1.0";
              sha256 =
                "c05aec89286e650c4a94c24310c2686512d3a21582d8eeb042c588953213d60d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Searches certified companies and creates
                                contact leads with them, and also audits the
                                usage of clients.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/partners";
            };
          } // packageOverrides)
      ) {};

    google_api_partners = google_api_partners_0_1_0;

    google_api_people_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_people";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_people";
              version = "0.1.0";
              sha256 =
                "f46e2e46adccba979ecfec4e233965f2057e7f0c30f481f52e80932169ae0d87";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Provides access to information about profiles and
                            contacts.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/people";
            };
          } // packageOverrides)
      ) {};

    google_api_people = google_api_people_0_1_0;

    google_api_plus_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_plus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_plus";
              version = "0.1.0";
              sha256 =
                "6a22806391b6c2841b816d81dbfd335d4bd33239ee2ecd87a446ff28171103a7";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Builds on top of the Google+ platform.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/plus";
            };
          } // packageOverrides)
      ) {};

    google_api_plus = google_api_plus_0_1_0;

    google_api_proximity_beacon_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_proximity_beacon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_proximity_beacon";
              version = "0.1.0";
              sha256 =
                "3f8a30f23535e8b318c23dd504b514c1dff1edddd8383e11651645ba8144015d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Registers, manages, indexes, and searches
                            beacons.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/proximity_beacon";
            };
          } // packageOverrides)
      ) {};

    google_api_proximity_beacon = google_api_proximity_beacon_0_1_0;

    google_api_pub_sub_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_pub_sub";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_pub_sub";
              version = "0.1.0";
              sha256 =
                "755d1a2346bb9fc8507b6f875ed6c98e1023091e7897344fcedd529b2a577988";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Provides reliable, many-to-many, asynchronous
                            messaging between applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/pub_sub";
            };
          } // packageOverrides)
      ) {};

    google_api_pub_sub = google_api_pub_sub_0_1_0;

    google_api_reseller_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_reseller";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_reseller";
              version = "0.1.0";
              sha256 =
                "b3aab07bf80feec832c29dfc127f518c8a283f82c2d794f4566cbe3d3bcf1a18";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Creates and manages your customers and their
                            subscriptions.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/reseller";
            };
          } // packageOverrides)
      ) {};

    google_api_reseller = google_api_reseller_0_1_0;

    google_api_runtime_config_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_runtime_config";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_runtime_config";
              version = "0.1.0";
              sha256 =
                "ae32c1d80031a45b80c1452fa12e8313a11dfee3ecb1069db579a905c0c10045";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''The Runtime Configurator allows you to
                                dynamically configure and expose variables
                                through Google Cloud Platform. In addition, you
                                can also set Watchers and Waiters that will
                                watch for changes to your data and return based
                                on certain conditions.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/runtime_config";
            };
          } // packageOverrides)
      ) {};

    google_api_runtime_config = google_api_runtime_config_0_1_0;

    google_api_safe_browsing_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_safe_browsing";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_safe_browsing";
              version = "0.1.0";
              sha256 =
                "11449b9018922bceb437dabd14e705837a22ca49d6fbe3b505783bdd2794ba92";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Enables client applications to check web
                                resources (most commonly URLs) against
                                Google-generated lists of unsafe web
                                resources.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/safe_browsing";
            };
          } // packageOverrides)
      ) {};

    google_api_safe_browsing = google_api_safe_browsing_0_1_0;

    google_api_script_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_script";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_script";
              version = "0.1.0";
              sha256 =
                "ca1ca0e4a5f20b2cbfe00b356faca9bf35632b06e2f1903ab88eec96c43a98f9";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Executes functions in Google Apps Script
                            projects.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/script";
            };
          } // packageOverrides)
      ) {};

    google_api_script = google_api_script_0_1_0;

    google_api_search_console_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_search_console";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_search_console";
              version = "0.1.0";
              sha256 =
                "4af8745346d93dd2dd5644722545a779b5d8001e6b92e9d2756d1d9da821f32e";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Provides tools for running validation tests
                            against single URLs'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/search_console";
            };
          } // packageOverrides)
      ) {};

    google_api_search_console = google_api_search_console_0_1_0;

    google_api_service_control_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_service_control";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_service_control";
              version = "0.1.0";
              sha256 =
                "18cb297e89ea7995ef2496755d9dfe6d9cbfc18ed4850505aafd24f9186ad230";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Google Service Control provides control plane
                                functionality to managed services, such as
                                logging, monitoring, and status checks.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/service_control";
            };
          } // packageOverrides)
      ) {};

    google_api_service_control = google_api_service_control_0_1_0;

    google_api_service_management_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_service_management";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_service_management";
              version = "0.1.0";
              sha256 =
                "a8b35cb8f1cd2cd24c5e2d2329ac1bfc83483f989c916e07c7086d49116095f0";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Google Service Management allows service
                                producers to publish their services on Google
                                Cloud Platform so that they can be discovered
                                and used by service consumers.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/service_management";
            };
          } // packageOverrides)
      ) {};

    google_api_service_management =
      google_api_service_management_0_1_0;

    google_api_service_user_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_service_user";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_service_user";
              version = "0.1.0";
              sha256 =
                "75cfcf9e2d6f2145648097f2dbc3ee6309d8a8ccec1bc08b1dca8429e5446fee";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Enables services that service consumers want
                                to use on Google Cloud Platform, lists the
                                available or enabled services, or disables
                                services that service consumers no longer
                                use.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/service_user";
            };
          } // packageOverrides)
      ) {};

    google_api_service_user = google_api_service_user_0_1_0;

    google_api_sheets_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_sheets";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_sheets";
              version = "0.1.0";
              sha256 =
                "68f7654c7cd86db32a6d1386205b6faa50b689b5d08f658e48ee889ec9b45970";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Reads and writes Google Sheets.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/sheets";
            };
          } // packageOverrides)
      ) {};

    google_api_sheets = google_api_sheets_0_1_0;

    google_api_site_verification_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_site_verification";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_site_verification";
              version = "0.1.0";
              sha256 =
                "48fad909d044860d33e37ca42a1241c9b07198e6e22f9d098f3f246de2904981";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Verifies ownership of websites or domains with
                            Google.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/site_verification";
            };
          } // packageOverrides)
      ) {};

    google_api_site_verification =
      google_api_site_verification_0_1_0;

    google_api_slides_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_slides";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_slides";
              version = "0.1.0";
              sha256 =
                "c9c976d4f9d37e9f341cf8e2d3e1fad8649102493c103882e498c62eff183bf6";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''An API for creating and editing Google Slides
                            presentations.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/slides";
            };
          } // packageOverrides)
      ) {};

    google_api_slides = google_api_slides_0_1_0;

    google_api_source_repo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_source_repo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_source_repo";
              version = "0.1.0";
              sha256 =
                "5080e822ed592628def3e9830724ab05d2de68ef7b602ae33ad420fe51ac9819";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Access source code repositories hosted by
                            Google.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/source_repo";
            };
          } // packageOverrides)
      ) {};

    google_api_source_repo = google_api_source_repo_0_1_0;

    google_api_spanner_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_spanner";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_spanner";
              version = "0.1.0";
              sha256 =
                "bc5eb5558dedeeeb3b8c88e9924c2216128031ce3e034be7f891ee39c8efc767";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Cloud Spanner is a managed, mission-critical,
                                globally consistent and scalable relational
                                database service.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/spanner";
            };
          } // packageOverrides)
      ) {};

    google_api_spanner = google_api_spanner_0_1_0;

    google_api_spectrum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_spectrum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_spectrum";
              version = "0.1.0";
              sha256 =
                "6f254f963ece39eb404166647b04d9b3490c5aa1656a3f813fc4430a038f3d83";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''API for spectrum-management functions.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/spectrum";
            };
          } // packageOverrides)
      ) {};

    google_api_spectrum = google_api_spectrum_0_1_0;

    google_api_speech_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_speech";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_speech";
              version = "0.1.0";
              sha256 =
                "2061b780b86fd409d8da33908a03f2d0a035efd118ad16663913bc2d0bf9854b";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Converts audio to text by applying powerful
                            neural network models.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/speech";
            };
          } // packageOverrides)
      ) {};

    google_api_speech = google_api_speech_0_1_0;

    google_api_sql_admin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_sql_admin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_sql_admin";
              version = "0.1.0";
              sha256 =
                "e76205e60bf91dfd231629ab1e34f5b13eddb271788e19461721eafb39aac3de";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Creates and configures Cloud SQL instances,
                                which provide fully-managed MySQL databases.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/sql_admin";
            };
          } // packageOverrides)
      ) {};

    google_api_sql_admin = google_api_sql_admin_0_1_0;

    google_api_storage_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_storage";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_storage";
              version = "0.1.0";
              sha256 =
                "2da3d60c7cb67fa6aef07a6115c766305c9ae48c7f45f13b2379f5f6b96f6016";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Stores and retrieves potentially large, immutable
                            data objects.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/storage";
            };
          } // packageOverrides)
      ) {};

    google_api_storage = google_api_storage_0_1_0;

    google_api_storage_transfer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_storage_transfer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_storage_transfer";
              version = "0.1.0";
              sha256 =
                "12c82c567a82474ceb5b89a5fb4964971d2889994665c0edd70e6b3b10e56044";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Transfers data from external data sources to
                                a Google Cloud Storage bucket or between Google
                                Cloud Storage buckets.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/storage_transfer";
            };
          } // packageOverrides)
      ) {};

    google_api_storage_transfer = google_api_storage_transfer_0_1_0;

    google_api_street_view_publish_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_street_view_publish";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_street_view_publish";
              version = "0.1.0";
              sha256 =
                "7ca74724c154c17f64c9a7276a8672b6adcc7341c7849468bfc000a4f3509b24";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Publishes 360 photos to Google Maps, along
                                with position, orientation, and connectivity
                                metadata. Apps can offer an interface for
                                positioning, connecting, and uploading
                                user-generated Street View images.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/street_view_publish";
            };
          } // packageOverrides)
      ) {};

    google_api_street_view_publish =
      google_api_street_view_publish_0_1_0;

    google_api_surveys_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_surveys";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_surveys";
              version = "0.1.0";
              sha256 =
                "8af89e738ef45ecc9fd794e2a956e731c85b722180a8e1b2f1d33779a5bfd482";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Creates and conducts surveys, lists the
                                surveys that an authenticated user owns, and
                                retrieves survey results and information about
                                specified surveys.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/surveys";
            };
          } // packageOverrides)
      ) {};

    google_api_surveys = google_api_surveys_0_1_0;

    google_api_tag_manager_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_tag_manager";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_tag_manager";
              version = "0.1.0";
              sha256 =
                "6d64c84cca289f01ee16b20013360f2e24405bc62c17b8372f33905397802c8d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Accesses Tag Manager accounts and containers.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/tag_manager";
            };
          } // packageOverrides)
      ) {};

    google_api_tag_manager = google_api_tag_manager_0_1_0;

    google_api_tasks_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_tasks";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_tasks";
              version = "0.1.0";
              sha256 =
                "508b352c47c9074b371e203059dbfcf3896daba4b39906890a1a29aaf8e29463";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Lets you manage your tasks and task lists.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/tasks";
            };
          } // packageOverrides)
      ) {};

    google_api_tasks = google_api_tasks_0_1_0;

    google_api_tool_results_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_tool_results";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_tool_results";
              version = "0.1.0";
              sha256 =
                "f1ab3a2a03775661e75541a5e891a2a3f4d75d74b7b37d69361628efbc149cb1";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Reads and publishes results from Firebase Test
                            Lab.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/tool_results";
            };
          } // packageOverrides)
      ) {};

    google_api_tool_results = google_api_tool_results_0_1_0;

    google_api_translate_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_translate";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_translate";
              version = "0.1.0";
              sha256 =
                "4ab1381261e0f5a7a13a92581bc32116e18ed91b11838458723bf66ebf908c8a";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''The Google Cloud Translation API lets
                                websites and programs integrate with Google
                                Translate programmatically.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/translate";
            };
          } // packageOverrides)
      ) {};

    google_api_translate = google_api_translate_0_1_0;

    google_api_url_shortener_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_url_shortener";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_url_shortener";
              version = "0.1.0";
              sha256 =
                "05ec1079f355b103276f5b5e84c41fdbeeabad89d577f2a3fdc13cf307c717e4";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Lets you create, inspect, and manage goo.gl short
                            URLs'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/url_shortener";
            };
          } // packageOverrides)
      ) {};

    google_api_url_shortener = google_api_url_shortener_0_1_0;

    google_api_vault_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_vault";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_vault";
              version = "0.1.0";
              sha256 =
                "0196096c92ad4791221d81f7b80dfa34b5257a272ec32ff6e94f704331b3e5df";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Add archiving and eDiscovery to G Suite.
                                Manage, retain, search and export your
                                organization’s email and on-the-record chats.
                                Vault is included with G Suite`s Business and
                                Enterprise editions.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/vault";
            };
          } // packageOverrides)
      ) {};

    google_api_vault = google_api_vault_0_1_0;

    google_api_video_intelligence_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_video_intelligence";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_video_intelligence";
              version = "0.1.0";
              sha256 =
                "61a9d5f4a3ae528333b8b22736425535ef5f7d77445119c642b61e53b3767459";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Google Cloud Video Intelligence API.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/video_intelligence";
            };
          } // packageOverrides)
      ) {};

    google_api_video_intelligence =
      google_api_video_intelligence_0_1_0;

    google_api_vision_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_vision";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_vision";
              version = "0.1.0";
              sha256 =
                "c6b55bfa87a6a5a437ec5130e9055872798c328d4b01b7c26f0f58e8dc35ad62";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Integrates Google Vision features, including
                                image labeling, face, logo, and landmark
                                detection, optical character recognition (OCR),
                                and detection of explicit content, into
                                applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/vision";
            };
          } // packageOverrides)
      ) {};

    google_api_vision = google_api_vision_0_1_0;

    google_api_webmaster_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_webmaster";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_webmaster";
              version = "0.1.0";
              sha256 =
                "a71a3557a50e80362083b850a68b03d4477991e7c464d29b1272043ecb4fc912";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''View Google Search Console data for your verified
                            sites.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/webmaster";
            };
          } // packageOverrides)
      ) {};

    google_api_webmaster = google_api_webmaster_0_1_0;

    google_api_you_tube_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_you_tube";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_you_tube";
              version = "0.1.0";
              sha256 =
                "40f177afc9006957eeaed639cf45ba837e2b06ef87f4aed8f51723f20d576088";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Supports core YouTube features, such as
                                uploading videos, creating and managing
                                playlists, searching for content, and much
                                more.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/you_tube";
            };
          } // packageOverrides)
      ) {};

    google_api_you_tube = google_api_you_tube_0_1_0;

    google_api_you_tube_analytics_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_you_tube_analytics";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_you_tube_analytics";
              version = "0.1.0";
              sha256 =
                "281bb6d7408b734aa42b4640f573b003716a4a335c187dba3bd20d070b5fc77c";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              description = ''Retrieves your YouTube Analytics data.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/you_tube_analytics";
            };
          } // packageOverrides)
      ) {};

    google_api_you_tube_analytics =
      google_api_you_tube_analytics_0_1_0;

    google_api_you_tube_reporting_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, google_gax_0_1_0 }:
          buildMix ({
            name = "google_api_you_tube_reporting";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_api_you_tube_reporting";
              version = "0.1.0";
              sha256 =
                "36e4bb51475ba1018deef0bf81153a44e317d85688bababd7890e968bfe5d89d";
            };
            beamDeps  = [ google_gax_0_1_0 ];

            meta = {
              longDescription = ''Schedules reporting jobs containing your
                                YouTube Analytics data and downloads the
                                resulting bulk data reports in the form of CSV
                                files.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/you_tube_reporting";
            };
          } // packageOverrides)
      ) {};

    google_api_you_tube_reporting =
      google_api_you_tube_reporting_0_1_0;

    google_calendar_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_2 }:
          buildMix ({
            name = "google_calendar";
            version = "0.2.1";
            src = fetchHex {
              pkg = "google_calendar";
              version = "0.2.1";
              sha256 =
                "dbce00d169910c16fb11a7090e386dd433aa45e1b2c1e02d96fdf49e70717d0c";
            };
            beamDeps  = [ oauth2_0_9_2 ];

            meta = {
              description = ''A simple wrapper for Google Calendar API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tung6192/google_calendar";
            };
          } // packageOverrides)
      ) {};

    google_calendar = google_calendar_0_2_1;

    google_calendar_ex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_2 }:
          buildMix ({
            name = "google_calendar_ex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "google_calendar_ex";
              version = "0.1.1";
              sha256 =
                "1dee1b9270a9e05aac176a9183f58b3b8caa371d3c0a43d092c94aca4bc943ae";
            };
            beamDeps  = [ oauth2_0_9_2 ];

            meta = {
              description = ''A simple wrapper for Google Calendar API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tung6192/google_calendar";
            };
          } // packageOverrides)
      ) {};

    google_calendar_ex = google_calendar_ex_0_1_1;

    google_civic_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_civic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_civic";
              version = "0.1.0";
              sha256 =
                "6f1376222160040e3569da8873a948abe54486b76558bf4656a9960e312f20f2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''This package gives a very small HTTPoison
                                interface for the Google Civic Information
                                API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andjosh/google_civic";
            };
          } // packageOverrides)
      ) {};

    google_civic = google_civic_0_1_0;

    google_fit_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_fit";
            version = "0.2.4";
            src = fetchHex {
              pkg = "google_fit";
              version = "0.2.4";
              sha256 =
                "300f1d797a37e62bdc4030c2ace7f98079548069e65a39bf5082ff72bf4a1716";
            };
            beamDeps  = [ oauth2_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''GoogleFit API wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsubery/google_fit";
            };
          } // packageOverrides)
      ) {};

    google_fit = google_fit_0_2_4;

    google_gax_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_1_0_0
        }:
          buildMix ({
            name = "google_gax";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_gax";
              version = "0.1.0";
              sha256 =
                "1d304b98dec2ce47ac0d439fbf9406868366f89ec4e4760a35dbecaeeaefc33d";
            };
            beamDeps  = [ poison_3_1_0 tesla_1_0_0 ];

            meta = {
              description = ''Google API Extensions'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/GoogleCloudPlatform/elixir-google-api/tree/master/clients/gax";
            };
          } // packageOverrides)
      ) {};

    google_gax = google_gax_0_1_0;

    google_places_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_places_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_places_api";
              version = "0.1.0";
              sha256 =
                "c6ad2b4afd10b614a7fb1d6ad8a19bf9b3c8f49e1e3bac29fbe967b5e6d421e6";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A simple lightweight API wrapper for the google
                            places api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/siyomai/google_places_api";
            };
          } // packageOverrides)
      ) {};

    google_places_api = google_places_api_0_1_0;

    google_protos_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, protobuf_0_5_4 }:
          buildMix ({
            name = "google_protos";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_protos";
              version = "0.1.0";
              sha256 =
                "ff5564525f89d2638a4cfa9fb4d31e9ee9d9d7cb937b3e8a95f558440c039e1b";
            };
            beamDeps  = [ protobuf_0_5_4 ];

            meta = {
              description = ''Protos by Google'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tony612/google-protos";
            };
          } // packageOverrides)
      ) {};

    google_protos = google_protos_0_1_0;

    google_recaptcha_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "google_recaptcha";
            version = "0.1.6";
            src = fetchHex {
              pkg = "google_recaptcha";
              version = "0.1.6";
              sha256 =
                "07dcc00a36dda42f92819b354a2830ffbbacf1e736ee4c0acbf11265211c9201";
            };
            beamDeps  = [ httpoison_1_2_0 jason_1_1_1 ];

            meta = {
              description = ''Google Recaptcha API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shinyscorpion/google_recaptcha";
            };
          } // packageOverrides)
      ) {};

    google_recaptcha = google_recaptcha_0_1_6;

    google_sheets_2_0_12 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          httpoison_0_13_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "google_sheets";
            version = "2.0.12";
            src = fetchHex {
              pkg = "google_sheets";
              version = "2.0.12";
              sha256 =
                "2bc0d1ce7f05ba68666c180460fd1e6205d0392b06c4fad5935a33bb000a1e5c";
            };
            beamDeps  = [ hackney_1_13_0 httpoison_0_13_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''OTP application for fetching and polling Google
                            spreadsheet data in CSV format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GrandCru/GoogleSheets";
            };
          } // packageOverrides)
      ) {};

    google_sheets = google_sheets_2_0_12;

    google_token_1_0_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jose_1_7_9,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "google_token";
            version = "1.0.5";
            src = fetchHex {
              pkg = "google_token";
              version = "1.0.5";
              sha256 =
                "a085c3614db453825f321701666bb1841f2ff903f312a004f05c800ed9b41381";
            };

            beamDeps  = [ jose_1_7_9 jsx_2_8_0 ];

            meta = {
              description = ''Google ID token verifier'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruel/google-token-erlang";
            };
          } // packageOverrides)
      ) {};

    google_token = google_token_1_0_5;

    goomoji_translator_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "goomoji_translator";
            version = "0.0.2";
            src = fetchHex {
              pkg = "goomoji_translator";
              version = "0.0.2";
              sha256 =
                "b794dcccc306c4c5712895456c28012e1b9f8e8496392bafcfa9c1fc2c251f82";
            };

            meta = {
              description = ''Used to change goomoji codes into normal emoji
                            codes'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/azranel/goomoji-translator_elixir";
            };
          } // packageOverrides)
      ) {};

    goomoji_translator = goomoji_translator_0_0_2;

    goth_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          json_web_token_0_2_10,
          poison_2_2_0
        }:
          buildMix ({
            name = "goth";
            version = "0.3.2";
            src = fetchHex {
              pkg = "goth";
              version = "0.3.2";
              sha256 =
                "20c3ae83d8a0893b6931f45d58a0533dcb2d19616a948a82089bee619efd6fd7";
            };
            beamDeps  = [ httpoison_0_13_0 json_web_token_0_2_10 poison_2_2_0
                      ];

            meta = {
              longDescription = ''A simple library to generate and retrieve
                                Oauth2 tokens for use with Google Cloud Service
                                accounts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/goth";
            };
          } // packageOverrides)
      ) {};

    gpio_rpi_0_2_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "gpio_rpi";
            version = "0.2.2";
            src = fetchHex {
              pkg = "gpio_rpi";
              version = "0.2.2";
              sha256 =
                "d6a17e0cc4d69f6e161e12e0c41be5704cd5150154bbbf364262343bfbb7647b";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Elixir access to the GPIO interface on Raspberry
                            PI>'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Hermanverschooten/gpio_rpi";
            };
          } // packageOverrides)
      ) {};

    gpio_rpi = gpio_rpi_0_2_2;

    gproc_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gproc";
            version = "0.3.1";
            src = fetchHex {
              pkg = "gproc";
              version = "0.3.1";
              sha256 =
                "3c449925a5cbf57cc40d13c6c282bc1080b5ed3bad97e1acdbe969fd63a65fce";
            };

            meta = {
              description = ''Extended process registry for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/gproc";
            };
          } // packageOverrides)
      ) {};

    gproc_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gproc";
            version = "0.5.0";
            src = fetchHex {
              pkg = "gproc";
              version = "0.5.0";
              sha256 =
                "5bc0fa4e999a6665b92ce57a7f12d7e9d1c26bfc39b0f657994be05cd3818b18";
            };

            meta = {
              description = ''Extended process registry for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/gproc";
            };
          } // packageOverrides)
      ) {};

    gproc_0_6_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gproc";
            version = "0.6.1";
            src = fetchHex {
              pkg = "gproc";
              version = "0.6.1";
              sha256 =
                "5506435afbc62de6beb2ade24356a2a6c26c2046e250f845f0676589e86e96ab";
            };

            meta = {
              description = ''Extended process registry for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/gproc";
            };
          } // packageOverrides)
      ) {};

    gproc_0_8_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gproc";
            version = "0.8.0";
            src = fetchHex {
              pkg = "gproc";
              version = "0.8.0";
              sha256 =
                "580adafa56463b75263ef5a5df4c86af321f68694e7786cb057fd805d1e2a7de";
            };

            meta = {
              description = ''Extended process registry for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/gproc";
            };
          } // packageOverrides)
      ) {};

    gproc = gproc_0_8_0;

    gpx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sweet_xml_0_6_5 }:
          buildMix ({
            name = "gpx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gpx";
              version = "0.1.0";
              sha256 =
                "d4de0c3adfc06dbdb1069e10416981ea94ca4ca7c8f294908ed0fe0f2ec23f31";
            };
            beamDeps  = [ sweet_xml_0_6_5 ];

            meta = {
              description = ''A GPX parsing library.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    gpx = gpx_0_1_0;

    graceful_stop_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graceful_stop";
            version = "0.2.0";
            src = fetchHex {
              pkg = "graceful_stop";
              version = "0.2.0";
              sha256 =
                "d59a9b0b73198e5c1dab344f686ff62aa34c834ba2fcab38b32b20e692f2e841";
            };

            meta = {
              description = ''Gracefully stop the system after running shutdown
                            hooks. Also catches SIGTERM.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/botsqd/match_engine";
            };
          } // packageOverrides)
      ) {};

    graceful_stop = graceful_stop_0_2_0;

    graditar_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          color_utils_0_2_0,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "graditar";
            version = "2.0.0";
            src = fetchHex {
              pkg = "graditar";
              version = "2.0.0";
              sha256 =
                "e4f8d46c246a1e85190dbd7e2d9ce3f65c1c05ee2760c036e8cbdfbc4e7f6fdd";
            };
            beamDeps  = [ color_utils_0_2_0 xml_builder_2_1_0 ];

            meta = {
              description = ''A set of helper modules to generate
                            gradient-based avatars.'';
              license = stdenv.lib.licenses.isc;
            };
          } // packageOverrides)
      ) {};

    graditar = graditar_2_0_0;

    grafana_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "grafana";
            version = "0.1.3";
            src = fetchHex {
              pkg = "grafana";
              version = "0.1.3";
              sha256 =
                "6e31684c953cf8e1e51e7282442a6d91c72c11a75716fe86cfbcdf292ac33599";
            };
            beamDeps  = [ httpotion_3_1_0 poison_2_2_0 ];

            meta = {
              description = ''Library for interacting with the Grafana API in
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/BoringButGreat/grafana";
            };
          } // packageOverrides)
      ) {};

    grafana = grafana_0_1_3;

    granderl_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "granderl";
            version = "0.1.5";
            src = fetchHex {
              pkg = "granderl";
              version = "0.1.5";
              sha256 =
                "0641473f29bc3211c832a6dd3adaa04544a5dffc1c62372556946f236df2dad6";
            };
            compilePorts = true;

            meta = {
              description = ''Fast-and-loose PRNG experiments'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tokenrove/granderl";
            };
          } // packageOverrides)
      ) {};

    granderl = granderl_0_1_5;

    graphbrewer_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphbrewer";
            version = "0.1.8";
            src = fetchHex {
              pkg = "graphbrewer";
              version = "0.1.8";
              sha256 =
                "e77a31a18312d8156eb0236bad2b48686655757411c3a3e30139cd1d6c8d6b1e";
            };

            meta = {
              description = ''A (working) graph library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Langhaarzombie/graph-brewer";
            };
          } // packageOverrides)
      ) {};

    graphbrewer = graphbrewer_0_1_8;

    graphene_client_ex_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          flow_0_14_0,
          gen_stage_0_14_0,
          poison_2_2_0,
          websocket_client_1_2_4
        }:
          buildMix ({
            name = "graphene_client_ex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "graphene_client_ex";
              version = "0.4.0";
              sha256 =
                "4fb926ed2cdd824f54e4db163ff349049982dbdb1e8eb62c87443829e906fcfa";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          flow_0_14_0
                          gen_stage_0_14_0
                          poison_2_2_0
                          websocket_client_1_2_4
                        ];

            meta = {
              description = ''Elixir websockets library and utilities for
                            Bitshares/Graphene 2.0 blockchain'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/graphene_client_ex";
            };
          } // packageOverrides)
      ) {};

    graphene_client_ex = graphene_client_ex_0_4_0;

    grapher_0_7_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "grapher";
            version = "0.7.2";
            src = fetchHex {
              pkg = "grapher";
              version = "0.7.2";
              sha256 =
                "a4be1da61492b26c41ef895d29d673a24628619661784ce9cdbece4a885200ff";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''A GraphQL client written in Elixir, providing
                                document storage, management of multiple schemas
                                and facilities for HTTP based schema auth.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/apartmenttherapy/grapher";
            };
          } // packageOverrides)
      ) {};

    grapher = grapher_0_7_2;

    graphex_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "graphex";
              version = "0.2.1";
              sha256 =
                "9279db515110de152479903488b1df6ad2de409f5b48d00fac55211bfab2e728";
            };

            meta = {
              description = ''A task graph execution library for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/graphex";
            };
          } // packageOverrides)
      ) {};

    graphex = graphex_0_2_1;

    graphiter_1_0_5 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "graphiter";
            version = "1.0.5";
            src = fetchHex {
              pkg = "graphiter";
              version = "1.0.5";
              sha256 =
                "4a6a753a77451a0badda5c0b684c4ee33ca473dc30a15f7d2fa8b476d60436a3";
            };
            beamDeps  = [ supervisor3_1_1_5 ];

            meta = {
              description = ''Graphite (carbon) metrics reporter for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/graphite-erlang";
            };
          } // packageOverrides)
      ) {};

    graphiter_1_0_6 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "graphiter";
            version = "1.0.6";
            src = fetchHex {
              pkg = "graphiter";
              version = "1.0.6";
              sha256 =
                "09921ccc3a4ddcb8b69be07b0a2a76ce1c39e9929972666bfffa53628db6bdf9";
            };
            beamDeps  = [ supervisor3_1_1_5 ];

            meta = {
              description = ''Graphite (carbon) metrics reporter for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/graphite-erlang";
            };
          } // packageOverrides)
      ) {};

    graphiter = graphiter_1_0_6;

    graphitex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphitex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "graphitex";
              version = "0.2.0";
              sha256 =
                "377fca944d79fd0e472b2e90cf3fd8d9ad8d7723d42bd4e7ebc82dc01b63acef";
            };

            meta = {
              description = ''Graphite tcp client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msoedov/graphitex";
            };
          } // packageOverrides)
      ) {};

    graphitex = graphitex_0_2_0;

    graphito_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          git_hooks_0_2_0,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "graphito";
            version = "0.1.3";
            src = fetchHex {
              pkg = "graphito";
              version = "0.1.3";
              sha256 =
                "35d88a8c4faf461939495c489c0b3a9625e7fe9ea25f0350f56de4922053729e";
            };
            beamDeps  = [ git_hooks_0_2_0 poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''Server utils to automate common tasks like
                            pagination or authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qgadrian/graphito";
            };
          } // packageOverrides)
      ) {};

    graphito = graphito_0_1_3;

    graphixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "graphixir";
              version = "0.0.1";
              sha256 =
                "8d355dc2ac225c2d74f15707908103ca051c74ef1668abf5240f6d3582750518";
            };

            meta = {
              description = ''Graphite framework for elixir'';

            };
          } // packageOverrides)
      ) {};

    graphixir = graphixir_0_0_1;

    graphmath_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphmath";
            version = "1.0.3";
            src = fetchHex {
              pkg = "graphmath";
              version = "1.0.3";
              sha256 =
                "4223ed3463b7919806c86d647155d507b02cb71001e770dd4a652c3190cc3ca9";
            };

            meta = {
              longDescription = ''Graphmath is a vector and matrix library for
                                doing 2D and 3D mathemtical operations.'';
              license = with stdenv.lib.licenses; [ free wtfpl free ];
              homepage = "https://github.com/crertel/graphmath";
            };
          } // packageOverrides)
      ) {};

    graphmath = graphmath_1_0_3;

    graphql_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphql";
            version = "0.3.2";
            src = fetchHex {
              pkg = "graphql";
              version = "0.3.2";
              sha256 =
                "08b635bfe8383ccb6b250c9b586322e79dda2edac42f541f44730cc5fa218007";
            };

            meta = {
              description = ''GraphQL Elixir implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/graphql-elixir/graphql";
            };
          } // packageOverrides)
      ) {};

    graphql = graphql_0_3_2;

    graphql_erlang_0_2_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "graphql_erlang";
            version = "0.2.10";
            src = fetchHex {
              pkg = "graphql_erlang";
              version = "0.2.10";
              sha256 =
                "90d08b4df700cf6a9645e6b5ec8821e57a2ecbbd561664b5f234b3b833497052";
            };

            meta = {
              description = ''GraphQL Erlang Implementation'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/graphql-erlang/graphql";
            };
          } // packageOverrides)
      ) {};

    graphql_erlang = graphql_erlang_0_2_10;

    graphql_ex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphql_ex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "graphql_ex";
              version = "0.0.1";
              sha256 =
                "51884d5275d354b915db03eb390e858ead88b3f3e4f699b2fa7dc8eb442bc343";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    graphql_ex = graphql_ex_0_0_1;

    graphvix_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphvix";
            version = "0.5.0";
            src = fetchHex {
              pkg = "graphvix";
              version = "0.5.0";
              sha256 =
                "b000d53297e2fadf6d37cc392d22d71dbbbce7ddd23736e7673753e1d7157ce8";
            };

            meta = {
              description = ''Elixir interface for Graphviz'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mikowitz/graphvix";
            };
          } // packageOverrides)
      ) {};

    graphvix_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphvix";
            version = "1.0.0";
            src = fetchHex {
              pkg = "graphvix";
              version = "1.0.0";
              sha256 =
                "87ea2fd6c464b434eeafc8bf6fd95d8371e24eac687ad0ef2b7929efd9076d64";
            };

            meta = {
              description = ''Elixir interface for Graphviz'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mikowitz/graphvix";
            };
          } // packageOverrides)
      ) {};

    graphvix = graphvix_1_0_0;

    grapple_1_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "grapple";
            version = "1.2.4";
            src = fetchHex {
              pkg = "grapple";
              version = "1.2.4";
              sha256 =
                "53c64ca3d1b418dfce018fba5fc305bf24694e9f8778eb9f239723cdb84e4be4";
            };
            beamDeps  = [ gen_stage_0_14_0 httpoison_1_2_0 ];

            meta = {
              description = ''Webhook magic in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camirmas/grapple";
            };
          } // packageOverrides)
      ) {};

    grapple = grapple_1_2_4;

    gravatar_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gravatar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gravatar";
              version = "0.1.0";
              sha256 =
                "4fab4a0313312d4319496662b55f25d3aabaa740ef3d084456425db8c9bdb4fd";
            };

            meta = {
              description = ''Gravatar URLs generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pilu/gravatar";
            };
          } // packageOverrides)
      ) {};

    gravatar = gravatar_0_1_0;

    gravatarify_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gravatarify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gravatarify";
              version = "0.1.0";
              sha256 =
                "d11f416611ed802d72e57f649c74f17c6dbf0e751da87e355cbfd14d4047d17e";
            };

            meta = {
              description = ''Gravatar images with an ease'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/gravatarify";
            };
          } // packageOverrides)
      ) {};

    gravatarify = gravatarify_0_1_0;

    gravity_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gravity";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gravity";
              version = "1.0.0";
              sha256 =
                "402422079e4dda7da7c8edc8df1dac8a4db6f6b0125b3caa432d01c4f8e38c04";
            };

            meta = {
              description = ''Elixir client for the Gravatar API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/gravity";
            };
          } // packageOverrides)
      ) {};

    gravity = gravity_1_0_0;

    gray_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gray";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gray";
              version = "0.0.2";
              sha256 =
                "95b071e0742ed10298c5d0ff027aec3eaadf3a807ed5e88bd4d2861a5220be62";
            };

            meta = {
              longDescription = ''Package to help you operate with [gray codes]
                                (https://en.wikipedia.org/wiki/Gray_code)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hashd/gray";
            };
          } // packageOverrides)
      ) {};

    gray = gray_0_0_2;

    greyhound_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "greyhound";
            version = "0.1.0";
            src = fetchHex {
              pkg = "greyhound";
              version = "0.1.0";
              sha256 =
                "4d64f4a3b47f5816ac98cd71efbceadceeeb93c1da934168016ad7eecc203525";
            };

            meta = {
              description = ''Extensible event bus platform'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sticksnleaves/greyhound";
            };
          } // packageOverrides)
      ) {};

    greyhound = greyhound_0_1_0;

    griffinmbtest_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "griffinmbtest";
            version = "0.1.0";
            src = fetchHex {
              pkg = "griffinmbtest";
              version = "0.1.0";
              sha256 =
                "7debeda0f07d87b3ef014b4bcce7a688ad497c2121b9f98ee119550235bc6a10";
            };

            meta = {
              description = ''Desc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    griffinmbtest = griffinmbtest_0_1_0;

    griffinmbtest1_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "griffinmbtest1";
            version = "0.1.0";
            src = fetchHex {
              pkg = "griffinmbtest1";
              version = "0.1.0";
              sha256 =
                "9854ebb742d294bcc6c969c4ef7034d2a371fca625fefa6142d33fbf88c66d9b";
            };

            meta = {
              description = ''Desc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    griffinmbtest1 = griffinmbtest1_0_1_0;

    griffintest_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "griffintest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "griffintest";
              version = "0.1.1";
              sha256 =
                "e9674334cf6f45dd482a3ed85bc2b9e43c4489d7fb7b16fc09ff9bccf5707524";
            };

            meta = {
              description = ''Desc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    griffintest = griffintest_0_1_1;

    grisp_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, mapz_0_3_0 }:
          buildRebar3 ({
            name = "grisp";
            version = "1.1.2";
            src = fetchHex {
              pkg = "grisp";
              version = "1.1.2";
              sha256 =
                "d84b0e1f600b74cea223259742a59a0bca401d848d186ef258d4e071cfa0b9f7";
            };

            beamDeps  = [ mapz_0_3_0 ];

            meta = {
              description = ''GRiSP Erlang Runtime Library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/grisp/grisp";
            };
          } // packageOverrides)
      ) {};

    grisp = grisp_1_1_2;

    grovepi_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_1_0_3 }:
          buildMix ({
            name = "grovepi";
            version = "0.5.1";
            src = fetchHex {
              pkg = "grovepi";
              version = "0.5.1";
              sha256 =
                "1854cf3f90d901da9ee9e8f259e968fb8d7041eccc40c789d06aedcc5915422e";
            };
            beamDeps  = [ elixir_ale_1_0_3 ];

            meta = {
              description = ''Use Dexter Industries` GrovePi+ and GrovePiZero
                            boards and many Grove sensors.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/adkron/grovepi";
            };
          } // packageOverrides)
      ) {};

    grovepi = grovepi_0_5_1;

    growl_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "growl";
            version = "0.0.3";
            src = fetchHex {
              pkg = "growl";
              version = "0.0.3";
              sha256 =
                "34b7ae5fce518ca0d76d5df30fcd24a30a2c1431783cbb22905588ce9c41b402";
            };

            meta = {
              longDescription = ''A simple wrapper to the command line
                                interface for the [Growl OSX notification
                                system](http://growl.info/)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/zachallett/growl";
            };
          } // packageOverrides)
      ) {};

    growl = growl_0_0_3;

    gruff_0_1_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, gen_pnet_0_1_6
        }:
          buildRebar3 ({
            name = "gruff";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gruff";
              version = "0.1.0";
              sha256 =
                "e214ee5039160379563eadeba6e003568381de5951590837e8c347a45ffcba1a";
            };

            beamDeps  = [ gen_pnet_0_1_6 ];

            meta = {
              description = ''A basic worker pool manager for Erlang to
                            showcase gen_pnet.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/gruff/";
            };
          } // packageOverrides)
      ) {};

    gruff = gruff_0_1_0;

    gsm_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gsm";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gsm";
              version = "0.1.1";
              sha256 =
                "2f30b18e2077ddbf3e18f559ca1a52e1214cfcf22a4849e63b8957694a0cc7e9";
            };

            meta = {
              description = ''GSM-7 encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/l1h3r/gsm";
            };
          } // packageOverrides)
      ) {};

    gsm = gsm_0_1_1;

    gtfs_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "gtfs";
            version = "0.3.1";
            src = fetchHex {
              pkg = "gtfs";
              version = "0.3.1";
              sha256 =
                "9a4fede279aa81a016f57e8569611c6a0f79b409c699ff04e2ca60a782e9b497";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              description = ''A library for parsing a GTFS folder into a
                            hierarchy of structured data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bhelx/gtfs";
            };
          } // packageOverrides)
      ) {};

    gtfs = gtfs_0_3_1;

    gtin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gtin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gtin";
              version = "0.1.0";
              sha256 =
                "b3112d92e1defe64aa6823b61227e12e2a6eb9bfd59ade1d1b4e48752c6c1a95";
            };

            meta = {
              description = ''Elixir datatype and common functions for Global
                            Trade Item Numbers (GTIN).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dreuter/elixir-gtin";
            };
          } // packageOverrides)
      ) {};

    gtin = gtin_0_1_0;

    gtin_testdb_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gtin_testdb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gtin_testdb";
              version = "0.1.0";
              sha256 =
                "744190b5c286e52070b43f8302f283f5d93ed8414ba2e5f41189aa4a80ac527b";
            };

            meta = {
              description = ''A small database of GTIN (EAN-13, EAN-8, ISBN)
                            samples.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dreuter/elixir-gtin";
            };
          } // packageOverrides)
      ) {};

    gtin_testdb = gtin_testdb_0_1_0;

    gtmetrix_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "gtmetrix";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gtmetrix";
              version = "1.0.0";
              sha256 =
                "0fb3a5c0fe34f5c6b82e7b7d98ba59e38b3096a29c0b158667706166de8792be";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''GTmetrix REST API client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antoine-duchenet/gtmetrix";
            };
          } // packageOverrides)
      ) {};

    gtmetrix = gtmetrix_1_0_0;

    guardsafe_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "guardsafe";
            version = "0.5.1";
            src = fetchHex {
              pkg = "guardsafe";
              version = "0.5.1";
              sha256 =
                "20ef887c5db75ab6aabc2558c23e8b423990653b04de13c07cd52520d5ac9032";
            };

            meta = {
              description = ''Macros expanding into code that can be safely
                            used in guard clauses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/guardsafe";
            };
          } // packageOverrides)
      ) {};

    guardsafe = guardsafe_0_5_1;

    guaxinim_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amnesia_0_2_7,
          earmark_1_2_5,
          ex_spirit_0_3_5,
          makeup_0_3_1,
          makeup_elixir_0_3_1
        }:
          buildMix ({
            name = "guaxinim";
            version = "0.1.2";
            src = fetchHex {
              pkg = "guaxinim";
              version = "0.1.2";
              sha256 =
                "517b70d8dab4957f3628d51c00befb01c14a4da4f5073f8f58c0b12c3b4005d2";
            };
            beamDeps  = [
                          amnesia_0_2_7
                          earmark_1_2_5
                          ex_spirit_0_3_5
                          makeup_0_3_1
                          makeup_elixir_0_3_1
                        ];

            meta = {
              description = ''Literate programming for Elixir with hyperlinked
                            source-'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tmbb/guaxinim";
            };
          } // packageOverrides)
      ) {};

    guaxinim = guaxinim_0_1_2;

    gun_1_0_0_pre_5 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_2_4_0,
          ranch_1_5_0
        }:
          buildErlangMk ({
            name = "gun";
            version = "1.0.0-pre.5";
            src = fetchHex {
              pkg = "gun";
              version = "1.0.0-pre.5";
              sha256 =
                "0858db27d638c700ad0e8fe186440bba796ddacd7c9e46c1cc8301ed23726438";
            };
            beamDeps  = [ cowlib_2_4_0 ranch_1_5_0 ];

            meta = {
              description = ''HTTP/1.1, HTTP/2 and Websocket client for
                            Erlang/OTP.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/gun";
            };
          } // packageOverrides)
      ) {};

    gungnir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gungnir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gungnir";
              version = "0.1.0";
              sha256 =
                "eac7c5c9974aae592de967a586e9d8934ee718fd66fd60618f0415d6ca7c933f";
            };

            meta = {
              description = ''Gives some useful functions. The idea is based on
                            Ruby on Rails` Active Support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-s/gungnir";
            };
          } // packageOverrides)
      ) {};

    gungnir = gungnir_0_1_0;

    gurka_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gurka";
            version = "0.1.8";
            src = fetchHex {
              pkg = "gurka";
              version = "0.1.8";
              sha256 =
                "15d8eedd8ea18f61df3c934b430f94482b2a436a9dd9e2f32b936ef6480cc00a";
            };

            meta = {
              description = ''Erlang implementation of Cucumber'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    gurka = gurka_0_1_8;

    gutenex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, imagineer_0_3_2 }:
          buildMix ({
            name = "gutenex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gutenex";
              version = "0.2.0";
              sha256 =
                "5c8ab30570d7ddcd6cdb2eeaf1d3eba4db83f6ef955f4030f05cf476cbce79fa";
            };
            beamDeps  = [ imagineer_0_3_2 ];

            meta = {
              description = ''PDF Generation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/gutenex";
            };
          } // packageOverrides)
      ) {};

    gutenex = gutenex_0_2_0;

    hackney_1_10_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_2_0_0,
          idna_5_1_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.10.1";
            src = fetchHex {
              pkg = "hackney";
              version = "1.10.1";
              sha256 =
                "6b1980a33628824ec829239b6f9bfc455f60eebc19d3096a215f5f6170d675cf";
            };

            beamDeps  = [
                          certifi_2_0_0
                          idna_5_1_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_11_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_2_0_0,
          idna_5_1_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.11.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.11.0";
              sha256 =
                "bb3cc62ecc10145f8f0965c05083a5278eae7ef1853d340cc9a7a3e27609b9bd";
            };

            beamDeps  = [
                          certifi_2_0_0
                          idna_5_1_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_12_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_2_3_1,
          idna_5_1_1,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.12.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.12.0";
              sha256 =
                "6b32cd3cc584f3307d1977045209c1d0378fb1600bfd193d13786c6fa55ef93c";
            };

            beamDeps  = [
                          certifi_2_3_1
                          idna_5_1_1
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_12_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_2_3_1,
          idna_5_1_1,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.12.1";
            src = fetchHex {
              pkg = "hackney";
              version = "1.12.1";
              sha256 =
                "8d5c94391a1dd525e58713b4fb43be9a930360ea8e74d0474e535ff579df6071";
            };

            beamDeps  = [
                          certifi_2_3_1
                          idna_5_1_1
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_13_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_2_3_1,
          idna_5_1_2,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.13.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.13.0";
              sha256 =
                "4d605d33dd07ee1b82b105033cccb02379515105fceb1850746591814b00c205";
            };

            beamDeps  = [
                          certifi_2_3_1
                          idna_5_1_2
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney = hackney_1_13_0;

    hackney_1_6_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_0_7_0,
          idna_1_2_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildMix ({
            name = "hackney";
            version = "1.6.3";
            src = fetchHex {
              pkg = "hackney";
              version = "1.6.3";
              sha256 =
                "b2c483bc28ca6fd02b15a23e98156757b7de0dc1863427b058f46f1ad6c5cc4c";
            };
            beamDeps  = [
                          certifi_0_7_0
                          idna_1_2_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_6_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_0_7_0,
          idna_1_2_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.6.5";
            src = fetchHex {
              pkg = "hackney";
              version = "1.6.5";
              sha256 =
                "0a9f657b4af1f45c77eed9053a091c5cf5d249ea77029a35a44c02ae5d85096f";
            };

            beamDeps  = [
                          certifi_0_7_0
                          idna_1_2_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_1_0_0,
          idna_4_0_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.7.1";
            src = fetchHex {
              pkg = "hackney";
              version = "1.7.1";
              sha256 =
                "ec8309cb6d42251513492ef683d212c614d78b20594e5f4d89a05d8411dd0dea";
            };

            beamDeps  = [
                          certifi_1_0_0
                          idna_4_0_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_8_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_1_1_0,
          idna_4_0_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.8.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.8.0";
              sha256 =
                "0cb8724402a04397003ad5daaef663698c9448ce312a1f3ba911b89109bfe168";
            };

            beamDeps  = [
                          certifi_1_1_0
                          idna_4_0_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_8_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_1_2_1,
          idna_5_0_2,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.8.6";
            src = fetchHex {
              pkg = "hackney";
              version = "1.8.6";
              sha256 =
                "677281a6eae416f4ca7980c8dfd1ee85c7cf445ed932c5d7f7909946d1cac37a";
            };

            beamDeps  = [
                          certifi_1_2_1
                          idna_5_0_2
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_9_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_2_0_0,
          idna_5_1_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.9.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.9.0";
              sha256 =
                "e38f4a7937b6dfc5fa87403ece26b1826bc81838f09ac57fabf2f7a9885fe818";
            };

            beamDeps  = [
                          certifi_2_0_0
                          idna_5_1_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    haiku_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "haiku";
            version = "0.3.1";
            src = fetchHex {
              pkg = "haiku";
              version = "0.3.1";
              sha256 =
                "accf418f42835901a582d40a05bb1efab18cdd47ab53e97a1ab04a0cf820333e";
            };

            meta = {
              longDescription = ''Generates memorable names similar to Xaddress
                                or Heroku. Supports custom words, custom
                                delimiters, and custom reducer functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/haiku";
            };
          } // packageOverrides)
      ) {};

    haiku = haiku_0_3_1;

    haikunator_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "haikunator";
            version = "1.1.0";
            src = fetchHex {
              pkg = "haikunator";
              version = "1.1.0";
              sha256 =
                "163adc1300003f1506a9f1d1cf9c61d2bac3c15bc06bd29da3d54e0603d1ba1e";
            };

            meta = {
              longDescription = ''Generate Heroku-like memorable random names
                                to use in your apps or anywhere else.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/Haikunator";
            };
          } // packageOverrides)
      ) {};

    haikunator = haikunator_1_1_0;

    hairnet_1_0_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, base64url_0_0_1
        }:
          buildRebar3 ({
            name = "hairnet";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hairnet";
              version = "1.0.0";
              sha256 =
                "b3f15cdb7d9e6183a5cde401ded684c88cc2ea09dca75facf82b5281f4596606";
            };

            beamDeps  = [ base64url_0_0_1 ];

            meta = {
              description = ''An Erlang library wrapping AES-GCM (AEAD) crypto
                            in a Fernet-like interface'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/hairnet/";
            };
          } // packageOverrides)
      ) {};

    hairnet = hairnet_1_0_0;

    haki_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "haki";
            version = "0.3.1";
            src = fetchHex {
              pkg = "haki";
              version = "0.3.1";
              sha256 =
                "a629728be5b0ef3ee2d7a5e6d60b92190d64c02193a9e7b2196d6a5dd66775da";
            };

            meta = {
              longDescription = ''Haki Cache: Use the Erlang constant pool to
                                compile your shared data into modules.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gootik/hakicache";
            };
          } // packageOverrides)
      ) {};

    haki = haki_0_3_1;

    halcyon_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "halcyon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "halcyon";
              version = "0.1.0";
              sha256 =
                "9be40bb2b01301c8bea48a99683d66c30f576575c9591957cd06d4e3aea3494f";
            };

            meta = {
              description = ''A minimal wrapper for the Vainglory API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jaynagpaul/halcyon";
            };
          } // packageOverrides)
      ) {};

    halcyon = halcyon_0_1_0;

    hallux_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hallux";
            version = "0.1.1";
            src = fetchHex {
              pkg = "hallux";
              version = "0.1.1";
              sha256 =
                "210811427a93df7b95f5ca7790c591eab84910794e7ab9f1686e67c8718b2fc9";
            };

            meta = {
              description = ''Provides an implementation for Finger Trees in
                            Elixir'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/thalesmg/hallux";
            };
          } // packageOverrides)
      ) {};

    hallux = hallux_0_1_1;

    hamcrest_0_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hamcrest";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hamcrest";
              version = "0.1.3";
              sha256 =
                "cc91c4d87a84e386dcac8f3aafb0e28f80ba3cef0b0ce006f11284e35b5ff08d";
            };

            meta = {
              description = ''Erlang port of Hamcrest'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/hyperthunk/hamcrest-erlang";
            };
          } // packageOverrides)
      ) {};

    hamcrest = hamcrest_0_1_3;

    hammer_5_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "hammer";
            version = "5.0.0";
            src = fetchHex {
              pkg = "hammer";
              version = "5.0.0";
              sha256 =
                "b96692ccf527d4099d55bccb1a2a46944d7e465fdf90ce260aaeabd75f88aeb2";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''A rate-limiter with plugable backends.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ExHammer/hammer";
            };
          } // packageOverrides)
      ) {};

    hammer = hammer_5_0_0;

    hammer_backend_redis_5_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hammer_5_0_0,
          redix_0_7_1
        }:
          buildMix ({
            name = "hammer_backend_redis";
            version = "5.0.0";
            src = fetchHex {
              pkg = "hammer_backend_redis";
              version = "5.0.0";
              sha256 =
                "e8c745e26d5f4f611ebe0fcfae29328f626301853c2af002ba876c98b95e569a";
            };
            beamDeps  = [ hammer_5_0_0 redix_0_7_1 ];

            meta = {
              description = ''Redis backend for Hammer rate-limiter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ExHammer/hammer-backend-redis";
            };
          } // packageOverrides)
      ) {};

    hammer_backend_redis = hammer_backend_redis_5_0_0;

    hanabi_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hanabi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "hanabi";
              version = "0.1.1";
              sha256 =
                "7156b43f35f2d4b94edd934e26a2b4e2bc6f48efed306634bc5ffcf528ea4737";
            };

            meta = {
              description = ''Simple IRC server designed to build bridges.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fnux/hanabi";
            };
          } // packageOverrides)
      ) {};

    hanabi = hanabi_0_1_1;

    happy_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "happy";
            version = "1.3.1";
            src = fetchHex {
              pkg = "happy";
              version = "1.3.1";
              sha256 =
                "cab2736d0bea4d3d7363d03f9d01a484d7fc4c190b5bb7172f97123b64338398";
            };

            meta = {
              longDescription = ''Happy path programming in elixir. Alternative
                                to ok_jose, elixir`s 1.2 `with` keyword and that
                                kind of stuff.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/happy";
            };
          } // packageOverrides)
      ) {};

    happy = happy_1_3_1;

    happy_with_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "happy_with";
            version = "1.0.1";
            src = fetchHex {
              pkg = "happy_with";
              version = "1.0.1";
              sha256 =
                "a34d31e854c08fe0d44a4dc29bf4c8726250e83d037faf3a6939fabc0041e2cc";
            };

            meta = {
              longDescription = ''Tiny syntax sugar around Elixir`s `with`
                                special form. Dont use commas around with
                                expressions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/happy_with";
            };
          } // packageOverrides)
      ) {};

    happy_with = happy_with_1_0_1;

    haproxy_protocol_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "haproxy_protocol";
            version = "0.1.1";
            src = fetchHex {
              pkg = "haproxy_protocol";
              version = "0.1.1";
              sha256 =
                "c845c1f43b21d1d5138a9fd5a371eaa38dfaa9dac524b0bbd409a8abf0b153aa";
            };

            meta = {
              description = ''Parses HAProxy`s proxy protocol'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    haproxy_protocol = haproxy_protocol_0_1_1;

    harakiri_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "harakiri";
            version = "1.2.0";
            src = fetchHex {
              pkg = "harakiri";
              version = "1.2.0";
              sha256 =
                "27f841353e0d5d8872758c6e62fa9abee42d1dca98eef5b48d904041eef0cc0c";
            };

            meta = {
              description = ''Help applications do things to themselves.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/harakiri";
            };
          } // packageOverrides)
      ) {};

    harakiri = harakiri_1_2_0;

    harmonex_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "harmonex";
            version = "0.6.1";
            src = fetchHex {
              pkg = "harmonex";
              version = "0.6.1";
              sha256 =
                "97af6ba13e67e9ee10ee3c008fe5ef71f192657db461e6c102034e0b3e700429";
            };

            meta = {
              description = ''A collection of tools for music theory —
                            pronounced “harmonics”'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/njonsson/harmonex";
            };
          } // packageOverrides)
      ) {};

    harmonex = harmonex_0_6_1;

    harnais_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "harnais";
            version = "1.0.0";
            src = fetchHex {
              pkg = "harnais";
              version = "1.0.0";
              sha256 =
                "1317719e5deb90c1669d84a00ec318363c75f3f22f042b8f2c4c28e30d7eecd4";
            };

            meta = {
              description = ''harnais: The base package of the Harnais
                            family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais";
            };
          } // packageOverrides)
      ) {};

    harnais = harnais_1_0_0;

    harnais_error_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          harnais_1_0_0,
          plymio_codi_0_3_1
        }:
          buildMix ({
            name = "harnais_error";
            version = "0.1.1";
            src = fetchHex {
              pkg = "harnais_error";
              version = "0.1.1";
              sha256 =
                "fcccadf26359a90aec73e3df11f1a8c4e365c0454bcf8727ec9de1d969344d96";
            };
            beamDeps  = [ harnais_1_0_0 plymio_codi_0_3_1 ];

            meta = {
              description = ''harnais_error: The Exception for the Harnais
                            Package Family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais_error";
            };
          } // packageOverrides)
      ) {};

    harnais_error_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          harnais_1_0_0,
          plymio_codi_0_3_1
        }:
          buildMix ({
            name = "harnais_error";
            version = "0.3.0";
            src = fetchHex {
              pkg = "harnais_error";
              version = "0.3.0";
              sha256 =
                "93492d1e738847b211dea770633320ea1812ce588b23069c36b9c1b664d4449b";
            };
            beamDeps  = [ harnais_1_0_0 plymio_codi_0_3_1 ];

            meta = {
              description = ''harnais_error: The Exception for the Harnais
                            Package Family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais_error";
            };
          } // packageOverrides)
      ) {};

    harnais_error = harnais_error_0_3_0;

    harnais_helper_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, harnais_1_0_0 }:
          buildMix ({
            name = "harnais_helper";
            version = "0.2.0";
            src = fetchHex {
              pkg = "harnais_helper";
              version = "0.2.0";
              sha256 =
                "39f2ea958564d11867ec9c61b796a572d83ca6aa9f293bdd638495509c167979";
            };
            beamDeps  = [ harnais_1_0_0 ];

            meta = {
              description = ''harnais_helper: Harnais`s collection of test
                            helpers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais_helper";
            };
          } // packageOverrides)
      ) {};

    harnais_helper = harnais_helper_0_2_0;

    harnais_list_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          harnais_error_0_3_0,
          plymio_codi_0_3_1
        }:
          buildMix ({
            name = "harnais_list";
            version = "0.1.0";
            src = fetchHex {
              pkg = "harnais_list";
              version = "0.1.0";
              sha256 =
                "1e5e903bd6531dd3b1404584520e7c05954c8f8b4a0d1e4adc1ba3a59340335b";
            };
            beamDeps  = [ harnais_error_0_3_0 plymio_codi_0_3_1 ];

            meta = {
              description = ''harnais_list: The List Harness for the Harnais
                            Family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais_list";
            };
          } // packageOverrides)
      ) {};

    harnais_list = harnais_list_0_1_0;

    harnais_map_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          harnais_error_0_3_0,
          plymio_codi_0_3_1
        }:
          buildMix ({
            name = "harnais_map";
            version = "0.1.0";
            src = fetchHex {
              pkg = "harnais_map";
              version = "0.1.0";
              sha256 =
                "9acc4626ca7ff1d850246ad9bf4ea04ae0f3e795e0498bbe276022290aa21ee2";
            };
            beamDeps  = [ harnais_error_0_3_0 plymio_codi_0_3_1 ];

            meta = {
              description = ''harnais_map: The Map Harness in the Harnais
                            Family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais_map";
            };
          } // packageOverrides)
      ) {};

    harnais_map = harnais_map_0_1_0;

    harnais_runner_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          harnais_error_0_1_1,
          plymio_codi_0_2_0
        }:
          buildMix ({
            name = "harnais_runner";
            version = "0.1.0";
            src = fetchHex {
              pkg = "harnais_runner";
              version = "0.1.0";
              sha256 =
                "15672eaaaa01cd4664a3202fb20e1b92d50ac5241062d9b34ace62454a4790f0";
            };
            beamDeps  = [ harnais_error_0_1_1 plymio_codi_0_2_0 ];

            meta = {
              description = ''harnais_runner: The Test Runner for the Harnais
                            Family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais_runner";
            };
          } // packageOverrides)
      ) {};

    harnais_runner = harnais_runner_0_1_0;

    harvest_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "harvest";
            version = "0.0.3";
            src = fetchHex {
              pkg = "harvest";
              version = "0.0.3";
              sha256 =
                "a9b52f37959a97e876603da5a34a0683e9e4a8e534fb7c672175602768fc812a";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Harvest Time Tracking API wrapper written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/luishurtado/harvest";
            };
          } // packageOverrides)
      ) {};

    harvest = harvest_0_0_3;

    hash_n_cache_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hash_n_cache";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hash_n_cache";
              version = "0.0.2";
              sha256 =
                "3cd95f04cd6017894b1829307e568a72a3d42c6b70379c37b86c80ab0a6f68ec";
            };

            meta = {
              longDescription = ''A simple utility to hash an erlang term, and
                                cache the term in ETS with the hash as the key
                                and the term as the value.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/hash_n_cache";
            };
          } // packageOverrides)
      ) {};

    hash_n_cache = hash_n_cache_0_0_2;

    hash_ring_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hash_ring";
            version = "0.4.0";
            src = fetchHex {
              pkg = "hash_ring";
              version = "0.4.0";
              sha256 =
                "97f7b4252e660ae3c66fd163277267d3445cfea097342027fe6cc3512fdafd16";
            };

            meta = {
              description = ''Consistent Hash Ring'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/hash_ring";
            };
          } // packageOverrides)
      ) {};

    hasher_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hasher";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hasher";
              version = "0.1.0";
              sha256 =
                "cca07878463c65204105e4eecf3bc0c19fb4e0e65ed75b72343945e720548b46";
            };

            meta = {
              description = ''Provides absolutely simple password hashing
                            functions (pure Elixir)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/eugzol/hasher";
            };
          } // packageOverrides)
      ) {};

    hasher = hasher_0_1_0;

    hashfs_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "hashfs";
            version = "0.4.0";
            src = fetchHex {
              pkg = "hashfs";
              version = "0.4.0";
              sha256 =
                "ee5854aaae7405b7050a2876243c057253644794694bac9cedec7491d6efcdfa";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''A simple content-addressable file system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PaperDB/elixir-hashfs";
            };
          } // packageOverrides)
      ) {};

    hashfs = hashfs_0_4_0;

    hashids_2_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hashids";
            version = "2.0.4";
            src = fetchHex {
              pkg = "hashids";
              version = "2.0.4";
              sha256 =
                "812e2c7ae763609a47acdd4c64d58c72f63bcfd741e6c605127e43af1507e019";
            };

            meta = {
              description = ''Hashids lets you obfuscate numerical identifiers
                            via reversible mapping.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/hashids-elixir";
            };
          } // packageOverrides)
      ) {};

    hashids = hashids_2_0_4;

    hashpipe_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hashpipe";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hashpipe";
              version = "0.1.0";
              sha256 =
                "c07c37a89635097b921d4180f1f225913f552c60a5e1b784f273307746291644";
            };

            meta = {
              description = ''Minimalist testing and code documentation tool
                            for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dbatori/hashpipe";
            };
          } // packageOverrides)
      ) {};

    hashpipe = hashpipe_0_1_0;

    hastega_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hastega";
            version = "0.0.0";
            src = fetchHex {
              pkg = "hastega";
              version = "0.0.0";
              sha256 =
                "466a2a8fd10a9ab7a5d35db56fb003f6bd217f48705fc26bc682d5257b84ffb0";
            };

            meta = {
              description = ''Hastega: Hyper Accelerator of Spreading Tasks for
                            Elixir with GPU Activation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zeam-vm/hastega";
            };
          } // packageOverrides)
      ) {};

    hastega = hastega_0_0_0;

    having_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "having";
            version = "0.1.0";
            src = fetchHex {
              pkg = "having";
              version = "0.1.0";
              sha256 =
                "307e3471463fb437e42aa1384e0c20e2c18a42ba2f2ddc95a066f5da5965fd23";
            };

            meta = {
              description = ''Haskell like `where` sugar for Elixir. A
                            pipe-able `with` special form.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/having";
            };
          } // packageOverrides)
      ) {};

    having = having_0_1_0;

    hax_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hax";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hax";
              version = "0.1.0";
              sha256 =
                "eead4f36b291607d9c281c43b36979912ee1ab72a4e325596d5b5031a2878a64";
            };

            meta = {
              description = ''To use protocol as type class in elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/xieyuheng/hax";
            };
          } // packageOverrides)
      ) {};

    hax = hax_0_1_0;

    hcl_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, http_parser_0_1_1
        }:
          buildMix ({
            name = "hcl";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hcl";
              version = "0.1.0";
              sha256 =
                "78061893bab4cad21ab5404521019738f22318527e523e75499508afcf0084c9";
            };
            beamDeps  = [ http_parser_0_1_1 ];

            meta = {
              description = ''A performant HTTP client written in pure
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minhajuddin/hcl";
            };
          } // packageOverrides)
      ) {};

    hcl = hcl_0_1_0;

    hcloud_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "hcloud";
            version = "0.2.0";
            src = fetchHex {
              pkg = "hcloud";
              version = "0.2.0";
              sha256 =
                "013a1bc1db301e9bcc7caf6714ac8064ca7394c78b72724fff57b118404d891b";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''hcloud: A Elixir library for the Hetzner Cloud
                            API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://gitlab.com/ahamtech/elixir/hcloud";
            };
          } // packageOverrides)
      ) {};

    hcloud = hcloud_0_2_0;

    health_check_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "health_check";
            version = "0.1.0";
            src = fetchHex {
              pkg = "health_check";
              version = "0.1.0";
              sha256 =
                "e504eb3e4c5e08a5a297adef97f7e64a1ca78ab1f71be045acf303e243559fdf";
            };

            meta = {
              description = ''A very simple library used for check Elixir
                            service if stable.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/redink/health_check";
            };
          } // packageOverrides)
      ) {};

    health_check = health_check_0_1_0;

    heap_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "heap";
            version = "2.0.0";
            src = fetchHex {
              pkg = "heap";
              version = "2.0.0";
              sha256 =
                "9c570906d4b721e821118ac833101d13a73e83586c31cb9a9b58e763e77199d1";
            };

            meta = {
              description = ''Small composable Heap implementation. Heaps sort
                            elements at insert time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/heap";
            };
          } // packageOverrides)
      ) {};

    heap = heap_2_0_0;

    heapq_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "heapq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "heapq";
              version = "0.0.1";
              sha256 =
                "60bc20c109360c6899203f4015fae42c9e5a4f82707f76b064e10d6da135d4fd";
            };

            meta = {
              description = ''A Heap-based Priority Queue Implementation in
                            Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/takscape/elixir-heapq";
            };
          } // packageOverrides)
      ) {};

    heapq = heapq_0_0_1;

    hedwig_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hedwig";
            version = "1.0.1";
            src = fetchHex {
              pkg = "hedwig";
              version = "1.0.1";
              sha256 =
                "0a9d0278877f2ec868238efd648ea4a201bef0b15d702c376329d9cb0bf636f1";
            };

            meta = {
              description = ''An adapter-based chat bot framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hedwig-im/hedwig";
            };
          } // packageOverrides)
      ) {};

    hedwig = hedwig_1_0_1;

    hedwig_api_ai_0_1_0_beta_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_api_ai_0_2_2 }:
          buildMix ({
            name = "hedwig_api_ai";
            version = "0.1.0-beta.0";
            src = fetchHex {
              pkg = "hedwig_api_ai";
              version = "0.1.0-beta.0";
              sha256 =
                "978f47cc88a68c5fe5d8b8f1264577fcbd4ece56f8d23be1f44950b6e51f40c6";
            };
            beamDeps  = [ ex_api_ai_0_2_2 ];

            meta = {
              description = ''Bringing NLU to hedwig with a little help from
                            @api_ai'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/hedwig_api_ai";
            };
          } // packageOverrides)
      ) {};

    hedwig_api_ai = hedwig_api_ai_0_1_0_beta_0;

    hedwig_brain_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_7_1 }:
          buildMix ({
            name = "hedwig_brain";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_brain";
              version = "0.1.0";
              sha256 =
                "a4f4c51210214a1f613a61d75df839d1f30495011317ad187884abdfafa7ea47";
            };
            beamDeps  = [ redix_0_7_1 ];

            meta = {
              longDescription = ''Simple key-value persistence for Hedwig
                                responders, `Hedwig.Brain` stores lists of
                                arbitrary terms under binary keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevegrossi/hedwig_brain";
            };
          } // packageOverrides)
      ) {};

    hedwig_brain = hedwig_brain_0_1_0;

    hedwig_currency_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_5_0,
          hedwig_1_0_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "hedwig_currency";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_currency";
              version = "0.1.0";
              sha256 =
                "f809e095d6f60281c119d440e7f41bd016efe7caa0de0d92b0b46c7104ab61fe";
            };
            beamDeps  = [ decimal_1_5_0 hedwig_1_0_1 httpoison_0_11_2 ];

            meta = {
              description = ''Hedwig Currency Conversion Responder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/hedwig_currency";
            };
          } // packageOverrides)
      ) {};

    hedwig_currency = hedwig_currency_0_1_0;

    hedwig_giphy_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "hedwig_giphy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_giphy";
              version = "0.1.0";
              sha256 =
                "23e069c6f5ef5ba46a5238e3b9ce779ab8f546c5e1556d534f880c3b2b677b02";
            };
            beamDeps  = [ hedwig_1_0_1 httpoison_0_13_0 ];

            meta = {
              description = ''Respond with an appropriate GIF from Giphy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevegrossi/hedwig_giphy";
            };
          } // packageOverrides)
      ) {};

    hedwig_giphy = hedwig_giphy_0_1_0;

    hedwig_github_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_1,
          tentacat_0_9_0
        }:
          buildMix ({
            name = "hedwig_github";
            version = "0.1.1";
            src = fetchHex {
              pkg = "hedwig_github";
              version = "0.1.1";
              sha256 =
                "c93a7465f6068fb69aef88ea06e9827da64b4bdc6bdaabb3221727fdb6a4ac49";
            };
            beamDeps  = [ hedwig_1_0_1 tentacat_0_9_0 ];

            meta = {
              description = ''A GitHub responder for Hedwig.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shotat/hedwig_github";
            };
          } // packageOverrides)
      ) {};

    hedwig_github = hedwig_github_0_1_1;

    hedwig_inspire_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "hedwig_inspire";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_inspire";
              version = "0.1.0";
              sha256 =
                "40c5000152f41654d4c622e34345d8d033e594433c892b56e3c180de551cf10e";
            };
            beamDeps  = [ hedwig_1_0_1 httpoison_0_11_2 ];

            meta = {
              description = ''Hedwig Inspirobot Responder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/hedwig_inspire";
            };
          } // packageOverrides)
      ) {};

    hedwig_inspire = hedwig_inspire_0_1_0;

    hedwig_irc_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exirc_1_0_1,
          hedwig_1_0_1
        }:
          buildMix ({
            name = "hedwig_irc";
            version = "0.1.4";
            src = fetchHex {
              pkg = "hedwig_irc";
              version = "0.1.4";
              sha256 =
                "3113ea231f606bb9b7c14b1b4033d3dd75724ec4a0f15e3689018e8ff4207671";
            };
            beamDeps  = [ exirc_1_0_1 hedwig_1_0_1 ];

            meta = {
              description = ''An IRC adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/hedwig_irc";
            };
          } // packageOverrides)
      ) {};

    hedwig_irc = hedwig_irc_0_1_4;

    hedwig_mattermost_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_1,
          httpoison_0_13_0,
          poison_3_1_0,
          websocket_client_1_3_0
        }:
          buildMix ({
            name = "hedwig_mattermost";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_mattermost";
              version = "0.1.0";
              sha256 =
                "62742240008c356cf6d0fd72debd2b8d4c81f7207893bb2ba14a2aed3d1a2b40";
            };
            beamDeps  = [
                          hedwig_1_0_1
                          httpoison_0_13_0
                          poison_3_1_0
                          websocket_client_1_3_0
                        ];

            meta = {
              description = ''Mattermost adapter for the Hedwig bot
                            framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trarbr/hedwig_mattermost";
            };
          } // packageOverrides)
      ) {};

    hedwig_mattermost = hedwig_mattermost_0_1_0;

    hedwig_mopidy_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_1,
          mopidy_0_3_0
        }:
          buildMix ({
            name = "hedwig_mopidy";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hedwig_mopidy";
              version = "0.0.2";
              sha256 =
                "321a17a4687d7d2411e20a12e78255dd7a2f0ac02ce18895a242c3d94f635f2a";
            };
            beamDeps  = [ hedwig_1_0_1 mopidy_0_3_0 ];

            meta = {
              description = ''A Mopidy responder for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trestrantham/hedwig_mopidy";
            };
          } // packageOverrides)
      ) {};

    hedwig_mopidy = hedwig_mopidy_0_0_2;

    hedwig_slack_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          hedwig_1_0_1,
          poison_3_1_0,
          websocket_client_1_3_0
        }:
          buildMix ({
            name = "hedwig_slack";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hedwig_slack";
              version = "1.0.0";
              sha256 =
                "7aff2e8b2a5117dd88f9e1edb81a71544960af317db8b853666d96bc7f1d1852";
            };
            beamDeps  = [
                          hackney_1_13_0
                          hedwig_1_0_1
                          poison_3_1_0
                          websocket_client_1_3_0
                        ];

            meta = {
              description = ''A Slack adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hedwig-im/hedwig_slack";
            };
          } // packageOverrides)
      ) {};

    hedwig_slack = hedwig_slack_1_0_0;

    hedwig_weather_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_1,
          httpoison_0_11_2,
          poison_3_1_0,
          runtime_config_0_1_0
        }:
          buildMix ({
            name = "hedwig_weather";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hedwig_weather";
              version = "0.1.3";
              sha256 =
                "1960a9a78fd1fd93979f3758d9f57af0c67a8bf4612bde5ab598f3177a613300";
            };
            beamDeps  = [
                          hedwig_1_0_1
                          httpoison_0_11_2
                          poison_3_1_0
                          runtime_config_0_1_0
                        ];

            meta = {
              description = ''Hedwig Weather Responder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/hedwig_weather";
            };
          } // packageOverrides)
      ) {};

    hedwig_weather = hedwig_weather_0_1_3;

    hedwig_youtube_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_1,
          httpoison_0_11_2,
          poison_3_1_0,
          runtime_config_0_1_0
        }:
          buildMix ({
            name = "hedwig_youtube";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hedwig_youtube";
              version = "0.1.3";
              sha256 =
                "89141b62d2c6c5ad89d56d79237575fa3ea109acbe2cb3796530a5ebf57d207a";
            };
            beamDeps  = [
                          hedwig_1_0_1
                          httpoison_0_11_2
                          poison_3_1_0
                          runtime_config_0_1_0
                        ];

            meta = {
              description = ''Hedwig Youtube Responder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/hedwig_youtube";
            };
          } // packageOverrides)
      ) {};

    hedwig_youtube = hedwig_youtube_0_1_3;

    henchman_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "henchman";
            version = "0.3.0";
            src = fetchHex {
              pkg = "henchman";
              version = "0.3.0";
              sha256 =
                "b8615e43885a5b4bc42578259d4c8d6e712902608475bb545fff8be4cc87ea34";
            };

            meta = {
              description = ''Set of helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elepunk/henchman";
            };
          } // packageOverrides)
      ) {};

    henchman = henchman_0_3_0;

    hermes_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, chronos_1_5_1 }:
          buildMix ({
            name = "hermes";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hermes";
              version = "0.1.0";
              sha256 =
                "f28880392a8b1b027c58c387870099f854f842fdeb1f7a0ba94a0b1ca07643bf";
            };
            beamDeps  = [ chronos_1_5_1 ];

            meta = {
              longDescription = ''Is a mailer component for sending & recieving
                                emails. The name comes from the greek messanger
                                of the gods.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/hemes";
            };
          } // packageOverrides)
      ) {};

    hermes = hermes_0_1_0;

    heroku_scripts_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "heroku_scripts";
            version = "0.0.4";
            src = fetchHex {
              pkg = "heroku_scripts";
              version = "0.0.4";
              sha256 =
                "589e3db34ad598026857d45ab92e51b854a3af9b396fa5a285dd5aea90727227";
            };

            meta = {
              description = ''A wrapper around the pipelines of Heroku'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/defactosoftware/heroku_scripts";
            };
          } // packageOverrides)
      ) {};

    heroku_scripts = heroku_scripts_0_0_4;

    hex2bin_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hex2bin";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hex2bin";
              version = "1.0.0";
              sha256 =
                "e7012d1d9aadd26e680f0983d26fb8923707f05fac9688f19f530fa3795e716f";
            };

            meta = {
              description = ''Hex string/binary conversion utilities'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/aesedepece/hex2bin";
            };
          } // packageOverrides)
      ) {};

    hex2bin = hex2bin_1_0_0;

    hex_math_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hex_math";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hex_math";
              version = "0.0.2";
              sha256 =
                "1dd9284c402d06bcd63ccb8df6022342defb2de4bd666066ed409e3b3c47761b";
            };

            meta = {
              description = ''Library for working with hex grids.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tjcelaya/hex_math";
            };
          } // packageOverrides)
      ) {};

    hex_math = hex_math_0_0_2;

    hex_prefix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hex_prefix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hex_prefix";
              version = "0.1.0";
              sha256 =
                "7817bc0b1173b6b5898a392099abed4846be9a3bfe3b36e2282ba780f142917d";
            };

            meta = {
              description = ''Ethereum`s Hex Prefix encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exthereum/hex_prefix";
            };
          } // packageOverrides)
      ) {};

    hex_prefix = hex_prefix_0_1_0;

    hexate_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hexate";
            version = "0.6.1";
            src = fetchHex {
              pkg = "hexate";
              version = "0.6.1";
              sha256 =
                "667c429c0970e3097107c9fafcc645636302888388845d78a3947a739fd946b7";
            };

            meta = {
              description = ''A simple module for working with hex strings in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rjsamson/hexate";
            };
          } // packageOverrides)
      ) {};

    hexate = hexate_0_6_1;

    hexbot_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hexbot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hexbot";
              version = "0.0.1";
              sha256 =
                "f9b8c9805468f7b93fa88440f1e75d8ed2fc3b7d11a68c455abf81efcc31590c";
            };

            meta = {
              description = ''A hubot-like bot framework for chatops.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tombell/hexbot";
            };
          } // packageOverrides)
      ) {};

    hexbot = hexbot_0_0_1;

    hexgrid_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hexgrid";
            version = "2.1.0";
            src = fetchHex {
              pkg = "hexgrid";
              version = "2.1.0";
              sha256 =
                "221cbcfd7774a989042cf063906234bc6f43a2609e8ad81e165e5bec3ab1e852";
            };

            meta = {
              description = ''Create Hexagonal grids and Maps. Useful if you`re
                            building Hex-based games.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rayalex/hex";
            };
          } // packageOverrides)
      ) {};

    hexgrid = hexgrid_2_1_0;

    hexper_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hexper";
            version = "1.5.0";
            src = fetchHex {
              pkg = "hexper";
              version = "1.5.0";
              sha256 =
                "8aea797ea8dcf6b5bf8254539d61c29d2fc04d1e48da3d793cee37ed378e3916";
            };

            meta = {
              description = ''Experience with Elixir and Hex.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Sylhare/Elixir";
            };
          } // packageOverrides)
      ) {};

    hexper = hexper_1_5_0;

    hextille_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hextille";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hextille";
              version = "0.1.0";
              sha256 =
                "6133e7b95ea1d686d953e2e0356fe583ead7ab222988d9b808cd6138d411a04f";
            };

            meta = {
              description = ''Module for common math operations in hexagonal
                            grids.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Cadiac/hextille";
            };
          } // packageOverrides)
      ) {};

    hextille = hextille_0_1_0;

    hid_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hid";
            version = "0.1.4";
            src = fetchHex {
              pkg = "hid";
              version = "0.1.4";
              sha256 =
                "c0661b1ef4399bc52259cd87a34cb092914652df08194d8e12a97ee4313c1e96";
            };

            meta = {
              longDescription = ''NIF wrapper of hidapi library for
                                reading/writing from/to USB HID devices
                                (http://www.signal11.us/oss/hidapi/).'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    hid = hid_0_1_4;

    himamo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "himamo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "himamo";
              version = "0.1.0";
              sha256 =
                "97ef35d04c26102e7b6800f4c129a7d275ae19764293085ee128ac83f06b64a3";
            };

            meta = {
              description = ''Discrete Hidden Markov Models.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mfilej/himamo";
            };
          } // packageOverrides)
      ) {};

    himamo = himamo_0_1_0;

    hipchat_elixir_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hipchat_elixir";
            version = "0.5.1";
            src = fetchHex {
              pkg = "hipchat_elixir";
              version = "0.5.1";
              sha256 =
                "07d2abb4a0efd7a2009457891de90c11fa1cf330bf6b0f2021d944568ee7b8ab";
            };

            meta = {
              description = ''HipChat client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ymtszw/hipchat_elixir";
            };
          } // packageOverrides)
      ) {};

    hipchat_elixir = hipchat_elixir_0_5_1;

    hipchat_logger_backend_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "hipchat_logger_backend";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hipchat_logger_backend";
              version = "0.1.3";
              sha256 =
                "464a89e3f70a41f640a1c347492f26fb9a560edd3522c3285550823aecbc7cf6";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              description = ''A logger backend for posting errors to
                            HipChat.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fbcouch/hipchat_logger_backend";
            };
          } // packageOverrides)
      ) {};

    hipchat_logger_backend = hipchat_logger_backend_0_1_3;

    hippy_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_2_0 }:
          buildMix ({
            name = "hippy";
            version = "0.2.0";
            src = fetchHex {
              pkg = "hippy";
              version = "0.2.0";
              sha256 =
                "e7ec0866f9c1e003918223868e25d021496b3096c4828c5c13eb2ffd4af5bcdc";
            };
            beamDeps  = [ httpoison_1_2_0 ];

            meta = {
              longDescription = ''Hippy is an Internet Printing Protocol (IPP)
                                client implementation in Elixir for performing
                                distributed printing over HTTP. It can be used
                                with CUPS or network printers supporting IPP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/electricshaman/hippy";
            };
          } // packageOverrides)
      ) {};

    hippy = hippy_0_2_0;

    hipster_jesus_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "hipster_jesus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hipster_jesus";
              version = "0.1.0";
              sha256 =
                "f7f29f0b53168b521d40635e5452cddcff879585d7930e13e3072039d04ebb23";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''A simple wrapper for
                                [HipsterJesus](http://hipsterjesus.com/), a
                                service that generates \"lorem ipsum\"-like text
                                in hipster lingo.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dnlsandiego/hipster_jesus";
            };
          } // packageOverrides)
      ) {};

    hipster_jesus = hipster_jesus_0_1_0;

    histogrex_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "histogrex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "histogrex";
              version = "0.0.5";
              sha256 =
                "5eb03f7d802defa4cce11f130211bdefe2d21817439e0bb37a7ceaf7e6d43340";
            };

            meta = {
              description = ''Concurrent High Dynamic Range (HDR) Histogram'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/2nd/histogrex";
            };
          } // packageOverrides)
      ) {};

    histogrex = histogrex_0_0_5;

    hitbtc_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "hitbtc";
            version = "0.1.1";
            src = fetchHex {
              pkg = "hitbtc";
              version = "0.1.1";
              sha256 =
                "5b5632efcedd1a5208da8525dc28a6daa912d2660c7433d2678f66207cf33d34";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''HitBTC Elixir API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/konstantinzolotarev/hitbtc";
            };
          } // packageOverrides)
      ) {};

    hitbtc = hitbtc_0_1_1;

    hlc_3_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hlc";
            version = "3.0.1";
            src = fetchHex {
              pkg = "hlc";
              version = "3.0.1";
              sha256 =
                "bdae93963a49ae1f097fc13fd64be0fdeec797495c81e9da43746ce67c90e85b";
            };

            meta = {
              description = ''hybrid logical clock'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    hlc = hlc_3_0_1;

    hlclock_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hlclock";
            version = "0.1.5";
            src = fetchHex {
              pkg = "hlclock";
              version = "0.1.5";
              sha256 =
                "45a39604c7f6230f6271eab22f5de1b2fe38a335adc615b0c4bfff31ed8b0c46";
            };

            meta = {
              description = ''Hybrid Logical Clocks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/toniqsystems/hlclock";
            };
          } // packageOverrides)
      ) {};

    hlclock = hlclock_0_1_5;

    hm_crypto_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hm_crypto";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hm_crypto";
              version = "0.1.3";
              sha256 =
                "7af4f33b49addcc144540646e5af07c793e661314eb77adb25e79ed7f3f0be7e";
            };

            meta = {
              description = ''Elixir library for signing and validating
                            requests'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/heathmont/hm-crypto";
            };
          } // packageOverrides)
      ) {};

    hm_crypto = hm_crypto_0_1_3;

    hobot_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hobot";
            version = "0.3.0";
            src = fetchHex {
              pkg = "hobot";
              version = "0.3.0";
              sha256 =
                "05a9420d007a7c22e14d3615600e0993076ceb36a4a5906655b8192ac9db0c8d";
            };

            meta = {
              description = ''A bot framework for ErlangVM(beam)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/hobot";
            };
          } // packageOverrides)
      ) {};

    hobot = hobot_0_3_0;

    hobot_output_console_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hobot_0_3_0 }:
          buildMix ({
            name = "hobot_output_console";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hobot_output_console";
              version = "0.1.0";
              sha256 =
                "e52c4097471ed0eb0fe12e316dc54cfe9767b3210450eb1e582d63ab47a2b190";
            };
            beamDeps  = [ hobot_0_3_0 ];

            meta = {
              description = ''An output plugin which writes messages to a
                            console for hobot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/hobot_output_console";
            };
          } // packageOverrides)
      ) {};

    hobot_output_console = hobot_output_console_0_1_0;

    holiday_jp_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "holiday_jp";
            version = "0.2.4";
            src = fetchHex {
              pkg = "holiday_jp";
              version = "0.2.4";
              sha256 =
                "ea74e71d2d92fbf15950a8fbfd997895a1e2d2c90fc6c06c0cd403656061b5ef";
            };

            meta = {
              description = ''Japanese holiday.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/holiday-jp/holiday_jp-elixir";
            };
          } // packageOverrides)
      ) {};

    holiday_jp = holiday_jp_0_2_4;

    holidays_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "holidays";
            version = "0.2.3";
            src = fetchHex {
              pkg = "holidays";
              version = "0.2.3";
              sha256 =
                "35fa00159c7cbf150f2d75d05424d2ca1972dd5bfef0d85a1109b9e180d7042a";
            };

            meta = {
              description = ''Application for finding which holidays fall on
                            given dates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CoderDennis/holidays";
            };
          } // packageOverrides)
      ) {};

    holidays = holidays_0_2_3;

    holidays_ex_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          csv_2_0_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "holidays_ex";
            version = "0.0.6";
            src = fetchHex {
              pkg = "holidays_ex";
              version = "0.0.6";
              sha256 =
                "53df03698b0aa7cb40eef798e5065905506984db20c1d652ef1f5e3bd7349e1f";
            };
            beamDeps  = [ csv_2_0_0 poison_3_1_0 ];

            meta = {
              longDescription = ''This library deals with Japanese holiday
                                information. 内閣府が提供する祝日の
                                csv データ
                                (http://www8.cao.go.jp/chosei/shukujitsu/syukujitsu_kyujitsu.csv)
                                を利用しています.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/inokappa/holidays.ex";
            };
          } // packageOverrides)
      ) {};

    holidays_ex = holidays_ex_0_0_6;

    holidefs_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          download_0_0_4,
          gettext_0_15_0,
          yaml_elixir_1_3_2
        }:
          buildMix ({
            name = "holidefs";
            version = "0.3.1";
            src = fetchHex {
              pkg = "holidefs";
              version = "0.3.1";
              sha256 =
                "b6495f4860c2fd676691e2d79a13f8a459bab735f287bcc78ac7ceef7cd99408";
            };
            beamDeps  = [ download_0_0_4 gettext_0_15_0 yaml_elixir_1_3_2 ];

            meta = {
              description = ''Definition-based national holidays'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Teamweek/holidefs";
            };
          } // packageOverrides)
      ) {};

    holidefs = holidefs_0_3_1;

    hooks_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hooks";
            version = "2.1.0";
            src = fetchHex {
              pkg = "hooks";
              version = "2.1.0";
              sha256 =
                "239ee2acaf56ba189494a6361f8d3169f070ece2af66b967d2c90e3642b758d3";
            };

            meta = {
              description = ''generic plugin & hook system'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/hooks";
            };
          } // packageOverrides)
      ) {};

    hooks = hooks_2_1_0;

    hoplon_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hoplon";
            version = "0.3.2";
            src = fetchHex {
              pkg = "hoplon";
              version = "0.3.2";
              sha256 =
                "0bc07dc49f64ca4a02bb2896c71433d49b9ed1f1ffe99c2bacefcb93b2958eb1";
            };

            meta = {
              longDescription = ''Hoplon is a tool that verifies that your
                                project`s hex dependencies contain only the code
                                they have listed on their GitHub.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nietaki/hoplon";
            };
          } // packageOverrides)
      ) {};

    hoplon = hoplon_0_3_2;

    horde_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          delta_crdt_0_1_7,
          xxhash_0_2_0
        }:
          buildMix ({
            name = "horde";
            version = "0.1.5";
            src = fetchHex {
              pkg = "horde";
              version = "0.1.5";
              sha256 =
                "4a07380821ca704521633b92d2cdd055d873a05faeb6713ac5d8eda25b4877e8";
            };
            beamDeps  = [ delta_crdt_0_1_7 xxhash_0_2_0 ];

            meta = {
              description = ''Distributed supervisor & process registry built
                            with δ-CRDTs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/derekkraan/horde";
            };
          } // packageOverrides)
      ) {};

    horde = horde_0_1_5;

    host_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "host";
            version = "0.2.1";
            src = fetchHex {
              pkg = "host";
              version = "0.2.1";
              sha256 =
                "adf40824d3efc58669beab3c521e959b14644334c428473796e7c1167031a1fb";
            };

            meta = {
              description = ''Reverse DNS lookups via the Unix `host`
                            utility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dogweather/host";
            };
          } // packageOverrides)
      ) {};

    host = host_0_2_1;

    hottpotato_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hottpotato";
            version = "0.0.0";
            src = fetchHex {
              pkg = "hottpotato";
              version = "0.0.0";
              sha256 =
                "767464f90a560926db2f6e7c935d3d4dd85cb721cdb4a5308193830f1aabcfa7";
            };

            meta = {
              description = ''An Elixir library for making async HTTP
                            requests.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/hottpotato-elixir";
            };
          } // packageOverrides)
      ) {};

    hottpotato = hottpotato_0_0_0;

    hound_1_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "hound";
            version = "1.0.4";
            src = fetchHex {
              pkg = "hound";
              version = "1.0.4";
              sha256 =
                "b833fd951d5b2d145aa7c307b1e8e7469dc393621458e3867e95e84f77835700";
            };
            beamDeps  = [ hackney_1_13_0 poison_3_1_0 ];

            meta = {
              description = ''Webdriver library for integration testing and
                            browser automation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/hound";
            };
          } // packageOverrides)
      ) {};

    hound = hound_1_0_4;

    hpack_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hpack";
            version = "1.0.3";
            src = fetchHex {
              pkg = "hpack";
              version = "1.0.3";
              sha256 =
                "5fb1e9b29c6ccec55ea487294a0f7ec44da62a500d17e2780a3c7d42b2480089";
            };

            meta = {
              longDescription = ''Implementation of the
                                [HPack](https://http2.github.io/http2-spec/compression.html)
                                protocol, a compression format for efficiently
                                representing HTTP header fields, to be used in
                                HTTP/2.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    hpack = hpack_1_0_3;

    hpack_erl_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hpack_erl";
            version = "0.2.3";
            src = fetchHex {
              pkg = "hpack_erl";
              version = "0.2.3";
              sha256 =
                "06f580167c4b8b8a6429040df36cc93bba6d571faeaec1b28816523379cbb23a";
            };

            meta = {
              description = ''HPACK Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joedevivo/hpack";
            };
          } // packageOverrides)
      ) {};

    hpack_erl = hpack_erl_0_2_3;

    hpdf_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0,
          socket_0_3_13,
          uuid_1_1_8
        }:
          buildMix ({
            name = "hpdf";
            version = "0.3.1";
            src = fetchHex {
              pkg = "hpdf";
              version = "0.3.1";
              sha256 =
                "3e6e2c2c91a5e3a900a5518c0061f2f30dfdfd22e474e516336d5eb22c39bed7";
            };
            beamDeps  = [
                          httpotion_3_0_3 poison_3_1_0 socket_0_3_13 uuid_1_1_8
                        ];

            meta = {
              description = ''PDF printer using headless Chrome'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hassox/hpdf";
            };
          } // packageOverrides)
      ) {};

    hpdf = hpdf_0_3_1;

    ht16k33_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_1_0_3 }:
          buildMix ({
            name = "ht16k33";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ht16k33";
              version = "0.1.0";
              sha256 =
                "c48a2f4306bc08e9f8cd08365c612ddf6cebb7d8747eda742711cc630b870faf";
            };
            beamDeps  = [ elixir_ale_1_0_3 ];

            meta = {
              longDescription = ''Module to control the LED-Backpack HT16K33 by
                                Adafruit over I2C. Including Submodules to
                                controll specific Adafruit LEDs lik the Seven
                                Segment Display.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DonHansDampf/HT16K33";
            };
          } // packageOverrides)
      ) {};

    ht16k33 = ht16k33_0_1_0;

    ht_finfunc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ht_finfunc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ht_finfunc";
              version = "0.1.0";
              sha256 =
                "f859e587cf0acc9acf681dec97e5bafd0ec0ee9b7edd37990062e4d246f996dd";
            };

            meta = {
              description = ''Functions for computing financial metrics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jwaterfaucett/ht_finfunc";
            };
          } // packageOverrides)
      ) {};

    ht_finfunc = ht_finfunc_0_1_0;

    html_builder_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "html_builder";
            version = "0.1.2";
            src = fetchHex {
              pkg = "html_builder";
              version = "0.1.2";
              sha256 =
                "e7f5bc429664a04cc399700d1cc65fa1efad65789d942e217e95990a6b5a917d";
            };

            meta = {
              description = ''generate html in elixir with simple data
                            structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/html_builder";
            };
          } // packageOverrides)
      ) {};

    html_builder = html_builder_0_1_2;

    html_entities_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "html_entities";
            version = "0.3.0";
            src = fetchHex {
              pkg = "html_entities";
              version = "0.3.0";
              sha256 =
                "93811511394efeee964f6e7df3b72b37ad39c1d185030c3561aebf1c15c4d995";
            };

            meta = {
              description = ''Decode and encode HTML entities in a string.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/martinsvalin/html_entities";
            };
          } // packageOverrides)
      ) {};

    html_entities_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "html_entities";
            version = "0.4.0";
            src = fetchHex {
              pkg = "html_entities";
              version = "0.4.0";
              sha256 =
                "3e3d7156a272950373ce5a4018b1490bea26676f8d6a7d409f6fac8568b8cb9a";
            };

            meta = {
              description = ''Decode and encode HTML entities in a string.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/martinsvalin/html_entities";
            };
          } // packageOverrides)
      ) {};

    html_entities = html_entities_0_4_0;

    html_sanitize_ex_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "html_sanitize_ex";
            version = "1.3.0";
            src = fetchHex {
              pkg = "html_sanitize_ex";
              version = "1.3.0";
              sha256 =
                "abfb393ad888d57700f4d0f119c2643c8a9d98856f9b8a92001be7efad1419d6";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''HTML sanitizer for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/html_sanitize_ex";
            };
          } // packageOverrides)
      ) {};

    html_sanitize_ex = html_sanitize_ex_1_3_0;

    html_to_image_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, porcelain_2_0_3 }:
          buildMix ({
            name = "html_to_image";
            version = "0.1.3";
            src = fetchHex {
              pkg = "html_to_image";
              version = "0.1.3";
              sha256 =
                "3caf46507b11a396c39c868de1475d4ef74e0633f8b3ee0acb9ee4e214b25827";
            };
            beamDeps  = [ porcelain_2_0_3 ];

            meta = {
              description = ''Elixir wrapper around `wkhtmltoimage` tool for
                            converting HTML into images'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koss-lebedev/html_to_image";
            };
          } // packageOverrides)
      ) {};

    html_to_image = html_to_image_0_1_3;

    html_to_pdf_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "html_to_pdf";
            version = "0.5.2";
            src = fetchHex {
              pkg = "html_to_pdf";
              version = "0.5.2";
              sha256 =
                "7adcde56c221e8f2447837d3b5983775f53071035d9ce9f179635a5e94c795e3";
            };

            meta = {
              description = ''Super simple library for turning raw HTML or
                            webpages into beautiful PDFs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/html_to_pdf";
            };
          } // packageOverrides)
      ) {};

    html_to_pdf = html_to_pdf_0_5_2;

    http2_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http2";
            version = "0.0.2";
            src = fetchHex {
              pkg = "http2";
              version = "0.0.2";
              sha256 =
                "fd8354d9c7800223ffcb66c2c359a40a5be3809ea4e3b2046fee253a5d049250";
            };

            meta = {
              description = ''HPACK implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kiennt/hpack";
            };
          } // packageOverrides)
      ) {};

    http2 = http2_0_0_2;

    http_builder_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          httpoison_1_2_0,
          httpotion_3_1_0,
          ibrowse_4_4_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "http_builder";
            version = "0.4.1";
            src = fetchHex {
              pkg = "http_builder";
              version = "0.4.1";
              sha256 =
                "69c9a19032627a68a64e8e31ee6c3f0bc93126f3044f911e1a410130d4cf14f0";
            };
            beamDeps  = [
                          hackney_1_13_0
                          httpoison_1_2_0
                          httpotion_3_1_0
                          ibrowse_4_4_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''A simple DSL for composing HTTP requests. Based
                            off the lovely Elm-Http-Builder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matthewoden/Elixir-HttpBuilder";
            };
          } // packageOverrides)
      ) {};

    http_builder = http_builder_0_4_1;

    http_digex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_digex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "http_digex";
              version = "0.0.1";
              sha256 =
                "43bca23be7809bd4e2a5efa23d294117457192c98bd1cdf6b90b61285bc4109a";
            };

            meta = {
              description = ''A module to create basic digest http auth
                            header'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/http_digex";
            };
          } // packageOverrides)
      ) {};

    http_digex = http_digex_0_0_1;

    http_event_client_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_12_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "http_event_client";
            version = "0.2.4";
            src = fetchHex {
              pkg = "http_event_client";
              version = "0.2.4";
              sha256 =
                "3672ff21b558c3f4b670963eab95ce7a6cd8fdb5eaabab8bca1f0b8a9f3f9ad7";
            };
            beamDeps  = [ httpoison_0_12_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Simple HTTP/HTTPS event emitter for running
                                tasks from other apps. This allows for both
                                async and sync message sending between the apps
                                for use on Heroku.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/connect-labs/http_event_client";
            };
          } // packageOverrides)
      ) {};

    http_event_client = http_event_client_0_2_4;

    http_message_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_message";
            version = "0.1.0";
            src = fetchHex {
              pkg = "http_message";
              version = "0.1.0";
              sha256 =
                "c4c7506449140fed7d8c865414deb1318077b6096d86bf87c74d74fd2c23f04d";
            };

            meta = {
              description = ''Parse and create HTTP messages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamen/http-message";
            };
          } // packageOverrides)
      ) {};

    http_message = http_message_0_1_0;

    http_params_serializer_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_params_serializer";
            version = "0.1.1";
            src = fetchHex {
              pkg = "http_params_serializer";
              version = "0.1.1";
              sha256 =
                "7d6c2184814b7232130a3193c9832827c5eeaaae928155d96863ec426da6ce69";
            };

            meta = {
              longDescription = ''A small library to serialize deeply nested
                                datastructures into HTTP parameters that most
                                backends do understand'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/ruby2elixir/http_params_serializer";
            };
          } // packageOverrides)
      ) {};

    http_params_serializer = http_params_serializer_0_1_1;

    http_parser_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_parser";
            version = "0.1.1";
            src = fetchHex {
              pkg = "http_parser";
              version = "0.1.1";
              sha256 =
                "fde5bd83a52246c1a4d05e8d6dc703f5cb5fcbcf535eab6721bac6837cb7e26c";
            };

            meta = {
              description = ''A complete HTTP parser written in pure Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minhajuddin/http_parser";
            };
          } // packageOverrides)
      ) {};

    http_parser = http_parser_0_1_1;

    http_signature_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_signature";
            version = "2.0.0";
            src = fetchHex {
              pkg = "http_signature";
              version = "2.0.0";
              sha256 =
                "0258bab24c425139d8cd2b63fc5fe0ad239d1acff3d31228ee7d5e846d9d73ac";
            };

            meta = {
              description = ''HTTP Signature Scheme - Signing HTTP Messages for
                            Erlang and Elixir'';
              license = stdenv.lib.licenses.mpl20;
              homepage =
                "https://github.com/potatosalad/erlang-http_signature";
            };
          } // packageOverrides)
      ) {};

    http_signature = http_signature_2_0_0;

    http_status_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_status";
            version = "0.2.2";
            src = fetchHex {
              pkg = "http_status";
              version = "0.2.2";
              sha256 =
                "21cfdbd2a9ec48e4f1f43efb0d5fddfbe962680f89fed99507dd6e0c4df5de43";
            };

            meta = {
              description = ''Every HTTP response status for Elixir
                            applications'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/http_status";
            };
          } // packageOverrides)
      ) {};

    http_status = http_status_0_2_2;

    httpdigest_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpdigest";
            version = "0.0.3";
            src = fetchHex {
              pkg = "httpdigest";
              version = "0.0.3";
              sha256 =
                "dc7e68910eef9b2e35ac2e17427ec6b95919d4f21ad8984b128142edccb1e09d";
            };

            meta = {
              description = ''Generates headers for HTTP Digest
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanjohnson320/httpdigest";
            };
          } // packageOverrides)
      ) {};

    httpdigest = httpdigest_0_0_3;

    httpehaviour_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "httpehaviour";
            version = "0.9.0";
            src = fetchHex {
              pkg = "httpehaviour";
              version = "0.9.0";
              sha256 =
                "54e93dcf0e62d392781078cf029478194797fe67c98dffe99a91b5d5ec33e4e5";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Yet Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpehaviour";
            };
          } // packageOverrides)
      ) {};

    httpehaviour = httpehaviour_0_9_0;

    httpill_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "httpill";
            version = "0.2.2";
            src = fetchHex {
              pkg = "httpill";
              version = "0.2.2";
              sha256 =
                "235f838dc1049240bb62b5362d2c080d7bfe61cb9344ddff53ca7ceff42b80f9";
            };
            beamDeps  = [ hackney_1_13_0 poison_3_1_0 ];

            meta = {
              description = ''HTTP requests for sick people!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelginst/httpill";
            };
          } // packageOverrides)
      ) {};

    httpill = httpill_0_2_2;

    httpipe_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpipe";
            version = "0.9.0";
            src = fetchHex {
              pkg = "httpipe";
              version = "0.9.0";
              sha256 =
                "1db9917b41a2a678278d627c2374a1842ba55ee4003d056d7246e28de6a7ba71";
            };

            meta = {
              longDescription = ''HTTPipe is an adapter-driven HTTP library for
                                Elixir that provides a way to build composable
                                HTTP requests.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/davidantaramian/httpipe";
            };
          } // packageOverrides)
      ) {};

    httpipe = httpipe_0_9_0;

    httplacebo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httplacebo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "httplacebo";
              version = "0.1.0";
              sha256 =
                "0f1873e65bb97227d43b5c6fc2138f33ef83f90cd068d9a9aee06ed8ef44a7ec";
            };

            meta = {
              description = ''The `do nothing` HTTP client for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/guilleiguaran/httplacebo";
            };
          } // packageOverrides)
      ) {};

    httplacebo = httplacebo_0_1_0;

    httpoison_0_11_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_7_1 }:
          buildMix ({
            name = "httpoison";
            version = "0.11.1";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.11.1";
              sha256 =
                "cafd076ca42c92460b5fe7873f5bb7378f9fdef758adcb817b8fe8d2daa095cd";
            };
            beamDeps  = [ hackney_1_7_1 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_11_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "httpoison";
            version = "0.11.2";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.11.2";
              sha256 =
                "5dfd296f1deca14329e9ef864db14f91c56c61a1ad297dde8365d108b6f2ce3d";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_12_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "httpoison";
            version = "0.12.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.12.0";
              sha256 =
                "4fd6233b10e31d538984151764f6a3261cc6a95af13456eba27355d77fd7fb24";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_13_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "httpoison";
            version = "0.13.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.13.0";
              sha256 =
                "4846958172d6401c4f34ecc5c2c4607b5b0d90b8eec8f6df137ca4907942ed0f";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_6_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "httpoison";
            version = "0.6.2";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.6.2";
              sha256 =
                "9d9a2d8f69b3c165db1a611989a14d8e13a66ef15d627fa17bb9acee8344e785";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "httpoison";
            version = "1.0.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "1.0.0";
              sha256 =
                "07967c56199f716ce9adb27415ccea1bd76c44f777dd0a6d4166c3d932f37fdf";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "httpoison";
            version = "1.1.1";
            src = fetchHex {
              pkg = "httpoison";
              version = "1.1.1";
              sha256 =
                "d480e9b89a1da274393c0a17cd548581ce7b2c45ac9d5ae2cdda8fd66d906295";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "httpoison";
            version = "1.2.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "1.2.0";
              sha256 =
                "712d9b1dfde2470ed000dff4b2faddaf56d038e5ac1944abc0a81c901a368391";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison = httpoison_1_2_0;

    httpoison_form_data_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpoison_form_data";
            version = "0.1.3";
            src = fetchHex {
              pkg = "httpoison_form_data";
              version = "0.1.3";
              sha256 =
                "930a30d2a8338bed74da09638255a0759f8debfd46707950b3704e94cfd299cd";
            };

            meta = {
              longDescription = ''A library for building Multipart and
                                URLEncoded structures from Elixir structures for
                                HTTPoison and Hackney.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spiceworks/httpoison-form-data";
            };
          } // packageOverrides)
      ) {};

    httpoison_form_data = httpoison_form_data_0_1_3;

    httpoison_retry_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_6_2 }:
          buildMix ({
            name = "httpoison_retry";
            version = "1.0.1";
            src = fetchHex {
              pkg = "httpoison_retry";
              version = "1.0.1";
              sha256 =
                "507f825b0a1b59fa4d5e72c9f9f250e2f587fcb81d7908d77a1d5f4037d98814";
            };
            beamDeps  = [ httpoison_0_6_2 ];

            meta = {
              description = ''Automatic configurable sleep/retry for HTTPoison
                            requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/httpoison_retry";
            };
          } // packageOverrides)
      ) {};

    httpoison_retry = httpoison_retry_1_0_1;

    httpotion_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpotion";
            version = "1.0.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "1.0.0";
              sha256 =
                "1ff7af8a280928316ba43e15644b75eedd4481dcd56426beb6cad920b244b734";
            };

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpotion";
            version = "2.0.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "2.0.0";
              sha256 =
                "550c94a898f3f2f0bb5f45a18380df66c478fc05b899a1febd7fd3ca666b93c8";
            };

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpotion";
            version = "2.1.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "2.1.0";
              sha256 =
                "d34f1e82283b6b953f611dc24571aa2586e72e19d3d6632b8e3dba78cf1e3761";
            };

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion_3_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ibrowse_4_4_0 }:
          buildMix ({
            name = "httpotion";
            version = "3.0.3";
            src = fetchHex {
              pkg = "httpotion";
              version = "3.0.3";
              sha256 =
                "bb3144c9329fae1e6580abbca7bde9734f19def7f2e988f7089cc59f6e38556f";
            };
            beamDeps  = [ ibrowse_4_4_0 ];

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion_3_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ibrowse_4_4_0 }:
          buildMix ({
            name = "httpotion";
            version = "3.1.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "3.1.0";
              sha256 =
                "2e1f3da5398258f67be9522793c2ccef157d3c9f7a4f69ec8e87184393efe9e0";
            };
            beamDeps  = [ ibrowse_4_4_0 ];

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion = httpotion_3_1_0;

    httpotion_cache_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          httpotion_3_1_0
        }:
          buildMix ({
            name = "httpotion_cache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "httpotion_cache";
              version = "0.1.0";
              sha256 =
                "4d8a8a72ecf15e79b753fd6d02bf7af528461d243b751420a0461f66895544a4";
            };
            beamDeps  = [ cachex_2_1_0 httpotion_3_1_0 ];

            meta = {
              description = ''Extension to HTTPotion for caching http
                            requests.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/dmitryzuev/httpotion_cache";
            };
          } // packageOverrides)
      ) {};

    httpotion_cache = httpotion_cache_0_1_0;

    httprot_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          datastructures_0_2_8,
          socket_0_3_13
        }:
          buildMix ({
            name = "httprot";
            version = "0.2.2";
            src = fetchHex {
              pkg = "httprot";
              version = "0.2.2";
              sha256 =
                "fb36d107d4870987a7d62d10c4954bfc9a936d69fd5a2255c258b37543f180cd";
            };
            beamDeps  = [ datastructures_0_2_8 socket_0_3_13 ];

            meta = {
              description = ''HTTP client library'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/httprot";
            };
          } // packageOverrides)
      ) {};

    httprot = httprot_0_2_2;

    httpx_0_0_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "httpx";
            version = "0.0.11";
            src = fetchHex {
              pkg = "httpx";
              version = "0.0.11";
              sha256 =
                "7437c32376d97e17222f372c26a45d986ad8e7ee4b8e703140228e356d086c03";
            };
            beamDeps  = [ hackney_1_13_0 jason_1_1_1 ];

            meta = {
              description = ''Simple Elixir library with HTTP[S] helpers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IanLuites/httpx";
            };
          } // packageOverrides)
      ) {};

    httpx = httpx_0_0_11;

    huami_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "huami";
            version = "0.0.1";
            src = fetchHex {
              pkg = "huami";
              version = "0.0.1";
              sha256 =
                "c12f38e24e7b085422e5f57c991792cd5045bd083574b1cca0458d8f2dfae40d";
            };

            meta = {
              description = ''A CLI version of flower password writing in
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yesmeck/huami.ex";
            };
          } // packageOverrides)
      ) {};

    huami = huami_0_0_1;

    hub_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hub";
            version = "0.6.1";
            src = fetchHex {
              pkg = "hub";
              version = "0.6.1";
              sha256 =
                "b84cf6d34e03c1d19f21febc948b249d9727cab0953da8078ce64f44c5dfe37e";
            };

            meta = {
              description = ''Hub is a single node PubSub hub with pattern
                            matching subscription.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wise-home/hub";
            };
          } // packageOverrides)
      ) {};

    hub = hub_0_6_1;

    huex_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          nerves_ssdp_client_0_1_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "huex";
            version = "0.7.0";
            src = fetchHex {
              pkg = "huex";
              version = "0.7.0";
              sha256 =
                "eb5637fa99feb4c15ee8b705e62c360c0d6486aa217e2d786801e8354cf7b7e0";
            };
            beamDeps  = [
                          httpoison_0_11_2 nerves_ssdp_client_0_1_3 poison_3_1_0
                        ];

            meta = {
              description = ''Elixir client for Philips Hue connected light
                            bulbs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/huex";
            };
          } // packageOverrides)
      ) {};

    huex = huex_0_7_0;

    hufflehoff_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hufflehoff";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hufflehoff";
              version = "0.0.1";
              sha256 =
                "f10c6ffceb3b6d161ff5aa4dfeb8fe77affabf073f0bc7059d8296a4256093f2";
            };

            meta = {
              description = ''A Huffman encoder/decoder for HTTP/2 headers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sideshow/hufflehoff";
            };
          } // packageOverrides)
      ) {};

    hufflehoff = hufflehoff_0_0_1;

    huffman_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "huffman";
            version = "1.2.0";
            src = fetchHex {
              pkg = "huffman";
              version = "1.2.0";
              sha256 =
                "e7357e6d53ce648fcdaa27c806d21ba1e4ab76f7a40ba91e8e4703ab63fd816c";
            };

            meta = {
              description = ''Huffman encoding and decoding.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tyre/huffman";
            };
          } // packageOverrides)
      ) {};

    huffman = huffman_1_2_0;

    hulaaki_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hulaaki";
            version = "0.1.2";
            src = fetchHex {
              pkg = "hulaaki";
              version = "0.1.2";
              sha256 =
                "356e6b583077b5bf5c1111a11673ddb3cb2ba9f6c6500f59b16dcf558a25e7d1";
            };

            meta = {
              longDescription = ''An Elixir library (driver) for clients
                                communicating with MQTT brokers(via the MQTT
                                3.1.1 protocol).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/suvash/hulaaki";
            };
          } // packageOverrides)
      ) {};

    hulaaki = hulaaki_0_1_2;

    hyde_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exredis_0_2_6 }:
          buildMix ({
            name = "hyde";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hyde";
              version = "0.0.1";
              sha256 =
                "d4424adbf13e2aecafa38f73318885f56bd70eb8e5fede22858af8cf76e2475e";
            };
            beamDeps  = [ exredis_0_2_6 ];

            meta = {
              longDescription = ''Feature Toggles for Elixir - Basic Redis
                                backed feature toggles for individual users or
                                named groups'';

              homepage = "https://github.com/beautifulcode/hyde";
            };
          } // packageOverrides)
      ) {};

    hyde = hyde_0_0_1;

    hyper_auth_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exldap_0_6_3 }:
          buildMix ({
            name = "hyper_auth";
            version = "0.0.0";
            src = fetchHex {
              pkg = "hyper_auth";
              version = "0.0.0";
              sha256 =
                "a79c16d18a5709b10056c5b85c716871e2db90fb11d65eb826d239b680650eb8";
            };
            beamDeps  = [ exldap_0_6_3 ];

            meta = {
              description = ''Authentication'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/HyperAuth/ExHyperAuth";
            };
          } // packageOverrides)
      ) {};

    hyper_auth_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exldap_0_6_3 }:
          buildMix ({
            name = "hyper_auth";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hyper_auth";
              version = "0.0.1";
              sha256 =
                "0476325d6c7f8ce4b73380f4529572da3d5c94558dd2008a01a99365887508ec";
            };
            beamDeps  = [ exldap_0_6_3 ];

            meta = {
              description = ''Authentication'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/HyperAuth/ExHyperAuth";
            };
          } // packageOverrides)
      ) {};

    hyper_auth = hyper_auth_0_0_1;

    hyper_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hyper_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hyper_ex";
              version = "0.1.0";
              sha256 =
                "05dfc1179918e42c27136ae17650db8778f7961fc5bfa3d4321be1436be7b3e3";
            };

            meta = {
              description = ''A HyperScript clone written in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sebastiandedeyne/hyper_ex";
            };
          } // packageOverrides)
      ) {};

    hyper_ex = hyper_ex_0_1_0;

    hypermap_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hypermap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hypermap";
              version = "0.1.0";
              sha256 =
                "0f8f7f00df57d46d5ae8ad1f34a4317f8af8673392f1fa92eb2d382544f4ea4f";
            };

            meta = {
              longDescription = ''HyperMap is an Elixir library which provides
                                a Map that can be accessed through different
                                keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fbergero/hypermap";
            };
          } // packageOverrides)
      ) {};

    hypermap = hypermap_0_1_0;

    hypermedia_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hypermedia";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hypermedia";
              version = "0.0.1";
              sha256 =
                "595c174772c45206f293f61b338105e61d96dba1436b07ed5b3b12eb07842721";
            };

            meta = {
              description = ''A Elixir library for creating HAL/JSON Hypermedia
                            APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jurriaan/hypermedia";
            };
          } // packageOverrides)
      ) {};

    hypermedia = hypermedia_0_0_1;

    hypermock_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "hypermock";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hypermock";
              version = "0.0.2";
              sha256 =
                "dbb7ad24f651a3bb99475f39f9b0d6b7e9b3f959d8a80577ea6c803a5b548516";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {    };
          } // packageOverrides)
      ) {};

    hypermock = hypermock_0_0_2;

    hyperview_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hyperview";
            version = "0.1.4";
            src = fetchHex {
              pkg = "hyperview";
              version = "0.1.4";
              sha256 =
                "f41c4b0c11a7bcdb0973a35a80b07d2f15f64af47e61cab9849343157435e272";
            };

            meta = {
              description = ''HyParView Implementation In Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/shun159/hyparview";
            };
          } // packageOverrides)
      ) {};

    hyperview = hyperview_0_1_4;

    hypex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hypex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "hypex";
              version = "1.1.0";
              sha256 =
                "32e153bee0dabea8941940711c9ed9a7e15c50fc3d474c5b75b14359fb408363";
            };

            meta = {
              description = ''Fast HyperLogLog implementation for
                            Elixir/Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/hypex";
            };
          } // packageOverrides)
      ) {};

    hypex = hypex_1_1_0;

    i18n_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprintf_0_1_6,
          tipo_0_0_6
        }:
          buildMix ({
            name = "i18n";
            version = "0.0.2";
            src = fetchHex {
              pkg = "i18n";
              version = "0.0.2";
              sha256 =
                "d3fbaccb502540565a9659fd21cff930b12ee698bfdac6d3df6487e2c101891f";
            };
            beamDeps  = [ exprintf_0_1_6 tipo_0_0_6 ];

            meta = {
              description = ''i18n locale translations helpers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-i18n";
            };
          } // packageOverrides)
      ) {};

    i18n = i18n_0_0_2;

    iam_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jose_1_8_4,
          ojson_1_0_0
        }:
          buildMix ({
            name = "iam";
            version = "0.0.1";
            src = fetchHex {
              pkg = "iam";
              version = "0.0.1";
              sha256 =
                "3c24ba2a39c7c9157b78da9500f991149dd2c463b5f12580066e273014cfb440";
            };
            beamDeps  = [ jose_1_8_4 ojson_1_0_0 ];

            meta = {
              description = ''Identity and Access Management (IAM)'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-iam";
            };
          } // packageOverrides)
      ) {};

    iam = iam_0_0_1;

    iam_role_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsone_1_4_6 }:
          buildMix ({
            name = "iam_role";
            version = "1.0.0";
            src = fetchHex {
              pkg = "iam_role";
              version = "1.0.0";
              sha256 =
                "acfc5d5c5130a36dfb2b460f790bd9e32bf39274f17333bd65c28d216983761d";
            };
            beamDeps  = [ jsone_1_4_6 ];

            meta = {
              description = ''Application for automatically fetching AWS IAM
                            role security credentials.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/iam_role";
            };
          } // packageOverrides)
      ) {};

    iam_role = iam_role_1_0_0;

    iban_tools_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iban_tools";
            version = "0.1.0";
            src = fetchHex {
              pkg = "iban_tools";
              version = "0.1.0";
              sha256 =
                "ab9e625f29210055542c530cd3e4debf63722e8eca7a8e19b29ba5a443280dc3";
            };

            meta = {
              longDescription = ''Iban validation and helpers
                                https://en.wikipedia.org/wiki/International_Bank_Account_Number'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pikender/iban_tools";
            };
          } // packageOverrides)
      ) {};

    iban_tools = iban_tools_0_1_0;

    ibrowse_4_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ibrowse";
            version = "4.2.2";
            src = fetchHex {
              pkg = "ibrowse";
              version = "4.2.2";
              sha256 =
                "b800cb7442bcc852c6832821e9d0a7098ff626e1415bddaeff4596640b31c0ae";
            };

            meta = {
              description = ''Erlang HTTP client application'';
              license = with stdenv.lib.licenses; [ free bsd3 ];
              homepage = "https://github.com/cmullaparthi/ibrowse";
            };
          } // packageOverrides)
      ) {};

    ibrowse_4_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ibrowse";
            version = "4.4.0";
            src = fetchHex {
              pkg = "ibrowse";
              version = "4.4.0";
              sha256 =
                "6a8e5988872086f0506bef68311493551ac5beae7c06ba2a00d5e9f97a60f1c2";
            };

            meta = {
              description = ''Erlang HTTP client application'';
              license = with stdenv.lib.licenses; [ free bsd3 ];
              homepage = "https://github.com/cmullaparthi/ibrowse";
            };
          } // packageOverrides)
      ) {};

    ibrowse = ibrowse_4_4_0;

    iconic_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_18_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "iconic";
            version = "0.1.1";
            src = fetchHex {
              pkg = "iconic";
              version = "0.1.1";
              sha256 =
                "8cfd72c58a86e77c5562ba96f612ceb19ce9570eb44b4e2fb755becd003f6d4a";
            };
            beamDeps  = [ floki_0_18_1 httpoison_0_13_0 ];

            meta = {
              longDescription = ''An simple icon discovery application that
                                supports icon, apple-touch-icon,
                                applie-touch-icon-precomposed, fluid-icon, and
                                mask-icon.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ncloudioj/iconic";
            };
          } // packageOverrides)
      ) {};

    iconic = iconic_0_1_1;

    icouch_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ibrowse_4_4_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "icouch";
            version = "0.5.0";
            src = fetchHex {
              pkg = "icouch";
              version = "0.5.0";
              sha256 =
                "d9627603d1b170ad88a2bc22088180abe5c7c8ff67665b9cc4c87ba043c5f76d";
            };
            beamDeps  = [ ibrowse_4_4_0 poison_3_1_0 ];

            meta = {
              description = ''A CouchDB client for Elixir using ibrowse for
                            HTTP transfer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/meetnow/icouch";
            };
          } // packageOverrides)
      ) {};

    icouch = icouch_0_5_0;

    id3v2_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "id3v2";
            version = "0.1.3";
            src = fetchHex {
              pkg = "id3v2";
              version = "0.1.3";
              sha256 =
                "8ab99b23c3d6eb9ec5e6f18e29e1b0946af2444a11b78e8286d44a3bc2e67fe6";
            };

            meta = {
              description = ''ID3v2 tag header reading'';
              license = stdenv.lib.licenses.zlib;
              homepage = "https://github.com/Cheezmeister/elixir-id3v2";
            };
          } // packageOverrides)
      ) {};

    id3v2 = id3v2_0_1_3;

    idconex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "idconex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "idconex";
              version = "0.2.0";
              sha256 =
                "28165ffac73a144fd3f10c664c73002747adc89c58e19f705b6697d1af5a890d";
            };

            meta = {
              longDescription = ''Identicon library with different hashing
                                algorithms and variable grid- and
                                image-sizes.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/code-bio/idconex";
            };
          } // packageOverrides)
      ) {};

    idconex = idconex_0_2_0;

    identicon_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "identicon";
            version = "0.2.0";
            src = fetchHex {
              pkg = "identicon";
              version = "0.2.0";
              sha256 =
                "38b11bb3ed2c76956fcbf8673be8cbf6570ef8a85d92b51ce45304ed0368d88c";
            };

            meta = {
              description = ''Elixir library for generating 5x5 symmetrical
                            identicons'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rbishop/identicon";
            };
          } // packageOverrides)
      ) {};

    identicon = identicon_0_2_0;

    identicon_dan1d_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "identicon_dan1d";
            version = "0.1.0";
            src = fetchHex {
              pkg = "identicon_dan1d";
              version = "0.1.0";
              sha256 =
                "93fc0006a48e079f799c34274ef8eb2df65fe48076aadc75b5a0bd41e62d9205";
            };

            meta = {
              longDescription = ''Package to create an image based on a string
                                as github does. It allways returns the same
                                output for the same input.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dan1d/identicon";
            };
          } // packageOverrides)
      ) {};

    identicon_dan1d = identicon_dan1d_0_1_0;

    identicons_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "identicons";
            version = "0.1.1";
            src = fetchHex {
              pkg = "identicons";
              version = "0.1.1";
              sha256 =
                "1ac07697bbebcfe48579765f15f70ce1061d6735825fb64b04584b700e4c3c4e";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''Identicon is a image with a unique pattern to
                            identify a user'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/JoaoSetas/Identicon";
            };
          } // packageOverrides)
      ) {};

    identicons = identicons_0_1_1;

    idicon_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "idicon";
            version = "0.2.1";
            src = fetchHex {
              pkg = "idicon";
              version = "0.2.1";
              sha256 =
                "f542672bed9f7422e4a4885026666bbc1fd2364fbf781e38bc7fbb1433c785e4";
            };

            meta = {
              longDescription = ''Idicon can be used to produce 1x1 to 10x10
                                user identifiable unique icons, also known as
                                identicons. These are similar to the default
                                icons used with github. Idicon supports
                                identicons in svg, png, or raw_bitmap, with
                                custom padding.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/softhatch/elixir-identicon";
            };
          } // packageOverrides)
      ) {};

    idicon = idicon_0_2_1;

    idl_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idl";
            version = "1.0.1";
            src = fetchHex {
              pkg = "idl";
              version = "1.0.1";
              sha256 =
                "228032d6adcbdb5f2d3654fca757eb4be5deeb7741dcfea4eaf7137f3969ccf3";
            };

            meta = {
              description = ''Rebar3 IDL Compiler'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sebastiw/rebar3_idl_compiler";
            };
          } // packageOverrides)
      ) {};

    idl = idl_1_0_1;

    idle_timeout_ex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "idle_timeout_ex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "idle_timeout_ex";
              version = "0.1.2";
              sha256 =
                "44a79e31254f9cf9bcfcb899b69b01440e451b3278f7087420ab44b79547cd21";
            };

            meta = {
              longDescription = ''A simple mechanism to timeout idle Elixir
                                processes - for example a GenServer - after a
                                given period of inactivity.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/niko/idle_timeout_ex";
            };
          } // packageOverrides)
      ) {};

    idle_timeout_ex = idle_timeout_ex_0_1_2;

    idna_1_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "idna";
            version = "1.0.2";
            src = fetchHex {
              pkg = "idna";
              version = "1.0.2";
              sha256 =
                "a5d645e307aa4f67efe31682f720b7eaf431ab148b3d6fb66cbaf6314499610f";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "1.0.3";
            src = fetchHex {
              pkg = "idna";
              version = "1.0.3";
              sha256 =
                "357d489a51112db4f216034406834f9172b3c0ff5a12f83fb28b25ca271541d1";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "1.1.0";
            src = fetchHex {
              pkg = "idna";
              version = "1.1.0";
              sha256 =
                "d399393011cd2fa93761d70199b604b2f055bcf6cb45cac922870e122d2eb2fe";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "1.2.0";
            src = fetchHex {
              pkg = "idna";
              version = "1.2.0";
              sha256 =
                "1d724cdafb66397e61774ead242c9b725de7033cde8ea98fa4a91e64ac5ef5b3";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_4_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "4.0.0";
            src = fetchHex {
              pkg = "idna";
              version = "4.0.0";
              sha256 =
                "f1b699f7275728538da7b5e35679f9e0f41ad8e0a49896e6a27b61867ed344eb";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_5_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          unicode_util_compat_0_2_0
        }:
          buildRebar3 ({
            name = "idna";
            version = "5.0.2";
            src = fetchHex {
              pkg = "idna";
              version = "5.0.2";
              sha256 =
                "352278f34e274a2e000b20e41aa74d6bc9a622407dc043b550a3cd3b7ac5457d";
            };

            beamDeps  = [ unicode_util_compat_0_2_0 ];

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_5_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          unicode_util_compat_0_3_1
        }:
          buildRebar3 ({
            name = "idna";
            version = "5.1.0";
            src = fetchHex {
              pkg = "idna";
              version = "5.1.0";
              sha256 =
                "fc1a2f7340c422650504b1662f28fdf381f34cbd30664e8491744e52c9511d40";
            };

            beamDeps  = [ unicode_util_compat_0_3_1 ];

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_5_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          unicode_util_compat_0_3_1
        }:
          buildRebar3 ({
            name = "idna";
            version = "5.1.1";
            src = fetchHex {
              pkg = "idna";
              version = "5.1.1";
              sha256 =
                "12197a282ab74a30dbe5853ec4d1dca3332f1fdc8ebed682c083e467d64f6491";
            };

            beamDeps  = [ unicode_util_compat_0_3_1 ];

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_5_1_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          unicode_util_compat_0_3_1
        }:
          buildRebar3 ({
            name = "idna";
            version = "5.1.2";
            src = fetchHex {
              pkg = "idna";
              version = "5.1.2";
              sha256 =
                "8fddb3aec4692c71647d67de72536254bce9069851754e370a99f2aae69fbdf4";
            };

            beamDeps  = [ unicode_util_compat_0_3_1 ];

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna = idna_5_1_2;

    ieex_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ieex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ieex";
              version = "0.0.4";
              sha256 =
                "c4c5a68531ae96c723198d9ff62a1817fb1ccf04a336f5dbb5f50c1a361a926a";
            };

            meta = {
              description = ''Biblioteca para validação de Inscrição
                            Estadual'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nortustecnologia/ieex";
            };
          } // packageOverrides)
      ) {};

    ieex = ieex_0_0_4;

    ieq_gateway_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_1_2_0
        }:
          buildMix ({
            name = "ieq_gateway";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ieq_gateway";
              version = "0.2.0";
              sha256 =
                "99ff850b1414a17c4b24b2afa42741b423bd3e46fc808519550258fd6d460955";
            };
            beamDeps  = [ nerves_uart_1_2_0 ];

            meta = {
              description = ''A Client for the RFM69-USB-Gateway and Indoor Air
                            Quality Sensor'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/ieq_gateway";
            };
          } // packageOverrides)
      ) {};

    ieq_gateway = ieq_gateway_0_2_0;

    iex_ssh_shell_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iex_ssh_shell";
            version = "0.1.0";
            src = fetchHex {
              pkg = "iex_ssh_shell";
              version = "0.1.0";
              sha256 =
                "41fa28ee9154becd4e6c92882600e95336c1b26b6237668dd843ee2f55dffe3b";
            };

            meta = {
              description = ''Starts a SSH daemon that provides a remote IEx
                            shell.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elcritch/iex_ssh_shell";
            };
          } // packageOverrides)
      ) {};

    iex_ssh_shell = iex_ssh_shell_0_1_0;

    iexample_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iexample";
            version = "0.1.1";
            src = fetchHex {
              pkg = "iexample";
              version = "0.1.1";
              sha256 =
                "688e022502ca77bd59dad12db76429e5edbc62fed4593ac7f9e5f1432c12ade7";
            };

            meta = {
              description = ''IExample - tiny macro to help you have formatted
                            documentation iex examples.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vic/iexample";
            };
          } // packageOverrides)
      ) {};

    iexample = iexample_0_1_1;

    if_ok_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "if_ok";
            version = "0.1.1";
            src = fetchHex {
              pkg = "if_ok";
              version = "0.1.1";
              sha256 =
                "adf8bfee4febed3c4634faa18d71d08ba0ee29ba2ccc7663810c4a21aa386b81";
            };

            meta = {
              longDescription = ''if_ok is a small utility library that let`s
                                you create pipelines that expect ok tuples to
                                continue in a very readable way.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/if_ok";
            };
          } // packageOverrides)
      ) {};

    if_ok = if_ok_0_1_1;

    ifsc_1_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          memoize_1_2_7,
          poison_3_1_0
        }:
          buildMix ({
            name = "ifsc";
            version = "1.1.7";
            src = fetchHex {
              pkg = "ifsc";
              version = "1.1.7";
              sha256 =
                "06ff3bb48db173d60be43e27e25c3415838ae29e4f76643a1eae4f8d7da76385";
            };
            beamDeps  = [ httpoison_0_13_0 memoize_1_2_7 poison_3_1_0 ];

            meta = {
              longDescription = ''A simple package by @razorpay to help you
                                validate your IFSC codes. IFSC codes are bank
                                codes within India'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://ifsc.razorpay.com/";
            };
          } // packageOverrides)
      ) {};

    ifsc = ifsc_1_1_7;

    ifttt_oauth_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_2 }:
          buildMix ({
            name = "ifttt_oauth";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ifttt_oauth";
              version = "0.0.1";
              sha256 =
                "9029506687be770891b3fb54d9e39bab9dd0f65a9551c6b335a3b0a60dc3026c";
            };
            beamDeps  = [ oauth2_0_9_2 ];

            meta = {
              longDescription = ''A simple Elixir wrapper around
                                scrogson/oauth2 to retrieve IFTTT Bearer tokens
                                from their mobile api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nickgal/ifttt_oauth";
            };
          } // packageOverrides)
      ) {};

    ifttt_oauth = ifttt_oauth_0_0_1;

    ifttt_webhook_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "ifttt_webhook";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ifttt_webhook";
              version = "0.2.0";
              sha256 =
                "840fe5d3c489df1c958d0789a00dda6459d960a5ad3a523c7fb57fb92bca5e5c";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_1_0 ];

            meta = {
              description = ''an Elixir client library for IFTTT`s Webhooks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/domnikl/ifttt_webhook";
            };
          } // packageOverrides)
      ) {};

    ifttt_webhook = ifttt_webhook_0_2_0;

    igc_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distance_0_2_2 }:
          buildMix ({
            name = "igc";
            version = "0.4.0";
            src = fetchHex {
              pkg = "igc";
              version = "0.4.0";
              sha256 =
                "3f14911f0a73e219fac1517a7552654b32f3dd8aa6a3403265d077fb6d1e8514";
            };
            beamDeps  = [ distance_0_2_2 ];

            meta = {
              description = ''Library for parsing IGC paragliding track
                            files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/balexand/igc";
            };
          } // packageOverrides)
      ) {};

    igc = igc_0_4_0;

    igdb_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "igdb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "igdb";
              version = "0.1.0";
              sha256 =
                "620904dd0e778deb61932cc52b0d48f5d8d5a9487248471e0c15bac38423b637";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the Internet Game Database
                            API. https://www.igdb.com/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tomasz-tomczyk/igdb";
            };
          } // packageOverrides)
      ) {};

    igdb = igdb_0_1_0;

    ignorant_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ignorant";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ignorant";
              version = "0.1.0";
              sha256 =
                "663c912ac9a50b147d18c18fde4fc5529e77c61658f5724488b8566787bbb5a7";
            };

            meta = {
              description = ''Selectively ignore parts of a data structure to
                            allow for partial comparison.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/campezzi/ignorant";
            };
          } // packageOverrides)
      ) {};

    ignorant = ignorant_0_1_0;

    image64_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "image64";
            version = "0.0.2";
            src = fetchHex {
              pkg = "image64";
              version = "0.0.2";
              sha256 =
                "d7d0aea09060ed6f73a2985e5915bd52f2a40dfebd578fdfe79fa5462e9fb628";
            };

            meta = {
              description = ''A tool for working with base64 encoded images'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Mechasparrow/image64";
            };
          } // packageOverrides)
      ) {};

    image64 = image64_0_0_2;

    image_optimizer_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "image_optimizer_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "image_optimizer_ex";
              version = "0.1.0";
              sha256 =
                "11e7a48d7b9844e5691af6a4ac2c8e0fabe853d21481decb02abeee68debdb64";
            };

            meta = {
              description = ''Tool to optimize jpg/png images for web'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bettyblocks/image-optimizer-ex";
            };
          } // packageOverrides)
      ) {};

    image_optimizer_ex = image_optimizer_ex_0_1_0;

    imagineer_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, apex_1_0_0 }:
          buildMix ({
            name = "imagineer";
            version = "0.3.2";
            src = fetchHex {
              pkg = "imagineer";
              version = "0.3.2";
              sha256 =
                "66883b95249edc2340b984992ea907a5ad77eaf307d6ebd6db8ba6c6b3f11a1e";
            };
            beamDeps  = [ apex_1_0_0 ];

            meta = {
              description = ''Image processing in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tyre/imagineer";
            };
          } // packageOverrides)
      ) {};

    imagineer = imagineer_0_3_2;

    imgex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "imgex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "imgex";
              version = "0.2.0";
              sha256 =
                "62ce92f8724047b12146cde4aacaea5b11e2d02374056e7079701e65bd233016";
            };

            meta = {
              description = ''Unofficial client library for generating imgix
                            URLs in Elixir'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ianwalter/imgex";
            };
          } // packageOverrides)
      ) {};

    imgex = imgex_0_2_0;

    immortal_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "immortal";
            version = "0.2.2";
            src = fetchHex {
              pkg = "immortal";
              version = "0.2.2";
              sha256 =
                "51d02fde433738a1cc1b935d4972a73c1f660f98a278aedef9f9b78cf1abd954";
            };

            meta = {
              description = ''Helpers for fault-tolerant OTP applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/immortal";
            };
          } // packageOverrides)
      ) {};

    immortal = immortal_0_2_2;

    inaka_aleppo_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_aleppo";
            version = "1.0.0";
            src = fetchHex {
              pkg = "inaka_aleppo";
              version = "1.0.0";
              sha256 =
                "06754b98702607ec742d8315b2e79188b38fbb60e3f1a1582de5673e230f74d4";
            };

            meta = {
              description = ''Aleppo: ALternative Erlang Pre-ProcessOr'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/inaka/aleppo";
            };
          } // packageOverrides)
      ) {};

    inaka_aleppo_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_aleppo";
            version = "1.1.1";
            src = fetchHex {
              pkg = "inaka_aleppo";
              version = "1.1.1";
              sha256 =
                "12ae0feefa3ada0ed629f73592a313448db138d9a62796f1edbae9ae7bc43013";
            };

            meta = {
              description = ''Aleppo: ALternative Erlang Pre-ProcessOr'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/inaka/aleppo";
            };
          } // packageOverrides)
      ) {};

    inaka_aleppo = inaka_aleppo_1_1_1;

    inaka_emysql_0_4_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_emysql";
            version = "0.4.4";
            src = fetchHex {
              pkg = "inaka_emysql";
              version = "0.4.4";
              sha256 =
                "9dec179b85e91523ff23942ff77716f98a58650087446d478cbc56160ab80ee3";
            };

            meta = {
              description = ''Emysql - Erlang MySQL driver'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/Emysql";
            };
          } // packageOverrides)
      ) {};

    inaka_emysql = inaka_emysql_0_4_4;

    inaka_iso8601_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_iso8601";
            version = "1.1.2";
            src = fetchHex {
              pkg = "inaka_iso8601";
              version = "1.1.2";
              sha256 =
                "8964665b3edbc8c4b390512d9de429a550cc32ff3fa3583f2e6f14925127d480";
            };

            meta = {
              description = ''ISO 8601 date parser and formatter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/erlang_iso8601";
            };
          } // packageOverrides)
      ) {};

    inaka_iso8601 = inaka_iso8601_1_1_2;

    inaka_mixer_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_mixer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "inaka_mixer";
              version = "0.1.5";
              sha256 =
                "37af35b1c17a94a0cb643cba23cba2ca68d6fe51c3ad8337629d4c3c017cc912";
            };

            meta = {
              description = ''Mix in public functions from external modules'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/mixer";
            };
          } // packageOverrides)
      ) {};

    inaka_mixer_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_mixer";
            version = "1.0.1";
            src = fetchHex {
              pkg = "inaka_mixer";
              version = "1.0.1";
              sha256 =
                "f4afa1a562dc36e09018bd420902c492b2752e2ae41cf677b20e86dbd184a4ba";
            };

            meta = {
              description = ''Mix in public functions from external modules'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/mixer";
            };
          } // packageOverrides)
      ) {};

    inaka_mixer = inaka_mixer_1_0_1;

    indefinite_article_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "indefinite_article";
            version = "0.0.1";
            src = fetchHex {
              pkg = "indefinite_article";
              version = "0.0.1";
              sha256 =
                "cb59d3373c5ff05693f74f445e7807d1fe5c38b9cfa6bcedfd9efedb4a0861ae";
            };

            meta = {
              description = ''Returns you the indefinite article of a string
                            (*a* banana, *an* apple, etc)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Buyapowa/indefinite_article";
            };
          } // packageOverrides)
      ) {};

    indefinite_article = indefinite_article_0_0_1;

    indifferent_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "indifferent";
            version = "0.9.1";
            src = fetchHex {
              pkg = "indifferent";
              version = "0.9.1";
              sha256 =
                "67f416db72f482d9b1a5ad7fcdad25a448f3eb6138ed6096f638a77a83577fb5";
            };

            meta = {
              description = ''Indifferent access on maps/lists/tuples with
                            custom key transforms.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/indifferent";
            };
          } // packageOverrides)
      ) {};

    indifferent = indifferent_0_9_1;

    individual_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "individual";
            version = "0.2.1";
            src = fetchHex {
              pkg = "individual";
              version = "0.2.1";
              sha256 =
                "a338d460ad7123e9c99cda5f24578f55b1b49d361bd869569a7c5ac795de60bc";
            };

            meta = {
              description = ''Process adapter to handle singleton processes in
                            Elixir applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/virviil/individual";
            };
          } // packageOverrides)
      ) {};

    individual = individual_0_2_1;

    inet_cidr_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inet_cidr";
            version = "1.0.3";
            src = fetchHex {
              pkg = "inet_cidr";
              version = "1.0.3";
              sha256 =
                "305192833562333bdf6bb24c9846771bf490a5eaf9a30e118fb64b19a73301fd";
            };

            meta = {
              longDescription = ''Classless Inter-Domain Routing (CIDR) library
                                for Elixir Compatible with Erlang`s :inet module
                                and support for IPv4 and IPv6'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cobenian/inet_cidr";
            };
          } // packageOverrides)
      ) {};

    inet_cidr = inet_cidr_1_0_3;

    inet_ext_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inet_ext";
            version = "0.4.0";
            src = fetchHex {
              pkg = "inet_ext";
              version = "0.4.0";
              sha256 =
                "cbf4d4549d1ab6786a905527509f3a801e7499fa84ba1f062a6d819cd08046e3";
            };

            meta = {
              description = ''inet extensions library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exthereum/inet_ext";
            };
          } // packageOverrides)
      ) {};

    inet_ext = inet_ext_0_4_0;

    inet_tcp_dist_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dns_0_0_4 }:
          buildMix ({
            name = "inet_tcp_dist";
            version = "0.1.3";
            src = fetchHex {
              pkg = "inet_tcp_dist";
              version = "0.1.3";
              sha256 =
                "7640cf5c43e0d78bb689d06bbe062d4b3ee07064c79a495f55d007ecc54f9901";
            };
            beamDeps  = [ dns_0_0_4 ];

            meta = {
              longDescription = ''This module replaces the standard
                                `:inet_tcp_dist` from Erlang and introduces a
                                new callback. The EPMD module is required to
                                have `address_and_port_please(node)` implemented
                                which should return `{ip, port}`. It is not
                                checked during compilation since the callback is
                                done dynamically.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tverlaan/inet_tcp_dist";
            };
          } // packageOverrides)
      ) {};

    inet_tcp_dist = inet_tcp_dist_0_1_3;

    infix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "infix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "infix";
              version = "0.1.0";
              sha256 =
                "d539c9e490f6a881f0c8c764c9662bb4b4b4e8426d688d758425d559b9734d28";
            };

            meta = {
              description = ''Native infix operators that uses Protocols'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/imranismail/infix";
            };
          } // packageOverrides)
      ) {};

    infix = infix_0_1_0;

    inflect_0_0_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflect";
            version = "0.0.11";
            src = fetchHex {
              pkg = "inflect";
              version = "0.0.11";
              sha256 =
                "36636ccb31b1ca9f34d95af8fff97aa68d34d925c5128dc8f04fc77764fa208a";
            };

            meta = {
              description = ''case sensitive regular expression for splitting
                            strings'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflect";
            };
          } // packageOverrides)
      ) {};

    inflect = inflect_0_0_11;

    inflections_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, inflector_0_0_11 }:
          buildMix ({
            name = "inflections";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inflections";
              version = "0.0.1";
              sha256 =
                "f1fe5f35313eb1bd6bfc3a0d5e3bd169a31bfbf09021b9928ecfff3052731efc";
            };
            beamDeps  = [ inflector_0_0_11 ];

            meta = {
              description = ''inflector helpers for managing different
                            locales'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflections";
            };
          } // packageOverrides)
      ) {};

    inflections = inflections_0_0_1;

    inflections_en_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflections_0_0_1,
          inflector_0_0_11
        }:
          buildMix ({
            name = "inflections_en";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inflections_en";
              version = "0.0.1";
              sha256 =
                "28c8e2f52974879499ea039bc8bf369b75e978f4ee60de8641e7efdef575bd77";
            };
            beamDeps  = [ inflections_0_0_1 inflector_0_0_11 ];

            meta = {
              description = ''inflector english rules'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflections_en";
            };
          } // packageOverrides)
      ) {};

    inflections_en = inflections_en_0_0_1;

    inflections_es_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflections_0_0_1,
          inflector_0_0_11
        }:
          buildMix ({
            name = "inflections_es";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inflections_es";
              version = "0.0.1";
              sha256 =
                "28c6323f851d2287f77d7dd0b888e9888f5f785ff105a356078aff4a46544495";
            };
            beamDeps  = [ inflections_0_0_1 inflector_0_0_11 ];

            meta = {
              description = ''inflector spanish rules'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflections_es";
            };
          } // packageOverrides)
      ) {};

    inflections_es = inflections_es_0_0_1;

    inflector_0_0_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflector";
            version = "0.0.11";
            src = fetchHex {
              pkg = "inflector";
              version = "0.0.11";
              sha256 =
                "4abd1e267d0df9536d3f54c579d74a0951fbbc6100e4b034a0905d99296a9e08";
            };

            meta = {
              description = ''simple rule based inflector'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflector";
            };
          } // packageOverrides)
      ) {};

    inflector = inflector_0_0_11;

    inflectorex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflectorex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "inflectorex";
              version = "0.1.2";
              sha256 =
                "28221bcbfe2769dc880c2b60199af81dd5135ad99969dd58ef8091eebc5d2ea9";
            };

            meta = {
              description = ''Singularize and pluralize english nouns.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/girishramnani/inflector";
            };
          } // packageOverrides)
      ) {};

    inflectorex = inflectorex_0_1_2;

    inflex_1_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.10.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.10.0";
              sha256 =
                "7b5ccb9b720c26516f5962dc4565fc26f083ca107b0f6c167048506a125d2df3";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex = inflex_1_10_0;

    inflex_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.2.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.2.0";
              sha256 =
                "8132eb72ced44286e173ea4b72549b7f0199ee8f0bcf8f585c6b533c243d23ae";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.4.1";
            src = fetchHex {
              pkg = "inflex";
              version = "1.4.1";
              sha256 =
                "d316fecd9db83db97828bbcbdb689f5c412e3aaf658329cf479cad5baa856c92";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.5.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.5.0";
              sha256 =
                "d48609edc5bb7901b95dcc00c1e38f259e8006904865a028954ccfe9336a3384";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.6.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.6.0";
              sha256 =
                "e5ca9ea3243530188340a3777b65ea340dbcb1d960cd5a03015e4f936ed2d2ca";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.7.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.7.0";
              sha256 =
                "34c4ef27e94866799da4919e4544890d8822a04de9b1203cea8b0174c5b3abfd";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.8.1";
            src = fetchHex {
              pkg = "inflex";
              version = "1.8.1";
              sha256 =
                "f9d542ec03df73be5106a72357572728d83c4f1f6824d0a080bdf472784c49e6";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    influxdb_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsone_1_4_6 }:
          buildMix ({
            name = "influxdb";
            version = "0.2.1";
            src = fetchHex {
              pkg = "influxdb";
              version = "0.2.1";
              sha256 =
                "7f4c4601ed3d72d2339cd1232deecb18d5c8df605548a9313073332008a62c42";
            };
            beamDeps  = [ jsone_1_4_6 ];

            meta = {
              description = ''InfluxDB client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kopera/erlang-influxdb";
            };
          } // packageOverrides)
      ) {};

    influxdb = influxdb_0_2_1;

    influxql_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "influxql";
            version = "0.1.0";
            src = fetchHex {
              pkg = "influxql";
              version = "0.1.0";
              sha256 =
                "22e649b71dabc77e8831c8822d77ab1cb4e1e23bf07c0421c61c70919bdefd90";
            };

            meta = {
              description = ''InfluxQL utility/tooling package'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/influxql";
            };
          } // packageOverrides)
      ) {};

    influxql = influxql_0_1_0;

    infobip_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_2,
          httpoison_1_2_0,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "infobip";
            version = "0.1.4";
            src = fetchHex {
              pkg = "infobip";
              version = "0.1.4";
              sha256 =
                "b3cd152da9a105bc27db85d63e2ce8d22617c6f3aab8dd0c1e4eb08c0649ca2d";
            };
            beamDeps  = [ erlsom_1_4_2 httpoison_1_2_0 xml_builder_2_1_0 ];

            meta = {
              description = ''A simple Infobip REST API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/elixir-infobip";
            };
          } // packageOverrides)
      ) {};

    infobip = infobip_0_1_4;

    informant_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "informant";
            version = "0.1.0";
            src = fetchHex {
              pkg = "informant";
              version = "0.1.0";
              sha256 =
                "381a54f8889e4d5bb7acdda95ace768aca105938cfd2c9d8c0b7dc275baa06b0";
            };

            meta = {
              description = ''Distributes state and events to subscribers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ghitchens/informant";
            };
          } // packageOverrides)
      ) {};

    informant = informant_0_1_0;

    ini_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ini";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ini";
              version = "0.0.1";
              sha256 =
                "96b86cf664ca8247cdad166c29251ef4ddc156f16f906bdf2ea1c37831fbf804";
            };

            meta = {
              description = ''Module to parse ini files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanjohnson320/ini";
            };
          } // packageOverrides)
      ) {};

    ini = ini_0_0_1;

    injectanator_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "injectanator";
            version = "0.0.1";
            src = fetchHex {
              pkg = "injectanator";
              version = "0.0.1";
              sha256 =
                "41fe02e73e351dca98a2bbc5dc5b032f4f442dd1d25a73420185ad8ac28797e4";
            };

            meta = {
              description = ''Dependency injection for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gwash3189/spyanator";
            };
          } // packageOverrides)
      ) {};

    injectanator = injectanator_0_0_1;

    injex_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "injex";
            version = "1.1.1";
            src = fetchHex {
              pkg = "injex";
              version = "1.1.1";
              sha256 =
                "b67a234b16c464611dbdf0bfe236e56861df889e0857d4900328d70bc9f9959d";
            };

            meta = {
              description = ''A simple way to describe dependencies that can be
                            replaced at test time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blatyo/injex";
            };
          } // packageOverrides)
      ) {};

    injex = injex_1_1_1;

    inotify_0_4_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inotify";
            version = "0.4.3";
            src = fetchHex {
              pkg = "inotify";
              version = "0.4.3";
              sha256 =
                "e44de3a416f775db2e8bfd5bb43305d88374262092a3b7a9420ea3541d066856";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Linux file alternation monitor.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sheyll/inotify";
            };
          } // packageOverrides)
      ) {};

    inotify = inotify_0_4_3;

    inquiry_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inquiry";
            version = "0.1.0";
            src = fetchHex {
              pkg = "inquiry";
              version = "0.1.0";
              sha256 =
                "6c774219630d6063822537e2ca0cdfce2abed7baa841a2b9ec9a502a86ecda6e";
            };

            meta = {
              description = ''Get data from nested data structures (like JSON)
                            in a XPath style'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hectorip/Inquiry";
            };
          } // packageOverrides)
      ) {};

    inquiry = inquiry_0_1_0;

    inquisitor_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inquisitor";
            version = "0.5.0";
            src = fetchHex {
              pkg = "inquisitor";
              version = "0.5.0";
              sha256 =
                "a01c20d4502d92215504351ab332cfac4b7680053a4ed878080f203a3969520e";
            };

            meta = {
              description = ''Easily build extendable and composable Ecto
                            queries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dockyard/inquisitor";
            };
          } // packageOverrides)
      ) {};

    inquisitor = inquisitor_0_5_0;

    insert_ordered_set_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "insert_ordered_set";
            version = "0.0.1";
            src = fetchHex {
              pkg = "insert_ordered_set";
              version = "0.0.1";
              sha256 =
                "78ebc47d780aa1e8fabce7d4f4d5f3b9c90e1443514ad830b32f7c5184f87634";
            };

            meta = {
              longDescription = ''Provides a data structure with the following
                                properties: 1. Contains unique values. 2. O(1)
                                manipulation operations (e.g. insert, delete) by
                                using an underlying Map. 3. Preserves insertion
                                order when converting to a list. Allows reverse
                                insertion ordering.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/localshred/insert_ordered_set";
            };
          } // packageOverrides)
      ) {};

    insert_ordered_set = insert_ordered_set_0_0_1;

    insertable_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "insertable";
            version = "0.2.0";
            src = fetchHex {
              pkg = "insertable";
              version = "0.2.0";
              sha256 =
                "518a8b5870344c784dec4560a296e3ef539cd08e58df7f425485bb6158ab70d6";
            };

            meta = {
              longDescription = ''A lightweight reusable Insertable protocol,
                                allowing insertion elements one-at-a-time into a
                                collection.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Qqwy/elixir-insertable";
            };
          } // packageOverrides)
      ) {};

    insertable = insertable_0_2_0;

    insight_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "insight";
            version = "0.1.5";
            src = fetchHex {
              pkg = "insight";
              version = "0.1.5";
              sha256 =
                "c4fbf70fbf2023b68654a926d29d4073ea33c0ee8268272eb037b3ddbf912723";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir package for consuming any Insight-powered
                            Bitcoin explorer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stampery/elixir-insight";
            };
          } // packageOverrides)
      ) {};

    insight = insight_0_1_5;

    insights_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "insights";
            version = "0.0.2";
            src = fetchHex {
              pkg = "insights";
              version = "0.0.2";
              sha256 =
                "92794ab7ba760a7b17ffac1f98ecff1a848148d15a1d9fabe58b0150767cddbd";
            };

            meta = {
              longDescription = ''Insights is a wrapper for sending and data
                                capture for keen.io or others adapters'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gullitmiranda/insights";
            };
          } // packageOverrides)
      ) {};

    insights = insights_0_0_2;

    inspector_gadget_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inspector_gadget";
            version = "0.2.0";
            src = fetchHex {
              pkg = "inspector_gadget";
              version = "0.2.0";
              sha256 =
                "d2e68b4d76122372924562b53bb4db26e89e9d6d76ec029cadb62e90fcbb2639";
            };

            meta = {
              description = ''Helpers for debugging & inspecting code flow'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/inspector_gadget";
            };
          } // packageOverrides)
      ) {};

    inspector_gadget = inspector_gadget_0_2_0;

    inspex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inspex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "inspex";
              version = "0.1.2";
              sha256 =
                "62ee6d00baf489052688a3e383399216e71f0e307eb895c196bbfd05a51d8fce";
            };

            meta = {
              description = ''simple Inspect protocol wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mndvns/inspex";
            };
          } // packageOverrides)
      ) {};

    inspex = inspex_0_1_2;

    insta_insta_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "insta_insta";
            version = "0.1.3";
            src = fetchHex {
              pkg = "insta_insta";
              version = "0.1.3";
              sha256 =
                "900f0420da30b453f8622822b0211e070ed4890854d7509dc0e74e3420c0ecde";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''Instagram JSON and HTML endpoints without a API
                            key, inspired on InstaScrapex'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/PuckOut/insta_insta";
            };
          } // packageOverrides)
      ) {};

    insta_insta = insta_insta_0_1_3;

    insta_scrapex_0_8_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "insta_scrapex";
            version = "0.8.4";
            src = fetchHex {
              pkg = "insta_scrapex";
              version = "0.8.4";
              sha256 =
                "33d17bfabb10170ccfd20952ec7aafb154de74ed511350bd8861bbff6b031c5b";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Scrapes Instagram JSON and HTML endpoints without
                            an API key'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/preciz/insta_scrapex";
            };
          } // packageOverrides)
      ) {};

    insta_scrapex = insta_scrapex_0_8_4;

    instagram_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "instagram";
            version = "0.3.0";
            src = fetchHex {
              pkg = "instagram";
              version = "0.3.0";
              sha256 =
                "84736c80dbe9ee1f577e3d79cb2b0f56158452269ec12230ec3f779b2696628e";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''simple HTTP client for Instagram'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuki-toida/instagram";
            };
          } // packageOverrides)
      ) {};

    instagram = instagram_0_3_0;

    instrumental_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "instrumental";
            version = "0.1.3";
            src = fetchHex {
              pkg = "instrumental";
              version = "0.1.3";
              sha256 =
                "26d3c6dcd2b04d716266afa9d12ba193fc1f038d21c67178e50f77ef1671acec";
            };

            meta = {
              description = ''An Elixir client for Instrumental
                            (http://instrumentalapp.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/instrumental-ex";
            };
          } // packageOverrides)
      ) {};

    instrumental = instrumental_0_1_3;

    instrumentation_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "instrumentation";
            version = "0.1.0";
            src = fetchHex {
              pkg = "instrumentation";
              version = "0.1.0";
              sha256 =
                "3852b455a8f43036d5db5403c96864baa4f055fadf828ff3c3c652d26f380d12";
            };

            meta = {
              description = ''Simple instrumentation framework inspired by
                            ActiveSupport::Notifications.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/cjbottaro/instrumentation_ex";
            };
          } // packageOverrides)
      ) {};

    instrumentation = instrumentation_0_1_0;

    int_set_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "int_set";
            version = "1.3.0";
            src = fetchHex {
              pkg = "int_set";
              version = "1.3.0";
              sha256 =
                "e8e2d7b79bddbb631ae886f1f2cfeefa38a72f0f7917fdee55f03acf3b97f32d";
            };

            meta = {
              description = ''A time- and memory-efficient unordered data
                            structure for positive integers.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Cantido/int_set";
            };
          } // packageOverrides)
      ) {};

    int_set = int_set_1_3_0;

    intel_hex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "intel_hex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "intel_hex";
              version = "0.1.0";
              sha256 =
                "7acfe599f4a905d6f639063c577dd5df5441ef64117d62048c43ad74b8268802";
            };

            meta = {
              description = ''Decode Intel Hex formatted files'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/intel_hex";
            };
          } // packageOverrides)
      ) {};

    intel_hex = intel_hex_0_1_0;

    intellij_elixir_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "intellij_elixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "intellij_elixir";
              version = "1.0.0";
              sha256 =
                "e4582c4d43297102a5f4861656e73764dee4038117db59811f4dccfc7eb8b60d";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              longDescription = ''IntellijElixir allows intellij-elixir to ask
                                Elixir for the native quoted form of code to
                                check that intellij-elixir`s quoted form
                                matches.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/KronicDeth/intellij_elixir";
            };
          } // packageOverrides)
      ) {};

    intellij_elixir = intellij_elixir_1_0_0;

    interval_tree_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "interval_tree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "interval_tree";
              version = "0.1.0";
              sha256 =
                "f9625026c3ca418faa26b2a03cba32c1d2f90d20e3609fa1f5d73c4fe973d0ef";
            };

            meta = {
              longDescription = ''Implements an interval tree using an
                                augmented self-balancing AVL tree with an
                                interval as the data field and a max value
                                tracking the interval high value in the subtree
                                rooted at that node'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/brpandey/interval_tree";
            };
          } // packageOverrides)
      ) {};

    interval_tree = interval_tree_0_1_0;

    into_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "into";
            version = "0.1.0";
            src = fetchHex {
              pkg = "into";
              version = "0.1.0";
              sha256 =
                "032d0bb123a13b6e815d554f995466404b1b23730d7e7ed58f10a70ad2b3f670";
            };

            meta = {
              description = ''Collect the result of a pipe expression into a
                            variable with ~>'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maxmellen/into.ex";
            };
          } // packageOverrides)
      ) {};

    into = into_0_1_0;

    invictus_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "invictus";
            version = "0.0.1";
            src = fetchHex {
              pkg = "invictus";
              version = "0.0.1";
              sha256 =
                "ed870b26adfb4ed1293e7ead45f73e4d08cec7740b07a060a2cd2688b7bd6e92";
            };

            meta = {
              description = ''This is a simple empty library to mark as my
                            hello world package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johninvictus/invictus";
            };
          } // packageOverrides)
      ) {};

    invictus = invictus_0_0_1;

    inxect_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inxect";
            version = "0.1.2";
            src = fetchHex {
              pkg = "inxect";
              version = "0.1.2";
              sha256 =
                "8c4d32546bed4c32032825024075e964c3d673a7f4fd356b397039897f6ca204";
            };

            meta = {
              description = ''Package to make dependency injection easier, see
                            documentation for more infos'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/baseclass/inxect";
            };
          } // packageOverrides)
      ) {};

    inxect = inxect_0_1_2;

    io_ansi_table_0_4_13 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          map_sorter_0_2_22,
          persist_config_0_2_6
        }:
          buildMix ({
            name = "io_ansi_table";
            version = "0.4.13";
            src = fetchHex {
              pkg = "io_ansi_table";
              version = "0.4.13";
              sha256 =
                "f9ea5a177af0f178ed77e1c45a084ebea51d87176c76ebaec90ce44bb149af7d";
            };
            beamDeps  = [ map_sorter_0_2_22 persist_config_0_2_6 ];

            meta = {
              longDescription = ''Prints data to STDOUT in a table with borders
                                and colors. Can choose a table style to change
                                the look of the table.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/io_ansi_table";
            };
          } // packageOverrides)
      ) {};

    io_ansi_table = io_ansi_table_0_4_13;

    ioffice_logglix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_12_0 }:
          buildMix ({
            name = "ioffice_logglix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ioffice_logglix";
              version = "0.1.0";
              sha256 =
                "0ad04792fccdf07fd6de590cd55d44fcbe50dab5e518c70397fa0addf8a85642";
            };
            beamDeps  = [ httpoison_0_12_0 ];

            meta = {
              description = ''Elixir loggly is a backend that forwards all log
                            messages to the Loggly service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pragmaticivan/logglix";
            };
          } // packageOverrides)
      ) {};

    ioffice_logglix = ioffice_logglix_0_1_0;

    iota_lib_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "iota_lib";
            version = "0.0.1";
            src = fetchHex {
              pkg = "iota_lib";
              version = "0.0.1";
              sha256 =
                "5546898b9f646aca7449ccf2873f8b7aa9a62f7a51db8fdfddf5141778b55bc2";
            };
            beamDeps  = [ httpotion_3_0_3 poison_3_1_0 ];

            meta = {
              description = ''An Elixir wrapper around the IOTA node RPC
                            API.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/peaqio/iota.lib.ex";
            };
          } // packageOverrides)
      ) {};

    iota_lib = iota_lib_0_0_1;

    ip_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ip";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ip";
              version = "1.0.0";
              sha256 =
                "487a003e7978cf6a47b5b023cf37d2b9bace884980d2a6ba216ffe22e1b3480c";
            };

            meta = {
              description = ''Represtations and tools for IP addresses and
                            networks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://gitlab.com/jimsy/ip";
            };
          } // packageOverrides)
      ) {};

    ip = ip_1_0_0;

    ip2country_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ip2country";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ip2country";
              version = "1.1.0";
              sha256 =
                "3b8d9df1cbd3915c323a820b450816c224756164434417f54312cb66263dd45d";
            };

            meta = {
              description = ''IP -> Country Code converted with built-in
                            database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/grych/ip2country";
            };
          } // packageOverrides)
      ) {};

    ip2country = ip2country_1_1_0;

    ip2location_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "ip2location";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ip2location";
              version = "0.1.0";
              sha256 =
                "77e059326d6c3f1348c53b3486dfa59d2b0ad90c999f51da86cabbb2d0099685";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''An Elixir library for the IP2Location
                            database.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/nazipov/ip2location-elixir";
            };
          } // packageOverrides)
      ) {};

    ip2location = ip2location_0_1_0;

    ip2location_elixir_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ip2location_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ip2location_elixir";
              version = "0.1.1";
              sha256 =
                "4b6c2e55547186ffc5a646d7b31ad557ae456ae1736222707cd98ee3e86a1e8d";
            };

            meta = {
              description = ''Interface for accessing IP2Location Binary Format
                            databases.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/danielgracia/ip2location-elixir";
            };
          } // packageOverrides)
      ) {};

    ip2location_elixir = ip2location_elixir_0_1_1;

    ip2locationdata_0_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ip2locationdata";
            version = "0.0.5";
            src = fetchHex {
              pkg = "ip2locationdata";
              version = "0.0.5";
              sha256 =
                "e2b01f8baed7be22c1a0460e54b983b5d3e9380b8ea8a1ec0dca6f5d6e30ef50";
            };

            meta = {
              description = ''Periodically fetches the free IP2Location
                            databases'';
              license = stdenv.lib.licenses.mpl20;
              homepage =
                "https://github.com/potatosalad/erlang-ip2locationdata";
            };
          } // packageOverrides)
      ) {};

    ip2locationdata = ip2locationdata_0_0_5;

    ip_address_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          socket_0_3_13,
          tiny_util_0_1_2
        }:
          buildMix ({
            name = "ip_address";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ip_address";
              version = "0.1.2";
              sha256 =
                "53ab12e90c5af72ed39db02b57ca11265a4d31c62ec70c6ffb8f40eccbc25bb2";
            };
            beamDeps  = [ socket_0_3_13 tiny_util_0_1_2 ];

            meta = {
              description = ''IP Address to Chinese Name'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dev800/ip_address";
            };
          } // packageOverrides)
      ) {};

    ip_address = ip_address_0_1_2;

    ipa_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ipa";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ipa";
              version = "0.0.3";
              sha256 =
                "ff365e6ec32ae9159877fb464c6754387fe97168e15a0ce7de346106ec6d75a6";
            };

            meta = {
              longDescription = ''A pale, hoppy library for working with IP
                                Addresses. Validate and transform IPv4 addresses
                                and subnet masks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bordeltabernacle/IPA";
            };
          } // packageOverrides)
      ) {};

    ipa = ipa_0_0_3;

    ipfs_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ipfs";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ipfs";
              version = "0.1.3";
              sha256 =
                "afe6a82374c7debd17f4ccca275826b6c14a3bb2dd82cf6d16b722c598311d6f";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A wrapper around the IPFS and IPFS Cluster
                            APIs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/the-missing-link/ipfs";
            };
          } // packageOverrides)
      ) {};

    ipfs = ipfs_0_1_3;

    ipfs_elixir_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_9_0
        }:
          buildMix ({
            name = "ipfs_elixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ipfs_elixir";
              version = "0.1.0";
              sha256 =
                "764f77e62b4460d3678977faf2a4af18804fd1ae984aa9ec49bd39de7205f755";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_9_0 ];

            meta = {
              description = ''An Ipfs API wrapper build in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/tensor-programming/Elixir-Ipfs-Api";
            };
          } // packageOverrides)
      ) {};

    ipfs_elixir = ipfs_elixir_0_1_0;

    iplist_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cidr_1_1_0,
          earmark_1_2_5
        }:
          buildMix ({
            name = "iplist";
            version = "1.0.2";
            src = fetchHex {
              pkg = "iplist";
              version = "1.0.2";
              sha256 =
                "fae5b5accc8b7a7618c2d1fbf94607ce6e79ca3b493da6643dbb1bd92be30bd4";
            };
            beamDeps  = [ cidr_1_1_0 earmark_1_2_5 ];

            meta = {
              description = ''Library and CLI tool to expand IPv4 ranges to
                            lists of IP numbers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/digitalronin/iplist";
            };
          } // packageOverrides)
      ) {};

    iplist = iplist_1_0_2;

    iptables_0_1_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "iptables";
            version = "0.1.6";
            src = fetchHex {
              pkg = "iptables";
              version = "0.1.6";
              sha256 =
                "6776d0dd1ecd9701d0a0de72fc71df5f50d4e8be98e027ffba3b3b581149fac4";
            };

            meta = {
              description = ''iptables wrapper for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vitorenesduarte/erlang-iptables";
            };
          } // packageOverrides)
      ) {};

    iptables = iptables_0_1_6;

    iptools_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iptools";
            version = "0.0.2";
            src = fetchHex {
              pkg = "iptools";
              version = "0.0.2";
              sha256 =
                "33bf27bc72094bbc4e67c664c979e5cebfe17c5369c91fc2e2610cc726b252db";
            };

            meta = {
              description = ''A set of functions for validating and
                            transforming IPv4 addresses'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackfist/iptools";
            };
          } // packageOverrides)
      ) {};

    iptools = iptools_0_0_2;

    irc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "irc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "irc";
              version = "0.1.0";
              sha256 =
                "cf0692519e6032cda7c376b8762e3fbe2000464daa089a1de0784e98821762c2";
            };

            meta = {
              longDescription = ''A library for working with irc messages. This
                                is not a client and won`t handle your connection
                                for you, but rather this gives you the
                                flexibility to use whatever transport you
                                need.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/derpydev/irc";
            };
          } // packageOverrides)
      ) {};

    irc = irc_0_1_0;

    is_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is";
            version = "1.0.0";
            src = fetchHex {
              pkg = "is";
              version = "1.0.0";
              sha256 =
                "4c5c64564f2e0d31fe1274d10bd56ffcd9de56a641598fb155cbc08298565b3c";
            };

            meta = {
              longDescription = ''Fast, extensible and easy to use data
                                structure validation with nested structures
                                support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bydooweedoo/is";
            };
          } // packageOverrides)
      ) {};

    is = is_1_0_0;

    is_chinese_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_chinese";
            version = "1.0.1";
            src = fetchHex {
              pkg = "is_chinese";
              version = "1.0.1";
              sha256 =
                "37efcf5d0293b183aa0ca5d1e0f08a7199ecdaa58cf9e853a479c5c2de4dd8c5";
            };

            meta = {
              description = ''Check whether string is Chinese'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/is_chinese";
            };
          } // packageOverrides)
      ) {};

    is_chinese = is_chinese_1_0_1;

    is_email_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_email";
            version = "0.0.2";
            src = fetchHex {
              pkg = "is_email";
              version = "0.0.2";
              sha256 =
                "fefcf35b6ca506cd7d2e3d1d850b49e9a2545180db46e291845aa9fd54812d82";
            };

            meta = {
              description = ''Loosely check whether a given string is an
                            email'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_email";
            };
          } // packageOverrides)
      ) {};

    is_email = is_email_0_0_2;

    is_up_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_2_1_0 }:
          buildMix ({
            name = "is_up";
            version = "1.0.2";
            src = fetchHex {
              pkg = "is_up";
              version = "1.0.2";
              sha256 =
                "e73713422ef99f9788d130eec1fd880ea15cc5e023137658263fe94bd12a56e1";
            };
            beamDeps  = [ httpotion_2_1_0 ];

            meta = {
              description = ''Check whether a given url is up.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_up";
            };
          } // packageOverrides)
      ) {};

    is_up = is_up_1_0_2;

    is_url_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_url";
            version = "0.0.1";
            src = fetchHex {
              pkg = "is_url";
              version = "0.0.1";
              sha256 =
                "4c3f86302e0c675ece51a247838f64ce88335008035463c8c20b21667399d413";
            };

            meta = {
              description = ''Validate a url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_url";
            };
          } // packageOverrides)
      ) {};

    is_url = is_url_0_0_1;

    is_x_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_x";
            version = "0.1.0";
            src = fetchHex {
              pkg = "is_x";
              version = "0.1.0";
              sha256 =
                "939f021426a52bce4dc90b084b6eb243cf4b07356a07b9b3af87f2e1513b8c0e";
            };

            meta = {
              longDescription = ''This module comprises of truth value
                                definitions like the whether the data is empty
                                or blank or null or nil or its length is 0 like.
                                To say in one word the extended functions of
                                value assertion functions'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/blackode/is_x";
            };
          } // packageOverrides)
      ) {};

    is_x = is_x_0_1_0;

    isbn_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "isbn";
            version = "0.1.2";
            src = fetchHex {
              pkg = "isbn";
              version = "0.1.2";
              sha256 =
                "67635006bf98e37e624491e7899a868e34eaadf0a8ff378cabc6ef22cdfb9b2f";
            };

            meta = {
              description = ''A package to check valid ISBNs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/isbn";
            };
          } // packageOverrides)
      ) {};

    isbn = isbn_0_1_2;

    isbndbex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "isbndbex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "isbndbex";
              version = "0.1.0";
              sha256 =
                "5c9fe6840a3beadb78a3b5f8d243475258d9d117ef0976cceb0d4c464a4cf4f4";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Elixir wrapper for isbndb rest api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rcoedo/isbndbex";
            };
          } // packageOverrides)
      ) {};

    isbndbex = isbndbex_0_1_0;

    isbot_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "isbot";
            version = "0.0.2";
            src = fetchHex {
              pkg = "isbot";
              version = "0.0.2";
              sha256 =
                "78d75e3a2fe27cdfd11b8013123b5ab8ba9c84065c60d128a5f563e0d6898e3c";
            };

            meta = {
              description = ''Detects bots/crawlers/spiders via the user
                            agent'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hentioe/isbot.ex.git";
            };
          } // packageOverrides)
      ) {};

    isbot = isbot_0_0_2;

    islands_engine_0_1_20 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          io_ansi_table_0_4_13,
          logger_file_backend_0_0_10,
          persist_config_0_2_6
        }:
          buildMix ({
            name = "islands_engine";
            version = "0.1.20";
            src = fetchHex {
              pkg = "islands_engine";
              version = "0.1.20";
              sha256 =
                "3a001447520356bce5f8c7dd1561045da99044f8be175d88083b31105dada153";
            };
            beamDeps  = [
                          io_ansi_table_0_4_13
                          logger_file_backend_0_0_10
                          persist_config_0_2_6
                        ];

            meta = {
              description = ''Models the Game of Islands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/islands_engine";
            };
          } // packageOverrides)
      ) {};

    islands_engine = islands_engine_0_1_20;

    islands_text_client_0_1_33 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          io_ansi_table_0_4_13,
          islands_engine_0_1_20,
          persist_config_0_2_6
        }:
          buildMix ({
            name = "islands_text_client";
            version = "0.1.33";
            src = fetchHex {
              pkg = "islands_text_client";
              version = "0.1.33";
              sha256 =
                "1ff36953ccdbb3366f983e7915ca134d1ec35aef3f2ab0a12c3bc32dfba8006b";
            };
            beamDeps  = [
                          io_ansi_table_0_4_13
                          islands_engine_0_1_20
                          persist_config_0_2_6
                        ];

            meta = {
              description = ''Text client for the Game of Islands.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/RaymondLoranger/islands_text_client";
            };
          } // packageOverrides)
      ) {};

    islands_text_client = islands_text_client_0_1_33;

    iso3166_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_csv_0_1_5,
          floki_0_20_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "iso3166";
            version = "0.0.6";
            src = fetchHex {
              pkg = "iso3166";
              version = "0.0.6";
              sha256 =
                "ec8748d649b6226aaa8d088b39c64f42bbdba6d2a12489c922540a19193eb0f5";
            };
            beamDeps  = [ ex_csv_0_1_5 floki_0_20_3 poison_2_2_0 ];

            meta = {
              longDescription = ''A library that provides a list of ISO3166
                                country names, two letter abbreviations, three
                                letter abbreviations, and functions for
                                converting between them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joelpm/iso3166ex";
            };
          } // packageOverrides)
      ) {};

    iso3166 = iso3166_0_0_6;

    iso3166_2_jp_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iso3166_2_jp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "iso3166_2_jp";
              version = "0.1.0";
              sha256 =
                "41858076223b4a4f48173485d4a54133b7e9494dccc81702adc9fd8871590b13";
            };

            meta = {
              description = ''ISO3166 2 Japanese Prefecture codes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ecpplus/ex_iso3166_2_jp";
            };
          } // packageOverrides)
      ) {};

    iso3166_2_jp = iso3166_2_jp_0_1_0;

    iso639_elixir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "iso639_elixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "iso639_elixir";
              version = "0.1.0";
              sha256 =
                "1cb9f423e93b8785783ab9d694de47377577f77a0ce00ac6b9a74730368a726b";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''Elixir library for converting language code
                                from one version of ISO 639 standard to another
                                and back'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ysemeniuk/iso639-elixir.git";
            };
          } // packageOverrides)
      ) {};

    iso639_elixir = iso639_elixir_0_1_0;

    iso8601_1_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "iso8601";
            version = "1.2.3";
            src = fetchHex {
              pkg = "iso8601";
              version = "1.2.3";
              sha256 =
                "02a1f5be3f3ee7c62dd50dea453ab321ffb702ba302c6282805faf23c800fae6";
            };

            meta = {
              description = ''An ISO 8601 date formating and parsing library
                            for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/erlsci/iso8601";
            };
          } // packageOverrides)
      ) {};

    iso8601_1_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "iso8601";
            version = "1.3.1";
            src = fetchHex {
              pkg = "iso8601";
              version = "1.3.1";
              sha256 =
                "a8b00594f4309a41d17ba4aeab2b94dfe1f4be99f263bc1f46dac9002ce99a29";
            };

            meta = {
              description = ''An ISO 8601 date formating and parsing library
                            for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/erlsci/iso8601";
            };
          } // packageOverrides)
      ) {};

    iso8601 = iso8601_1_3_1;

    iso_3166_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "iso_3166";
            version = "1.0.0";
            src = fetchHex {
              pkg = "iso_3166";
              version = "1.0.0";
              sha256 =
                "6eb27fde2963c8c15e5d8bad4c6943cee229ca19926f3aab3b22675178377202";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''Lookup information with ISO 3166-1 alpha-2,
                                ISO 3166-1 alpha-3 and ISO 3166-1 numeric'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ecrmnn/iso_3166";
            };
          } // packageOverrides)
      ) {};

    iso_3166 = iso_3166_1_0_0;

    isobmff_lang_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "isobmff_lang";
            version = "0.1.0";
            src = fetchHex {
              pkg = "isobmff_lang";
              version = "0.1.0";
              sha256 =
                "6bbea056660af006b87f6a38dd11313b21bc7546e00e20bef147a25a5aaa36bf";
            };

            meta = {
              longDescription = ''Elixir lib that unpacks MP4 and MOV 16 bit
                                language representations into ISO639-2/T
                                language codes.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Litterfeldt/elixir-isobmff-language-unpacker";
            };
          } // packageOverrides)
      ) {};

    isobmff_lang = isobmff_lang_0_1_0;

    issuer_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bunt_0_2_0 }:
          buildMix ({
            name = "issuer";
            version = "0.2.2";
            src = fetchHex {
              pkg = "issuer";
              version = "0.2.2";
              sha256 =
                "e2bc3226afc4ce2368dcad2fc69dbc36eb2cc8a9fa1997c4d374b6bddb18cf10";
            };
            beamDeps  = [ bunt_0_2_0 ];

            meta = {
              description = ''Adds `mix` tasks to easily issue (publish) new
                            versions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/issuer";
            };
          } // packageOverrides)
      ) {};

    issuer = issuer_0_2_2;

    iteraptor_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iteraptor";
            version = "1.2.1";
            src = fetchHex {
              pkg = "iteraptor";
              version = "1.2.1";
              sha256 =
                "d8ed864eb40eb2c2ff07062330e4db683678256875607dee1689e4136375e9ae";
            };

            meta = {
              description = ''This small library allows the deep iteration /
                            mapping of Enumerables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/elixir-iteraptor";
            };
          } // packageOverrides)
      ) {};

    iteraptor = iteraptor_1_2_1;

    itil_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "itil";
            version = "0.1.3";
            src = fetchHex {
              pkg = "itil";
              version = "0.1.3";
              sha256 =
                "cf76f063afcbb5ca20d380e352bd57e98c0ed7c538b883fc8bc69930773ee41c";
            };

            meta = {
              longDescription = ''Lazy print and log functions and utils ##
                                Examples iex> I.p \"sup\" \"sup\" :ok iex> I.p
                                \"s\",[1,2,3] \"s\" [1, 2, 3] :ok iex> I.l
                                \"s\", [1,2,4] 10:48:21.239 [info] s
                                10:48:21.242 [info] [1, 2, 4] :ok'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jschoch/itil";
            };
          } // packageOverrides)
      ) {};

    itil = itil_0_1_3;

    itsy_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "itsy";
            version = "0.0.2";
            src = fetchHex {
              pkg = "itsy";
              version = "0.0.2";
              sha256 =
                "c1a152037b585ce61f14ded39d6efe64c260d28b7fbabd78209785e147fc8597";
            };

            meta = {
              description = ''A library to simplify low level manipulation of
                            numerical types'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/Itsy";
            };
          } // packageOverrides)
      ) {};

    itsy = itsy_0_0_2;

    jack_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jack";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jack";
              version = "0.1.0";
              sha256 =
                "bffdcda3b7b144926e71e6bb7ffbcd2b42d1d16c2028fbed7401b9cefb1a9f05";
            };

            meta = {
              description = ''A shameless copy of Plug, but for general
                            purposes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelvinst/jack";
            };
          } // packageOverrides)
      ) {};

    jack = jack_0_1_0;

    jacob_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jacob";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jacob";
              version = "0.1.1";
              sha256 =
                "1482d686ef14d501d58dc179ced818755a334f525f0c9662fd32a24cde6ef8e3";
            };

            meta = {
              longDescription = ''Jacob is a Command line application framework
                                with built-in support for shell autocompletion
                                and help. It even has some UI tools.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulhenri-l/jacob";
            };
          } // packageOverrides)
      ) {};

    jacob = jacob_0_1_1;

    jalaali_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jalaali";
            version = "0.2.1";
            src = fetchHex {
              pkg = "jalaali";
              version = "0.2.1";
              sha256 =
                "32320fd8bf0c7d44898b1ee029049b8f364a2c348ed7696c7e2cf62bacc9f04e";
            };

            meta = {
              longDescription = ''Elixir Shamsi calendar. A Jalaali (Jalali,
                                Persian, Khorshidi, Shamsi) calendar system
                                implemention for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jalaali/elixir-jalaali";
            };
          } // packageOverrides)
      ) {};

    jalaali = jalaali_0_2_1;

    japan_municipality_code_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "japan_municipality_code";
            version = "1.1.1";
            src = fetchHex {
              pkg = "japan_municipality_code";
              version = "1.1.1";
              sha256 =
                "907c6495f0c7a8e69bf6d4b6f560742925a54ac5813c6892811d51d10ec0b797";
            };

            meta = {
              description = ''Elixir Library for Japan municipality key
                            converting'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hykw/japan_municipality_key";
            };
          } // packageOverrides)
      ) {};

    japan_municipality_code = japan_municipality_code_1_1_1;

    japanese_zenhan_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "japanese_zenhan";
            version = "1.0.1";
            src = fetchHex {
              pkg = "japanese_zenhan";
              version = "1.0.1";
              sha256 =
                "a514587bc12e3d9daed6e33cbef097e6a978c279ba5eb948a3c59e6f38bbd322";
            };

            meta = {
              longDescription = ''Elixir Library for converting Japanese
                                characters between Full-width(Zen) and
                                Half-width(Han)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hykw/japanese_zenhan";
            };
          } // packageOverrides)
      ) {};

    japanese_zenhan = japanese_zenhan_1_0_1;

    jason_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "jason";
            version = "1.0.0";
            src = fetchHex {
              pkg = "jason";
              version = "1.0.0";
              sha256 =
                "b96c400e04b7b765c0854c05a4966323e90c0d11fee0483b1567cda079abb205";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''A blazing fast JSON parser and generator in pure
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/jason";
            };
          } // packageOverrides)
      ) {};

    jason_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "jason";
            version = "1.0.1";
            src = fetchHex {
              pkg = "jason";
              version = "1.0.1";
              sha256 =
                "51f68891a38d5186ba6a4c0c148f59b33d20b068168976fd25bdfc0f57347f0b";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''A blazing fast JSON parser and generator in pure
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/jason";
            };
          } // packageOverrides)
      ) {};

    jason_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "jason";
            version = "1.1.1";
            src = fetchHex {
              pkg = "jason";
              version = "1.1.1";
              sha256 =
                "639645cfac325e34938167b272bae0791fea3a34cf32c29525abf1d323ed4c18";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''A blazing fast JSON parser and generator in pure
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/jason";
            };
          } // packageOverrides)
      ) {};

    jason = jason_1_1_1;

    jazz_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jazz";
            version = "0.2.2";
            src = fetchHex {
              pkg = "jazz";
              version = "0.2.2";
              sha256 =
                "3f87cfbef993529b7f5f5ebb115411864d6b1ed89f28d655e8ef86f5f64330ba";
            };

            meta = {
              description = ''JSON handling library for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/jazz";
            };
          } // packageOverrides)
      ) {};

    jazz = jazz_0_2_2;

    jch_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jch";
            version = "0.2.3";
            src = fetchHex {
              pkg = "jch";
              version = "0.2.3";
              sha256 =
                "0c7190682170d7172f0051cafeea479d9a4bfa33799b6d6a52d4c986d0da82a2";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''A Jump Consistent Hash library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/darach/jch-erl";
            };
          } // packageOverrides)
      ) {};

    jch = jch_0_2_3;

    jeeves_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "jeeves";
            version = "0.1.3";
            src = fetchHex {
              pkg = "jeeves";
              version = "0.1.3";
              sha256 =
                "9ee266b4ceb786a29b5e811cce8b286301904a17082d7e2cf52936a5a6d8957a";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              longDescription = ''Jeeves is library that transforms regular
                                modules into named or anonymous singleton or
                                pooled GenServers. Just write your business
                                functions, and Jeeves will convert them into an
                                API, a server, and potentially a pooled set of
                                workers.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/jeeves";
            };
          } // packageOverrides)
      ) {};

    jeeves = jeeves_0_1_3;

    jequalson_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jequalson";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jequalson";
              version = "0.1.1";
              sha256 =
                "5ed0a54b8aaa457cb441b3baafc508d8be4fc90db29a0cc27980eeeb65db18ac";
            };

            meta = {
              description = ''Helpers for testing JSON responses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dm1try/jequalson";
            };
          } // packageOverrides)
      ) {};

    jequalson = jequalson_0_1_1;

    jerb_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jerb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jerb";
              version = "0.1.0";
              sha256 =
                "bf8949f7cb6a0a7848023878094fa218754d9d6510676997f44212405a1c16ec";
            };

            meta = {
              description = ''Lightweight job processing with GenStage.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    jerb = jerb_0_1_0;

    jerboa_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jerboa";
            version = "0.2.0";
            src = fetchHex {
              pkg = "jerboa";
              version = "0.2.0";
              sha256 =
                "e63d37bfddb9aef7e46355ee79c21789d54ade4105c891e8c160259387d59c9f";
            };

            meta = {
              description = ''STUN/TURN encoder, decoder and client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/jerboa";
            };
          } // packageOverrides)
      ) {};

    jerboa_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jerboa";
            version = "0.3.0";
            src = fetchHex {
              pkg = "jerboa";
              version = "0.3.0";
              sha256 =
                "607e24f5c6c0d74b3cde488191dc51da6aaca3c1c9ff3d0bdbd17876de6508ba";
            };

            meta = {
              description = ''STUN/TURN encoder, decoder and client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/jerboa";
            };
          } // packageOverrides)
      ) {};

    jerboa = jerboa_0_3_0;

    jerry_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jerry";
            version = "0.1.4";
            src = fetchHex {
              pkg = "jerry";
              version = "0.1.4";
              sha256 =
                "9fbb70034642fb57d23aba36c135f24171ee0672d9eb7038178b2a866fd62154";
            };

            meta = {
              description = ''A TOML parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nroi/jerry";
            };
          } // packageOverrides)
      ) {};

    jerry = jerry_0_1_4;

    jet_0_1_0_init = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jet";
            version = "0.1.0-init";
            src = fetchHex {
              pkg = "jet";
              version = "0.1.0-init";
              sha256 =
                "fbc17d8916a0254d64d50cf468ce77727debd4f3b64aecd5070ce421c79c9b65";
            };

            meta = {
              description = ''Jet is a flexible HTTP client library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mischov/jet";
            };
          } // packageOverrides)
      ) {};

    jet = jet_0_1_0_init;

    jid_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jid";
            version = "0.1.3";
            src = fetchHex {
              pkg = "jid";
              version = "0.1.3";
              sha256 =
                "19680e62a525fd49e2983ab49d95c72bb1b842f5cbc8b57a4293bedbe727cebd";
            };

            meta = {
              description = ''A JID library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Freyskeyd/jid";
            };
          } // packageOverrides)
      ) {};

    jid = jid_0_1_3;

    jiffy_0_14_11 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jiffy";
            version = "0.14.11";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.14.11";
              sha256 =
                "1f095b7e26f01a3300d49da7df8f43977feacc3ed5a2501e665c8f4a5f03aaf5";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          } // packageOverrides)
      ) {};

    jiffy_0_14_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jiffy";
            version = "0.14.7";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.14.7";
              sha256 =
                "2b3b0f7976dae9c8266036e0d7e0398b64ac5207e3beee4c57896e44b2c17e97";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          } // packageOverrides)
      ) {};

    jiffy_0_15_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jiffy";
            version = "0.15.0";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.15.0";
              sha256 =
                "fc0c72f58aacc7db672f0f3db52ccfba9a5bcdbf9369c1307bbfc6f2d3867679";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          } // packageOverrides)
      ) {};

    jiffy_0_15_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jiffy";
            version = "0.15.1";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.15.1";
              sha256 =
                "607a32324432328a64734cc357781f1ffda96c3425a866dd058392d6e27ae8cc";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          } // packageOverrides)
      ) {};

    jiffy_0_15_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jiffy";
            version = "0.15.2";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.15.2";
              sha256 =
                "ce7a90aa464043e655999563f938329b206972cb0a1a36d015824dbe7d9ff5d0";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          } // packageOverrides)
      ) {};

    jiffy = jiffy_0_15_2;

    jira_0_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "jira";
            version = "0.0.8";
            src = fetchHex {
              pkg = "jira";
              version = "0.0.8";
              sha256 =
                "71c19ef23ea7351a2dc7b8f14d0c5794ff00382fa43a88a2235ec9c1741a73cb";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir client library for JIRA + JIRA Agile /
                            Greenhopper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/jira";
            };
          } // packageOverrides)
      ) {};

    jira = jira_0_0_8;

    jisho_elixir_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "jisho_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "jisho_elixir";
              version = "0.0.1";
              sha256 =
                "02ac7df24267b510a4e9cd1d1e943f135eb624a82a2da1daa86d81a514285eff";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Jisho.org API client for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nbw/jisho_elixir";
            };
          } // packageOverrides)
      ) {};

    jisho_elixir = jisho_elixir_0_0_1;

    jmespath_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jmespath";
            version = "0.0.0";
            src = fetchHex {
              pkg = "jmespath";
              version = "0.0.0";
              sha256 =
                "ee2d8f81b95db9b10ea481da82713e4ca6948fb1cc591b8e891c24e9ad0d5a6f";
            };

            meta = {
              description = ''Elixir implementation of JMESPath.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liuming/jmespath_elixir";
            };
          } // packageOverrides)
      ) {};

    jmespath = jmespath_0_0_0;

    job_queue_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_12_2 }:
          buildMix ({
            name = "job_queue";
            version = "0.1.0";
            src = fetchHex {
              pkg = "job_queue";
              version = "0.1.0";
              sha256 =
                "8f43c41cc8f5b2aab5424768e8e81ca5d2853f493abbc306e3df71c038eee9f5";
            };
            beamDeps  = [ gen_stage_0_12_2 ];

            meta = {
              description = ''Job Queue based on Genstage with retries,
                            deduplication and replies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffutter/job_queue";
            };
          } // packageOverrides)
      ) {};

    job_queue = job_queue_0_1_0;

    jobbit_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jobbit";
            version = "0.3.0";
            src = fetchHex {
              pkg = "jobbit";
              version = "0.3.0";
              sha256 =
                "7b28afc7a90fd3ec49015805b154025dc77ef5034576587c81401aef7efd74fb";
            };

            meta = {
              description = ''Execute tasks without crashing the parent
                            process.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/jobbit";
            };
          } // packageOverrides)
      ) {};

    jobbit = jobbit_0_3_0;

    jobs_0_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, parse_trans_3_0_0
        }:
          buildRebar3 ({
            name = "jobs";
            version = "0.7.1";
            src = fetchHex {
              pkg = "jobs";
              version = "0.7.1";
              sha256 =
                "d54135f78a87764f026e3f66b1c20d776117e6b72c1e0b9428f114e6c0387c71";
            };

            beamDeps  = [ parse_trans_3_0_0 ];

            meta = {
              description = ''Job scheduler'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/jobs";
            };
          } // packageOverrides)
      ) {};

    jobs = jobs_0_7_1;

    jobspool_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "jobspool";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jobspool";
              version = "0.1.1";
              sha256 =
                "5ff710028910b30ee2fc845d0d3fbce85be1baffecb08f3392537122122dfba0";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''Simple Elixir jobs pool'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flupke/exjobspool";
            };
          } // packageOverrides)
      ) {};

    jobspool = jobspool_0_1_1;

    johanna_0_2_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "johanna";
            version = "0.2.7";
            src = fetchHex {
              pkg = "johanna";
              version = "0.2.7";
              sha256 =
                "a50339720238f5e67a39c4806437dc0b4a9959c5b6905ff9dd245b08305fbc26";
            };

            meta = {
              longDescription = ''**The wrapper for `erlcron` to be used in
                                Elixir projects.** Original erlang library:
                                https://github.com/erlware/erlcron'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/johanna";
            };
          } // packageOverrides)
      ) {};

    johanna = johanna_0_2_7;

    joker_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "joker";
            version = "0.2.0";
            src = fetchHex {
              pkg = "joker";
              version = "0.2.0";
              sha256 =
                "a593ff26113bf184ece44164450df61ebddeca9ed064f97c62fd8fff0169c1a6";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocol written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/0x00evil/joker";
            };
          } // packageOverrides)
      ) {};

    joker = joker_0_2_0;

    jorel_mix_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jorel_mix";
            version = "0.0.4";
            src = fetchHex {
              pkg = "jorel_mix";
              version = "0.0.4";
              sha256 =
                "b2c2cfb7a406b725f175831337cbe10b294d2a7f2f24499f852338558b8aa2e5";
            };

            meta = {
              description = ''Just anOther RELease assembler'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/emedia-project/jorel_mix";
            };
          } // packageOverrides)
      ) {};

    jorel_mix = jorel_mix_0_0_4;

    jose_1_7_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, base64url_0_0_1 }:
          buildMix ({
            name = "jose";
            version = "1.7.9";
            src = fetchHex {
              pkg = "jose";
              version = "1.7.9";
              sha256 =
                "0efaac15223e7cd29773296214ab3b85700d2cd1354c931342750aa1afaf6146";
            };
            beamDeps  = [ base64url_0_0_1 ];

            meta = {
              description = ''JSON Object Signing and Encryption (JOSE) for
                            Erlang and Elixir.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-jose";
            };
          } // packageOverrides)
      ) {};

    jose_1_8_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, base64url_0_0_1 }:
          buildMix ({
            name = "jose";
            version = "1.8.4";
            src = fetchHex {
              pkg = "jose";
              version = "1.8.4";
              sha256 =
                "d28c8e54f06d7a668e98ca9e5b9b2b56764bdd95b69e9185e8209a3e880f10a0";
            };
            beamDeps  = [ base64url_0_0_1 ];

            meta = {
              description = ''JSON Object Signing and Encryption (JOSE) for
                            Erlang and Elixir.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-jose";
            };
          } // packageOverrides)
      ) {};

    jose = jose_1_8_4;

    joystick_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "joystick";
            version = "0.2.0";
            src = fetchHex {
              pkg = "joystick";
              version = "0.2.0";
              sha256 =
                "4f338ee1ab0c278f54c42b038489b893fee7e12ea1ff1d8bb29c34b4e43038db";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Simple Elixir Joystick Wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/connorrigby/joystick";
            };
          } // packageOverrides)
      ) {};

    joystick = joystick_0_2_0;

    jp_katsuyou_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jp_katsuyou";
            version = "0.1.2";
            src = fetchHex {
              pkg = "jp_katsuyou";
              version = "0.1.2";
              sha256 =
                "2d1ae584c1e555678aa38a5cd1d122392aa9eeed763205ded3426f2c2f7b32db";
            };

            meta = {
              description = ''A library that provide some utility for japanese
                            language conjugation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swarut/jp_katsuyou";
            };
          } // packageOverrides)
      ) {};

    jp_katsuyou = jp_katsuyou_0_1_2;

    jplaceholder_1_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          json_2_0_0_SNAPSHOT
        }:
          buildMix ({
            name = "jplaceholder";
            version = "1.0.5";
            src = fetchHex {
              pkg = "jplaceholder";
              version = "1.0.5";
              sha256 =
                "0e4a032025de452237fa4e40a94195c54687aee3f3600eab52a9945d264468e1";
            };
            beamDeps  = [ httpotion_3_1_0 json_2_0_0_SNAPSHOT ];

            meta = {
              description = ''A JsonPlaceholder REST API Client built with
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MobElian/Jplaceholder";
            };
          } // packageOverrides)
      ) {};

    jplaceholder = jplaceholder_1_0_5;

    jqish_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jqish";
            version = "0.1.2";
            src = fetchHex {
              pkg = "jqish";
              version = "0.1.2";
              sha256 =
                "0ae570daa4c6be14161aad2644870b5e75655bd888226f7946b9074089402e08";
            };

            meta = {
              description = ''Jq like thing for grabbing stuff out of json like
                            objects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/jqish";
            };
          } // packageOverrides)
      ) {};

    jqish = jqish_0_1_2;

    js_string_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "js_string";
            version = "0.1.2";
            src = fetchHex {
              pkg = "js_string";
              version = "0.1.2";
              sha256 =
                "fd99bc1b30b7dd7371412f61fed424a36006f9073711fb8cd95cb70119ff7094";
            };

            meta = {
              description = ''This library get you to get JavaScript string
                            length in Elixir codes.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ecpplus/elixir-js-string";
            };
          } // packageOverrides)
      ) {};

    js_string = js_string_0_1_2;

    jsex_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_9_0 }:
          buildMix ({
            name = "jsex";
            version = "2.0.0";
            src = fetchHex {
              pkg = "jsex";
              version = "2.0.0";
              sha256 =
                "98c1501645e31efdbcbb6172983d4deb1335de993966197e6a4343492fa7d872";
            };
            beamDeps  = [ jsx_2_9_0 ];

            meta = {
              description = ''json for elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsex";
            };
          } // packageOverrides)
      ) {};

    jsex = jsex_2_0_0;

    jsn_2_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsn";
            version = "2.1.1";
            src = fetchHex {
              pkg = "jsn";
              version = "2.1.1";
              sha256 =
                "5bf4c22f971d0500db7f125b50a4aac9e5b0d6827ea4cf83fae0a17b2fc52637";
            };

            meta = {
              description = ''Utilities for interacting with decoded JSON in
                            erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/nalundgaard/jsn";
            };
          } // packageOverrides)
      ) {};

    jsn = jsn_2_1_1;

    json_1_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchee_0_13_1,
          benchee_html_0_5_0,
          exjsx_4_0_0,
          jason_1_1_1,
          jsone_1_4_6,
          poison_3_1_0,
          tiny_1_0_1
        }:
          buildMix ({
            name = "json";
            version = "1.2.2";
            src = fetchHex {
              pkg = "json";
              version = "1.2.2";
              sha256 =
                "dd9e15c2a06ce572e79a6760390ca02348c0f1c1863a22910862858186247972";
            };
            beamDeps  = [
                          benchee_0_13_1
                          benchee_html_0_5_0
                          exjsx_4_0_0
                          jason_1_1_1
                          jsone_1_4_6
                          poison_3_1_0
                          tiny_1_0_1
                        ];

            meta = {
              description = ''Native Elixir library for JSON encoding and
                            decoding'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cblage/elixir-json";
            };
          } // packageOverrides)
      ) {};

    json_2_0_0_SNAPSHOT = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json";
            version = "2.0.0-SNAPSHOT";
            src = fetchHex {
              pkg = "json";
              version = "2.0.0-SNAPSHOT";
              sha256 =
                "5236771f1c18b292d05fa3f3b17a88e620416929a76f6f7607a06354be83df18";
            };

            meta = {
              description = ''Native Elixir library for JSON encoding and
                            decoding'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cblage/elixir-json";
            };
          } // packageOverrides)
      ) {};

    json_2_1_0_SNAPSHOT = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "json";
            version = "2.1.0-SNAPSHOT";
            src = fetchHex {
              pkg = "json";
              version = "2.1.0-SNAPSHOT";
              sha256 =
                "405f74d95ce206bea3abbcd8f13f2290e0bfdf8a4bd232fd0e67c2f2249e2877";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''Native Elixir library for JSON encoding and
                            decoding'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cblage/elixir-json";
            };
          } // packageOverrides)
      ) {};

    json = json_2_1_0_SNAPSHOT;

    json_api_client_3_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          deep_merge_0_1_1,
          exjsx_4_0_0,
          fuse_2_4_2,
          httpoison_0_13_0,
          poison_3_1_0,
          uri_query_0_1_2
        }:
          buildMix ({
            name = "json_api_client";
            version = "3.0.3";
            src = fetchHex {
              pkg = "json_api_client";
              version = "3.0.3";
              sha256 =
                "895fa9d2a4f5a54c25901139683cac1950fc56b1871a28ff20c87975f9b065ad";
            };
            beamDeps  = [
                          deep_merge_0_1_1
                          exjsx_4_0_0
                          fuse_2_4_2
                          httpoison_0_13_0
                          poison_3_1_0
                          uri_query_0_1_2
                        ];

            meta = {
              description = ''Client package for accessing JSONApi services'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Decisiv/json_api_client";
            };
          } // packageOverrides)
      ) {};

    json_api_client = json_api_client_3_0_3;

    json_diff_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json_diff";
            version = "0.1.2";
            src = fetchHex {
              pkg = "json_diff";
              version = "0.1.2";
              sha256 =
                "baa6906c2bad90f4d5cf2c0d2c7921715da1fd7516bc8cf8de8ce8621284227d";
            };

            meta = {
              description = ''An Elixir implementation of the diffing element
                            of JSON Patch (RFC 6902)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EddyLane/elixir_json_diff";
            };
          } // packageOverrides)
      ) {};

    json_diff = json_diff_0_1_2;

    json_diff_ex_0_6_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json_diff_ex";
            version = "0.6.6";
            src = fetchHex {
              pkg = "json_diff_ex";
              version = "0.6.6";
              sha256 =
                "e2b143777f4f3ea9d11c71682d882f220c728518a9212c56c298ad59a67fd25e";
            };

            meta = {
              description = ''Diff and patch for JSON in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/olafura/json_diff_ex";
            };
          } // packageOverrides)
      ) {};

    json_diff_ex = json_diff_ex_0_6_6;

    json_feed_0_1_0_alpha = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "json_feed";
            version = "0.1.0-alpha";
            src = fetchHex {
              pkg = "json_feed";
              version = "0.1.0-alpha";
              sha256 =
                "0caf0d9781c3e9e2e404983a12b09f87b398dcaa2da4b537caf738e55ef4e4ed";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A JSON Feed implementation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/murielsilveira/json_feed_elixir";
            };
          } // packageOverrides)
      ) {};

    json_feed = json_feed_0_1_0_alpha;

    json_hyperschema_client_builder_0_9_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_json_schema_0_5_7,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "json_hyperschema_client_builder";
            version = "0.9.1";
            src = fetchHex {
              pkg = "json_hyperschema_client_builder";
              version = "0.9.1";
              sha256 =
                "6c2233be606ee7e521b34d1539dfd7d20d52b9bf908c8d92cadef7cb071896a9";
            };
            beamDeps  = [ ex_json_schema_0_5_7 exjsx_3_2_1 httpoison_0_11_2
                      ];

            meta = {
              description = ''Generate HTTP clients based on JSON
                            Hyperschemas'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cantierecreativo/json_hyperschema_client_builder";
            };
          } // packageOverrides)
      ) {};

    json_hyperschema_client_builder =
      json_hyperschema_client_builder_0_9_1;

    json_ld_0_2_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, jason_1_1_1, rdf_0_4_1
        }:
          buildMix ({
            name = "json_ld";
            version = "0.2.3";
            src = fetchHex {
              pkg = "json_ld";
              version = "0.2.3";
              sha256 =
                "5f477bd993539c2850e0e5233c29c69a5d7adb825b4f669eafff3b466e3850ed";
            };
            beamDeps  = [ jason_1_1_1 rdf_0_4_1 ];

            meta = {
              description = ''An implementation of JSON-LD for Elixir and
                            RDF.ex.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marcelotto/jsonld-ex";
            };
          } // packageOverrides)
      ) {};

    json_ld = json_ld_0_2_3;

    json_logex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_0_0 }:
          buildMix ({
            name = "json_logex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "json_logex";
              version = "0.1.0";
              sha256 =
                "132a9c4e377b0f10644179e1a9500f4286f8660cb66c9a7bb0a13c3dbbab0bf1";
            };
            beamDeps  = [ poison_3_0_0 ];

            meta = {
              longDescription = ''JSONLogex is a custom backend for Elixir`s
                                Logger. It outputs log events in JSON format to
                                the standard console.'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/BBVA/json-logex.git";
            };
          } // packageOverrides)
      ) {};

    json_logex = json_logex_0_1_0;

    json_logger_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, json_1_2_2 }:
          buildMix ({
            name = "json_logger";
            version = "0.6.0";
            src = fetchHex {
              pkg = "json_logger";
              version = "0.6.0";
              sha256 =
                "4b3aaa23c2d0fec4fe4ba7c001ec6a72b1ae36f0268ede87557c59663843a0c3";
            };
            beamDeps  = [ json_1_2_2 ];

            meta = {
              description = ''A simple library for logging with JSON, best
                            suited with Logstash.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/LeeroyDing/json_logger";
            };
          } // packageOverrides)
      ) {};

    json_logger = json_logger_0_6_0;

    json_logic_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "json_logic";
            version = "0.3.2";
            src = fetchHex {
              pkg = "json_logic";
              version = "0.3.2";
              sha256 =
                "fa8c119bdbedd923a4efb4c8e1c3a080db01e9b74e514bcf1a5c8e5e543d6257";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Elixir implementation of JsonLogic'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liuming/json_logic_elixir";
            };
          } // packageOverrides)
      ) {};

    json_logic = json_logic_0_3_2;

    json_patch_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json_patch";
            version = "0.8.0";
            src = fetchHex {
              pkg = "json_patch";
              version = "0.8.0";
              sha256 =
                "ecc7c4a72388ae8907ccf3ec10f604da992214d5e535c18ba531009b1a77d0c7";
            };

            meta = {
              description = ''An Elixir implementation of JSON Patch (RFC
                            6902)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gamache/json_patch_elixir";
            };
          } // packageOverrides)
      ) {};

    json_patch = json_patch_0_8_0;

    json_pointer_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json_pointer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "json_pointer";
              version = "0.0.2";
              sha256 =
                "150b37bc4ff689758f17aee180fbf8f7226c3eeff7d28a782e6f0a74f859417e";
            };

            meta = {
              longDescription = ''Implementation of RFC 6901 which defines a
                                string syntax for identifying a specific value
                                within a JSON document'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/json_pointer";
            };
          } // packageOverrides)
      ) {};

    json_pointer = json_pointer_0_0_2;

    json_schema_validator_0_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, ex_json_schema_0_5_7
        }:
          buildMix ({
            name = "json_schema_validator";
            version = "0.2.1";
            src = fetchHex {
              pkg = "json_schema_validator";
              version = "0.2.1";
              sha256 =
                "17b403c6822e5ea353acbbea5add4b405a88228a56701d325c8d6e560e93677a";
            };
            beamDeps  = [ ex_json_schema_0_5_7 ];

            meta = {
              description = ''A thin wrapper around a Json Schema Validator.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast/json-schema-validator";
            };
          } // packageOverrides)
      ) {};

    json_schema_validator = json_schema_validator_0_2_1;

    json_stream_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_9_0 }:
          buildMix ({
            name = "json_stream";
            version = "0.0.1";
            src = fetchHex {
              pkg = "json_stream";
              version = "0.0.1";
              sha256 =
                "07e2283f7f211f50d4fa686f1814f7a8b9637cfe3f358f6f15332489b2b7f2ab";
            };
            beamDeps  = [ jsx_2_9_0 ];

            meta = {
              longDescription = ''Small but useful wrapper above erlang `jsx`
                                to stream json elements from an Elixir binary
                                stream.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/json_stream";
            };
          } // packageOverrides)
      ) {};

    json_stream = json_stream_0_0_1;

    json_stream_encoder_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "json_stream_encoder";
            version = "0.1.2";
            src = fetchHex {
              pkg = "json_stream_encoder";
              version = "0.1.2";
              sha256 =
                "4f50e4829f0537159278f44c6d18a598ef31a293f577717c348c14e59df8873c";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A simple interface for streaming JSON to IO.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TreyE/json_stream_encoder";
            };
          } // packageOverrides)
      ) {};

    json_stream_encoder = json_stream_encoder_0_1_2;

    json_web_token_0_2_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "json_web_token";
            version = "0.2.10";
            src = fetchHex {
              pkg = "json_web_token";
              version = "0.2.10";
              sha256 =
                "020c62f3659ce0cdffeb89a651dee9eb34a346ee7406b4800a7754ce0724493b";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Elixir implementation of the JSON Web Token
                            (JWT), RFC 7519'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/json_web_token_ex";
            };
          } // packageOverrides)
      ) {};

    json_web_token = json_web_token_0_2_10;

    jsondoc_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsondoc";
            version = "0.7.1";
            src = fetchHex {
              pkg = "jsondoc";
              version = "0.7.1";
              sha256 =
                "f11e68092f099b1d1e4fdb4e801a0c055b25b32a72efbf36461d4f99281a88d0";
            };

            meta = {
              description = ''Erlang service handling json documents and
                            templates'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aruki-delivery/jsondoc";
            };
          } // packageOverrides)
      ) {};

    jsondoc = jsondoc_0_7_1;

    jsone_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.2.0";
            src = fetchHex {
              pkg = "jsone";
              version = "1.2.0";
              sha256 =
                "a60e74284d3a923cde65c00a39dd4542fd7da7c22e8385c0378ad419c54b2e08";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.2.2";
            src = fetchHex {
              pkg = "jsone";
              version = "1.2.2";
              sha256 =
                "253c18c7dc6fc27290b1f507f3adc6863f4396b099d0eb396e3c0e58dcfe0ee4";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.2.3";
            src = fetchHex {
              pkg = "jsone";
              version = "1.2.3";
              sha256 =
                "629369e718a50a2fcb23c210b6f2eb2fd08b0a6a2c5edade4fca24cda368ac13";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.3.1";
            src = fetchHex {
              pkg = "jsone";
              version = "1.3.1";
              sha256 =
                "ec2e0af56e9ff4b3b941012bd2f479ba1b0b46a722e427b23e3b5e9a74aa1e07";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.4.0";
            src = fetchHex {
              pkg = "jsone";
              version = "1.4.0";
              sha256 =
                "f5c71a945f8dd7e8c4ff46d9a5ef1cb354a70d1311d282eef9240c42279d35ce";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_4_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.4.3";
            src = fetchHex {
              pkg = "jsone";
              version = "1.4.3";
              sha256 =
                "bdbf938f096d3f39a0693b5bfdf3e26bc07004d9b337f8ccb4244073b452b9e3";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_4_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.4.5";
            src = fetchHex {
              pkg = "jsone";
              version = "1.4.5";
              sha256 =
                "862b428eee973556ca1457e35ab37440d46446a31d0ae1c315540e56796b8212";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_4_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.4.6";
            src = fetchHex {
              pkg = "jsone";
              version = "1.4.6";
              sha256 =
                "78eee8bb38f0bee2e73673d71bc75fc6fb01f56f0d23e769a26eee3655487a38";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone = jsone_1_4_6;

    jsurl_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsurl_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jsurl_ex";
              version = "0.1.0";
              sha256 =
                "f26e46668bff25f7705d8cb58c38ac106988e98d60219cff57ce936666f85078";
            };

            meta = {
              description = ''Package to work with the jsurl format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/jsurl_ex";
            };
          } // packageOverrides)
      ) {};

    jsurl_ex = jsurl_ex_0_1_0;

    jsx_1_4_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsx";
            version = "1.4.5";
            src = fetchHex {
              pkg = "jsx";
              version = "1.4.5";
              sha256 =
                "ff5115611c5dd789cebe3addc07d18b86340f701c52ad063caba6fe8da3a489b";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.7.1";
            src = fetchHex {
              pkg = "jsx";
              version = "2.7.1";
              sha256 =
                "52d0e8bda0c8624bc59c3119236eb49bb66289702ea3d59ad76fd2a56cdf9089";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_7_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.7.2";
            src = fetchHex {
              pkg = "jsx";
              version = "2.7.2";
              sha256 =
                "36ca4772c09d69efc9e069aec7327cbd57d53d56c9a2777d8fb3bf3c1eab6df3";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.8.0";
            src = fetchHex {
              pkg = "jsx";
              version = "2.8.0";
              sha256 =
                "a8ba15d5bac2c48b2be1224a0542ad794538d79e2cc16841a4e24ca75f0f8378";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.8.2";
            src = fetchHex {
              pkg = "jsx";
              version = "2.8.2";
              sha256 =
                "b4c5d3230b397c8d95579e4a3d72826bb6463160130ccf4182f5be8579b5f44c";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_8_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.8.3";
            src = fetchHex {
              pkg = "jsx";
              version = "2.8.3";
              sha256 =
                "fc3499fed7a726995aa659143a248534adc754ebd16ccd437cd93b649a95091f";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.9.0";
            src = fetchHex {
              pkg = "jsx";
              version = "2.9.0";
              sha256 =
                "8ee1db1cabafdd578a2776a6aaae87c2a8ce54b47b59e9ec7dab5d7eb71cd8dc";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx = jsx_2_9_0;

    jsxd_0_1_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsxd";
            version = "0.1.10";
            src = fetchHex {
              pkg = "jsxd";
              version = "0.1.10";
              sha256 =
                "f71a8238f08a1dee130e8959ff5343524891fa6531392667a5b911cead5f5082";
            };

            meta = {
              description = ''jsx data structire traversing and modification
                            library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/jsxd";
            };
          } // packageOverrides)
      ) {};

    jsxd_0_2_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsxd";
            version = "0.2.4";
            src = fetchHex {
              pkg = "jsxd";
              version = "0.2.4";
              sha256 =
                "a5b20ec3324e981a57e213ca4824c56885029bc0be135de2de92c82d6af3fcf1";
            };

            meta = {
              description = ''jsx data structire traversing and modification
                            library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/jsxd";
            };
          } // packageOverrides)
      ) {};

    jsxd = jsxd_0_2_4;

    juice_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "juice";
            version = "0.0.3";
            src = fetchHex {
              pkg = "juice";
              version = "0.0.3";
              sha256 =
                "c4a8a7bb169031a56ed66e003f1c7454e7748cf446ef249ba57df4971fbd3574";
            };

            meta = {
              description = ''Reduce in memory data structures using a
                            lightweight query language'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rupurt/juice";
            };
          } // packageOverrides)
      ) {};

    juice = juice_0_0_3;

    julia_port_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "julia_port";
            version = "0.1.0";
            src = fetchHex {
              pkg = "julia_port";
              version = "0.1.0";
              sha256 =
                "a687b018c6c5c2623d9648aa8444de4abff3b282dd38d98b7c5b973c1973cee3";
            };

            meta = {
              longDescription = ''example project to invoke julia functions in
                                elixir to do scientific computing using port and
                                metaprogramming'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjen07/julia_port";
            };
          } // packageOverrides)
      ) {};

    julia_port = julia_port_0_1_0;

    jumbo_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jumbo";
            version = "1.0.2";
            src = fetchHex {
              pkg = "jumbo";
              version = "1.0.2";
              sha256 =
                "d4ca163c8e8bf9c53b55d5f572ecefa9f149b0ca3df3f7f2e557f586e2e18f3a";
            };

            meta = {
              description = ''Reliable, OTP-style, lightweight job processing
                            queue'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/jumbo";
            };
          } // packageOverrides)
      ) {};

    jumbo = jumbo_1_0_2;

    jumper_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jumper";
            version = "1.0.0";
            src = fetchHex {
              pkg = "jumper";
              version = "1.0.0";
              sha256 =
                "e73501e5bd684dd0ee9a186a0bc3ce1dcfed4c715174ff6ceda613e417cdecde";
            };

            meta = {
              description = ''Jump consistent hash implementation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whitfin/jumper";
            };
          } // packageOverrides)
      ) {};

    jumper = jumper_1_0_0;

    junit_formatter_2_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "junit_formatter";
            version = "2.2.0";
            src = fetchHex {
              pkg = "junit_formatter";
              version = "2.2.0";
              sha256 =
                "ea23078f6bfc36acd4cefbf01cae6680b2a65919d10647403da04a13c9929f01";
            };

            meta = {
              longDescription = ''An ExUnit.Formatter that produces an XML
                                report of the tests run in the project _build
                                dir. It is a good fit with Jenkins test
                                reporting plugin, for example.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorolinasc/junit-formatter";
            };
          } // packageOverrides)
      ) {};

    junit_formatter = junit_formatter_2_2_0;

    just4fun_4_0_0_dev = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "just4fun";
            version = "4.0.0-dev";
            src = fetchHex {
              pkg = "just4fun";
              version = "4.0.0-dev";
              sha256 =
                "ab541cbc7a682d42dfa2445fa5f9392c9f5f667df96c40f00d06468fa6945e30";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    just4fun = just4fun_4_0_0_dev;

    justify_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "justify";
            version = "0.2.0";
            src = fetchHex {
              pkg = "justify";
              version = "0.2.0";
              sha256 =
                "28c27996b9137d8f97206dafeb9d7d4d3b8f0911cf3d52eb39975058873db46c";
            };

            meta = {
              description = ''Simple data validation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sticksnleaves/justify";
            };
          } // packageOverrides)
      ) {};

    justify = justify_0_2_0;

    juvet_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0,
          pubsub_1_1_0,
          websockex_0_4_1
        }:
          buildMix ({
            name = "juvet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "juvet";
              version = "0.0.1";
              sha256 =
                "5aedf7e7dff9f6ca61c07b4b13dccde530f7346c2914eeea0c4b8471b1c903f2";
            };
            beamDeps  = [
                          httpoison_1_2_0
                          poison_3_1_0
                          pubsub_1_1_0
                          websockex_0_4_1
                        ];

            meta = {
              description = ''The message platform for chat apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/juvet/juvet";
            };
          } // packageOverrides)
      ) {};

    juvet = juvet_0_0_1;

    jvalid_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distillery_1_5_3,
          jason_1_1_1,
          nex_json_schema_0_8_0
        }:
          buildMix ({
            name = "jvalid";
            version = "0.7.0";
            src = fetchHex {
              pkg = "jvalid";
              version = "0.7.0";
              sha256 =
                "7a75be5130353ce056f43e65bb3692757d949b5655e2a4460f519937c4aaa3af";
            };
            beamDeps  = [ distillery_1_5_3 jason_1_1_1 nex_json_schema_0_8_0
                      ];

            meta = {
              description = ''Json Schema validation helper, that allows to
                            store schemes in a separate files.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/jvalid";
            };
          } // packageOverrides)
      ) {};

    jvalid = jvalid_0_7_0;

    jwalk_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jwalk";
            version = "1.1.0";
            src = fetchHex {
              pkg = "jwalk";
              version = "1.1.0";
              sha256 =
                "10c150910ba3539583887cb2b5c3f70d602138471e6f6b5c22498aa18ed654e1";
            };

            meta = {
              longDescription = ''Helper module for working with Erlang
                                representations of JSON, handling eep-18, map,
                                mochijson-style and proplists representations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/jwalk";
            };
          } // packageOverrides)
      ) {};

    jwalk_1_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jwalk";
            version = "1.1.3";
            src = fetchHex {
              pkg = "jwalk";
              version = "1.1.3";
              sha256 =
                "94d003dd7284e3b051fa66914e504e8da1c776c716ea82c52f2e182bad190689";
            };

            meta = {
              longDescription = ''Helper module for working with Erlang
                                representations of JSON, handling eep-18, map,
                                mochijson-style and proplists representations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/jwalk";
            };
          } // packageOverrides)
      ) {};

    jwalk = jwalk_1_1_3;

    jwerl_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_9_0 }:
          buildMix ({
            name = "jwerl";
            version = "1.0.0";
            src = fetchHex {
              pkg = "jwerl";
              version = "1.0.0";
              sha256 =
                "84b4077e14e5c86bf30e73be3b6df67df6a07cfeddf9a829b3f23debd7e2cd93";
            };
            beamDeps  = [ jsx_2_9_0 ];

            meta = {
              description = ''JWT Library for Erlang and Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/emedia-project/jwerl";
            };
          } // packageOverrides)
      ) {};

    jwerl = jwerl_1_0_0;

    jwt_claims_0_0_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, json_web_token_0_2_10
        }:
          buildMix ({
            name = "jwt_claims";
            version = "0.0.4";
            src = fetchHex {
              pkg = "jwt_claims";
              version = "0.0.4";
              sha256 =
                "34e77c4c8044026646f23c2017ed9cf76d540b8f3c24d141f1c20d62543278cc";
            };
            beamDeps  = [ json_web_token_0_2_10 ];

            meta = {
              description = ''Elixir implementation of JWT registered claims,
                            RFC 7519'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/jwt_claims_ex";
            };
          } // packageOverrides)
      ) {};

    jwt_claims = jwt_claims_0_0_4;

    jwtex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_3_1 }:
          buildMix ({
            name = "jwtex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "jwtex";
              version = "0.0.1";
              sha256 =
                "5b8b826e8543e323f62a0e8cb2fb5714d8e7110ecce97419cd0a4a656fa411cf";
            };
            beamDeps  = [ poison_1_3_1 ];

            meta = {
              description = ''JWT decoding library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/mschae/jwtex";
            };
          } // packageOverrides)
      ) {};

    jwtex = jwtex_0_0_1;

    jyggalag_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          git_cli_0_2_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "jyggalag";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jyggalag";
              version = "0.1.0";
              sha256 =
                "4294906b634011f702ee823bee49d43602d88f9d70dcef2f5e1a3e4a7389a959";
            };
            beamDeps  = [ git_cli_0_2_5 poison_3_1_0 ];

            meta = {
              description = ''A command line project tracker meant to bring
                            order and peace.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Vesuvium/jyggalag";
            };
          } // packageOverrides)
      ) {};

    jyggalag = jyggalag_0_1_0;

    jylis_ex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          redix_0_7_1
        }:
          buildMix ({
            name = "jylis_ex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "jylis_ex";
              version = "0.2.0";
              sha256 =
                "f26c510289326379d12749b198063ee50a6022404122ab5d2c02a9d5df09ffa7";
            };
            beamDeps  = [ poison_3_1_0 redix_0_7_1 ];

            meta = {
              description = ''An idiomatic library for connecting an Elixir
                            project to a Jylis database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amclain/jylis_ex";
            };
          } // packageOverrides)
      ) {};

    jylis_ex = jylis_ex_0_2_0;

    k6_bytea_1_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "k6_bytea";
            version = "1.1.5";
            src = fetchHex {
              pkg = "k6_bytea";
              version = "1.1.5";
              sha256 =
                "1ce4ca84bbe45890bc3c07809f8e01fb80c4613226fbd318aaac73d4cd233132";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''A mutable byte array for Erlang.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    k6_bytea = k6_bytea_1_1_5;

    kadabra_0_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_13_1,
          hpack_erl_0_2_3
        }:
          buildMix ({
            name = "kadabra";
            version = "0.4.2";
            src = fetchHex {
              pkg = "kadabra";
              version = "0.4.2";
              sha256 =
                "067452e2e75cb524a2169ff07ed7048856577e18bb55d8109b7ba4a17bed6c68";
            };
            beamDeps  = [ gen_stage_0_13_1 hpack_erl_0_2_3 ];

            meta = {
              description = ''HTTP2 client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/kadabra";
            };
          } // packageOverrides)
      ) {};

    kadabra = kadabra_0_4_2;

    kafe_2_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bristow_0_2_2,
          bucs_1_0_16,
          doteki_1_0_6,
          lager_3_6_4,
          poolgirl_1_2_0
        }:
          buildMix ({
            name = "kafe";
            version = "2.2.3";
            src = fetchHex {
              pkg = "kafe";
              version = "2.2.3";
              sha256 =
                "7a63fa4473dca940e8ff4d2d99b411ab9dbbf2ccfc83312c7047277ac44db852";
            };
            beamDeps  = [
                          bristow_0_2_2
                          bucs_1_0_16
                          doteki_1_0_6
                          lager_3_6_4
                          poolgirl_1_2_0
                        ];

            meta = {
              description = ''A Kafka client for Erlang and Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/kafe";
            };
          } // packageOverrides)
      ) {};

    kafe = kafe_2_2_3;

    kaffe_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, brod_2_5_0 }:
          buildMix ({
            name = "kaffe";
            version = "1.3.1";
            src = fetchHex {
              pkg = "kaffe";
              version = "1.3.1";
              sha256 =
                "a826f3b49718b0b36dca856aef3a242135ca1bb0bb3fb858a20c039afb4b79ad";
            };
            beamDeps  = [ brod_2_5_0 ];

            meta = {
              longDescription = ''An opinionated Elixir wrapper around brod,
                                the Erlang Kafka client, that supports encrypted
                                connections to Heroku Kafka out of the box.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spreedly/kaffe";
            };
          } // packageOverrides)
      ) {};

    kaffe_1_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, brod_3_5_1 }:
          buildMix ({
            name = "kaffe";
            version = "1.9.0";
            src = fetchHex {
              pkg = "kaffe";
              version = "1.9.0";
              sha256 =
                "376325d8f81625ec1da0130607a4822ff4ce42000f934bdce75dac4d6756f6df";
            };
            beamDeps  = [ brod_3_5_1 ];

            meta = {
              longDescription = ''An opinionated Elixir wrapper around brod,
                                the Erlang Kafka client, that supports encrypted
                                connections to Heroku Kafka out of the box.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spreedly/kaffe";
            };
          } // packageOverrides)
      ) {};

    kaffe = kaffe_1_9_0;

    kafka_consumer_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, brod_2_4_1 }:
          buildMix ({
            name = "kafka_consumer";
            version = "2.0.0";
            src = fetchHex {
              pkg = "kafka_consumer";
              version = "2.0.0";
              sha256 =
                "e5f612c2d4d97979f532302ecb2259b5ce4cfcef34b3eaa0d56de1168c372052";
            };
            beamDeps  = [ brod_2_4_1 ];

            meta = {
              description = ''Consumer for Kafka using brod'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/anoskov/kafka-consumer";
            };
          } // packageOverrides)
      ) {};

    kafka_consumer = kafka_consumer_2_0_0;

    kafka_ex_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kafka_ex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "kafka_ex";
              version = "0.5.0";
              sha256 =
                "5e5d5be9bad3d9b9e77f75047c479aadc140d7e13be85a912cef8e7d647f0ae7";
            };

            meta = {
              description = ''Kafka client for Elixir/Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kafkaex/kafka_ex";
            };
          } // packageOverrides)
      ) {};

    kafka_ex_0_8_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kafka_ex";
            version = "0.8.3";
            src = fetchHex {
              pkg = "kafka_ex";
              version = "0.8.3";
              sha256 =
                "0a2ce44798995869ee670b5b2f9f7bd0f5634f37fd7aa10d8716be6ebc39a1a2";
            };

            meta = {
              description = ''Kafka client for Elixir/Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kafkaex/kafka_ex";
            };
          } // packageOverrides)
      ) {};

    kafka_ex = kafka_ex_0_8_3;

    kafka_ex_helpers_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          flow_0_14_0,
          kafka_ex_0_8_3,
          poison_2_2_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "kafka_ex_helpers";
            version = "0.1.2";
            src = fetchHex {
              pkg = "kafka_ex_helpers";
              version = "0.1.2";
              sha256 =
                "096702c16e010cf22d38c3109adb8abf2543ecdb93dc28203acf65d05bd28a91";
            };
            beamDeps  = [ flow_0_14_0 kafka_ex_0_8_3 poison_2_2_0 uuid_1_1_8
                      ];

            meta = {
              description = ''An unofficial set of helper utilities for
                            KafkaEx'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    kafka_ex_helpers = kafka_ex_helpers_0_1_2;

    kafka_message_bus_2_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exq_0_10_1,
          kaffe_1_3_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "kafka_message_bus";
            version = "2.2.4";
            src = fetchHex {
              pkg = "kafka_message_bus";
              version = "2.2.4";
              sha256 =
                "1749d2a6c947424fc11b578ee7958217b3d876813c757cd2f5853c6ae96586bb";
            };
            beamDeps  = [ exq_0_10_1 kaffe_1_3_1 poison_2_2_0 ];

            meta = {
              description = ''Wrapper for Kaffe for internal use'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/heckfer/kafka_message_bus";
            };
          } // packageOverrides)
      ) {};

    kafka_message_bus = kafka_message_bus_2_2_4;

    kafka_protocol_0_9_2 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, snappyer_1_2_0
        }:
          buildErlangMk ({
            name = "kafka_protocol";
            version = "0.9.2";
            src = fetchHex {
              pkg = "kafka_protocol";
              version = "0.9.2";
              sha256 =
                "bd23d353c19eff9059c747b5b26cc4f4451e29124a67ae1541b0085e9081a764";
            };
            beamDeps  = [ snappyer_1_2_0 ];

            meta = {
              description = ''Kafka protocol library for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/kafka_protocol";
            };
          } // packageOverrides)
      ) {};

    kafka_protocol_1_0_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, snappyer_1_2_1
        }:
          buildRebar3 ({
            name = "kafka_protocol";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kafka_protocol";
              version = "1.0.0";
              sha256 =
                "cfd82d430b8b07e9987face27bd9dd0bcaba5d3f607ab6aa8a58ae66733a9af7";
            };

            beamDeps  = [ snappyer_1_2_1 ];

            meta = {
              description = ''Kafka protocol library for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/kafka_protocol";
            };
          } // packageOverrides)
      ) {};

    kafka_protocol_1_1_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, snappyer_1_2_1
        }:
          buildRebar3 ({
            name = "kafka_protocol";
            version = "1.1.1";
            src = fetchHex {
              pkg = "kafka_protocol";
              version = "1.1.1";
              sha256 =
                "aa74a08c689f3f011809a33f26e27b12edc91787636d1231c38e22ac9aa5c17b";
            };

            beamDeps  = [ snappyer_1_2_1 ];

            meta = {
              description = ''Kafka protocol library for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/kafka_protocol";
            };
          } // packageOverrides)
      ) {};

    kafka_protocol_1_1_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, snappyer_1_2_1
        }:
          buildRebar3 ({
            name = "kafka_protocol";
            version = "1.1.2";
            src = fetchHex {
              pkg = "kafka_protocol";
              version = "1.1.2";
              sha256 =
                "782ba96f060f30cb989806c89bb4114df070640e1193b3e04ad4378244e84a76";
            };

            beamDeps  = [ snappyer_1_2_1 ];

            meta = {
              description = ''Kafka protocol library for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/kafka_protocol";
            };
          } // packageOverrides)
      ) {};

    kafka_protocol = kafka_protocol_1_1_2;

    kafkerl_2_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epocxy_1_1_0,
          lager_3_2_1,
          parse_trans_3_0_0,
          validerl_2_0_1
        }:
          buildRebar3 ({
            name = "kafkerl";
            version = "2.1.0";
            src = fetchHex {
              pkg = "kafkerl";
              version = "2.1.0";
              sha256 =
                "08eb2f4786fb7ea5edd1f26a378d00d4a2a449929cd54b06b924edcf1e0b339d";
            };

            beamDeps  = [
                          epocxy_1_1_0
                          lager_3_2_1
                          parse_trans_3_0_0
                          validerl_2_0_1
                        ];

            meta = {
              description = ''Apache Kafka 0.8.2 high performance
                            producer/consumer for erlang.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/hernanrivasacosta/kafkerl";
            };
          } // packageOverrides)
      ) {};

    kafkerl = kafkerl_2_1_0;

    kaguya_0_6_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kaguya";
            version = "0.6.4";
            src = fetchHex {
              pkg = "kaguya";
              version = "0.6.4";
              sha256 =
                "5776eae0ecba99ab3ea9a955e1dfafa60f34c97e99d965281e8d2215b188ae01";
            };

            meta = {
              longDescription = ''A small, powerful, and modular IRC bot
                                framework. Using a flexible macro based routing
                                system, modules can be easily created and
                                used.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/Luminarys/Kaguya";
            };
          } // packageOverrides)
      ) {};

    kaguya = kaguya_0_6_4;

    kare_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kare";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kare";
              version = "1.0.0";
              sha256 =
                "ad3e05e1dba000005b8c1f6e7724eb6160ccf4c8a77bbcc376bbacd9c780ce9d";
            };

            meta = {
              description = ''Function currying in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/kare";
            };
          } // packageOverrides)
      ) {};

    kare = kare_1_0_0;

    kaur_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kaur";
            version = "1.1.0";
            src = fetchHex {
              pkg = "kaur";
              version = "1.1.0";
              sha256 =
                "4089542e7a58030ae086b4db8100173515ee62c98db1c2a0d9bbdced98c9f8c4";
            };

            meta = {
              description = ''A bunch of helper functions to ease the
                            development of your applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fewlinesco/kaur";
            };
          } // packageOverrides)
      ) {};

    kaur = kaur_1_1_0;

    kcl_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          curve25519_1_0_2,
          ed25519_1_3_0,
          poly1305_1_0_1,
          salsa20_1_0_1
        }:
          buildMix ({
            name = "kcl";
            version = "1.1.0";
            src = fetchHex {
              pkg = "kcl";
              version = "1.1.0";
              sha256 =
                "7641f094f2bb48ee18281aca83e30ae95105e28e09e11fa49f25fda3d8d011a5";
            };
            beamDeps  = [
                          curve25519_1_0_2
                          ed25519_1_3_0
                          poly1305_1_0_1
                          salsa20_1_0_1
                        ];

            meta = {
              description = ''KCl - a less savory pure Elixir NaCl (libsodium)
                            crypto suite substitute'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/kcl";
            };
          } // packageOverrides)
      ) {};

    kcl = kcl_1_1_0;

    kennitala_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kennitala";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kennitala";
              version = "1.0.0";
              sha256 =
                "8f22c152fb5de86455d4570ec23f96b3ee110c8f7243e9fd7ffd85fbccf63838";
            };

            meta = {
              longDescription = ''Elixir library for validating and handling
                                the Icelandic Kennitala identity number.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/Kennitala.ex";
            };
          } // packageOverrides)
      ) {};

    kennitala = kennitala_1_0_0;

    key2value_1_5_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "key2value";
            version = "1.5.1";
            src = fetchHex {
              pkg = "key2value";
              version = "1.5.1";
              sha256 =
                "2a40464b9f8ef62e8828d869ac8d2bf9135b4956d29ba4eb044e8522b2d35ffa";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/key2value";
            };
          } // packageOverrides)
      ) {};

    key2value_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "key2value";
            version = "1.5.4";
            src = fetchHex {
              pkg = "key2value";
              version = "1.5.4";
              sha256 =
                "73e8d1db769e85404cdb9a74f031b627cacbf058e591928fb7eb651b35363083";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/key2value";
            };
          } // packageOverrides)
      ) {};

    key2value_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "key2value";
            version = "1.6.0";
            src = fetchHex {
              pkg = "key2value";
              version = "1.6.0";
              sha256 =
                "108b22e4fca0fa6a4fa18a301c0af8afe00582b70d70a09020641fb2e0488732";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/key2value";
            };
          } // packageOverrides)
      ) {};

    key2value_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "key2value";
            version = "1.7.3";
            src = fetchHex {
              pkg = "key2value";
              version = "1.7.3";
              sha256 =
                "4294577316afc9d4f6dff010807a1e8e6bb170ba528def8959028d830dd0fc23";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/key2value";
            };
          } // packageOverrides)
      ) {};

    key2value = key2value_1_7_3;

    key_convert_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "key_convert";
            version = "0.3.0";
            src = fetchHex {
              pkg = "key_convert";
              version = "0.3.0";
              sha256 =
                "d2fa20c77c57e30e6a8a2229da628644cdb5378d804952b0fba902b9f6090a43";
            };

            meta = {
              description = ''Convenience functions for converting Map keys'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smitparaggua/key_convert";
            };
          } // packageOverrides)
      ) {};

    key_convert = key_convert_0_3_0;

    key_sigil_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "key_sigil";
            version = "0.1.0";
            src = fetchHex {
              pkg = "key_sigil";
              version = "0.1.0";
              sha256 =
                "ab9e709296856ce96a70e46560760ffe6911fdd7737f41cd295822e45f617a41";
            };

            meta = {
              description = ''~K sigil to boost Keyword list creation'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/rodrigues/key_sigil";
            };
          } // packageOverrides)
      ) {};

    key_sigil = key_sigil_0_1_0;

    key_tools_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "key_tools";
            version = "0.4.1";
            src = fetchHex {
              pkg = "key_tools";
              version = "0.4.1";
              sha256 =
                "1a5afce636176481acec2db91066e68af5bf3c512327292a14078ca1aad1a57e";
            };

            meta = {
              description = ''Simple functions for coercing Elixir Maps:
                            atomizing, snake_casing, etc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EthanML/key_tools_ex";
            };
          } // packageOverrides)
      ) {};

    key_tools = key_tools_0_4_1;

    key_value_parser_1_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "key_value_parser";
            version = "1.0.6";
            src = fetchHex {
              pkg = "key_value_parser";
              version = "1.0.6";
              sha256 =
                "eb6338cde5714c3f441af194493feaa7d0291943df11cf39f233003dec0a76c2";
            };

            meta = {
              description = ''A simple key value parser'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/timberio/key-value-parser-elixir";
            };
          } // packageOverrides)
      ) {};

    key_value_parser = key_value_parser_1_0_6;

    keyring_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "keyring";
            version = "0.1.3";
            src = fetchHex {
              pkg = "keyring";
              version = "0.1.3";
              sha256 =
                "22f4e73b86482eb4b2d863b995102d40db3a24c2db4980583626574295124a67";
            };

            meta = {
              description = ''This will hold your api keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mithereal/elixir-keyring";
            };
          } // packageOverrides)
      ) {};

    keyring = keyring_0_1_3;

    keys1value_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keys1value";
            version = "1.4.0";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.4.0";
              sha256 =
                "26ba43aea53538cb91dd061a69f0855933d37a92c39852aebc5e8706b735619c";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/keys1value";
            };
          } // packageOverrides)
      ) {};

    keys1value_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keys1value";
            version = "1.5.4";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.5.4";
              sha256 =
                "76b4fdd99aa4d6eb33ae9748463b76f47129120cf2349c6713c3e47e96a908ce";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/keys1value";
            };
          } // packageOverrides)
      ) {};

    keys1value_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keys1value";
            version = "1.6.0";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.6.0";
              sha256 =
                "bdb05f53e541663d12afc3fb43621fa0cf630622f9f10cee3b96f34b6c4b53a9";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/keys1value";
            };
          } // packageOverrides)
      ) {};

    keys1value_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keys1value";
            version = "1.7.3";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.7.3";
              sha256 =
                "1ca02ef87238c15466885518e75d4f36eeae40e56400007be666a2505277ed1a";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/keys1value";
            };
          } // packageOverrides)
      ) {};

    keys1value = keys1value_1_7_3;

    keyx_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "keyx";
            version = "0.4.0";
            src = fetchHex {
              pkg = "keyx";
              version = "0.4.0";
              sha256 =
                "9c912e7e6e6319481c1ee3ed7d06bb67b72fd2a77bfc79c281a3582eeb9d78ff";
            };

            meta = {
              description = ''Elixir library for Shamir`s Secret Sharing (SSS)
                            algorithm'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elcritch/keyx";
            };
          } // packageOverrides)
      ) {};

    keyx = keyx_0_4_0;

    kitchen_sink_1_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kitchen_sink";
            version = "1.3.5";
            src = fetchHex {
              pkg = "kitchen_sink";
              version = "1.3.5";
              sha256 =
                "b2a29deeb1040863513a9d5b4b4794b80f75fa23ece156ce723bca559fea7feb";
            };

            meta = {
              description = ''Mixins for Elixir namespaces and Misc utility
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/planswell/kitchen-sink";
            };
          } // packageOverrides)
      ) {};

    kitchen_sink = kitchen_sink_1_3_5;

    kitsune_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "kitsune";
            version = "0.5.2";
            src = fetchHex {
              pkg = "kitsune";
              version = "0.5.2";
              sha256 =
                "f8d48f1f3abe89aa9df7b37bc59c9bfa5932142d076d5322f97e92ec732bf993";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''Kitsune is an Elixir library for transforming
                                the representation of data inspired by
                                Representable.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edubkendo/kitsune";
            };
          } // packageOverrides)
      ) {};

    kitsune = kitsune_0_5_2;

    kitten_blue_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          jose_1_8_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "kitten_blue";
            version = "0.1.3";
            src = fetchHex {
              pkg = "kitten_blue";
              version = "0.1.3";
              sha256 =
                "edfd57e6e6a8e37cb7980df9c38469f58e58296cb8d2894ed5e389429616504d";
            };
            beamDeps  = [ httpoison_1_2_0 jose_1_8_4 poison_3_1_0 ];

            meta = {
              longDescription = ''KittenBlue is a JOSE wrapper library that
                                makes JWT implementation simpler for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ritou/elixir-kitten-blue";
            };
          } // packageOverrides)
      ) {};

    kitten_blue = kitten_blue_0_1_3;

    kiwi_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kiwi";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kiwi";
              version = "0.1.0";
              sha256 =
                "c2a54d669bae5d3432418782b16c102c1e66cf3b8f6acab818f57c729b7aebc9";
            };

            meta = {
              longDescription = ''A persistent key value store for your elixir
                                and erlang apps. Data is backed by a postgres
                                database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/kiwi";
            };
          } // packageOverrides)
      ) {};

    kiwi = kiwi_0_1_0;

    kmv_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          heap_2_0_0,
          murmur_1_0_1
        }:
          buildMix ({
            name = "kmv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kmv";
              version = "0.1.0";
              sha256 =
                "a420f74fc4dd80f71a038ffe4ab38f8315d926ede3375659ae9d53fa22b267d1";
            };
            beamDeps  = [ heap_2_0_0 murmur_1_0_1 ];

            meta = {
              description = ''K-minimum value sketch to estimate cardinality of
                            sets.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joshwalters/kmv";
            };
          } // packageOverrides)
      ) {};

    kmv = kmv_0_1_0;

    knine_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "knine";
            version = "0.0.1";
            src = fetchHex {
              pkg = "knine";
              version = "0.0.1";
              sha256 =
                "0128ea6b7b9f5e5cea73f4d4654bd4d65f54dab6c0c7a71f60475a576acc5eea";
            };

            meta = {
              description = ''Knine is a deamon to monitor a service
                            availability in different perspectives.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alisinabh/Knine";
            };
          } // packageOverrides)
      ) {};

    knine = knine_0_0_1;

    knit_0_4_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, exconstructor_1_0_2
        }:
          buildMix ({
            name = "knit";
            version = "0.4.0";
            src = fetchHex {
              pkg = "knit";
              version = "0.4.0";
              sha256 =
                "1d37b89d9d9ee403eccdba2437fde4a004fbf496decb1bb227c95a65443c00a6";
            };
            beamDeps  = [ exconstructor_1_0_2 ];

            meta = {
              description = ''Transforms string maps into nested structs: knits
                            strings into something useful.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AssetAvenue/knit";
            };
          } // packageOverrides)
      ) {};

    knit = knit_0_4_0;

    knuth_shuffle_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "knuth_shuffle";
            version = "0.1.1";
            src = fetchHex {
              pkg = "knuth_shuffle";
              version = "0.1.1";
              sha256 =
                "9f4c4f70490abcea56d4af4123f7bd240e8ba7010bab602d206a23b7a6a36107";
            };

            meta = {
              description = ''The Knuth shuffle algorithm in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AlecHsueh/knuth_shuffle";
            };
          } // packageOverrides)
      ) {};

    knuth_shuffle = knuth_shuffle_0_1_1;

    kong_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "kong";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kong";
              version = "0.0.1";
              sha256 =
                "12882da3d41d61c925b337237499b2d13c8bc462898c3ed145f7ebc6dc95795f";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Simple wrapper around the Kong Admin REST API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephlow/kong";
            };
          } // packageOverrides)
      ) {};

    kong = kong_0_0_1;

    kraken_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          httpoison_0_13_0,
          jason_1_0_1
        }:
          buildMix ({
            name = "kraken";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kraken";
              version = "0.1.1";
              sha256 =
                "d3df8183944d9e6b8a552795aa36f47a47937de777af4d87711249b3e467b002";
            };
            beamDeps  = [ gen_stage_0_14_0 httpoison_0_13_0 jason_1_0_1 ];

            meta = {
              description = ''REST API wrapper to communicate with Kraken
                            exchange.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Voronchuk/kraken";
            };
          } // packageOverrides)
      ) {};

    kraken = kraken_0_1_1;

    kraken_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "kraken_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kraken_api";
              version = "0.1.0";
              sha256 =
                "015fc103de38fad6bbaa1ba88b68d8dad9620e804520ed715349f56d800eab34";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir library for Kraken (kraken.com) exchange
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/x-ji/kraken_api";
            };
          } // packageOverrides)
      ) {};

    kraken_api = kraken_api_0_1_0;

    kraken_client_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_3_0_3 }:
          buildMix ({
            name = "kraken_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kraken_client";
              version = "0.0.1";
              sha256 =
                "e2d77df26ecf1a094febce51263456d9dae858c09dd75c0aa826ec8c90e36438";
            };
            beamDeps  = [ httpotion_3_0_3 ];

            meta = {
              description = ''Client api for Kraken'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/catuss-a/kraken_client";
            };
          } // packageOverrides)
      ) {};

    kraken_client = kraken_client_0_0_1;

    krakex_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "krakex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "krakex";
              version = "0.4.0";
              sha256 =
                "e98b9d7f2f8045ce0ec05c40701f1c985b9ebbaf104f2dba9965541bdefb79f4";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for the Kraken Bitcoin Exchange
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edennis/krakex";
            };
          } // packageOverrides)
      ) {};

    krakex = krakex_0_4_0;

    kramit_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_0_2_1 }:
          buildMix ({
            name = "kramit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kramit";
              version = "0.0.1";
              sha256 =
                "26a7c5f52aaf93994868aeeeffeafb5b921dcfbccd82bc7a9471bbec01baa479";
            };
            beamDeps  = [ earmark_0_2_1 ];

            meta = {
              description = ''A HTML5 focused Markdown superset'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iwantmyname/kramit";
            };
          } // packageOverrides)
      ) {};

    kramit = kramit_0_0_1;

    kronos_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mizur_1_0_1 }:
          buildMix ({
            name = "kronos";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kronos";
              version = "1.0.0";
              sha256 =
                "2b20434dde14b3b80765e81d6b59c86a45fe0535f7e6df80f10ddce1ce7bd8bb";
            };
            beamDeps  = [ mizur_1_0_1 ];

            meta = {
              longDescription = ''Kronos is a library to facilitate simple
                                arithmetic operations between timestamps. This
                                library is based on Mizur to type values.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/kronos";
            };
          } // packageOverrides)
      ) {};

    kronos = kronos_1_0_0;

    krpc_protocol_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bencodex_1_0_0 }:
          buildMix ({
            name = "krpc_protocol";
            version = "0.0.4";
            src = fetchHex {
              pkg = "krpc_protocol";
              version = "0.0.4";
              sha256 =
                "641f9e3f7f727add0622ee70db87ddc75eae918824909969218ba8cc003a1c0a";
            };
            beamDeps  = [ bencodex_1_0_0 ];

            meta = {
              longDescription = ''KRPCProtocol is an elixir package for
                                decoding and encoding mainline DHT messages.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cit/krpc_protocol";
            };
          } // packageOverrides)
      ) {};

    krpc_protocol = krpc_protocol_0_0_4;

    krypto_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "krypto";
            version = "0.1.1";
            src = fetchHex {
              pkg = "krypto";
              version = "0.1.1";
              sha256 =
                "a50ff259416c941bc02e6ce5abf9f12e446c9e49cc7bf8ca9e74b2da1ee5866b";
            };

            meta = {
              longDescription = ''Crypto implementation in Elixir, using Erlang
                                crypto, public_key and OpenSSL ports.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elefthei/krypto";
            };
          } // packageOverrides)
      ) {};

    krypto = krypto_0_1_1;

    kryptonite_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kryptonite";
            version = "0.1.7";
            src = fetchHex {
              pkg = "kryptonite";
              version = "0.1.7";
              sha256 =
                "194a8186f257fd00b5e738443cf82839e5d5a4db5cda86dedb67a583c2202c28";
            };

            meta = {
              longDescription = ''A kollection of scripts that are very close
                                to cryptography but aren`t - hence the typo.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/the-missing-link/kryptonite";
            };
          } // packageOverrides)
      ) {};

    kryptonite = kryptonite_0_1_7;

    ksuid_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ksuid";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ksuid";
              version = "0.1.2";
              sha256 =
                "43f341480d9cdba0c88ed2c4a67d5cc24d53317f21b9c70326cec66ebfd80ac0";
            };

            meta = {
              description = ''ksuid is a zero dependency Elixir library for
                            generating KSUIDs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/girishramnani/elixir-ksuid";
            };
          } // packageOverrides)
      ) {};

    ksuid = ksuid_0_1_2;

    kubernetex_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpx_0_0_11,
          poison_3_1_0
        }:
          buildMix ({
            name = "kubernetex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "kubernetex";
              version = "0.0.4";
              sha256 =
                "85c0a33a12ad753d5d74bd4ada83f9c78211f8e48fc6397d307266b02d546314";
            };
            beamDeps  = [ httpx_0_0_11 poison_3_1_0 ];

            meta = {
              description = ''Kubernetes library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IanLuites/kubex";
            };
          } // packageOverrides)
      ) {};

    kubernetex = kubernetex_0_0_4;

    kubex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "kubex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kubex";
              version = "0.1.1";
              sha256 =
                "b0bd22246731b1c4d4d7f832cd0015fd6586022c779fb6672f45a648da7dcf79";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              description = ''Kubernetes integration for and in pure Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/ingerslevio/kubex";
            };
          } // packageOverrides)
      ) {};

    kubex = kubex_0_1_1;

    kudos_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "kudos";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kudos";
              version = "0.1.1";
              sha256 =
                "7c77c454a0ffd7503b4b572d85e8541f5909e6a77c60543febf5431a05bab152";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              longDescription = ''Fetches licenses of deps and generates a
                                stashed license file in the root directory.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/semlabs/kudos";
            };
          } // packageOverrides)
      ) {};

    kudos = kudos_0_1_1;

    kuma_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exirc_1_0_1 }:
          buildMix ({
            name = "kuma";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kuma";
              version = "0.1.1";
              sha256 =
                "b89152ede135a9cabac1968525c0ba55b1bae64d10582def215932913aa4102e";
            };
            beamDeps  = [ exirc_1_0_1 ];

            meta = {
              description = ''An Elixir IRC Bot'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/kuma";
            };
          } // packageOverrides)
      ) {};

    kuma = kuma_0_1_1;

    kups_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kups";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kups";
              version = "0.1.0";
              sha256 =
                "ec06f7fbdde501c1c29ff85a5c8562825d5f1fd4db756597bc949f4e25681b09";
            };

            meta = {
              description = ''A library for generating fake data in context of
                            Filipinos.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vinceurag/kups";
            };
          } // packageOverrides)
      ) {};

    kups = kups_0_1_0;

    kurasuta_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kurasuta";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kurasuta";
              version = "0.1.0";
              sha256 =
                "d3f842c025342c357c594e53570b82687d1de996aa97808655e87ed0a9238779";
            };

            meta = {
              description = ''Clustering library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fl9/kurasuta";
            };
          } // packageOverrides)
      ) {};

    kurasuta = kurasuta_0_1_0;

    kuroon_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          porcelain_2_0_3,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "kuroon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kuroon";
              version = "0.1.0";
              sha256 =
                "66e1438543b9bb78a5d3ddcac2ddb7b4e3b8105821ff7ea6f8ada6217ed11e5c";
            };
            beamDeps  = [ porcelain_2_0_3 secure_random_0_5_1 ];

            meta = {
              description = ''Cloning will enable mankind to reach eternal
                            life.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ahtung/kuroon.ex";
            };
          } // packageOverrides)
      ) {};

    kuroon = kuroon_0_1_0;

    kv_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kv";
              version = "0.1.0";
              sha256 =
                "beb4cbc81108a33020010754e4fb840aee65b3ef3b222df0b1967d1ac85cdce7";
            };

            meta = {
              description = ''Distributed key-value store'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iagodahlem/kv";
            };
          } // packageOverrides)
      ) {};

    kv = kv_0_1_0;

    kvx_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex2ms_1_5_0,
          ex_shards_0_2_1
        }:
          buildMix ({
            name = "kvx";
            version = "0.1.3";
            src = fetchHex {
              pkg = "kvx";
              version = "0.1.3";
              sha256 =
                "9f06fd3b2b9b941637ef6b56b841063149b616c6ba92119b64cf9ce47f038e9c";
            };
            beamDeps  = [ ex2ms_1_5_0 ex_shards_0_2_1 ];

            meta = {
              description = ''Simple Elixir in-memory Key/Value Store using
                            `cabol/ex_shards`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/kvx";
            };
          } // packageOverrides)
      ) {};

    kvx = kvx_0_1_3;

    kwfuns_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kwfuns";
            version = "0.0.4";
            src = fetchHex {
              pkg = "kwfuns";
              version = "0.0.4";
              sha256 =
                "ce1ac52be8d3c3cb7c77fc339eaa877a190899e889bf97cdb92e01922fd52b54";
            };

            meta = {
              longDescription = ''Macros to create functions with syntax based
                                keyword parameters with default values defkw
                                make_list_elem( parent, text, spaced: false,
                                type: :ul ) do ... end translates to def
                                make_list_elem( parent, text, keywords \\ [] )
                                do some_code_with( spaces, typed) end'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/RobertDober/lab42_defkw";
            };
          } // packageOverrides)
      ) {};

    kwfuns = kwfuns_0_0_4;

    kylie_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_10_1,
          jsx_2_8_2,
          worker_pool_3_1_0
        }:
          buildMix ({
            name = "kylie";
            version = "1.0.1";
            src = fetchHex {
              pkg = "kylie";
              version = "1.0.1";
              sha256 =
                "f9eff1a889f468b918e3e12771cae5be8ddd1f2051361b4893a1412ed8bbc74f";
            };
            beamDeps  = [ hackney_1_10_1 jsx_2_8_2 worker_pool_3_1_0 ];

            meta = {
              description = ''Kylie is a Erlang application for Cayley graph
                            data base'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davecaos/kylie";
            };
          } // packageOverrides)
      ) {};

    kylie = kylie_1_0_1;

    lager_3_0_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_7
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.0.1";
            src = fetchHex {
              pkg = "lager";
              version = "3.0.1";
              sha256 =
                "d32c9233105b72dc5c1f6a8fe9a33cc205ecccc359c4449950060cee5a329e35";
            };

            beamDeps  = [ goldrush_0_1_7 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_0_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_7
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.0.2";
            src = fetchHex {
              pkg = "lager";
              version = "3.0.2";
              sha256 =
                "527f3b233e01b6cb68780c14ef675ed08ec02247dc029cacecbb56c78dfca100";
            };

            beamDeps  = [ goldrush_0_1_7 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_2_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_8
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.2.1";
            src = fetchHex {
              pkg = "lager";
              version = "3.2.1";
              sha256 =
                "09a751789852094bf1ffad239a602bc47829da13ca5937b9d12df27470692095";
            };

            beamDeps  = [ goldrush_0_1_8 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_2_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.2.4";
            src = fetchHex {
              pkg = "lager";
              version = "3.2.4";
              sha256 =
                "eec0b676776adcfc4f281add4acad1806b2f399774eaaa30f9ec47d2b7881b58";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_5_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.5.1";
            src = fetchHex {
              pkg = "lager";
              version = "3.5.1";
              sha256 =
                "d4b4324b9d07f4cf71a59b6e0f43e2d2651778d92aa5bef68d5a8cdf6d213ba1";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_5_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.5.2";
            src = fetchHex {
              pkg = "lager";
              version = "3.5.2";
              sha256 =
                "da9276cf7ae3462f54ef2d6540aeb0ae0c0ab9c15222dd64c278c8b0065ac520";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_6_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.6.1";
            src = fetchHex {
              pkg = "lager";
              version = "3.6.1";
              sha256 =
                "4e8bdedd636fcc606e58bad137ec7fdd1286d1fe5c739cca70d8fe79c61091d7";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_6_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.6.2";
            src = fetchHex {
              pkg = "lager";
              version = "3.6.2";
              sha256 =
                "cd990b955d58a23fcc849071d3af802729841a8549fb5749d6bf1c389aee41c4";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_6_3 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.6.3";
            src = fetchHex {
              pkg = "lager";
              version = "3.6.3";
              sha256 =
                "764c0c8a445dce31926c2c33acab7d514ce4fedb9390374fe4d0ad72c39f0894";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_6_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.6.4";
            src = fetchHex {
              pkg = "lager";
              version = "3.6.4";
              sha256 =
                "6cbef7e038d772a6bf834ba7aaf55a1484a97adfe8075b4a23b0086a8fe697a8";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager = lager_3_6_4;

    lager2json_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_3,
          rfc3339_0_2_2
        }:
          buildMix ({
            name = "lager2json";
            version = "1.0.2";
            src = fetchHex {
              pkg = "lager2json";
              version = "1.0.2";
              sha256 =
                "f417eca4b2edc9a06494f61c3afaf1918ebbe7a3ea13780df79ca68edb914f67";
            };
            beamDeps  = [ jsx_2_8_3 rfc3339_0_2_2 ];

            meta = {
              description = ''a lager formatter that produces json'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/lager2json";
            };
          } // packageOverrides)
      ) {};

    lager2json = lager2json_1_0_2;

    lager_hipchat_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_0_2 }:
          buildRebar3 ({
            name = "lager_hipchat";
            version = "0.2.1";
            src = fetchHex {
              pkg = "lager_hipchat";
              version = "0.2.1";
              sha256 =
                "edd010d21b2982ca51cea6843bb81168702d02a3760dd591d6efe1fdcac5a8df";
            };

            beamDeps  = [ lager_3_0_2 ];

            meta = {
              description = ''HipChat backend for Lager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synlay/lager_hipchat";
            };
          } // packageOverrides)
      ) {};

    lager_hipchat = lager_hipchat_0_2_1;

    lager_logger_1_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_6_4 }:
          buildMix ({
            name = "lager_logger";
            version = "1.0.5";
            src = fetchHex {
              pkg = "lager_logger";
              version = "1.0.5";
              sha256 =
                "e1b166bcd39ce9e32378d16b8bc0d78cee6e9d9de8488900e12e9168998e49a0";
            };
            beamDeps  = [ lager_3_6_4 ];

            meta = {
              longDescription = ''LagerLogger is a lager backend that forwards
                                all log messages to Elixir`s Logger.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/PSPDFKit-labs/lager_logger";
            };
          } // packageOverrides)
      ) {};

    lager_logger = lager_logger_1_0_5;

    lager_x_0_14_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_6_4 }:
          buildMix ({
            name = "lager_x";
            version = "0.14.2";
            src = fetchHex {
              pkg = "lager_x";
              version = "0.14.2";
              sha256 =
                "8133a479f9a72cf2f0ba98d9dfc96151c536e6ec9697574ae2bb5150727e1114";
            };
            beamDeps  = [ lager_3_6_4 ];

            meta = {
              description = ''An Elixir wrapper for Lager, an Erlang logging
                            library Edit Add topics'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/lager_x";
            };
          } // packageOverrides)
      ) {};

    lager_x = lager_x_0_14_2;

    lambda_shim_1_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lambda_shim";
            version = "1.2.2";
            src = fetchHex {
              pkg = "lambda_shim";
              version = "1.2.2";
              sha256 =
                "fb5dc64a7e74e1d9c2d35a920ea2918eb0531a6c78f2102e4d350d3e3e4510bf";
            };

            meta = {
              description = ''Package Elixir for Lambda and run via shim'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/linkkit/lambda-elixir";
            };
          } // packageOverrides)
      ) {};

    lambda_shim = lambda_shim_1_2_2;

    lambda_throttle_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lambda_throttle";
            version = "0.2.0";
            src = fetchHex {
              pkg = "lambda_throttle";
              version = "0.2.0";
              sha256 =
                "3eacfaac1c2ebd0f17d77d9e96b1029bf07ded4ac233ba38883d70cdf1fff740";
            };

            buildPlugins  = [ coveralls ];


            meta = {
              description = ''Erlang/OTP application to throttle/rate limit
                            resource access'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lambdaclass/throttle";
            };
          } // packageOverrides)
      ) {};

    lambda_throttle = lambda_throttle_0_2_0;

    lang_tags_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lang_tags";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lang_tags";
              version = "0.1.0";
              sha256 =
                "9bd5b585a73ce471adb7ea28e0dbb63c07290db80212f669b01877b8ad0f6d3d";
            };

            meta = {
              description = ''Work with IANA language tags in Elixir (BCP47 /
                            RFC5646)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/milmazz/lang_tags";
            };
          } // packageOverrides)
      ) {};

    lang_tags = lang_tags_0_1_0;

    language_names_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "language_names";
            version = "0.1.0";
            src = fetchHex {
              pkg = "language_names";
              version = "0.1.0";
              sha256 =
                "8da91bc0bf03769052eebcf1ff94933f29513e1595941f7c258d5d1fb89b9082";
            };

            meta = {
              description = ''Language names, written in each language Edit'';

              homepage = "https://github.com/manastech/language-names-elixir";
            };
          } // packageOverrides)
      ) {};

    language_names = language_names_0_1_0;

    lasse_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cowboy_2_4_0 }:
          buildRebar3 ({
            name = "lasse";
            version = "1.2.0";
            src = fetchHex {
              pkg = "lasse";
              version = "1.2.0";
              sha256 =
                "8081769683f73d76a718319a593f8551a0d3747404c51cce5869cfc6aedc7edf";
            };

            beamDeps  = [ cowboy_2_4_0 ];

            meta = {
              description = ''Lasse: Server-Sent Event handler for Cowboy.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/lasse";
            };
          } // packageOverrides)
      ) {};

    lasse = lasse_1_2_0;

    latinizer_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "latinizer";
            version = "0.4.0";
            src = fetchHex {
              pkg = "latinizer";
              version = "0.4.0";
              sha256 =
                "d1531533834e32cdc1e33cf981cfbb3b70a0d13c89de29591ca60d546a6d9cb3";
            };

            meta = {
              longDescription = ''A string-translating module responsible for
                                getting rid of diacritic signs in strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrapacz/latinizer";
            };
          } // packageOverrides)
      ) {};

    latinizer = latinizer_0_4_0;

    latlong_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "latlong";
            version = "0.1.0";
            src = fetchHex {
              pkg = "latlong";
              version = "0.1.0";
              sha256 =
                "30cc1d72b5580d93880082d21995a72e697e5c7560b4d99a5b67619d260276c7";
            };

            meta = {
              description = ''Latitude, Longitude Parser'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bengtson/latlong";
            };
          } // packageOverrides)
      ) {};

    latlong = latlong_0_1_0;

    lazy_agent_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, confex_3_3_1 }:
          buildMix ({
            name = "lazy_agent";
            version = "1.1.0";
            src = fetchHex {
              pkg = "lazy_agent";
              version = "1.1.0";
              sha256 =
                "def8161097d138eab61b0e066b39bc201ea9a1f6bcf72ffe9c9566b2af5616b3";
            };
            beamDeps  = [ confex_3_3_1 ];

            meta = {
              description = ''Start agents lazily.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgartner/lazy_agent";
            };
          } // packageOverrides)
      ) {};

    lazy_agent = lazy_agent_1_1_0;

    lazy_cache_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lazy_cache";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lazy_cache";
              version = "0.1.1";
              sha256 =
                "77c8b70400020944a063eafb0e9c348cb6dc36b955591e6a0ee75a1bd2a82dee";
            };

            meta = {
              description = ''A memcached-like Elixir cache.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/artjimlop/lazy_cache";
            };
          } // packageOverrides)
      ) {};

    lazy_cache = lazy_cache_0_1_1;

    ldap_ex_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ldap_ex";
            version = "0.2.5";
            src = fetchHex {
              pkg = "ldap_ex";
              version = "0.2.5";
              sha256 =
                "7eaf2d376c9bd05a1c2b2713dd8a51351fc285d1c1a93ae553f63d1639252f5d";
            };

            meta = {
              longDescription = ''This is a binary instead of char_list version
                                of the stock Erlang :eldap library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/ldap_ex";
            };
          } // packageOverrides)
      ) {};

    ldap_ex = ldap_ex_0_2_5;

    leaderboard_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "leaderboard";
            version = "0.2.2";
            src = fetchHex {
              pkg = "leaderboard";
              version = "0.2.2";
              sha256 =
                "a8bc2be035ee7b0ee64c6cbbaa07f211cfe6c8f1a04dd67a9cfc5da4fd2871d8";
            };

            meta = {
              description = ''Leaderboard based on ETS tables'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jur0/leaderboard";
            };
          } // packageOverrides)
      ) {};

    leaderboard = leaderboard_0_2_2;

    leaseweb_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "leaseweb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "leaseweb";
              version = "0.1.0";
              sha256 =
                "63dd6e35b791b22133b667001730726d1061f371448926eac4c8392163575ded";
            };

            meta = {
              description = ''Elixir Wrapper for Leaseweb infrastructure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ahamtech/elixir-leaseweb";
            };
          } // packageOverrides)
      ) {};

    leaseweb = leaseweb_0_1_0;

    left_pad_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "left_pad";
            version = "0.0.3";
            src = fetchHex {
              pkg = "left_pad";
              version = "0.0.3";
              sha256 =
                "9b14a4b7f84f320175bd2ed2f24754a62206fdd67d90117602876c415cf22374";
            };

            meta = {
              description = ''Pad a string to the left with any number of
                            characters.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/folz/left_pad.ex";
            };
          } // packageOverrides)
      ) {};

    left_pad = left_pad_0_0_3;

    leftpad_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "leftpad";
            version = "1.0.1";
            src = fetchHex {
              pkg = "leftpad";
              version = "1.0.1";
              sha256 =
                "88e4cd8039461f2558f6e8378d834772b9315554080c5b729d65472209824a89";
            };

            meta = {
              description = ''left pad for elixir, because why not?
                            ¯\\_(ツ)_/¯'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/colinrymer/leftpad.ex";
            };
          } // packageOverrides)
      ) {};

    leftpad = leftpad_1_0_1;

    legs_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "legs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "legs";
              version = "0.1.0";
              sha256 =
                "606cfffe68d33949885de3b792e7704aa8aa89903b13837576eb6fd3d88995c1";
            };

            meta = {
              description = ''An opinionated bot framework that gets out of
                            your way when you need it to.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hazelhq";
            };
          } // packageOverrides)
      ) {};

    legs = legs_0_1_0;

    leibniz_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "leibniz";
            version = "1.0.0";
            src = fetchHex {
              pkg = "leibniz";
              version = "1.0.0";
              sha256 =
                "2274a3c828037af1ddc654c1a09636ba694c4effaeae42d1f4c73284b7251286";
            };

            meta = {
              description = ''Math expression parser and evaluator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/saulecabrera/leibniz";
            };
          } // packageOverrides)
      ) {};

    leibniz = leibniz_1_0_0;

    lejson_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lejson";
            version = "0.7.0";
            src = fetchHex {
              pkg = "lejson";
              version = "0.7.0";
              sha256 =
                "e1e83ff24a00c3766fda0a702b82460b18cf5d28f4b009369e4e3ea07eed63de";
            };

            meta = {
              description = ''Lightweight Erlang json encode/decode library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/cvik/lejson";
            };
          } // packageOverrides)
      ) {};

    lejson_0_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lejson";
            version = "0.7.1";
            src = fetchHex {
              pkg = "lejson";
              version = "0.7.1";
              sha256 =
                "278405351eaeaacedaccc60e388171f59d978cfb14733367c30d8ca50b950a76";
            };

            meta = {
              description = ''Lightweight Erlang json encode/decode library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/cvik/lejson";
            };
          } // packageOverrides)
      ) {};

    lejson = lejson_0_7_1;

    lemma_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_fst_0_4_1 }:
          buildMix ({
            name = "lemma";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lemma";
              version = "0.1.1";
              sha256 =
                "cac8740e0087eee1913c1c2d4c4f64dae6380a6a0de97df5c45d0bb8d2e0fec5";
            };
            beamDeps  = [ gen_fst_0_4_1 ];

            meta = {
              longDescription = ''A Morphological Parser / Lemmatizer, commonly
                                used in Natural Language Processing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xiamx/lemma";
            };
          } // packageOverrides)
      ) {};

    lemma = lemma_0_1_1;

    lens_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lens";
            version = "0.7.0";
            src = fetchHex {
              pkg = "lens";
              version = "0.7.0";
              sha256 =
                "1c2d0d350a97718b03d418cfccf5607031bf07486f1d9939081af2ecd0ae6a45";
            };

            meta = {
              description = ''A utility for working with nested data
                            structures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obrok/lens";
            };
          } // packageOverrides)
      ) {};

    lens = lens_0_7_0;

    level_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "level";
            version = "1.0.0";
            src = fetchHex {
              pkg = "level";
              version = "1.0.0";
              sha256 =
                "42d54a840e79af5833e5ae335b374699c46d996053f2f3480e181a57cad2ae62";
            };

            meta = {
              longDescription = ''Level implements various helper functions and
                                data types for working with Googles Level data
                                store. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gausby/level";
            };
          } // packageOverrides)
      ) {};

    level = level_1_0_0;

    lex_luthor_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lex_luthor";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lex_luthor";
              version = "0.1.1";
              sha256 =
                "2f26a7104ca4e5e147fc760b50fca9719d6ae80a8aec42fba522690b69dc0d01";
            };

            meta = {
              longDescription = ''LexLuthor is a Lexer in Elixir (say that 10
                                times fast) which uses macros to generate a
                                reusable lexers. Good times.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/lex_luthor";
            };
          } // packageOverrides)
      ) {};

    lex_luthor = lex_luthor_0_1_1;

    lexicon_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lexicon";
            version = "0.1.2";
            src = fetchHex {
              pkg = "lexicon";
              version = "0.1.2";
              sha256 =
                "c16d48f628de2470bba421332bc4d0a8034472cd06cf28527621f2f23d3ece1a";
            };

            meta = {
              description = ''A lexicon (word list) implemented in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rtvu/lexicon";
            };
          } // packageOverrides)
      ) {};

    lexicon = lexicon_0_1_2;

    lfe_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lfe";
            version = "1.2.0";
            src = fetchHex {
              pkg = "lfe";
              version = "1.2.0";
              sha256 =
                "38506f04bf2698ade1b2dd8ce4fdeafdb73ff460a5988741af20629da3731f18";
            };

            meta = {
              description = ''Lisp Flavored Erlang (LFE)'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rvirding/lfe";
            };
          } // packageOverrides)
      ) {};

    lfe = lfe_1_2_0;

    lfsr_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lfsr";
            version = "0.0.2";
            src = fetchHex {
              pkg = "lfsr";
              version = "0.0.2";
              sha256 =
                "8a14455bd0ce5c6b7dc56bf1027007c67e48979b49b70e09372cc36769d16b90";
            };

            meta = {
              description = ''Elixir implementation of a binary Galois Linear
                            Feedback Shift Register. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/lfsr";
            };
          } // packageOverrides)
      ) {};

    lfsr = lfsr_0_0_2;

    lheap_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lheap";
            version = "1.0.0";
            src = fetchHex {
              pkg = "lheap";
              version = "1.0.0";
              sha256 =
                "6c8272fbfc7f7fff73fb641cec2c4a3be1417bf6711ae555e4d6e0cae51050d9";
            };

            meta = {
              description = ''Leftist heap in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/lheap";
            };
          } // packageOverrides)
      ) {};

    lheap = lheap_1_0_0;

    lhttpc_1_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.3.0";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.3.0";
              sha256 =
                "ddd2bd4b85159bc987c954b14877168e6a3c3e516105702189776e97c50296a4";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.4.0";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.4.0";
              sha256 =
                "26d5a12b63fedb3e862a816a472258007dc1e85b75a9bcdb0223425e39827777";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc_1_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.5.0";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.5.0";
              sha256 =
                "8b67639da38dca71384c81c8ec24dac449f1cc52272484d91289303bd3c7cde0";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc_1_5_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.5.3";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.5.3";
              sha256 =
                "609a442e84e8291c0e06e858ae4596349ca03683f576b55f54c499dfffb8890e";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.5.4";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.5.4";
              sha256 =
                "30c6d95be95b75cde5e868ebce6c50063b3035e6b1fb9c3080cf65905b3f210e";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc_1_5_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.5.5";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.5.5";
              sha256 =
                "0dda026c9c3860ef9015196add32c85c74fdfc8547df5e3dcdf827af555fcda6";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc = lhttpc_1_5_5;

    lib_combin_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lib_combin";
            version = "0.1.5";
            src = fetchHex {
              pkg = "lib_combin";
              version = "0.1.5";
              sha256 =
                "d565215b9e5b3b1ef0b1a5dedd0cc41aea0814d6ead6191584b5961c9db874d5";
            };

            meta = {
              description = ''Basic combinatorics for Erlang lists and maps.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/lib_combin";
            };
          } // packageOverrides)
      ) {};

    lib_combin = lib_combin_0_1_5;

    lib_conf_0_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsone_1_4_5 }:
          buildRebar3 ({
            name = "lib_conf";
            version = "0.1.4";
            src = fetchHex {
              pkg = "lib_conf";
              version = "0.1.4";
              sha256 =
                "5dc0bed9402561e0b107a1f0bee57d2c960a3d05db565054e9386c362f5513c0";
            };

            beamDeps  = [ jsone_1_4_5 ];

            meta = {
              description = ''Simple Erlang configuration handling library.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/lib_conf/";
            };
          } // packageOverrides)
      ) {};

    lib_conf = lib_conf_0_1_4;

    lib_dp_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lib_dp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lib_dp";
              version = "0.1.0";
              sha256 =
                "eedb4429b6905e8463bd8ec8d5300e2f6dea50c5e6eedc104b16a66d9188666d";
            };

            meta = {
              description = ''Dynamic Programming in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/lib_dp/";
            };
          } // packageOverrides)
      ) {};

    lib_dp = lib_dp_0_1_0;

    lib_lat_lon_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exexif_0_0_5,
          httpoison_1_2_0,
          jason_1_1_1,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "lib_lat_lon";
            version = "0.4.1";
            src = fetchHex {
              pkg = "lib_lat_lon";
              version = "0.4.1";
              sha256 =
                "9bfea3dc88f0d58a8d4707d241c1b10ca549c40b8befa093c9fa3ada3c8a329e";
            };
            beamDeps  = [
                          exexif_0_0_5
                          httpoison_1_2_0
                          jason_1_1_1
                          porcelain_2_0_3
                        ];

            meta = {
              longDescription = ''Small library for direct/reverse geocoding.
                                Supports explicit latitude/longitude pairs,
                                addresses as binaries, as well as jpeg/tiff
                                images having a GPS information in exif.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amotion-city/lib_lat_lon";
            };
          } // packageOverrides)
      ) {};

    lib_lat_lon = lib_lat_lon_0_4_1;

    lib_parallel_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lib_parallel";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lib_parallel";
              version = "0.1.1";
              sha256 =
                "7512a45487574c367f87f6959dce250cb3b416b56f6e7006254ed1e46cf90b4b";
            };

            meta = {
              description = ''An OTP library, a collection of parallel toys'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/minghu6/lib_parallel";
            };
          } // packageOverrides)
      ) {};

    lib_parallel = lib_parallel_0_1_1;

    libcalculatorfinance_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "libcalculatorfinance";
            version = "0.0.1";
            src = fetchHex {
              pkg = "libcalculatorfinance";
              version = "0.0.1";
              sha256 =
                "cc8b37a76225dba5d07c596bc185d1402679a674e189423798c2150d91cda121";
            };

            meta = {
              longDescription = ''Elixir library that contains functions that
                                help with financial calculations, related to
                                trading and investing.'';
              license = stdenv.lib.licenses.bsd3;
              homepage =
                "https://github.com/rockwolf/libcalculatorfinance-ex/tree/0.0.1";
            };
          } // packageOverrides)
      ) {};

    libcalculatorfinance = libcalculatorfinance_0_0_1;

    libcluster_2_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jason_1_1_1 }:
          buildMix ({
            name = "libcluster";
            version = "2.5.0";
            src = fetchHex {
              pkg = "libcluster";
              version = "2.5.0";
              sha256 =
                "5775a934ef45fd7bb168ed53a3e38e8b6b3f754dd4e7b4a03e02c19ac6c3dcd2";
            };
            beamDeps  = [ jason_1_1_1 ];

            meta = {
              description = ''Automatic Erlang cluster formation and management
                            for Elixir/Erlang applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/libcluster";
            };
          } // packageOverrides)
      ) {};

    libcluster_3_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jason_1_1_1 }:
          buildMix ({
            name = "libcluster";
            version = "3.0.2";
            src = fetchHex {
              pkg = "libcluster";
              version = "3.0.2";
              sha256 =
                "ffa5d63b8d169d6a9800c204b3d2645df6669200a1ab6ff1f3fe233933069d19";
            };
            beamDeps  = [ jason_1_1_1 ];

            meta = {
              description = ''Automatic Erlang cluster formation and management
                            for Elixir/Erlang applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/libcluster";
            };
          } // packageOverrides)
      ) {};

    libcluster = libcluster_3_0_2;

    libelection_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "libelection";
            version = "0.2.0";
            src = fetchHex {
              pkg = "libelection";
              version = "0.2.0";
              sha256 =
                "48c6f4d50f9dfc27786f018a8c459511ab6a0f25b6b2118df6c78d942e59e68f";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Library to perform leader election in a cluster
                            of containerized Elixir nodes'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/QuiqUpLTD/libelection";
            };
          } // packageOverrides)
      ) {};

    libelection = libelection_0_2_0;

    libgraph_0_12_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "libgraph";
            version = "0.12.0";
            src = fetchHex {
              pkg = "libgraph";
              version = "0.12.0";
              sha256 =
                "149806053e77deb1188035feb5df39a88259501fdd3713ca4c030d17de30f8d6";
            };

            meta = {
              description = ''A high-performance graph datastructure library
                            for Elixir projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/libgraph";
            };
          } // packageOverrides)
      ) {};

    libgraph = libgraph_0_12_0;

    libhoney_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "libhoney";
            version = "0.1.0";
            src = fetchHex {
              pkg = "libhoney";
              version = "0.1.0";
              sha256 =
                "57397a17a068aa8499619adafebf489e900a50e0792cc7056e073d91e0ff8989";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A client for interacting with honeycomb.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carwow/libhoney-ex";
            };
          } // packageOverrides)
      ) {};

    libhoney = libhoney_0_1_0;

    librex_1_0_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, secure_random_0_5_1
        }:
          buildMix ({
            name = "librex";
            version = "1.0.3";
            src = fetchHex {
              pkg = "librex";
              version = "1.0.3";
              sha256 =
                "6b0982e34eb6b333a2334eb68fab5e88a378924e81ec3a9c92db3ea8e183c141";
            };
            beamDeps  = [ secure_random_0_5_1 ];

            meta = {
              description = ''Convert office documents to other formats using
                            LibreOffice'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/librex";
            };
          } // packageOverrides)
      ) {};

    librex = librex_1_0_3;

    librex_imgs_1_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, secure_random_0_5_1
        }:
          buildMix ({
            name = "librex_imgs";
            version = "1.0.2";
            src = fetchHex {
              pkg = "librex_imgs";
              version = "1.0.2";
              sha256 =
                "b5c314a4219361330c448a2d6f7f6a02c4bae0d91e26a9f11e9168fa599b6334";
            };
            beamDeps  = [ secure_random_0_5_1 ];

            meta = {
              longDescription = ''Elixir library to convert office documents to
                                other formats using LibreOffice. Now supports
                                converting from images!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kwayebopp/librex-imgs";
            };
          } // packageOverrides)
      ) {};

    librex_imgs = librex_imgs_1_0_2;

    libring_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "libring";
            version = "1.3.1";
            src = fetchHex {
              pkg = "libring";
              version = "1.3.1";
              sha256 =
                "60dcf7745eb2fa315fe5612412992d279c8fefc990419c8fb6ca6b800b98f101";
            };

            meta = {
              description = ''A fast consistent hash ring implementation in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/libring";
            };
          } // packageOverrides)
      ) {};

    libring = libring_1_3_1;

    libsnarlmatch_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "libsnarlmatch";
            version = "0.1.7";
            src = fetchHex {
              pkg = "libsnarlmatch";
              version = "0.1.7";
              sha256 =
                "72e9bcf7968e75774393778146ac6596116f1c60136dd607ad249183684ee380";
            };

            meta = {
              description = ''permission matcher library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarlmatch";
            };
          } // packageOverrides)
      ) {};

    libsnarlmatch_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "libsnarlmatch";
            version = "0.1.8";
            src = fetchHex {
              pkg = "libsnarlmatch";
              version = "0.1.8";
              sha256 =
                "ba6424445cc2e3b321f33077fc21214a00dafc754ea74896c34e4f9cb33a8c00";
            };

            meta = {
              description = ''permission matcher library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarlmatch";
            };
          } // packageOverrides)
      ) {};

    libsnarlmatch = libsnarlmatch_0_1_8;

    licensir_0_2_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "licensir";
            version = "0.2.7";
            src = fetchHex {
              pkg = "licensir";
              version = "0.2.7";
              sha256 =
                "16f9fdaa49cfca5b28267f41748f3c6dad31ebca3a7c682b1703cb2076d3a168";
            };

            meta = {
              longDescription = ''An Elixir mix task that list the license(s)
                                of all installed packages in your project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/unnawut/licensir";
            };
          } // packageOverrides)
      ) {};

    licensir = licensir_0_2_7;

    lifx_0_1_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_2_4_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "lifx";
            version = "0.1.8";
            src = fetchHex {
              pkg = "lifx";
              version = "0.1.8";
              sha256 =
                "3ac962fc7100e27c748e108a13a7d7ebc7c92a96e6b0e4fe46bd7cac421f7f86";
            };
            beamDeps  = [ cowboy_2_4_0 poison_3_1_0 ];

            meta = {
              description = ''A Client for Lifx LAN API'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/lifx";
            };
          } // packageOverrides)
      ) {};

    lifx = lifx_0_1_8;

    like_sanitizer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "like_sanitizer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "like_sanitizer";
              version = "0.1.0";
              sha256 =
                "35b422063e9358cd99e818190627dfa0b0eea6e1e4fa5e9b1caa872a326ba24b";
            };

            meta = {
              description = ''SQL-LIKE sanitization for strings.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/LikeSanitizer";
            };
          } // packageOverrides)
      ) {};

    like_sanitizer = like_sanitizer_0_1_0;

    limiter_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, con_cache_0_13_0 }:
          buildMix ({
            name = "limiter";
            version = "0.1.2";
            src = fetchHex {
              pkg = "limiter";
              version = "0.1.2";
              sha256 =
                "cd6554563ddb4c136fb159839d30cbf4a244acb57376c379796265c3cb20a07a";
            };
            beamDeps  = [ con_cache_0_13_0 ];

            meta = {
              description = ''GCRA rate limiter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jur0/limiter";
            };
          } // packageOverrides)
      ) {};

    limiter = limiter_0_1_2;

    lindel_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elastix_0_6_0 }:
          buildMix ({
            name = "lindel";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lindel";
              version = "0.1.0";
              sha256 =
                "71ab2e76abf1ebe81330fa7a14f9394d03a60c9df7daca415074ed1814144e1f";
            };
            beamDeps  = [ elastix_0_6_0 ];

            meta = {
              description = ''Elastix convenience wrapper thing'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/mneudert/lindel";
            };
          } // packageOverrides)
      ) {};

    lindel = lindel_0_1_0;

    line_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "line";
            version = "0.3.0";
            src = fetchHex {
              pkg = "line";
              version = "0.3.0";
              sha256 =
                "4a15ac29d1a7216720fc5991eea0ac1fb67212b48eac5c110c08c9e762a41be1";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''simple HTTP client for LINE Login'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuki-toida/line";
            };
          } // packageOverrides)
      ) {};

    line = line_0_3_0;

    line_buffer_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "line_buffer";
            version = "0.1.1";
            src = fetchHex {
              pkg = "line_buffer";
              version = "0.1.1";
              sha256 =
                "1c022db6a359305594ca227e0f334d3321e5c89b4f2a97e329bdd401bc94245c";
            };

            meta = {
              description = ''Line buffer that breaks strings into lines'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sampscl/line_buffer";
            };
          } // packageOverrides)
      ) {};

    line_buffer = line_buffer_0_1_1;

    line_pay_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "line_pay";
            version = "0.5.0";
            src = fetchHex {
              pkg = "line_pay";
              version = "0.5.0";
              sha256 =
                "19d03fcce98212520ecd860a2137774cf862dc66f1764307e4e1b052e11bdc0c";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''simple HTTP client for LINE Pay'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuki-toida/line_pay";
            };
          } // packageOverrides)
      ) {};

    line_pay = line_pay_0_5_0;

    lineo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lineo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lineo";
              version = "0.1.0";
              sha256 =
                "842733d2aae3b8cfadf3acfe456241eb3434e68984d1fdbb7be15e335591e21c";
            };

            meta = {
               license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/lineo";
            };
          } // packageOverrides)
      ) {};

    lineo = lineo_0_1_0;

    linguist_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "linguist";
            version = "0.1.5";
            src = fetchHex {
              pkg = "linguist";
              version = "0.1.5";
              sha256 =
                "d8b0665512a800854152082f6d56142e56e5da5f5b0d879298117b7dfd55ba97";
            };

            meta = {
              description = ''Elixir Internationalization library '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/linguist";
            };
          } // packageOverrides)
      ) {};

    linguist = linguist_0_1_5;

    linkex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "linkex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "linkex";
              version = "0.1.0";
              sha256 =
                "fa884e5d5d81f15fe5456dfb0833ea3ec0d18492aa5af5801e3d18a66cb983cd";
            };

            meta = {
              description = ''Encode and decode HTTP Link headers.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/thiamsantos/linkex";
            };
          } // packageOverrides)
      ) {};

    linkex = linkex_0_1_0;

    littlefinger_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "littlefinger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "littlefinger";
              version = "0.1.0";
              sha256 =
                "6a0097dc8b906b83d888ba92e5f3c8bb0b4eb584ff5d80e850a3128eb35fde2c";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''Performs Webfinger requests to discover
                                information on people or other entities
                                identified through IRIs.'';
              license = stdenv.lib.licenses.agpl3;
            };
          } // packageOverrides)
      ) {};

    littlefinger = littlefinger_0_1_0;

    livecoin_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_2_0_1
        }:
          buildMix ({
            name = "livecoin_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "livecoin_ex";
              version = "0.1.0";
              sha256 =
                "56628b7ec8c37364771f384b87b87568ff66307b2b7d7444d9d2b33a17f14e06";
            };
            beamDeps  = [ httpoison_1_2_0 poison_2_0_1 ];

            meta = {
              longDescription = ''livecoin.net API client for Elixir/Erlang.
                                Provides access to ticker and trading data for
                                cryptocurrency pairs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/livecoin_ex";
            };
          } // packageOverrides)
      ) {};

    livecoin_ex = livecoin_ex_0_1_0;

    lkn_core_0_4_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          beacon_1_1_0,
          lkn_prelude_0_1_2,
          uuid_1_1_8
        }:
          buildMix ({
            name = "lkn_core";
            version = "0.4.3";
            src = fetchHex {
              pkg = "lkn_core";
              version = "0.4.3";
              sha256 =
                "c0dc0359de8930dea236db71fc140866a1479613243e07b61acf14f4c1fd681e";
            };
            beamDeps  = [ beacon_1_1_0 lkn_prelude_0_1_2 uuid_1_1_8 ];

            meta = {
              longDescription = ''Yet another ECS, actor-based and focused on
                                getting ride of as much boilerplate as
                                possible.'';
              license = stdenv.lib.licenses.agpl3;
            };
          } // packageOverrides)
      ) {};

    lkn_core = lkn_core_0_4_3;

    lkn_prelude_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lkn_prelude";
            version = "0.1.2";
            src = fetchHex {
              pkg = "lkn_prelude";
              version = "0.1.2";
              sha256 =
                "208f4efb3da9c53daf853aa59ddf06f08ca7d20417457d2e6e8dd66036a71531";
            };

            meta = {
              description = ''An opiniated yet generic prelude for lkn.'';
              license = stdenv.lib.licenses.gpl3;
            };
          } // packageOverrides)
      ) {};

    lkn_prelude = lkn_prelude_0_1_2;

    lmgtfy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hound_1_0_4 }:
          buildMix ({
            name = "lmgtfy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lmgtfy";
              version = "0.1.0";
              sha256 =
                "b53cd46d8ad2af118d9e976183854fc5a6aa2be89b04c440b4b2e0db61260e40";
            };
            beamDeps  = [ hound_1_0_4 ];

            meta = {
              description = ''A simple library which searches Google. Requires
                            phantomjs on the PATH.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/domainatrex";
            };
          } // packageOverrides)
      ) {};

    lmgtfy = lmgtfy_0_1_0;

    load_log_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "load_log";
            version = "0.1.0";
            src = fetchHex {
              pkg = "load_log";
              version = "0.1.0";
              sha256 =
                "846d21226b8ffee7a66faea6c770d06774e34649e521465d43dd04d4b251799e";
            };

            meta = {
              description = ''A simple OTP application that records CPU loadavg
                            data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dalgona/load_log";
            };
          } // packageOverrides)
      ) {};

    load_log = load_log_0_1_0;

    lob_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chacha20_1_0_1,
          jason_1_1_1
        }:
          buildMix ({
            name = "lob";
            version = "1.0.1";
            src = fetchHex {
              pkg = "lob";
              version = "1.0.1";
              sha256 =
                "4804d6eba26cdb30cbc270421dc74aad3c82dee0aa7e926f339dd60cec40597e";
            };
            beamDeps  = [ chacha20_1_0_1 jason_1_1_1 ];

            meta = {
              description = ''Length-Object-Binary (LOB) Packet Encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/lob_ex";
            };
          } // packageOverrides)
      ) {};

    lob = lob_1_0_1;

    lob_elixir_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "lob_elixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "lob_elixir";
              version = "1.0.0";
              sha256 =
                "902a38a6530fa400a8f7c6850c79dcd56d717baa5b0596bb5d56f655ccc7dd6b";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Lob Elixir Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lob/lob-elixir";
            };
          } // packageOverrides)
      ) {};

    lob_elixir = lob_elixir_1_0_0;

    lobby_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          excoveralls_0_7_5,
          mix_test_watch_0_4_1
        }:
          buildMix ({
            name = "lobby";
            version = "0.0.1";
            src = fetchHex {
              pkg = "lobby";
              version = "0.0.1";
              sha256 =
                "5344cd678f1543a80d4b7715b3add3ce2fa76f47152f97b6b4e5e4f0cb506d29";
            };
            beamDeps  = [ excoveralls_0_7_5 mix_test_watch_0_4_1 ];

            meta = {
              description = ''An in memory lobby that handles storing members
                            and their state.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MainShayne233/lobby";
            };
          } // packageOverrides)
      ) {};

    lobby = lobby_0_0_1;

    localitydispatcher_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_9_0 }:
          buildMix ({
            name = "localitydispatcher";
            version = "0.1.1";
            src = fetchHex {
              pkg = "localitydispatcher";
              version = "0.1.1";
              sha256 =
                "4a85940b562e0e89702e90f9449f01923b51abf544f211ad2d6607111fff3962";
            };
            beamDeps  = [ gen_stage_0_9_0 ];

            meta = {
              description = ''A GenStage dispatcher to route events based on
                            some notion of locality'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/localitydispatcher";
            };
          } // packageOverrides)
      ) {};

    localitydispatcher = localitydispatcher_0_1_1;

    locker_1_0_8 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, proper_1_1_1_beta
        }:
          buildRebar3 ({
            name = "locker";
            version = "1.0.8";
            src = fetchHex {
              pkg = "locker";
              version = "1.0.8";
              sha256 =
                "9cf9890e6b12dab7b8d1997c455348742db6caf2eaac3b64c514cd4e8dca2b56";
            };

            beamDeps  = [ proper_1_1_1_beta ];

            meta = {
              longDescription = ''Distributed de-centralized consistent
                                in-memory key-value store written in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wooga/locker";
            };
          } // packageOverrides)
      ) {};

    locker = locker_1_0_8;

    locks_0_1_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, plain_fsm_1_4_1
        }:
          buildRebar3 ({
            name = "locks";
            version = "0.1.1";
            src = fetchHex {
              pkg = "locks";
              version = "0.1.1";
              sha256 =
                "b87a32d95af6b86e58b7ff3063dca5b2ef1b692436e8c8c0c47bbfa2181ac0a5";
            };

            beamDeps  = [ plain_fsm_1_4_1 ];

            meta = {
              description = ''Scalable deadlock-resolving hierarchical
                            locker'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/uwiger/locks";
            };
          } // packageOverrides)
      ) {};

    locks_0_2_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, plain_fsm_1_4_1
        }:
          buildRebar3 ({
            name = "locks";
            version = "0.2.0";
            src = fetchHex {
              pkg = "locks";
              version = "0.2.0";
              sha256 =
                "4f338e927b8b35dda0819823c04e901f6afe2d81529e07f09cefdc4f57f101c1";
            };

            beamDeps  = [ plain_fsm_1_4_1 ];

            meta = {
              description = ''Scalable deadlock-resolving hierarchical
                            locker'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/uwiger/locks";
            };
          } // packageOverrides)
      ) {};

    locks = locks_0_2_0;

    lodash_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lodash";
            version = "0.0.3";
            src = fetchHex {
              pkg = "lodash";
              version = "0.0.3";
              sha256 =
                "aa13bf3cd513b327917790bbd1a2f4ef0097001eb2f10aeb17387da32d6b766d";
            };

            meta = {
              description = ''Lodash implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MQuy/elixir-lodash";
            };
          } // packageOverrides)
      ) {};

    lodash = lodash_0_0_3;

    lofi_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lofi";
            version = "0.2.0";
            src = fetchHex {
              pkg = "lofi";
              version = "0.2.0";
              sha256 =
                "6e023c02b458480ea3faf1a52e3c43d70beb03408eadc1389e2077e3684ebca1";
            };

            meta = {
              description = ''Parse #Lofi content, a friendly yet flexible
                            format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/RoyalIcing/lofi-elixir";
            };
          } // packageOverrides)
      ) {};

    lofi = lofi_0_2_0;

    log_lager_backend_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_6_4 }:
          buildMix ({
            name = "log_lager_backend";
            version = "0.0.2";
            src = fetchHex {
              pkg = "log_lager_backend";
              version = "0.0.2";
              sha256 =
                "420dfd98ec9d47ecc976b12fb3ec66f276e87ed88711740305db7076d160ff22";
            };
            beamDeps  = [ lager_3_6_4 ];

            meta = {
              description = ''A logger backend that forwards log messages to
                            lager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hrzndhrn/lager_log_backend";
            };
          } // packageOverrides)
      ) {};

    log_lager_backend = log_lager_backend_0_0_2;

    log_parser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, flow_0_14_0 }:
          buildMix ({
            name = "log_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "log_parser";
              version = "0.1.0";
              sha256 =
                "99a83925540fa7857f92331b5b0fbedb809b7cccc6b8e74b5c5a7ce3b10f2154";
            };
            beamDeps  = [ flow_0_14_0 ];

            meta = {
              description = ''The library for grep large files using CPU cores
                            simultaneously.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/astorre88/log_parser";
            };
          } // packageOverrides)
      ) {};

    log_parser = log_parser_0_1_0;

    logfmt_3_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logfmt";
            version = "3.3.0";
            src = fetchHex {
              pkg = "logfmt";
              version = "3.3.0";
              sha256 =
                "c912c9173ff92512a401cac31fd559ea6435865af3e5364f51272c87c0b52cc3";
            };

            meta = {
              description = ''Logfmt is a module for encoding and decoding
                            logfmt-style log lines.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jclem/logfmt-elixir";
            };
          } // packageOverrides)
      ) {};

    logfmt = logfmt_3_3_0;

    logger_2k17_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_2k17";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logger_2k17";
              version = "0.1.0";
              sha256 =
                "e2c680a423bda5dcbf4bf32a940e46e8d9ca080da659b6bccac088f4a48981d4";
            };

            meta = {
              longDescription = ''Finally a logger module for 2k17. Replaces
                                Logger with a new and fresh module with
                                meaningful methods like `fyi` and `omg` instead
                                of `info` and `error`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davejlong/logger_2k17";
            };
          } // packageOverrides)
      ) {};

    logger_2k17 = logger_2k17_0_1_0;

    logger_backends_json_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, config_ext_0_3_0 }:
          buildMix ({
            name = "logger_backends_json";
            version = "0.5.0";
            src = fetchHex {
              pkg = "logger_backends_json";
              version = "0.5.0";
              sha256 =
                "51cda23997514299a8fdc4563ece7bf4a5467fb648d2baa626142aef3f7787bd";
            };
            beamDeps  = [ config_ext_0_3_0 ];

            meta = {
              longDescription = ''Yet another (but flexible) JSON backend for
                                Logger. Pick whatever json encoder you want
                                (poison, json, exjsx) or provide your own.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/driv3r/logger_backends_json";
            };
          } // packageOverrides)
      ) {};

    logger_backends_json = logger_backends_json_0_5_0;

    logger_circular_buffer_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_circular_buffer";
            version = "0.2.0";
            src = fetchHex {
              pkg = "logger_circular_buffer";
              version = "0.2.0";
              sha256 =
                "b6141af07deab99e59e6e8c256f5b8d54f76f887647a8fe05ee0299657388fe4";
            };

            meta = {
              description = ''A circular buffer backend for Elixir Logger with
                            support for IO streaming.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/logger_circular_buffer";
            };
          } // packageOverrides)
      ) {};

    logger_circular_buffer = logger_circular_buffer_0_2_0;

    logger_datadog_backend_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_statsd_0_5_3 }:
          buildMix ({
            name = "logger_datadog_backend";
            version = "0.1.1";
            src = fetchHex {
              pkg = "logger_datadog_backend";
              version = "0.1.1";
              sha256 =
                "c3a5c6f5854fb35646e1efc55cd1ca804095a5f933205f397bd5f6d615dc63b9";
            };
            beamDeps  = [ ex_statsd_0_5_3 ];

            meta = {
              description = ''a datadog backend for ExLogger'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/matteosister/logger_datadog_backend";
            };
          } // packageOverrides)
      ) {};

    logger_datadog_backend = logger_datadog_backend_0_1_1;

    logger_file_backend_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_file_backend";
            version = "0.0.10";
            src = fetchHex {
              pkg = "logger_file_backend";
              version = "0.0.10";
              sha256 =
                "0cee4771fb3ab1def4fc4a01b7f5550ae36db0755035b0c426999702c30b6422";
            };

            meta = {
              description = ''Simple logger backend that writes to a file'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/onkel-dirtus/logger_file_backend";
            };
          } // packageOverrides)
      ) {};

    logger_file_backend = logger_file_backend_0_0_10;

    logger_lager_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_6_4 }:
          buildMix ({
            name = "logger_lager";
            version = "0.1.2";
            src = fetchHex {
              pkg = "logger_lager";
              version = "0.1.2";
              sha256 =
                "b7919f2dc9951e0661b6a1d5ac58a9760461b5cdefc520e529a9876486c13db3";
            };
            beamDeps  = [ lager_3_6_4 ];

            meta = {
              description = ''Logger backend that forwards messages to lager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/logger_lager";
            };
          } // packageOverrides)
      ) {};

    logger_lager = logger_lager_0_1_2;

    logger_lager_backend_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_6_4 }:
          buildMix ({
            name = "logger_lager_backend";
            version = "0.2.0";
            src = fetchHex {
              pkg = "logger_lager_backend";
              version = "0.2.0";
              sha256 =
                "33c02afc5f2192cd9aae43114b6aa65cde71bff278c0726e434afa9c3c218f72";
            };
            beamDeps  = [ lager_3_6_4 ];

            meta = {
              description = ''A Logger backend that forwards messages to
                            lager'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/jonathanperret/logger_lager_backend";
            };
          } // packageOverrides)
      ) {};

    logger_lager_backend = logger_lager_backend_0_2_0;

    logger_multicast_backend_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_multicast_backend";
            version = "0.2.2";
            src = fetchHex {
              pkg = "logger_multicast_backend";
              version = "0.2.2";
              sha256 =
                "eb4c41ae152abbcaeb656d4abfe319911c5474c7e1b43c93e9e42cd3659f482f";
            };

            meta = {
              description = ''A Logger backend that logs via Multicast UDP'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/ghitchens/logger_multicast_backend";
            };
          } // packageOverrides)
      ) {};

    logger_multicast_backend = logger_multicast_backend_0_2_2;

    logger_papertrail_backend_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_papertrail_backend";
            version = "1.0.3";
            src = fetchHex {
              pkg = "logger_papertrail_backend";
              version = "1.0.3";
              sha256 =
                "ff22e5f361cffa3dc54f65a14f1714478d6bd40436d7afd59bfdb68da777de70";
            };

            meta = {
              description = ''A Papertrail backend for Elixir Logger'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/larskrantz/logger_papertrail_backend";
            };
          } // packageOverrides)
      ) {};

    logger_papertrail_backend = logger_papertrail_backend_1_0_3;

    logger_slack_backend_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_2_0 }:
          buildMix ({
            name = "logger_slack_backend";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logger_slack_backend";
              version = "0.1.0";
              sha256 =
                "4ae8fe472280fcc8bc2511d2df1daf35f711338db939261d9751286a8d54cafa";
            };
            beamDeps  = [ httpoison_1_2_0 ];

            meta = {
              description = ''Simple logger backend that sends to Slack channel
                            using webhook API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matken11235/logger_slack_backend";
            };
          } // packageOverrides)
      ) {};

    logger_slack_backend = logger_slack_backend_0_1_0;

    logger_statsd_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          buffer_0_3_12,
          ex_statsd_0_5_3
        }:
          buildMix ({
            name = "logger_statsd";
            version = "0.1.4";
            src = fetchHex {
              pkg = "logger_statsd";
              version = "0.1.4";
              sha256 =
                "8833309877797ca17eab664e019aac990a5ec48345a58c0f9e36e1cfece65450";
            };
            beamDeps  = [ buffer_0_3_12 ex_statsd_0_5_3 ];

            meta = {
              description = ''Error logger backend for statsd'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/steffenix/logger_statsd";
            };
          } // packageOverrides)
      ) {};

    logger_statsd = logger_statsd_0_1_4;

    logger_syslog_backend_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_syslog_backend";
            version = "1.0.0";
            src = fetchHex {
              pkg = "logger_syslog_backend";
              version = "1.0.0";
              sha256 =
                "1daa16f0c677f52503c2399b3994b2ce597bd7c4f4def683337e5f05aedaee5c";
            };

            meta = {
              description = ''Logger backend that writes to the local syslog
                            Unix Socket'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/logger_syslog_backend";
            };
          } // packageOverrides)
      ) {};

    logger_syslog_backend = logger_syslog_backend_1_0_0;

    logger_telegram_backend_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "logger_telegram_backend";
            version = "1.0.3";
            src = fetchHex {
              pkg = "logger_telegram_backend";
              version = "1.0.3";
              sha256 =
                "ff90cff75dbfd0a9a801cb4684680d4d4fa19cdcb80c208403e1210ca081a95b";
            };
            beamDeps  = [ gen_stage_0_14_0 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A Logger backend for Telegram'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/adriankumpf/logger-telegram-backend";
            };
          } // packageOverrides)
      ) {};

    logger_telegram_backend = logger_telegram_backend_1_0_3;

    loggex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpx_0_0_11,
          jason_1_1_1,
          msgpack_0_7_0
        }:
          buildMix ({
            name = "loggex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "loggex";
              version = "0.0.1";
              sha256 =
                "1dd2d041a25ba36f0f9640af514b7c7baa4712ef02614ae8607b8735b70423a9";
            };
            beamDeps  = [ httpx_0_0_11 jason_1_1_1 msgpack_0_7_0 ];

            meta = {
              description = ''Logging utilities for Elixir.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    loggex = loggex_0_0_1;

    loggix_0_0_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "loggix";
            version = "0.0.8";
            src = fetchHex {
              pkg = "loggix";
              version = "0.0.8";
              sha256 =
                "e7f2d7b7d46815402ec64134ddf2a0b5c20647e3e3006dc75eabddfe0ca2b615";
            };

            meta = {
              description = ''A Logger backend implimentation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kdxu/loggix";
            };
          } // packageOverrides)
      ) {};

    loggix = loggix_0_0_8;

    logglix_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "logglix";
            version = "1.0.0";
            src = fetchHex {
              pkg = "logglix";
              version = "1.0.0";
              sha256 =
                "26d96458df7aeb1e2e3553ea17dd602b76a963f5b1f33d013717751d7258275e";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''Elixir loggly is a backend that forwards all log
                            messages to the Loggly service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pragmaticivan/logglix";
            };
          } // packageOverrides)
      ) {};

    logglix = logglix_1_0_0;

    logi_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "logi";
            version = "0.5.0";
            src = fetchHex {
              pkg = "logi";
              version = "0.5.0";
              sha256 =
                "45619004d3735f27e6f397ba0696c5fc6ea1ee89e037fd50847d975e0330de8f";
            };

            meta = {
              description = ''A Logger Interface Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/logi";
            };
          } // packageOverrides)
      ) {};

    logi_stdlib_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, logi_0_5_0 }:
          buildRebar3 ({
            name = "logi_stdlib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "logi_stdlib";
              version = "0.1.1";
              sha256 =
                "8c6b888865f2e3759b977f2c911bd43a21b0918cdc8d98a8a74dc431a4d5ccfb";
            };

            beamDeps  = [ logi_0_5_0 ];

            meta = {
              description = ''Standard Library for logi'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/logi_stdlib";
            };
          } // packageOverrides)
      ) {};

    logi_stdlib = logi_stdlib_0_1_1;

    logic_monitor_0_0_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "logic_monitor";
            version = "0.0.9";
            src = fetchHex {
              pkg = "logic_monitor";
              version = "0.0.9";
              sha256 =
                "bdf8d2fd0b280afd2af123e726721a59cf1471426ce4dfd86dfef7d5de4dacae";
            };
            beamDeps  = [ httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for Logic Monitor REST api. Uses
                            LMv1 API Token Authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-logic_monitor.git";
            };
          } // packageOverrides)
      ) {};

    logic_monitor = logic_monitor_0_0_9;

    logoot_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_8 }:
          buildMix ({
            name = "logoot";
            version = "1.0.2";
            src = fetchHex {
              pkg = "logoot";
              version = "1.0.2";
              sha256 =
                "bc2de14ea9549b41cf18e8849419dad0fc9720025c0a4fce7d40659c800bd104";
            };
            beamDeps  = [ uuid_1_1_8 ];

            meta = {
              description = ''An implementation of the Logoot CRDT'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usecanvas/logoot_ex";
            };
          } // packageOverrides)
      ) {};

    logoot = logoot_1_0_2;

    logrex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logrex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "logrex";
              version = "0.1.1";
              sha256 =
                "a00acac5766b2ee6e09fa4f229ba22719ef774268b45bdafd5adfb9d84180546";
            };

            meta = {
              description = ''A log formatter for displaying dynamic metadata
                            fields.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbgardner/logrex";
            };
          } // packageOverrides)
      ) {};

    logrex = logrex_0_1_1;

    logstash_json_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          blocking_queue_1_3_0,
          connection_1_0_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "logstash_json";
            version = "0.7.1";
            src = fetchHex {
              pkg = "logstash_json";
              version = "0.7.1";
              sha256 =
                "0e01fdab695b0389691935587ca28e3b46dd5ef4452e0ada283548fd58868044";
            };
            beamDeps  = [ blocking_queue_1_3_0 connection_1_0_4 poison_3_1_0
                      ];

            meta = {
              description = ''Formats logs as JSON, forwards to Logstash via
                            TCP, or to console.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/svetob/logstash-json";
            };
          } // packageOverrides)
      ) {};

    logstash_json = logstash_json_0_7_1;

    loki_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "loki";
            version = "1.2.0";
            src = fetchHex {
              pkg = "loki";
              version = "1.2.0";
              sha256 =
                "129289f902736e3beeaa68012aee392a8275690ecf84725e9559c7e50155e9e1";
            };

            meta = {
              description = ''Loki is a toolkit for building powerful
                            command-line interfaces.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/khusnetdinov/loki";
            };
          } // packageOverrides)
      ) {};

    loki_1_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "loki";
            version = "1.2.2";
            src = fetchHex {
              pkg = "loki";
              version = "1.2.2";
              sha256 =
                "d24b0449a57027ecccc2fadb3440b74644aad085de35ce1c599e53c694307519";
            };

            meta = {
              description = ''Loki is a toolkit for building powerful
                            command-line interfaces.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/khusnetdinov/loki";
            };
          } // packageOverrides)
      ) {};

    loki = loki_1_2_2;

    lolcat_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          colorful_0_6_0,
          quickrand_1_7_3
        }:
          buildMix ({
            name = "lolcat";
            version = "0.0.1";
            src = fetchHex {
              pkg = "lolcat";
              version = "0.0.1";
              sha256 =
                "884799d2e7f294a6a5455e19c9816592d7b1314cefaba18952876fef0c4a10af";
            };
            beamDeps  = [ colorful_0_6_0 quickrand_1_7_3 ];

            meta = {
              description = ''The clone of lolcat. written in elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/restartr/ex-lolcat";
            };
          } // packageOverrides)
      ) {};

    lolcat = lolcat_0_0_1;

    lonely_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lonely";
            version = "0.3.0";
            src = fetchHex {
              pkg = "lonely";
              version = "0.3.0";
              sha256 =
                "b28bb3c2aef9b99a7eed4ec86a7d323269fb72ffbcc4b93b22e33e41d71b08a7";
            };

            meta = {
              description = ''Helpers to pipe through results (`{:ok, a} |
                            {:error, e}`).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arnau/lonely";
            };
          } // packageOverrides)
      ) {};

    lonely = lonely_0_3_0;

    loom_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "loom";
            version = "0.0.10";
            src = fetchHex {
              pkg = "loom";
              version = "0.0.10";
              sha256 =
                "f32cf0fe1c14efb9b4fda15285a5d331b64e952da7a0561c66f7e2b671d36cb8";
            };

            meta = {
              description = ''A modern CRDT library that uses protocols to
                            create composable CRDTs.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/asonge/loom";
            };
          } // packageOverrides)
      ) {};

    loom = loom_0_0_10;

    loppers_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "loppers";
            version = "0.1.3";
            src = fetchHex {
              pkg = "loppers";
              version = "0.1.3";
              sha256 =
                "8b508ac0ebace093498ec0fad31fb926a8945d83d5352a650bf00399887b1aed";
            };

            meta = {
              description = ''Validate quoted Elixir AST against a function
                            whitelist'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/narrowtux/loppers";
            };
          } // packageOverrides)
      ) {};

    loppers = loppers_0_1_3;

    love_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "love";
            version = "0.1.0";
            src = fetchHex {
              pkg = "love";
              version = "0.1.0";
              sha256 =
                "39ecebb569bc9772699cb135bdb10f866112f5e10f5da7de2ca81f798b134d2d";
            };

            meta = {
              description = ''Love.ex'';

            };
          } // packageOverrides)
      ) {};

    love = love_0_1_0;

    lqueue_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lqueue";
            version = "1.1.0";
            src = fetchHex {
              pkg = "lqueue";
              version = "1.1.0";
              sha256 =
                "67d65be5912b4625d5736c2fb44bb91f74263fc59568e2cc582102dddc8b5716";
            };

            meta = {
              description = ''Double-ended queue with limited length'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jur0/lqueue";
            };
          } // packageOverrides)
      ) {};

    lqueue = lqueue_1_1_0;

    lru_2_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lru";
            version = "2.3.1";
            src = fetchHex {
              pkg = "lru";
              version = "2.3.1";
              sha256 =
                "af4ded316a713df96a03f39bfe25dd00fb050d073f64fd39cc091f603f3b9794";
            };

            meta = {
              description = ''implements a fixed-size LRU cache'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://gitlab.com/barrel-db/erlang-lru";
            };
          } // packageOverrides)
      ) {};

    lru = lru_2_3_1;

    lru_cache_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lru_cache";
            version = "0.1.3";
            src = fetchHex {
              pkg = "lru_cache";
              version = "0.1.3";
              sha256 =
                "532057c52a24e3d4767e45526ba473780a0144b3550a3d60e3368e23d03d7cd5";
            };

            meta = {
              description = ''ETS-based LRU Cache'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arago/lru_cache";
            };
          } // packageOverrides)
      ) {};

    lru_cache = lru_cache_0_1_3;

    lrw_2_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lrw";
            version = "2.0.1";
            src = fetchHex {
              pkg = "lrw";
              version = "2.0.1";
              sha256 =
                "b81d24de6248ea2509279c992f7b675b110ee166a63f4b2fab97652446cad611";
            };

            meta = {
              description = ''Lowest Random Weight hashing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/lrw";
            };
          } // packageOverrides)
      ) {};

    lrw = lrw_2_0_1;

    lti_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lti";
            version = "0.1.2";
            src = fetchHex {
              pkg = "lti";
              version = "0.1.2";
              sha256 =
                "3a57e8d29eadef8bbfd8a4e2ed15a9a0cc5d19fa751cdcb765b2a4b2b98a700f";
            };

            meta = {
              description = ''A module to easily launch LTI modules.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/defactosoftware/lti";
            };
          } // packageOverrides)
      ) {};

    lti = lti_0_1_2;

    ltsv_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ltsv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ltsv";
              version = "0.1.0";
              sha256 =
                "62e56251331da6cf5b95de9ecf6e0984749b0ba935356397151fa19f2491a449";
            };

            meta = {
              description = ''A Labeled Tab-separated Values Parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/ltsvex";
            };
          } // packageOverrides)
      ) {};

    ltsv = ltsv_0_1_0;

    luhn_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "luhn";
            version = "0.3.1";
            src = fetchHex {
              pkg = "luhn";
              version = "0.3.1";
              sha256 =
                "86aba88228660238ad981b92cb7a0e92be04772fc54fe5effb338c94b3b7d9fa";
            };

            meta = {
              description = ''Luhn algorithm in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/luhn_ex";
            };
          } // packageOverrides)
      ) {};

    luhn = luhn_0_3_1;

    luhnatex_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "luhnatex";
            version = "0.5.1";
            src = fetchHex {
              pkg = "luhnatex";
              version = "0.5.1";
              sha256 =
                "f08bb73777cd8a12780ea12697064c942a08184074512d4e593443da74526eed";
            };

            meta = {
              description = ''Luhn algorithm in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/my-flow/luhnatex";
            };
          } // packageOverrides)
      ) {};

    luhnatex = luhnatex_0_5_1;

    lumber_0_1_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, murk_0_5_1 }:
          buildMix ({
            name = "lumber";
            version = "0.1.9";
            src = fetchHex {
              pkg = "lumber";
              version = "0.1.9";
              sha256 =
                "c34b52d51c179f835d6e3edef5698dc3665dad4fc833c8d243fe99f9f588123e";
            };
            beamDeps  = [ murk_0_5_1 ];

            meta = {
              longDescription = ''Phoenix Channel interface builder, input /
                                output type checker, and Elm Channel code
                                generator.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/kwrooijen/lumber";
            };
          } // packageOverrides)
      ) {};

    lumber = lumber_0_1_9;

    lxd_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "lxd";
            version = "0.1.7";
            src = fetchHex {
              pkg = "lxd";
              version = "0.1.7";
              sha256 =
                "689bfaa05029f4faec76594d6f157f0076c56dbec7a2b7c962a59c12f0446639";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''LXD API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PandaScore/lxd-elixir";
            };
          } // packageOverrides)
      ) {};

    lxd = lxd_0_1_7;

    lz_string_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lz_string";
            version = "0.0.7";
            src = fetchHex {
              pkg = "lz_string";
              version = "0.0.7";
              sha256 =
                "9a0810c4f7cf0d13828e684ca5d0e6e19fe5d6547930fc6efb3a3d6b99e03af2";
            };

            meta = {
              description = ''Elixir implementation of pieroxy`s lz-string
                            compression algorithm.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-lz-string";
            };
          } // packageOverrides)
      ) {};

    lz_string = lz_string_0_0_7;

    lzf_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lzf";
            version = "0.1.3";
            src = fetchHex {
              pkg = "lzf";
              version = "0.1.3";
              sha256 =
                "f28711040955e42f9e6de1d5e20a644d200dbbbca4997a214f80c47cf4ff0382";
            };

            meta = {
              description = ''LZF decompression algorithm in pure Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshuawscott/lzf_elixir";
            };
          } // packageOverrides)
      ) {};

    lzf = lzf_0_1_3;

    m2x_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          json_1_2_2
        }:
          buildMix ({
            name = "m2x";
            version = "2.0.0";
            src = fetchHex {
              pkg = "m2x";
              version = "2.0.0";
              sha256 =
                "e125cf588d48d9b04fb4a003bb62ab1a8e8df359866dba0cde6444e9fd7ce939";
            };
            beamDeps  = [ hackney_1_13_0 json_1_2_2 ];

            meta = {
              longDescription = ''Elixir client library for the AT&T M2X
                                (http://m2x.att.com) API. AT&T M2X is a
                                cloud-based fully managed time-series data
                                storage service for network connected
                                machine-to-machine (M2M) devices and the
                                Internet of Things (IoT).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/attm2x/m2x-elixir";
            };
          } // packageOverrides)
      ) {};

    m2x = m2x_2_0_0;

    m2x_erlang_1_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          jsx_2_9_0
        }:
          buildMix ({
            name = "m2x_erlang";
            version = "1.3.1";
            src = fetchHex {
              pkg = "m2x_erlang";
              version = "1.3.1";
              sha256 =
                "873db746f4428490670b54aabcc93fda8d94c3c4e25c94a9aef7275858a8b809";
            };
            beamDeps  = [ hackney_1_13_0 jsx_2_9_0 ];

            meta = {
              longDescription = ''Erlang client library for the AT&T M2X
                                (http://m2x.att.com) API. AT&T M2X is a
                                cloud-based fully managed time-series data
                                storage service for network connected
                                machine-to-machine (M2M) devices and the
                                Internet of Things (IoT).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/attm2x/m2x-erlang";
            };
          } // packageOverrides)
      ) {};

    m2x_erlang = m2x_erlang_1_3_1;

    m3u8_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bucs_1_0_16,
          lager_3_6_4
        }:
          buildMix ({
            name = "m3u8";
            version = "0.1.0";
            src = fetchHex {
              pkg = "m3u8";
              version = "0.1.0";
              sha256 =
                "5cdfffc4ba30f42783d959ca03994b71811f54682fc47edfe72ddf4a1bf4d4c3";
            };
            beamDeps  = [ bucs_1_0_16 lager_3_6_4 ];

            meta = {
              description = ''m3u8 parser/generator for Erlang/Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/m3u8";
            };
          } // packageOverrides)
      ) {};

    m3u8 = m3u8_0_1_0;

    mac_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mac";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mac";
              version = "0.2.1";
              sha256 =
                "33e095880fce5c57f16c53a9140b91b54ab092d9dcfe56c922e2a72fa116bf16";
            };

            meta = {
              description = ''MAC-to-vendor search for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/ephe-meral/mac";
            };
          } // packageOverrides)
      ) {};

    mac = mac_0_2_1;

    machine_gun_0_1_1_pre_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gun_1_0_0_pre_5,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "machine_gun";
            version = "0.1.1-pre.2";
            src = fetchHex {
              pkg = "machine_gun";
              version = "0.1.1-pre.2";
              sha256 =
                "10cadfba0a2cae0b1fe74f26b405bb27faf89c02081679e8b0a3fcba6d7fd640";
            };
            beamDeps  = [ gun_1_0_0_pre_5 poolboy_1_5_1 ];

            meta = {
              description = ''HTTP/1 and HTTP/2 client for Elixir. Based on Gun
                            and Poolboy.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/petrohi/machine_gun";
            };
          } // packageOverrides)
      ) {};

    machine_gun = machine_gun_0_1_1_pre_2;

    macpato_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "macpato";
            version = "0.1.2";
            src = fetchHex {
              pkg = "macpato";
              version = "0.1.2";
              sha256 =
                "eee465bedd032791f4751dddda21c97fc1cda24aba91c147bc29aac01988df4f";
            };

            meta = {
              description = ''Simple pattern matching on quoted expressions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/macpato";
            };
          } // packageOverrides)
      ) {};

    macpato = macpato_0_1_2;

    maester_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "maester";
            version = "1.0.0";
            src = fetchHex {
              pkg = "maester";
              version = "1.0.0";
              sha256 =
                "4fa324e1545ba5805d2eef2341c9554b52a51dfd79146dc13ec4b589e55efddd";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''An API of Ice and Fire client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/maester";
            };
          } // packageOverrides)
      ) {};

    maester = maester_1_0_0;

    magic_0_3_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "magic";
            version = "0.3.7";
            src = fetchHex {
              pkg = "magic";
              version = "0.3.7";
              sha256 =
                "11e5e0c977b43170020a5d2dab691331d80b2e746313baf5ec4b1441e80be1ce";
            };

            meta = {
              description = ''A set of common libraries.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pivstone/Magic";
            };
          } // packageOverrides)
      ) {};

    magic = magic_0_3_7;

    magic_number_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "magic_number";
            version = "0.0.4";
            src = fetchHex {
              pkg = "magic_number";
              version = "0.0.4";
              sha256 =
                "5b6fa41f5d24c3fd2f3cf9a96fefcf762c98bdd301158a95ab5355fe4f9eb61a";
            };

            meta = {
              description = ''MagicNumber is the module to determine a file`s
                            type from its magic number.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ishikawa/elixir-magic-number";
            };
          } // packageOverrides)
      ) {};

    magic_number = magic_number_0_0_4;

    magixir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "magixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "magixir";
              version = "0.1.0";
              sha256 =
                "a3cfa90a97a5a3c5502ed09f1e9f5456fe57a6528c28158e058408dae8733f88";
            };

            meta = {
              description = ''Magento Elixir Tools.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jlgeering/magixir";
            };
          } // packageOverrides)
      ) {};

    magixir = magixir_0_1_0;

    magnet_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "magnet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "magnet";
              version = "0.0.1";
              sha256 =
                "064af72e9422262813977752e2f7439501894bce48e5679576ceb93f6b649581";
            };

            meta = {
              description = ''A magnet-uri encoder and decoder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/magnet";
            };
          } // packageOverrides)
      ) {};

    magnet = magnet_0_0_1;

    mail_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mail";
            version = "0.0.4";
            src = fetchHex {
              pkg = "mail";
              version = "0.0.4";
              sha256 =
                "015bb93bc3233fbf0bb28daf71963ddc290d574d9b3d63e1b45641d1a2d4571e";
            };

            meta = {
              description = ''Easily build a composable mail message'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/elixir-mail";
            };
          } // packageOverrides)
      ) {};

    mail_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mail";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mail";
              version = "0.1.1";
              sha256 =
                "bc8bcac2337c4308a265ef0d3956687772018f48dfc2b32d32acb9aea481ffb3";
            };

            meta = {
              description = ''Easily build a composable mail message'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/elixir-mail";
            };
          } // packageOverrides)
      ) {};

    mail_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mail";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mail";
              version = "0.2.0";
              sha256 =
                "4b77384764bb8452005a6dc70d30f2e0f7f2b137ff46e793307c29563c8074a9";
            };

            meta = {
              description = ''Easily build a composable mail message'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/elixir-mail";
            };
          } // packageOverrides)
      ) {};

    mail = mail_0_2_0;

    mail_address_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mail_address";
            version = "0.7.0";
            src = fetchHex {
              pkg = "mail_address";
              version = "0.7.0";
              sha256 =
                "70083aad11317f6fd686e5363b3f2dd38176c63c6f81bdceee761c3204808815";
            };

            meta = {
              description = ''RFC5321 email address handling library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/john-vinters/mail_address";
            };
          } // packageOverrides)
      ) {};

    mail_address = mail_address_0_7_0;

    mailchimp_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mailchimp";
            version = "0.0.7";
            src = fetchHex {
              pkg = "mailchimp";
              version = "0.0.7";
              sha256 =
                "7ca827cc659dca657b0334076a1f054cd3343675b3f7a1741f8a9ef9bd0fc19f";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A basic Elixir wrapper for version 3 of the
                            MailChimp API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duartejc/mailchimp";
            };
          } // packageOverrides)
      ) {};

    mailchimp = mailchimp_0_0_7;

    mailerlite_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "mailerlite";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mailerlite";
              version = "0.2.0";
              sha256 =
                "77d5b35b9fb1db542c82fec8ffaaa733e07ddfa3e529fb2a5bec165c62b0ca0e";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''**WORK IN PROGRESS - NOT READY FOR PRODUCTION
                                USE, CHECK BACK SOON** An Elixir wrapper for v2
                                of the MailerLite API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanhornby/mailerlite-elixir";
            };
          } // packageOverrides)
      ) {};

    mailerlite = mailerlite_0_2_0;

    mailgun_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "mailgun";
            version = "0.1.2";
            src = fetchHex {
              pkg = "mailgun";
              version = "0.1.2";
              sha256 =
                "9cc828e06238045c92414db8f2e9a64a6004aca9b9a4856e5222db99bd8528e8";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Elixir Mailgun Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/mailgun";
            };
          } // packageOverrides)
      ) {};

    mailgun = mailgun_0_1_2;

    mailgun_ex_0_2_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          deferred_config_0_1_1,
          fn_expr_0_3_0,
          httpoison_1_2_0,
          jason_1_1_1,
          version_tasks_0_11_1
        }:
          buildMix ({
            name = "mailgun_ex";
            version = "0.2.8";
            src = fetchHex {
              pkg = "mailgun_ex";
              version = "0.2.8";
              sha256 =
                "acbc781c6b2b65073a1982932c8cece4064b6c7c8e6b8b9af5046059198ccfe7";
            };
            beamDeps  = [
                          deferred_config_0_1_1
                          fn_expr_0_3_0
                          httpoison_1_2_0
                          jason_1_1_1
                          version_tasks_0_11_1
                        ];

            meta = {
              description = ''A Mailgun API for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com//aforward/mailgun_ex";
            };
          } // packageOverrides)
      ) {};

    mailgun_ex = mailgun_ex_0_2_8;

    mailibex_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, codepagex_0_1_4 }:
          buildMix ({
            name = "mailibex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "mailibex";
              version = "0.1.4";
              sha256 =
                "e70c2d2453755b39640b5b319f471bea652543f1c9bea5914f8aa4553a459819";
            };
            beamDeps  = [ codepagex_0_1_4 ];

            meta = {
              longDescription = ''Mailibex is an email library in Elixir :
                                currently implements DKIM, SPF, DMARC, MimeMail
                                (using iconv nif for encoding), MimeType (and
                                file type detection), a simplified api to modify
                                or create mimemail as a keyword list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/mailibex";
            };
          } // packageOverrides)
      ) {};

    mailibex = mailibex_0_1_4;

    mailjet_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mailjet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mailjet";
              version = "0.0.1";
              sha256 =
                "99e5af5222e7d903598141fdfb8cd31fa3415d1b3375dc6fe0b812fce3b10aba";
            };

            meta = {
              description = ''Elixir Mailjet Client'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/Ahamtech/elixir-mailjet";
            };
          } // packageOverrides)
      ) {};

    mailjet = mailjet_0_0_1;

    mailman_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eiconv_1_0_0,
          gen_smtp_0_12_0,
          httpotion_3_0_3
        }:
          buildMix ({
            name = "mailman";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mailman";
              version = "0.4.0";
              sha256 =
                "190f6a5652aa807bf137711667da0aee2c04b354325b9a80c3c9c2e6ecf30ffa";
            };
            beamDeps  = [ eiconv_1_0_0 gen_smtp_0_12_0 httpotion_3_0_3 ];

            meta = {
              description = ''Library providing a clean way of defining mailers
                            in Elixir apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kamilc/mailman";
            };
          } // packageOverrides)
      ) {};

    mailman = mailman_0_4_0;

    mailroom_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mailroom";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mailroom";
              version = "0.0.1";
              sha256 =
                "9e5de8daeab7bab1b0e23ce203ff39b16caf3af04aa3aee1fd7fd28d623472cd";
            };

            meta = {
              description = ''A library for sending, receving and processing
                            emails.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewtimberlake/mailroom";
            };
          } // packageOverrides)
      ) {};

    mailroom = mailroom_0_0_1;

    majremind_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "majremind";
            version = "0.0.1";
            src = fetchHex {
              pkg = "majremind";
              version = "0.0.1";
              sha256 =
                "604ba3b2142497b2384c73b2320f9738711a9cc07b4348f8e870ee6e470c4749";
            };

            meta = {
              longDescription = ''A self-maintained database of your updated
                                server which tells you which one needs to be
                                updated. It uses Disk Erlang Term Storage for
                                its internal database, located at
                                $HOME/.config/majremind/ '';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    majremind = majremind_0_0_1;

    make_enumerable_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "make_enumerable";
            version = "0.0.1";
            src = fetchHex {
              pkg = "make_enumerable";
              version = "0.0.1";
              sha256 =
                "f641ad830e559176b2e5cc01f59886e5cb3c8c0e255b0b8398c7a3e51e70c6b6";
            };

            meta = {
              description = ''Makes your structures enumerable!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/basiliscos/ex-make_enumerable";
            };
          } // packageOverrides)
      ) {};

    make_enumerable = make_enumerable_0_0_1;

    makedown_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_5,
          html_entities_0_3_0,
          makeup_0_2_0
        }:
          buildMix ({
            name = "makedown";
            version = "0.2.1";
            src = fetchHex {
              pkg = "makedown";
              version = "0.2.1";
              sha256 =
                "535cc92abfe16d310f897371a2f1f50dddcafd7de4cf5841735a4d77f7a29070";
            };
            beamDeps  = [ earmark_1_2_5 html_entities_0_3_0 makeup_0_2_0 ];

            meta = {
              description = ''Markdown implementation that uses Makeup for
                            syntax highlighting.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makedown";
            };
          } // packageOverrides)
      ) {};

    makedown = makedown_0_2_1;

    makefile_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "makefile";
            version = "0.1.0";
            src = fetchHex {
              pkg = "makefile";
              version = "0.1.0";
              sha256 =
                "203de8ad4fb9ca958ee19d82e9c4aa42d6f0eaf435705ac295643c6122bd656e";
            };

            meta = {
              description = ''General Makefile targets for an Elixir
                            application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liuming/makefile.mix";
            };
          } // packageOverrides)
      ) {};

    makefile = makefile_0_1_0;

    makeup_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_const_0_1_0,
          ex_spirit_0_3_5,
          exconstructor_1_1_0,
          html_entities_0_3_0
        }:
          buildMix ({
            name = "makeup";
            version = "0.2.0";
            src = fetchHex {
              pkg = "makeup";
              version = "0.2.0";
              sha256 =
                "33129993a2b0024929a3789c2cd3506d43e8d2ce1dcb51120a004e9b748e9815";
            };
            beamDeps  = [
                          ex_const_0_1_0
                          ex_spirit_0_3_5
                          exconstructor_1_1_0
                          html_entities_0_3_0
                        ];

            meta = {
              description = ''Syntax highlighter for source code in the style
                            of Pygments.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup";
            };
          } // packageOverrides)
      ) {};

    makeup_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_spirit_0_3_5 }:
          buildMix ({
            name = "makeup";
            version = "0.3.0";
            src = fetchHex {
              pkg = "makeup";
              version = "0.3.0";
              sha256 =
                "f7a15ec7f205f312a64ad69d0c8bfff28d2ee255b932e1550783508d54259124";
            };
            beamDeps  = [ ex_spirit_0_3_5 ];

            meta = {
              description = ''Syntax highlighter for source code in the style
                            of Pygments.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup";
            };
          } // packageOverrides)
      ) {};

    makeup_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_spirit_0_3_5 }:
          buildMix ({
            name = "makeup";
            version = "0.3.1";
            src = fetchHex {
              pkg = "makeup";
              version = "0.3.1";
              sha256 =
                "311e462fe3dd69e26db96fc04a6933f28bb537cc06520ffd24bed749a57d9be9";
            };
            beamDeps  = [ ex_spirit_0_3_5 ];

            meta = {
              description = ''Syntax highlighter for source code in the style
                            of Pygments.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup";
            };
          } // packageOverrides)
      ) {};

    makeup_0_5_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nimble_parsec_0_2_2
        }:
          buildMix ({
            name = "makeup";
            version = "0.5.1";
            src = fetchHex {
              pkg = "makeup";
              version = "0.5.1";
              sha256 =
                "259748a45dfcf5f49765a7c29c9594791c82de23e22d7a3e6e59533fe8e8935b";
            };
            beamDeps  = [ nimble_parsec_0_2_2 ];

            meta = {
              description = ''Syntax highlighter for source code in the style
                            of Pygments.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup";
            };
          } // packageOverrides)
      ) {};

    makeup = makeup_0_5_1;

    makeup_elixir_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, makeup_0_3_0 }:
          buildMix ({
            name = "makeup_elixir";
            version = "0.3.1";
            src = fetchHex {
              pkg = "makeup_elixir";
              version = "0.3.1";
              sha256 =
                "73068476a713b69c613f432630f7db975670170397245935a6664178ad8c81f5";
            };
            beamDeps  = [ makeup_0_3_0 ];

            meta = {
              description = ''Elixir lexer for the Makeup syntax
                            highlighter.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup_elixir";
            };
          } // packageOverrides)
      ) {};

    makeup_elixir_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          makeup_0_5_1,
          nimble_parsec_0_2_2
        }:
          buildMix ({
            name = "makeup_elixir";
            version = "0.5.1";
            src = fetchHex {
              pkg = "makeup_elixir";
              version = "0.5.1";
              sha256 =
                "717ff76011577556c8f8230440eacb83d81cb5749bf206cd660d49c7d453f970";
            };
            beamDeps  = [ makeup_0_5_1 nimble_parsec_0_2_2 ];

            meta = {
              description = ''Elixir lexer for the Makeup syntax
                            highlighter.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup_elixir";
            };
          } // packageOverrides)
      ) {};

    makeup_elixir_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          makeup_0_5_1,
          nimble_parsec_0_2_2
        }:
          buildMix ({
            name = "makeup_elixir";
            version = "0.7.0";
            src = fetchHex {
              pkg = "makeup_elixir";
              version = "0.7.0";
              sha256 =
                "e1e8e365da4641f0c772394bce97d94aac865cc10d1a3fa3075706a3cff3fcc5";
            };
            beamDeps  = [ makeup_0_5_1 nimble_parsec_0_2_2 ];

            meta = {
              description = ''Elixir lexer for the Makeup syntax
                            highlighter.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup_elixir";
            };
          } // packageOverrides)
      ) {};

    makeup_elixir = makeup_elixir_0_7_0;

    makeup_html5_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, makeup_0_2_0 }:
          buildMix ({
            name = "makeup_html5";
            version = "0.2.0";
            src = fetchHex {
              pkg = "makeup_html5";
              version = "0.2.0";
              sha256 =
                "6be48b89ab8cbadd839be82857e26448b09d5b2e0c35de41dbb5bac33e637d84";
            };
            beamDeps  = [ makeup_0_2_0 ];

            meta = {
              description = ''HTML5 lexer for the Makeup syntax highlighting
                            library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tmbb/makeup_html5";
            };
          } // packageOverrides)
      ) {};

    makeup_html5 = makeup_html5_0_2_0;

    mana_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mana";
            version = "0.0.0";
            src = fetchHex {
              pkg = "mana";
              version = "0.0.0";
              sha256 =
                "3b4013e078f12da60360f4ebfd9d90ae0fc92fb88078b407989e2f6157a47aae";
            };

            meta = {
              description = ''Ethereum client in Elixir'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/poanetwork/mana";
            };
          } // packageOverrides)
      ) {};

    mana = mana_0_0_0;

    mandrake_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mandrake";
            version = "0.0.4";
            src = fetchHex {
              pkg = "mandrake";
              version = "0.0.4";
              sha256 =
                "ed672e094f68ff07c1f8e78a3c8a95af3e23a71ca90515ad441738446ee18887";
            };

            meta = {
              longDescription = ''Mandrake is a functional programming library
                                that bring something else magic in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbasso/mandrake";
            };
          } // packageOverrides)
      ) {};

    mandrake = mandrake_0_0_4;

    mandrill_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "mandrill";
            version = "0.5.0";
            src = fetchHex {
              pkg = "mandrill";
              version = "0.5.0";
              sha256 =
                "9fb3a65d01de47cfc979a492079960506f21f8975e37e994478a70ee04c8d9a6";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              longDescription = ''A Mandrill wrapper for Elixir Requires an
                                active account with Mandrill
                                (http://mandrill.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/mandrill-elixir";
            };
          } // packageOverrides)
      ) {};

    mandrill = mandrill_0_5_0;

    mangoex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mangoex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mangoex";
              version = "0.3.0";
              sha256 =
                "57a681e32b9bfdfdd2fd02e708676a5e727ac9c6069b2399d3ac9e704ee57d08";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the MangoPay API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/overture8/mangoex";
            };
          } // packageOverrides)
      ) {};

    mangoex = mangoex_0_3_0;

    manifold_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "manifold";
            version = "1.2.0";
            src = fetchHex {
              pkg = "manifold";
              version = "1.2.0";
              sha256 =
                "bd72caaef685265d0a8b16032b89e7412ab0b450c1f78d41bb574ae1ce55679a";
            };

            meta = {
              description = ''Fast batch message passing between nodes for
                            Erlang/Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/discordapp/manifold";
            };
          } // packageOverrides)
      ) {};

    manifold = manifold_1_2_0;

    map_bot_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "map_bot";
            version = "0.1.1";
            src = fetchHex {
              pkg = "map_bot";
              version = "0.1.1";
              sha256 =
                "290e4705a99aa8fb224871b241cc00f275e12d05cbe3730cbfa39c0b0472acc8";
            };

            meta = {
              description = ''`MapBot` builds Elixir Maps/Structs based on
                            factory definitions and attributes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vnegrisolo/map_bot";
            };
          } // packageOverrides)
      ) {};

    map_bot = map_bot_0_1_1;

    map_sorter_0_2_22 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, persist_config_0_2_6
        }:
          buildMix ({
            name = "map_sorter";
            version = "0.2.22";
            src = fetchHex {
              pkg = "map_sorter";
              version = "0.2.22";
              sha256 =
                "8e0c74e126c8afd80c5cf0e07d4034cded21d95ddf51115cb2cc4c1aa06a3232";
            };
            beamDeps  = [ persist_config_0_2_6 ];

            meta = {
              description = ''Sorts a list of maps as per a list of sort specs
                            (ascending/descending keys).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/map_sorter";
            };
          } // packageOverrides)
      ) {};

    map_sorter = map_sorter_0_2_22;

    map_traverse_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "map_traverse";
            version = "0.1.1";
            src = fetchHex {
              pkg = "map_traverse";
              version = "0.1.1";
              sha256 =
                "3692b65b371b5d146e80bd080c5f1a0e044aa23e9eb2c098ae1ef7d47f7e1627";
            };

            meta = {
              description = ''Helper functions to enable easy traversal of
                            nested maps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sauce-consultants/map_traverse";
            };
          } // packageOverrides)
      ) {};

    map_traverse = map_traverse_0_1_1;

    mapail_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, maptu_1_0_0 }:
          buildMix ({
            name = "mapail";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mapail";
              version = "1.0.2";
              sha256 =
                "475fe8ac531a11cd755a83dac0a86a2272dc10eed0c20259019199a2900370af";
            };
            beamDeps  = [ maptu_1_0_0 ];

            meta = {
              description = ''Helper library to convert a map into a struct or
                            a struct to a struct.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/mapail";
            };
          } // packageOverrides)
      ) {};

    mapail = mapail_1_0_2;

    mapbox_ex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "mapbox_ex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mapbox_ex";
              version = "0.2.0";
              sha256 =
                "9d094e3ae2421d23927ecb3e91dc4333dc95d697e7e59905fe66a9dce0f8986e";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''An elixir client for working with Mapbox`s
                            API.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/GhostGroup/dabbit";
            };
          } // packageOverrides)
      ) {};

    mapbox_ex = mapbox_ex_0_2_0;

    maple_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_8_0,
          uuid_1_1_8,
          websockex_0_4_1
        }:
          buildMix ({
            name = "maple";
            version = "0.3.0";
            src = fetchHex {
              pkg = "maple";
              version = "0.3.0";
              sha256 =
                "632ccf850e257ef31452d38acc0fa2bf13f5bf213f11b8d54f380bc35aaa8181";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_8_0 uuid_1_1_8 websockex_0_4_1
                      ];

            meta = {
              longDescription = ''Maple is an automatic, compile time, client
                                code generator for GraphQL schemas. At best it
                                creates easy to use API functions for use in
                                your code. At worst it can be used as a CLI for
                                a GraphQL API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maxneuvians/maple";
            };
          } // packageOverrides)
      ) {};

    maple = maple_0_3_0;

    maplist_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maplist";
            version = "0.1.0";
            src = fetchHex {
              pkg = "maplist";
              version = "0.1.0";
              sha256 =
                "cdae0bc23bef4ed7f73aba18b6a12ded86617739b48a937d95de8e98613d08ff";
            };

            meta = {
              description = ''Functions that simplify operations with lists of
                            maps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nikbad/maplist";
            };
          } // packageOverrides)
      ) {};

    maplist = maplist_0_1_0;

    mappable_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mappable";
            version = "0.2.3";
            src = fetchHex {
              pkg = "mappable";
              version = "0.2.3";
              sha256 =
                "f156a3ba3ad2f72cc19bc822dc41513b4e41ae87d80bf597bfab5bcf49b9fab5";
            };

            meta = {
              description = ''Convert different mappable types to each other in
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amberbit/mappable";
            };
          } // packageOverrides)
      ) {};

    mappable = mappable_0_2_3;

    maps_as_functions_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maps_as_functions";
            version = "0.1.0";
            src = fetchHex {
              pkg = "maps_as_functions";
              version = "0.1.0";
              sha256 =
                "a0ecbd2e2cc7ca86d8ab9a072f5bb2a4df6443ed3ef68d6eccecd5772e16e462";
            };

            meta = {
              description = ''A macro to create compile-time-expanded maps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/maps_as_functions";
            };
          } // packageOverrides)
      ) {};

    maps_as_functions = maps_as_functions_0_1_0;

    maps_matrix_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jason_1_1_1,
          tesla_0_10_0
        }:
          buildMix ({
            name = "maps_matrix_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "maps_matrix_api";
              version = "0.1.0";
              sha256 =
                "9ecf4b3c4204aca1ab389656e172b56e878a6d06f6c49a32a92bb4f2fd40037d";
            };
            beamDeps  = [ jason_1_1_1 tesla_0_10_0 ];

            meta = {
              description = ''A simple interface for Google Maps Distance
                            Matrix Api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MonadLabs/maps_matrix_api";
            };
          } // packageOverrides)
      ) {};

    maps_matrix_api = maps_matrix_api_0_1_0;

    mapsd_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mapsd";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mapsd";
              version = "0.2.0";
              sha256 =
                "7adde27e2e5edd5ed5fcad142b686f6f223f0f4e008cdb8aba0de4ff74a2132b";
            };

            meta = {
              description = ''Erlang Maps Dict API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/mapsd";
            };
          } // packageOverrides)
      ) {};

    mapsd = mapsd_0_2_0;

    maptu_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maptu";
            version = "1.0.0";
            src = fetchHex {
              pkg = "maptu";
              version = "1.0.0";
              sha256 =
                "a458f14a748151b3a24615927789b233eb26f06e9b34f1ee428686fee4dc232a";
            };

            meta = {
              description = ''Tiny library to convert from \"encoded\" maps to
                            Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/maptu";
            };
          } // packageOverrides)
      ) {};

    maptu = maptu_1_0_0;

    maputils_0_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "maputils";
            version = "0.4.1";
            src = fetchHex {
              pkg = "maputils";
              version = "0.4.1";
              sha256 =
                "3eecffc98e7e08d0fc091dae69e3760f0d43f6314046a6b413f67075482edff7";
            };

            meta = {
              description = ''Utilities for erlang maps'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/cvik/maputils";
            };
          } // packageOverrides)
      ) {};

    maputils = maputils_0_4_1;

    mapz_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mapz";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mapz";
              version = "0.3.0";
              sha256 =
                "235087dff8524b6ee05bfe763ba95c1b9aac640de77fe14fd65ad9f5baea3f0f";
            };

            meta = {
              description = ''Extensions to the Erlang maps module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eproxus/mapz";
            };
          } // packageOverrides)
      ) {};

    mapz = mapz_0_3_0;

    mariaex_0_7_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_0_0_rc_5,
          decimal_1_5_0
        }:
          buildMix ({
            name = "mariaex";
            version = "0.7.5";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.7.5";
              sha256 =
                "36a09e08ff2583d4cb2f9fbeec720730a04c202bb486726276368a2be1e4cb95";
            };
            beamDeps  = [ db_connection_1_0_0_rc_5 decimal_1_5_0 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/mariaex";
            };
          } // packageOverrides)
      ) {};

    mariaex_0_7_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_0_0,
          decimal_1_5_0
        }:
          buildMix ({
            name = "mariaex";
            version = "0.7.9";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.7.9";
              sha256 =
                "23107dd27ab2dce82024390f8f7c5ba594e735b825e40175d629e69cdd71fbaa";
            };
            beamDeps  = [ db_connection_1_0_0 decimal_1_5_0 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/mariaex";
            };
          } // packageOverrides)
      ) {};

    mariaex_0_8_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_3,
          decimal_1_5_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mariaex";
            version = "0.8.4";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.8.4";
              sha256 =
                "c116fc7ee523680ea676f483bb5336d9717593f3385dccf4f6b580e2ff8b820d";
            };
            beamDeps  = [ db_connection_1_1_3 decimal_1_5_0 poison_3_1_0 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/mariaex";
            };
          } // packageOverrides)
      ) {};

    mariaex = mariaex_0_8_4;

    mark_yamill_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_3_3 }:
          buildMix ({
            name = "mark_yamill";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mark_yamill";
              version = "0.2.1";
              sha256 =
                "ba07e61dfbed17549c168123332e643d36deb086da7b7ae9e644fe618bd93c17";
            };
            beamDeps  = [ yamerl_0_3_3 ];

            meta = {
              description = ''A YAML decoder for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/mark_yamill";
            };
          } // packageOverrides)
      ) {};

    mark_yamill = mark_yamill_0_2_1;

    markaby_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markaby";
            version = "0.1.0";
            src = fetchHex {
              pkg = "markaby";
              version = "0.1.0";
              sha256 =
                "a6052a55314f16a87a79b472aac118094f612734f895720d47bdaa800e04c200";
            };

            meta = {
              description = ''Markaby clone in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sanderhahn/markaby";
            };
          } // packageOverrides)
      ) {};

    markaby = markaby_0_1_0;

    marked_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "marked";
            version = "0.0.1";
            src = fetchHex {
              pkg = "marked";
              version = "0.0.1";
              sha256 =
                "6e16369d41355bef05b18f98230afe08dcb3ccfaaab168382513d86c19721035";
            };

            meta = {
              description = ''CommonMark compatible Markdown parser'';

            };
          } // packageOverrides)
      ) {};

    marked = marked_0_0_1;

    marker_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "marker";
            version = "2.0.3";
            src = fetchHex {
              pkg = "marker";
              version = "2.0.3";
              sha256 =
                "1197652c2872ea0054af4e19c56a735c8ebfe5f03ee54c5e74110e694d0806f6";
            };

            meta = {
              longDescription = ''Small and performant library for writing HTML
                                markup in Elixir using templates and
                                components'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zambal/marker";
            };
          } // packageOverrides)
      ) {};

    marker = marker_2_0_3;

    markovian_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markovian";
            version = "0.1.3";
            src = fetchHex {
              pkg = "markovian";
              version = "0.1.3";
              sha256 =
                "e91a89f1997413ed06895c09e311368192ee2b9e719a7991ef4f0020812e2774";
            };

            meta = {
              description = ''A Q-learner for the BEAM.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/mjs2600/Markovian";
            };
          } // packageOverrides)
      ) {};

    markovian = markovian_0_1_3;

    markovify_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markovify";
            version = "0.3.0";
            src = fetchHex {
              pkg = "markovify";
              version = "0.3.0";
              sha256 =
                "af6a5ae4bba70a065ed5b99575ce8abce75a82b2bbf8ee39f76c6af143d4600f";
            };

            meta = {
              longDescription = ''A markov chain theory based library to
                                generate new sentences from a body of text.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/bka9/elixir-markovify";
            };
          } // packageOverrides)
      ) {};

    markovify = markovify_0_3_0;

    markright_0_5_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xml_builder_2_1_0
        }:
          buildMix ({
            name = "markright";
            version = "0.5.2";
            src = fetchHex {
              pkg = "markright";
              version = "0.5.2";
              sha256 =
                "5d64328198e2c41e7819ed6c09f4208cbfc311fc23167ec7be9c3df6d6a20388";
            };
            beamDeps  = [ xml_builder_2_1_0 ];

            meta = {
              longDescription = ''**The extended, configurable markdown-like
                                syntax parser, that produces an AST.** Supports
                                the full set of `markdown`, plus extensions
                                (custom markup with a bit of elixir code to
                                handle parsing.) The AST produced is
                                understandable by
                                [`XmlBuilder`](https://github.com/joshnuss/xml_builder).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mudasobwa/markright";
            };
          } // packageOverrides)
      ) {};

    markright = markright_0_5_2;

    markus_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markus";
            version = "0.3.0";
            src = fetchHex {
              pkg = "markus";
              version = "0.3.0";
              sha256 =
                "820f1cb5ea2026b8579dd0ce72a9d9e2e6fca99c5a05f59d3d6402b72f3ae696";
            };

            meta = {
              description = ''Condorcet voting'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lifeonmarspt/markus";
            };
          } // packageOverrides)
      ) {};

    markus = markus_0_3_0;

    maru_entity_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maru_entity";
            version = "0.2.1";
            src = fetchHex {
              pkg = "maru_entity";
              version = "0.2.1";
              sha256 =
                "6cea6c754982fedd73e530c94c3a77741d5e55cc346342f3804a2a46c5656c40";
            };

            meta = {
              description = ''Parallelizable serializer inspired by
                            grape-entity.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/elixir-maru/maru_entity";
            };
          } // packageOverrides)
      ) {};

    maru_entity = maru_entity_0_2_1;

    mason_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mason";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mason";
              version = "0.1.0";
              sha256 =
                "98208aa1928fa780695af5a73abcc4d4f9bfa7d1bb60404e7616ed6ad5d587d1";
            };

            meta = {
              longDescription = ''Mason uses superpowers to coerce maps into
                                structs. This is helpful e.g. when you interface
                                a REST API and want to create a struct from the
                                response.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spacepilots/mason";
            };
          } // packageOverrides)
      ) {};

    mason = mason_0_1_0;

    match_trie_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "match_trie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "match_trie";
              version = "0.1.0";
              sha256 =
                "fc500dd4dd8539871b5e6ba9bd6cc48f58e815d3fd9954ab8f6a2d0d686b9b8d";
            };

            meta = {
              description = ''ETS trie to match keys'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    match_trie = match_trie_0_1_0;

    materialize_sass_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "materialize_sass";
            version = "0.1.3";
            src = fetchHex {
              pkg = "materialize_sass";
              version = "0.1.3";
              sha256 =
                "ddd7c9bfc4f4c1169bf7aab104c6692bf80244ff48927ab89e10e3bfd4ef7068";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              description = ''A modern responsive front-end framework based on
                            Material Design'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onurkucukkece/materialize_sass";
            };
          } // packageOverrides)
      ) {};

    materialize_sass = materialize_sass_0_1_3;

    math_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "math";
            version = "0.2.0";
            src = fetchHex {
              pkg = "math";
              version = "0.2.0";
              sha256 =
                "75557fb9743e866f743d894102da851531ffc69b4c0f8fdd12cd749acb1a6215";
            };

            meta = {
              longDescription = ''The Math module adds many useful functions
                                that extend Elixir`s standard library. - General
                                Functions • a <~> b Comparison of floats, to
                                check if they are _nearly_ equal. •
                                Math.pow(x, n) Arithmetic exponentiation. Works
                                both with integer powers and floats. •
                                Math.sqrt(x) The square root of x. •
                                Math.nth_root(x, n) The n-th root of x. •
                                Math.isqrt(x) The integer square root of x. •
                                Math.gcd(a, b) The greatest common divisor of a
                                and b. • Math.lcm(a, b) The least common
                                multiple of a and b. • Math.factorial(n) The
                                n-th factorial number. •
                                Math.k_permutations(n, k) The number of distinct
                                ways to create groups of size k from n distinct
                                elements. • Math.k_combinations(n, k) The
                                number of distinct ways to create groups of size
                                k from n distinct elements where order does not
                                matter. - Logarithms • Math.exp(x) Calculates
                                ℯ to the xth power. • Math.log(x) Calculates
                                the natural logarithm (base ℯ) of x. •
                                Math.log(x, b) Calculates the base-b logarithm
                                of x • Math.log2(x) Calculates the binary
                                logarithm (base 2) of x. • Math.log10(x)
                                Calculates the common logarithm (base 10) of x.
                                • Math.e Returns a floating-point
                                approximation of the number ℯ. - Trigonometry
                                • Math.pi Returns a floating-point
                                approximation of the number π. •
                                Math.deg2rad(x) converts from degrees to
                                radians. • Math.rad2deg(x) converts from
                                radians to degrees. • Math.sin(x) The sine of
                                x. • Math.cos(x) The cosine of x. •
                                Math.tan(x) The tangent of x. • Math.asin(x)
                                The inverse sine of x. • Math.acos(x) The
                                inverse cosine of x. • Math.atan(x) The
                                inverse tangent of x. • Math.atan2(x, y) The
                                inverse tangent of x and y. This variant returns
                                the inverse tangent in the correct quadrant, as
                                the signs of both x and y are known. •
                                Math.sinh(x) The hyperbolic sine of x. •
                                Math.cosh(x) The hyperbolic cosine of x. •
                                Math.tanh(x) The hyperbolic tangent of x. •
                                Math.asinh(x) The inverse hyperbolic sine of x.
                                • Math.acosh(x) The inverse hyperbolic cosine
                                of x. • Math.atanh(x) The inverse hyperbolic
                                tangent of x. - Working with Collections •
                                Math.Enum.product(collection) The result of
                                multiplying all elements in the passed
                                collection. • Math.Enum.mean(collection) the
                                mean of the numbers in the collection. •
                                Math.Enum.median(collection) the median of the
                                numbers in the collection.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/folz/math";
            };
          } // packageOverrides)
      ) {};

    math_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "math";
            version = "0.3.0";
            src = fetchHex {
              pkg = "math";
              version = "0.3.0";
              sha256 =
                "5f2a14eeb8ed70b14c2dcd7c09e7e7b61aaa856d1fc0f07f53bf0f3586c561c1";
            };

            meta = {
              longDescription = ''The Math module adds many useful functions
                                that extend Elixir`s standard library. - General
                                Functions • a <~> b Comparison of floats, to
                                check if they are _nearly_ equal. •
                                Math.pow(x, n) Arithmetic exponentiation. Works
                                both with integer powers and floats. •
                                Math.sqrt(x) The square root of x. •
                                Math.nth_root(x, n) The n-th root of x. •
                                Math.isqrt(x) The integer square root of x. •
                                Math.gcd(a, b) The greatest common divisor of a
                                and b. • Math.lcm(a, b) The least common
                                multiple of a and b. • Math.factorial(n) The
                                n-th factorial number. •
                                Math.k_permutations(n, k) The number of distinct
                                ways to create groups of size k from n distinct
                                elements. • Math.k_combinations(n, k) The
                                number of distinct ways to create groups of size
                                k from n distinct elements where order does not
                                matter. - Logarithms • Math.exp(x) Calculates
                                ℯ to the xth power. • Math.log(x) Calculates
                                the natural logarithm (base ℯ) of x. •
                                Math.log(x, b) Calculates the base-b logarithm
                                of x • Math.log2(x) Calculates the binary
                                logarithm (base 2) of x. • Math.log10(x)
                                Calculates the common logarithm (base 10) of x.
                                • Math.e Returns a floating-point
                                approximation of the number ℯ. - Trigonometry
                                • Math.pi Returns a floating-point
                                approximation of the number π. •
                                Math.deg2rad(x) converts from degrees to
                                radians. • Math.rad2deg(x) converts from
                                radians to degrees. • Math.sin(x) The sine of
                                x. • Math.cos(x) The cosine of x. •
                                Math.tan(x) The tangent of x. • Math.asin(x)
                                The inverse sine of x. • Math.acos(x) The
                                inverse cosine of x. • Math.atan(x) The
                                inverse tangent of x. • Math.atan2(x, y) The
                                inverse tangent of x and y. This variant returns
                                the inverse tangent in the correct quadrant, as
                                the signs of both x and y are known. •
                                Math.sinh(x) The hyperbolic sine of x. •
                                Math.cosh(x) The hyperbolic cosine of x. •
                                Math.tanh(x) The hyperbolic tangent of x. •
                                Math.asinh(x) The inverse hyperbolic sine of x.
                                • Math.acosh(x) The inverse hyperbolic cosine
                                of x. • Math.atanh(x) The inverse hyperbolic
                                tangent of x. - Working with Collections •
                                Math.Enum.product(collection) The result of
                                multiplying all elements in the passed
                                collection. • Math.Enum.mean(collection) the
                                mean of the numbers in the collection. •
                                Math.Enum.median(collection) the median of the
                                numbers in the collection.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/folz/math";
            };
          } // packageOverrides)
      ) {};

    math = math_0_3_0;

    math_combinations_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "math_combinations";
            version = "0.2.0";
            src = fetchHex {
              pkg = "math_combinations";
              version = "0.2.0";
              sha256 =
                "116c28bdcaeaa1098ac81bfd3db7968bd4ec8aaaa106a4f930306d9553894839";
            };

            meta = {
              description = ''A helper library with functions of Mathematics
                            Combinations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danillop/MathCombinations";
            };
          } // packageOverrides)
      ) {};

    math_combinations = math_combinations_0_2_0;

    mathx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mathx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mathx";
              version = "0.1.0";
              sha256 =
                "620dddee53fcca5b49a2d5eedeb3b5359e612094c9dc9ddf432f8cbe0957a5e5";
            };

            meta = {
              longDescription = ''The Mathx module adds many useful functions
                                that extend Elixir`s standard library.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gulib/mathx";
            };
          } // packageOverrides)
      ) {};

    mathx = mathx_0_1_0;

    matrix_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exprintf_0_2_1 }:
          buildMix ({
            name = "matrix";
            version = "0.3.2";
            src = fetchHex {
              pkg = "matrix";
              version = "0.3.2";
              sha256 =
                "f75adeb594a877ff49ff58a402e37c9474fb9172c997427a9b4b57ab10100f15";
            };
            beamDeps  = [ exprintf_0_2_1 ];

            meta = {
              longDescription = ''Matrix is a linear algebra library for
                                manipulating dense matrices. Its primary design
                                goal is ease of use.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-matrix.git";
            };
          } // packageOverrides)
      ) {};

    matrix = matrix_0_3_2;

    maximum_jank_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maximum_jank";
            version = "0.2.0";
            src = fetchHex {
              pkg = "maximum_jank";
              version = "0.2.0";
              sha256 =
                "117a6f5eada085d61167819581f6aaf5823aaecba3549f27c697b3efad44a8da";
            };

            meta = {
              description = ''An unfocused collection of janky Elixir
                            utilities'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/maximum-jank-elixir";
            };
          } // packageOverrides)
      ) {};

    maximum_jank = maximum_jank_0_2_0;

    maxine_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maxine";
            version = "0.1.1";
            src = fetchHex {
              pkg = "maxine";
              version = "0.1.1";
              sha256 =
                "cc2f8224ee25a875d781d191719478ef548e5168760131c1d992328e1fc7eed6";
            };

            meta = {
              description = ''State machines as data for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erikcameron/maxine";
            };
          } // packageOverrides)
      ) {};

    maxine = maxine_0_1_1;

    maybe_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maybe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "maybe";
              version = "0.0.1";
              sha256 =
                "b1915afa2dd6a2db64ad7b20b41eeb2d3cb576cdbd20679594eb6ef76f612638";
            };

            meta = {
              description = ''Nil protection for nested maps and structs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/maybe";
            };
          } // packageOverrides)
      ) {};

    maybe_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maybe";
            version = "1.0.0";
            src = fetchHex {
              pkg = "maybe";
              version = "1.0.0";
              sha256 =
                "23277767c0383ee6a9cb68f7e2fe0f6dfb91f01748e2c9a6439c95f2f6b52c57";
            };

            meta = {
              description = ''Nil protection for nested maps and structs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/maybe";
            };
          } // packageOverrides)
      ) {};

    maybe = maybe_1_0_0;

    maybex_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maybex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "maybex";
              version = "0.0.4";
              sha256 =
                "ee1e0dd2e45f31a846b01f0561303a0546f1c1b6c52194dcb1856988cb14ffc1";
            };

            meta = {
              description = ''An implementation of the Maybe monad in elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/adzz/maybex";
            };
          } // packageOverrides)
      ) {};

    maybex = maybex_0_0_4;

    mayo_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, luhn_0_3_1 }:
          buildMix ({
            name = "mayo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mayo";
              version = "0.2.0";
              sha256 =
                "f38e8bcb9c356e0bbd8596714d0d9cd3bcf5eb7973648a38802cf05c49cbda97";
            };
            beamDeps  = [ luhn_0_3_1 ];

            meta = {
              description = ''Schema validator inspired by Joi'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tommy351/mayo";
            };
          } // packageOverrides)
      ) {};

    mayo = mayo_0_2_0;

    mazurka_1_0_8 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mimetype_parser_0_1_3
        }:
          buildMix ({
            name = "mazurka";
            version = "1.0.8";
            src = fetchHex {
              pkg = "mazurka";
              version = "1.0.8";
              sha256 =
                "04eb9aa6a0c837d71bb0a34f2dd1c8e82e669ebb889bf7cbf3c2021c39485bb4";
            };
            beamDeps  = [ mimetype_parser_0_1_3 ];

            meta = {
              description = ''hypermedia api toolkit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/mazurka";
            };
          } // packageOverrides)
      ) {};

    mazurka = mazurka_1_0_8;

    mazurka_dsl_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mazurka_dsl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mazurka_dsl";
              version = "0.1.1";
              sha256 =
                "2877b27736daa1f5757ff1c2b34ec35d43c8e501b5292be5f9db7de95b88ea69";
            };

            meta = {
              description = ''DSL for defining mazurka resources'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazurka/mazurka_dsl";
            };
          } // packageOverrides)
      ) {};

    mazurka_dsl = mazurka_dsl_0_1_1;

    mazurka_mediatype_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, etude_1_0_1 }:
          buildMix ({
            name = "mazurka_mediatype";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mazurka_mediatype";
              version = "0.2.0";
              sha256 =
                "4ccd8b27d6405e93cb34861f211d69b79ab46c2dbc5c7874d4ee3c580a5754bb";
            };
            beamDeps  = [ etude_1_0_1 ];

            meta = {
              description = ''mazurka mediatype interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazurka/mazurka_mediatype";
            };
          } // packageOverrides)
      ) {};

    mazurka_mediatype = mazurka_mediatype_0_2_0;

    mazurka_mediatype_hyperjson_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          etude_1_0_1,
          mazurka_mediatype_0_2_0,
          poison_1_3_1
        }:
          buildMix ({
            name = "mazurka_mediatype_hyperjson";
            version = "0.2.3";
            src = fetchHex {
              pkg = "mazurka_mediatype_hyperjson";
              version = "0.2.3";
              sha256 =
                "f09489f242598ece8496f50c9dfc3d1a051b6115a654ebbb9ce5336e04b2cb8d";
            };
            beamDeps  = [ etude_1_0_1 mazurka_mediatype_0_2_0 poison_1_3_1 ];

            meta = {
              description = ''hyper+json mediatype compiler for mazurka'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/mazurka/mazurka_mediatype_hyperjson";
            };
          } // packageOverrides)
      ) {};

    mazurka_mediatype_hyperjson = mazurka_mediatype_hyperjson_0_2_3;

    mbu_3_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, file_system_0_2_6
        }:
          buildMix ({
            name = "mbu";
            version = "3.0.0";
            src = fetchHex {
              pkg = "mbu";
              version = "3.0.0";
              sha256 =
                "562f2be19784644ed3e4077df64c936d5bcd3d74b6faa6990bc5587502b073b6";
            };
            beamDeps  = [ file_system_0_2_6 ];

            meta = {
              longDescription = ''MBU is a collection of build utilities for
                                Mix to make it easier to build your project, for
                                example building the front end. It supports task
                                dependencies and watching directories.'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    mbu = mbu_3_0_0;

    mc_data_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "mc_data";
            version = "0.0.5";
            src = fetchHex {
              pkg = "mc_data";
              version = "0.0.5";
              sha256 =
                "0ad4b4489554951f93fc9da39b8f14e5b87dada3005d6d012528cbc387d0aa27";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Provides access to data from the game
                            Minecraft.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/McEx/McData";
            };
          } // packageOverrides)
      ) {};

    mc_data = mc_data_0_0_5;

    mcache_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mcache";
            version = "0.3.1";
            src = fetchHex {
              pkg = "mcache";
              version = "0.3.1";
              sha256 =
                "275f2c5aa4c66157a1c497e373c2bba20d97c24bd25683c363c18e27610328a6";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Efficient metric memory cache'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/dalmatinerdb/mcache";
            };
          } // packageOverrides)
      ) {};

    mcache = mcache_0_3_1;

    mcrypt_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mcrypt";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mcrypt";
              version = "0.1.1";
              sha256 =
                "1ae2ea40c51a1982538be4108c8948ba6704bc97aa84400f03f20d01357348be";
            };

            meta = {
              description = ''NIF wrapper around libmcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/system76/elixir-mcrypt";
            };
          } // packageOverrides)
      ) {};

    mcrypt = mcrypt_0_1_1;

    mcup_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mcup";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mcup";
              version = "0.0.2";
              sha256 =
                "c59537882707237c961d3d69b149619ec35c808cd5e98646cbcb7985e300b975";
            };

            meta = {
              description = ''DSL for markup. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/mcup";
            };
          } // packageOverrides)
      ) {};

    mcup = mcup_0_0_2;

    md2_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "md2";
            version = "1.1.1";
            src = fetchHex {
              pkg = "md2";
              version = "1.1.1";
              sha256 =
                "0d71c35b9846bbe48ae49575309dd4a82d3f4472a6acb5d44109b5339d50e3f2";
            };
            compilePorts = true;

            meta = {
              description = ''An implementation of MD2 according to RFC1319.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lindenbaum/md2";
            };
          } // packageOverrides)
      ) {};

    md2 = md2_1_1_1;

    mdns_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dns_2_1_0 }:
          buildMix ({
            name = "mdns";
            version = "1.0.1";
            src = fetchHex {
              pkg = "mdns";
              version = "1.0.1";
              sha256 =
                "65765cff1f8872605213b1bfb51f357589f1cbdf3da494d470adb955a4350f3a";
            };
            beamDeps  = [ dns_2_1_0 ];

            meta = {
              longDescription = ''A simple mDNS (zeroconf, bonjour) server and
                                client for device discovery on your local
                                network.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/mdns";
            };
          } // packageOverrides)
      ) {};

    mdns = mdns_1_0_1;

    mdns_client_0_1_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_5_2 }:
          buildRebar3 ({
            name = "mdns_client";
            version = "0.1.10";
            src = fetchHex {
              pkg = "mdns_client";
              version = "0.1.10";
              sha256 =
                "871fc6d7759451985894942327ebcb6471ba96f024c61f4906b8812e7687aa19";
            };

            beamDeps  = [ lager_3_5_2 ];

            meta = {
              description = ''mDNS service discovery client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Licenser/erlang-mdns-client";
            };
          } // packageOverrides)
      ) {};

    mdns_client = mdns_client_0_1_10;

    mecab_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mecab";
            version = "1.0.3";
            src = fetchHex {
              pkg = "mecab";
              version = "1.0.3";
              sha256 =
                "2270102ec3078b5b64d56b12c5ce4063eb68fb3e76776ca40dfa54578735dbf5";
            };

            meta = {
              description = ''Elixir bindings for MeCab, a Japanese
                            morphological analyzer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tex2e/mecab-elixir";
            };
          } // packageOverrides)
      ) {};

    mecab = mecab_1_0_3;

    meck_0_8_11 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "meck";
            version = "0.8.11";
            src = fetchHex {
              pkg = "meck";
              version = "0.8.11";
              sha256 =
                "c4460533e5c2096e4c54da1490f9393d0f167ebda770f17652d538e4bd49c22d";
            };

            meta = {
              description = ''A mocking framework for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/meck";
            };
          } // packageOverrides)
      ) {};

    meck = meck_0_8_11;

    meck_0_8_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "meck";
            version = "0.8.4";
            src = fetchHex {
              pkg = "meck";
              version = "0.8.4";
              sha256 =
                "2cdfbd0edd8f62b3d2061efc03c0e490282dd2ea6de44e15d2006e83f4f8eead";
            };

            meta = {
              description = ''A mocking framework for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/meck";
            };
          } // packageOverrides)
      ) {};

    meck_0_8_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "meck";
            version = "0.8.7";
            src = fetchHex {
              pkg = "meck";
              version = "0.8.7";
              sha256 =
                "51274d4b536dc7958eb4df3aefa5245f4a6df1d6198cb8f8b97d6747033597ca";
            };

            meta = {
              description = ''A mocking framework for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/meck";
            };
          } // packageOverrides)
      ) {};

    meck_0_8_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "meck";
            version = "0.8.9";
            src = fetchHex {
              pkg = "meck";
              version = "0.8.9";
              sha256 =
                "5eb607516f4a644324f130d2ad8893d4097020e8d6097193d9f7be55ee8d00d6";
            };

            meta = {
              description = ''A mocking framework for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/meck";
            };
          } // packageOverrides)
      ) {};

    medoc_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "medoc";
            version = "1.0.0";
            src = fetchHex {
              pkg = "medoc";
              version = "1.0.0";
              sha256 =
                "704161dbadf4d424e05ad85e9843535b8c4f61248e3f262dfe56bb3f9780a94f";
            };

            meta = {
              description = ''Runs edoc on multiple apps and stitches the
                            results together'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/drozzy/medoc";
            };
          } // packageOverrides)
      ) {};

    medoc = medoc_1_0_0;

    meetup_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          jason_1_1_1
        }:
          buildMix ({
            name = "meetup";
            version = "0.1.2";
            src = fetchHex {
              pkg = "meetup";
              version = "0.1.2";
              sha256 =
                "c92fcb665e9f51f9b5f2438c6b6317fb6a5ef65a24862a4732a01c45cf3e88ef";
            };
            beamDeps  = [ httpotion_3_1_0 jason_1_1_1 ];

            meta = {
              description = ''Elixir wrapper for the Meetup.com public API.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/supersimple/meetup";
            };
          } // packageOverrides)
      ) {};

    meetup = meetup_0_1_2;

    meex_1_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "meex";
            version = "1.4.1";
            src = fetchHex {
              pkg = "meex";
              version = "1.4.1";
              sha256 =
                "f19c85ce7f3e886a7dfff12879524c72893e845c41cfaf1d40175e8c55a92c69";
            };

            meta = {
              description = ''Fork of EEx'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixir-lang/elixir";
            };
          } // packageOverrides)
      ) {};

    meex = meex_1_4_1;

    megadef_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "megadef";
            version = "0.1.0";
            src = fetchHex {
              pkg = "megadef";
              version = "0.1.0";
              sha256 =
                "717af80a57a1e8674c37e74ebeb15b7dcba288757dde51c9c363266e348cd8c1";
            };

            meta = {
              description = ''Helpers to define functions with optional named
                            parameters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tmbb/megadef";
            };
          } // packageOverrides)
      ) {};

    megadef = megadef_0_1_0;

    meld_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "meld";
            version = "0.1.2";
            src = fetchHex {
              pkg = "meld";
              version = "0.1.2";
              sha256 =
                "3f86b810df38e0767a472829a26f92c07c986c1bcc41421eba021a5a6c174e83";
            };

            meta = {
              description = ''create real CLIs in elixir, using mix tasks'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/conflate/meld";
            };
          } // packageOverrides)
      ) {};

    meld = meld_0_1_2;

    mem_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mem";
            version = "0.3.1";
            src = fetchHex {
              pkg = "mem";
              version = "0.3.1";
              sha256 =
                "46cdfb75e126da0f84e2d25c09d0048834f25b5174bc2b0631dd4ec22a646491";
            };

            meta = {
              description = ''KV cache with TTL, Replacement and Persistence
                            support'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/mem";
            };
          } // packageOverrides)
      ) {};

    mem = mem_0_3_1;

    membrane_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "membrane";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane";
              version = "0.1.0";
              sha256 =
                "0dfbd810dbdd7c7f02398a352486244d3c90468b49912a1f970cc102709c7fe0";
            };

            meta = {
              description = ''A wrapper for filtering list of data'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://hexdocs.pm/RohanPoojary/Membrane";
            };
          } // packageOverrides)
      ) {};

    membrane = membrane_0_1_0;

    membrane_caps_audio_mpeg_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "membrane_caps_audio_mpeg";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_caps_audio_mpeg";
              version = "0.1.0";
              sha256 =
                "814ff7e3a33de63ff9c09dd4eb01cbe9bed9539eff9d002c29a04f1e103ce224";
            };

            meta = {
              description = ''Membrane Multimedia Framework (mpeg audio format
                            definition)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/membraneframework/membrane-caps-audio-mpeg";
            };
          } // packageOverrides)
      ) {};

    membrane_caps_audio_mpeg = membrane_caps_audio_mpeg_0_1_0;

    membrane_caps_audio_raw_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bimap_0_1_1,
          membrane_core_0_1_0
        }:
          buildMix ({
            name = "membrane_caps_audio_raw";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_caps_audio_raw";
              version = "0.1.0";
              sha256 =
                "265e938961fa98064490fb9e0a19ea30093676eecba8dfbca2d3d4d5196ad931";
            };
            beamDeps  = [ bimap_0_1_1 membrane_core_0_1_0 ];

            meta = {
              description = ''Membrane Multimedia Framework (raw audio format
                            definition)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/membraneframework/membrane-caps-audio-raw";
            };
          } // packageOverrides)
      ) {};

    membrane_caps_audio_raw = membrane_caps_audio_raw_0_1_0;

    membrane_common_c_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bundlex_0_1_1 }:
          buildMix ({
            name = "membrane_common_c";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_common_c";
              version = "0.1.0";
              sha256 =
                "7855bb83b188600c768e74701603eee016404b5eac89a7559b717608c25c917e";
            };
            beamDeps  = [ bundlex_0_1_1 ];

            meta = {
              description = ''Membrane Multimedia Framework (C language common
                            routines)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/membraneframework/membrane-common-c";
            };
          } // packageOverrides)
      ) {};

    membrane_common_c = membrane_common_c_0_1_0;

    membrane_core_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, qex_0_3_4 }:
          buildMix ({
            name = "membrane_core";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_core";
              version = "0.1.0";
              sha256 =
                "e9f3aa8ed6b93a7ab20758a9cd12cec176f79f2a74fc3535961b6f09f5446785";
            };
            beamDeps  = [ qex_0_3_4 ];

            meta = {
              description = ''Membrane Multimedia Framework (Core)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/membraneframework/membrane-core";
            };
          } // packageOverrides)
      ) {};

    membrane_core = membrane_core_0_1_0;

    membrane_element_fake_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, membrane_core_0_1_0
        }:
          buildMix ({
            name = "membrane_element_fake";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_element_fake";
              version = "0.1.0";
              sha256 =
                "d09b7b0d7a9d14449a780ac8f69bae9bedbfeea2ed25b79befc0ec6063d82e7e";
            };
            beamDeps  = [ membrane_core_0_1_0 ];

            meta = {
              description = ''Membrane Multimedia Framework (Fake Element)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/membraneframework/membrane-element-fake";
            };
          } // packageOverrides)
      ) {};

    membrane_element_fake = membrane_element_fake_0_1_0;

    membrane_element_file_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          membrane_core_0_1_0,
          mockery_2_2_0
        }:
          buildMix ({
            name = "membrane_element_file";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_element_file";
              version = "0.1.0";
              sha256 =
                "cfbd28927308c23f03ef3fbb09004c1428d6a5e9afc53c501514b3a64988ec7a";
            };
            beamDeps  = [ membrane_core_0_1_0 mockery_2_2_0 ];

            meta = {
              description = ''Membrane Multimedia Framework (File Element)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/membraneframework/membrane-element-file";
            };
          } // packageOverrides)
      ) {};

    membrane_element_file = membrane_element_file_0_1_0;

    membrane_element_httpoison_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_1_1,
          membrane_core_0_1_0,
          mockery_2_2_0
        }:
          buildMix ({
            name = "membrane_element_httpoison";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_element_httpoison";
              version = "0.1.0";
              sha256 =
                "760da676c4144ade4377d2545c7412c70ffe279ef90543e1737f77fd5e2340d1";
            };
            beamDeps  = [ httpoison_1_1_1 membrane_core_0_1_0 mockery_2_2_0
                      ];

            meta = {
              description = ''Membrane Multimedia Framework (HTTPoison
                            Element)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "http://github.com/membraneframework/membrane-element-httpoison";
            };
          } // packageOverrides)
      ) {};

    membrane_element_httpoison = membrane_element_httpoison_0_1_0;

    membrane_element_mpegaudioparse_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          membrane_caps_audio_mpeg_0_1_0,
          membrane_core_0_1_0
        }:
          buildMix ({
            name = "membrane_element_mpegaudioparse";
            version = "0.1.0";
            src = fetchHex {
              pkg = "membrane_element_mpegaudioparse";
              version = "0.1.0";
              sha256 =
                "f941b36254909d691b48317211f99ab342c96c52be3ccc0f30279d6a31ff215f";
            };
            beamDeps  = [ membrane_caps_audio_mpeg_0_1_0 membrane_core_0_1_0
                      ];

            meta = {
              description = ''Membrane Multimedia Framework (MPEGAudioParse
                            Element)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/membraneframework/membrane-element-mpegaudioparse";
            };
          } // packageOverrides)
      ) {};

    membrane_element_mpegaudioparse =
      membrane_element_mpegaudioparse_0_1_0;

    memcache_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          jason_1_1_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "memcache";
            version = "0.1.2";
            src = fetchHex {
              pkg = "memcache";
              version = "0.1.2";
              sha256 =
                "61f1b086371fde2c3dfa47c2912dab38a0beaa949de0a030518ccd947dcff8a2";
            };
            beamDeps  = [ connection_1_0_4 jason_1_1_1 poolboy_1_5_1 ];

            meta = {
              description = ''Memcache client library utilizing the memcache
                            binary protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/memcache_elixir";
            };
          } // packageOverrides)
      ) {};

    memcache = memcache_0_1_2;

    memcache_client_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_2_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "memcache_client";
            version = "1.1.0";
            src = fetchHex {
              pkg = "memcache_client";
              version = "1.1.0";
              sha256 =
                "e12d6add6d9ef817f7cf47d85c37c75c9ec81512a7ad88f23b50963048bce439";
            };
            beamDeps  = [ connection_1_0_4 poison_2_1_0 poolboy_1_5_1 ];

            meta = {
              description = ''Memcache client library utilizing the memcache
                            binary protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/memcache_client";
            };
          } // packageOverrides)
      ) {};

    memcache_client = memcache_client_1_1_0;

    memcache_ex_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_2_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "memcache_ex";
            version = "1.2.0";
            src = fetchHex {
              pkg = "memcache_ex";
              version = "1.2.0";
              sha256 =
                "15fff60976ae05d9b2a0376bff8cff6c84bfaeacfec3baf52f509585cd015192";
            };
            beamDeps  = [ connection_1_0_4 poison_2_2_0 poolboy_1_5_1 ];

            meta = {
              description = ''Memcache client library Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/memcache_ex";
            };
          } // packageOverrides)
      ) {};

    memcache_ex = memcache_ex_1_2_0;

    meme_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cachex_2_1_0 }:
          buildMix ({
            name = "meme";
            version = "0.2.0";
            src = fetchHex {
              pkg = "meme";
              version = "0.2.0";
              sha256 =
                "2932ef8fa70b5e3268b96ab4b4ce860e28b4c9aba80d3df772aaac21f10e94b9";
            };
            beamDeps  = [ cachex_2_1_0 ];

            meta = {
              description = ''Memoization (caching) of function calls'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/timCF/meme/";
            };
          } // packageOverrides)
      ) {};

    meme = meme_0_2_0;

    memkash_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          env_0_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "memkash";
            version = "0.1.1";
            src = fetchHex {
              pkg = "memkash";
              version = "0.1.1";
              sha256 =
                "715c431415b472a0354e4e769b9836d9554a78e02e1dabe5e0c0c729768eddce";
            };
            beamDeps  = [ connection_1_0_4 env_0_2_0 poolboy_1_5_1 ];

            meta = {
              description = ''Memcached Client Library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kdxu/memkash";
            };
          } // packageOverrides)
      ) {};

    memkash = memkash_0_1_1;

    memoize_1_2_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "memoize";
            version = "1.2.7";
            src = fetchHex {
              pkg = "memoize";
              version = "1.2.7";
              sha256 =
                "0cd73d9cd448889a26778bcb646b98ea4d54d8486abc8f0e9f6771ebea7a6c95";
            };

            meta = {
              description = ''A method caching macro for elixir using CAS on
                            ETS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/melpon/memoize";
            };
          } // packageOverrides)
      ) {};

    memoize = memoize_1_2_7;

    memoizer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "memoizer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "memoizer";
              version = "0.1.0";
              sha256 =
                "48a6e631e56ede0d7ea53ad5d6b6942c39e1ba6c615d2265cc085ac9abb38bef";
            };

            meta = {
              description = ''OTP app to memoize/cache expensive function
                            calls'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bsanyi/memoizer";
            };
          } // packageOverrides)
      ) {};

    memoizer = memoizer_0_1_0;

    memoz_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "memoz";
            version = "0.2.0";
            src = fetchHex {
              pkg = "memoz";
              version = "0.2.0";
              sha256 =
                "823340285cca732f77e7386425be0838291cd5cd689e778d9b23b3c0e2fe828c";
            };

            meta = {
              description = ''MemoZ run recursive while memoizing anonymous
                            functions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bakenezumi/memoz";
            };
          } // packageOverrides)
      ) {};

    memoz = memoz_0_2_0;

    memstore_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "memstore";
            version = "0.2.3";
            src = fetchHex {
              pkg = "memstore";
              version = "0.2.3";
              sha256 =
                "cc05b6aec8b9aefefc2a6652b19e0c1e357511c7c5cad4d3830b52d7ce25e909";
            };

            meta = {
              description = ''Simple memory database for Erlang application
                            using MVCC to store the data.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    memstore = memstore_0_2_3;

    mercadolibre_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "mercadolibre";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mercadolibre";
              version = "0.1.1";
              sha256 =
                "0dc90f22bb4177455c20da935d6878702608eaa880ed4e01043db3629c35b6ad";
            };
            beamDeps  = [ exjsx_4_0_0 httpoison_0_13_0 ];

            meta = {
              description = ''An elixir wrapper for MercadoLibre.com API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlosipe/mercadolibre_elixir";
            };
          } // packageOverrides)
      ) {};

    mercadolibre = mercadolibre_0_1_1;

    mercury_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "mercury";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mercury";
              version = "0.1.1";
              sha256 =
                "2672fb8bffeb6d9707599afd775acfc5ca8872e85cff436678e10ff2eee4bfb4";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              longDescription = ''A simple wrapper for the Mercury Web Parser
                                API (https://mercury.postlight.com/web-parser/),
                                powered by HTTPoison.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adampash/mercury_ex";
            };
          } // packageOverrides)
      ) {};

    mercury = mercury_0_1_1;

    merkel_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "merkel";
            version = "1.0.4";
            src = fetchHex {
              pkg = "merkel";
              version = "1.0.4";
              sha256 =
                "bad19228bac8eed3a887281000c15bcc3277561db56251cb1c9e1c041d81351e";
            };

            meta = {
              longDescription = ''Implements a balanced, merkle binary hash
                                tree. Merkle trees are a beautiful data
                                structure for summarizing and verifying data
                                integrity.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/brpandey/merkel";
            };
          } // packageOverrides)
      ) {};

    merkel = merkel_1_0_4;

    merkerl_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "merkerl";
            version = "1.0.1";
            src = fetchHex {
              pkg = "merkerl";
              version = "1.0.1";
              sha256 =
                "6043dac833781772aae8d8eed101fe2cd8e51383853b485c8a59edffba4db631";
            };

            meta = {
              description = ''An Erlang implementation of a merkle tree'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/helium/merklerl";
            };
          } // packageOverrides)
      ) {};

    merkerl = merkerl_1_0_1;

    merkle_tree_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "merkle_tree";
            version = "1.3.0";
            src = fetchHex {
              pkg = "merkle_tree";
              version = "1.3.0";
              sha256 =
                "def77b34a808881251563fa7052dd652aa4a02512be6979af51ed0acec92d987";
            };

            meta = {
              longDescription = ''A hash tree or Merkle tree is a tree in which
                                every non-leaf node is labelled with the hash of
                                the labels or values (in case of leaves) of its
                                child nodes. Hash trees are useful because they
                                allow efficient and secure verification of the
                                contents of large data structures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/merkle_tree";
            };
          } // packageOverrides)
      ) {};

    merkle_tree = merkle_tree_1_3_0;

    merklet_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "merklet";
            version = "1.0.1";
            src = fetchHex {
              pkg = "merklet";
              version = "1.0.1";
              sha256 =
                "c0e93dab78db8939d97a1229606cebd5794e658bf6a878225aa7f8bd244a562e";
            };

            meta = {
              description = ''Merkle Trees for data replication purposes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/merklet";
            };
          } // packageOverrides)
      ) {};

    merklet = merklet_1_0_1;

    merlin_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "merlin";
            version = "0.1.1";
            src = fetchHex {
              pkg = "merlin";
              version = "0.1.1";
              sha256 =
                "6679fe0d40e4e6c5a0fdceb69abba057db0bd46ee69801d8612b660cdbf65ddc";
            };

            meta = {
              description = ''A wise alchemist to guide your project`s
                            setup.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/verypossible/merlin";
            };
          } // packageOverrides)
      ) {};

    merlin = merlin_0_1_1;

    messagepack_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "messagepack";
            version = "0.4.1";
            src = fetchHex {
              pkg = "messagepack";
              version = "0.4.1";
              sha256 =
                "cdf2d4a2af846a8c3cd43a9f80082883ff7c2c5e221ec078375102db0fb5ca2f";
            };

            meta = {
              description = ''MessagePack for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tomaon/messagepack";
            };
          } // packageOverrides)
      ) {};

    messagepack = messagepack_0_4_1;

    meta_pid_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "meta_pid";
            version = "0.2.1";
            src = fetchHex {
              pkg = "meta_pid";
              version = "0.2.1";
              sha256 =
                "6d6e3597fa235554f181f0ed09e62571fd9963d1e32fa640f812b75c9318904a";
            };

            meta = {
              longDescription = ''Library providing scaffolding for storing
                                process-specific information for duration of
                                process` lifespan'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/meta_pid";
            };
          } // packageOverrides)
      ) {};

    meta_pid = meta_pid_0_2_1;

    metainvestigator_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_20_3 }:
          buildMix ({
            name = "metainvestigator";
            version = "0.0.3";
            src = fetchHex {
              pkg = "metainvestigator";
              version = "0.0.3";
              sha256 =
                "774b3973090491a9a342a68c5cf099c98581ae0f1b1d313a08a7d2030d541781";
            };
            beamDeps  = [ floki_0_20_3 ];

            meta = {
              description = ''A library for web scraping, inspired by
                            MetaInspector'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nekova/metainvestigator";
            };
          } // packageOverrides)
      ) {};

    metainvestigator = metainvestigator_0_0_3;

    metal_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metal";
            version = "0.1.0";
            src = fetchHex {
              pkg = "metal";
              version = "0.1.0";
              sha256 =
                "8a4a25c53fa92afc9756b6534ce51d2b22381879327eb874002efe2f6b13bc69";
            };

            meta = {
              description = ''Lightweight server behaviour'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/metal";
            };
          } // packageOverrides)
      ) {};

    metal_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metal";
            version = "0.1.1";
            src = fetchHex {
              pkg = "metal";
              version = "0.1.1";
              sha256 =
                "88b82b634998a1a768dedcd372c2f7e657b19445325c0af5ccbac62c77210f1d";
            };

            meta = {
              description = ''Lightweight server behaviour'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/metal";
            };
          } // packageOverrides)
      ) {};

    metal = metal_0_1_1;

    meteo_stick_0_2_5 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_1_0_0
        }:
          buildMix ({
            name = "meteo_stick";
            version = "0.2.5";
            src = fetchHex {
              pkg = "meteo_stick";
              version = "0.2.5";
              sha256 =
                "193aeb120e3479ff1b14e66bc9220324007bb17980ea68d4085232b28af0f395";
            };
            beamDeps  = [ nerves_uart_1_0_0 ];

            meta = {
              description = ''A Client for the MeteoStick USB Stick'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/meteo_stick";
            };
          } // packageOverrides)
      ) {};

    meteo_stick = meteo_stick_0_2_5;

    meter_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "meter";
            version = "0.2.0";
            src = fetchHex {
              pkg = "meter";
              version = "0.2.0";
              sha256 =
                "40258a8a265321d760b6da529dcbe4c5722bfd0e40c877b6921d3d21e98fefd5";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''Track your elixir application on google
                            analytycs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlo-colombo/meter";
            };
          } // packageOverrides)
      ) {};

    meter = meter_0_2_0;

    methex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, folsom_0_8_7 }:
          buildMix ({
            name = "methex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "methex";
              version = "0.0.1";
              sha256 =
                "fbaa8c4598c44afce91dc68fcf482df9f7b4fe207e26d8fa9bd22b2960aa9638";
            };
            beamDeps  = [ folsom_0_8_7 ];

            meta = {
              description = ''Metrics system (folsom wrapper) + logger
                            backend'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/timCF/methex";
            };
          } // packageOverrides)
      ) {};

    methex = methex_0_0_1;

    method_missing_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "method_missing";
            version = "0.1.0";
            src = fetchHex {
              pkg = "method_missing";
              version = "0.1.0";
              sha256 =
                "2b05a0f0d88eb4b8d315f460e3ba9ad8b015078645fa96180adb0f63b399b359";
            };

            meta = {
              description = ''method_missing is an Elixir library for dynamic
                            code execution.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewvy/method_missing";
            };
          } // packageOverrides)
      ) {};

    method_missing = method_missing_0_1_0;

    metrex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "metrex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "metrex";
              version = "0.2.0";
              sha256 =
                "bebf485ee9b872456a91f855942070e13b6cd9264ac4bbd9f2a75cf94df6856d";
            };

            meta = {
              description = ''Simple metrics for elixir apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/metrex";
            };
          } // packageOverrides)
      ) {};

    metrex = metrex_0_2_0;

    metrics_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metrics";
            version = "1.0.1";
            src = fetchHex {
              pkg = "metrics";
              version = "1.0.1";
              sha256 =
                "69b09adddc4f74a40716ae54d140f93beb0fb8978d8636eaded0c31b6f099f16";
            };

            meta = {
              description = ''A generic interface to different metrics systems
                            in Erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-metrics";
            };
          } // packageOverrides)
      ) {};

    metrics_2_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metrics";
            version = "2.4.0";
            src = fetchHex {
              pkg = "metrics";
              version = "2.4.0";
              sha256 =
                "b78169ba63d3d519c43240b7221c221a140754b66f68c8b99690ae12fc7ebf0b";
            };

            meta = {
              description = ''A generic interface to different metrics systems
                            in Erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-metrics";
            };
          } // packageOverrides)
      ) {};

    metrics = metrics_2_4_0;

    metrics_statsd_1_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          metrics_1_0_1,
          statix_1_0_1
        }:
          buildMix ({
            name = "metrics_statsd";
            version = "1.0.6";
            src = fetchHex {
              pkg = "metrics_statsd";
              version = "1.0.6";
              sha256 =
                "3e2fe4c852d651a2ff9dd9f2d4aff1a1a43245e765207d42e6d2c4794be8237c";
            };
            beamDeps  = [ metrics_1_0_1 statix_1_0_1 ];

            meta = {
              longDescription = ''`metrics_statsd` provides an Elixir wrapper
                                around the [Erlang metrics app from
                                Hackney](https://github.com/benoitc/erlang-metrics)
                                and adds a reporting module for Statsd.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/martinrehfeld/elixir-metrics-statsd";
            };
          } // packageOverrides)
      ) {};

    metrics_statsd = metrics_statsd_1_0_6;

    metrix_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, logfmt_3_3_0 }:
          buildMix ({
            name = "metrix";
            version = "0.4.2";
            src = fetchHex {
              pkg = "metrix";
              version = "0.4.2";
              sha256 =
                "37eb7fde58d55639003514b65dccc5cf977af1261a96311b83825c30ea1c5fea";
            };
            beamDeps  = [ logfmt_3_3_0 ];

            meta = {
              longDescription = ''Metrix is a library to log custom application
                                metrics, in a well-structured, human *and*
                                machine readable format, for use by downstream
                                log processing systems (like Librato, Reimann,
                                etc...)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rwdaigle/metrix";
            };
          } // packageOverrides)
      ) {};

    metrix = metrix_0_4_2;

    mex_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "mex";
              version = "0.0.5";
              sha256 =
                "52765dc6f5d0b03dba9f08424b85cfbc96f873dfc769cdb6a26ac391ad3344e3";
            };

            meta = {
              description = ''Macro-expansion display helper for IEx.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/mex";
            };
          } // packageOverrides)
      ) {};

    mex = mex_0_0_5;

    microformats2_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_20_3,
          httpotion_3_1_0
        }:
          buildMix ({
            name = "microformats2";
            version = "0.1.0";
            src = fetchHex {
              pkg = "microformats2";
              version = "0.1.0";
              sha256 =
                "f80ddbb639c225fcd7c70973c88b850d8546b144ad5ffa9f9fcdb3e70000744b";
            };
            beamDeps  = [ floki_0_20_3 httpotion_3_1_0 ];

            meta = {
              description = ''A microformats2 parser
                            (http://microformats.org/wiki/microformats-2) for
                            Elixir'';
              license = stdenv.lib.licenses.agpl3;
              homepage = "https://github.com/ckruse/microformats2-elixir";
            };
          } // packageOverrides)
      ) {};

    microformats2 = microformats2_0_1_0;

    miffy_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jiffy_0_14_11 }:
          buildRebar3 ({
            name = "miffy";
            version = "1.1.1";
            src = fetchHex {
              pkg = "miffy";
              version = "1.1.1";
              sha256 =
                "39cdf680460a46ba2d8a53bc610ea08d22673d1aadd2639cc08398462d81d138";
            };

            beamDeps  = [ jiffy_0_14_11 ];

            meta = {
              description = ''Jiffy wrapper which returns pretty maps.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/expelledboy/miffy";
            };
          } // packageOverrides)
      ) {};

    miffy = miffy_1_1_1;

    milkpotion_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_rated_1_3_1,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "milkpotion";
            version = "0.0.4";
            src = fetchHex {
              pkg = "milkpotion";
              version = "0.0.4";
              sha256 =
                "c5ec7df5fe2c560699fa4e5ef4f1bb6c9d7afcc28529b9d3dd3204ba313000bf";
            };
            beamDeps  = [ ex_rated_1_3_1 httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''milkpotion is an api wrapper for Remember the
                            Milk'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/croesnick/milkpotion.git";
            };
          } // packageOverrides)
      ) {};

    milkpotion = milkpotion_0_0_4;

    milliseconds_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "milliseconds";
            version = "0.0.1";
            src = fetchHex {
              pkg = "milliseconds";
              version = "0.0.1";
              sha256 =
                "6f82b9f47590e96ed90761d6eb331a9c11a40b68216d5e4867420899420035f0";
            };

            meta = {
              longDescription = '' Simple library to work with milliseconds.
                                Convert text to milliseconds: convert(\"2d\")
                                Convert milliseconds to text: convert(8640000)
                                Calculate future time: future_time(\"6hrs\") '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/davebryson/elixir_milliseconds";
            };
          } // packageOverrides)
      ) {};

    milliseconds = milliseconds_0_0_1;

    mime_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mime";
            version = "1.1.0";
            src = fetchHex {
              pkg = "mime";
              version = "1.1.0";
              sha256 =
                "33dd09e615daab5668c15cc3a33829892728fdbed910ab0c0a0edb06b45fc54d";
            };

            meta = {
              description = ''A MIME type module for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/mime";
            };
          } // packageOverrides)
      ) {};

    mime_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mime";
            version = "1.3.0";
            src = fetchHex {
              pkg = "mime";
              version = "1.3.0";
              sha256 =
                "5e839994289d60326aa86020c4fbd9c6938af188ecddab2579f07b66cd665328";
            };

            meta = {
              description = ''A MIME type module for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/mime";
            };
          } // packageOverrides)
      ) {};

    mime = mime_1_3_0;

    mime_types_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mime_types";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mime_types";
              version = "0.1.1";
              sha256 =
                "46b4f4a52deda3ac9fa48ae6e3582efb851d6c72de4a11e4dfcc7e386dab710b";
            };

            meta = {
              description = ''A toolbelt for working with MIME types in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christhekeele/mime_types";
            };
          } // packageOverrides)
      ) {};

    mime_types = mime_types_0_1_1;

    mimerl_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mimerl";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.0.2";
              sha256 =
                "7a4c8e1115a2732a67d7624e28cf6c9f30c66711a9e92928e745c255887ba465";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          } // packageOverrides)
      ) {};

    mimerl_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mimerl";
            version = "1.1.0";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.1.0";
              sha256 =
                "def0f1922a5dcdeeee6e4f41139b364e7f0f40239774b528a0986b12bcb42ddc";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          } // packageOverrides)
      ) {};

    mimerl = mimerl_1_1_0;

    mimetype_parser_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mimetype_parser";
            version = "0.1.3";
            src = fetchHex {
              pkg = "mimetype_parser";
              version = "0.1.3";
              sha256 =
                "7d8f80c567807ce78cd93c938e7f4b0a20b1aaaaab914bf286f68457d9f7a852";
            };

            meta = {
              description = ''parse mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/mimetype_parser";
            };
          } // packageOverrides)
      ) {};

    mimetype_parser = mimetype_parser_0_1_3;

    mimetypes_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mimetypes";
            version = "1.1.0";
            src = fetchHex {
              pkg = "mimetypes";
              version = "1.1.0";
              sha256 =
                "234802943a215b1b6ce408015f103c4223ea98179e4fe411cd55e9a4d0b07e53";
            };

            meta = {
              description = ''mimetypes'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/erlangpack/mimetypes";
            };
          } // packageOverrides)
      ) {};

    mimetypes = mimetypes_1_1_0;

    mimex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mimex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mimex";
              version = "0.1.0";
              sha256 =
                "68858d5fb6a59780c3b94a445fd994856c3f1d0f3ed8dff6a95b6aa80027e4de";
            };

            meta = {
              description = ''MIME type utilities for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hex-sh/mimex";
            };
          } // packageOverrides)
      ) {};

    mimex = mimex_0_1_0;

    min_delegate_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "min_delegate";
            version = "0.1.0";
            src = fetchHex {
              pkg = "min_delegate";
              version = "0.1.0";
              sha256 =
                "63aaf34e77dbd6b4d690aa8963cf37ae685881e64a78502b0177fea1bc0b321c";
            };

            meta = {
              description = ''Define easily :call and :cast, :info functions
                            when using gen_server in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kminwoog/min_delegate";
            };
          } // packageOverrides)
      ) {};

    min_delegate = min_delegate_0_1_0;

    mind_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mind";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mind";
              version = "0.0.2";
              sha256 =
                "a9ea10528b6a7a3b1ebf99da9bcb2531ea5bab9800aa7cd4e58c9714eaf1be26";
            };

            meta = {
              description = ''A Society of Mind library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshforisha/mind.git";
            };
          } // packageOverrides)
      ) {};

    mind = mind_0_0_2;

    minecraft_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          ranch_1_5_0
        }:
          buildMix ({
            name = "minecraft";
            version = "0.1.0";
            src = fetchHex {
              pkg = "minecraft";
              version = "0.1.0";
              sha256 =
                "27be1234cf2105ef48c6430106f78add286c8e339d9b1541c559cedaeae7ff1c";
            };
            beamDeps  = [ poison_3_1_0 ranch_1_5_0 ];

            meta = {
              description = ''A Minecraft server implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thecodeboss/minecraft";
            };
          } // packageOverrides)
      ) {};

    minecraft = minecraft_0_1_0;

    minerva_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exfswatch_0_4_2 }:
          buildMix ({
            name = "minerva";
            version = "0.2.5";
            src = fetchHex {
              pkg = "minerva";
              version = "0.2.5";
              sha256 =
                "0101b33847b3d99882aa171e5ca973a609b9fcaccf98f53cad4cca5f1a0af5b8";
            };
            beamDeps  = [ exfswatch_0_4_2 ];

            meta = {
              description = ''Elixir framework for easily writing koans.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/uesteibar/minerva";
            };
          } // packageOverrides)
      ) {};

    minerva = minerva_0_2_5;

    miniban_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "miniban";
            version = "0.1.0";
            src = fetchHex {
              pkg = "miniban";
              version = "0.1.0";
              sha256 =
                "7c106190196bf5f4c8350e47349e12b34ada496529f9aa135f113f58ac3f7f5e";
            };

            meta = {
              description = ''Simple and fast IBAN validation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github/webdeb/miniban-elixir";
            };
          } // packageOverrides)
      ) {};

    miniban = miniban_0_1_0;

    minmaxlist_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "minmaxlist";
            version = "0.0.7";
            src = fetchHex {
              pkg = "minmaxlist";
              version = "0.0.7";
              sha256 =
                "5a6e9661d1340dd3bba5c964a8edb11d9ddaa571b4c9dfa77ecb91770ef6c60f";
            };

            meta = {
              longDescription = ''Elixir library extending `Enum.min_by/2`,
                                `Enum.max_by/2` and `Enum.min_max_by/2` to
                                return a list of results instead of just one.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-minmaxlist";
            };
          } // packageOverrides)
      ) {};

    minmaxlist = minmaxlist_0_0_7;

    minmay_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "minmay";
            version = "1.2.0";
            src = fetchHex {
              pkg = "minmay";
              version = "1.2.0";
              sha256 =
                "f6a9ae49444a42590e3fa68dd9d9a4299aeeca01454038f8d39399036d9db822";
            };

            meta = {
              longDescription = ''Minmay is a Erlang application for
                                translating a file extention to MIME type or
                                vice versa'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davecaos/minmay";
            };
          } // packageOverrides)
      ) {};

    minmay = minmay_1_2_0;

    misc_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "misc";
            version = "0.3.0";
            src = fetchHex {
              pkg = "misc";
              version = "0.3.0";
              sha256 =
                "3a0543a900002f2c533e42b3c67133c12d29da870382552f0df8320790b33a55";
            };

            meta = {
              longDescription = ''- Some miscellaneous functions in Elixir to
                                start to get used to the syntax and functional
                                programming style.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jackmarchant/misc";
            };
          } // packageOverrides)
      ) {};

    misc = misc_0_3_0;

    misc_random_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "misc_random";
            version = "0.2.6";
            src = fetchHex {
              pkg = "misc_random";
              version = "0.2.6";
              sha256 =
                "4fe3db3bddcf55d93404fa9f5bf006800d54bfeb78bcf583376750d28ac0d7bc";
            };

            meta = {
              longDescription = ''This is a very thin wrapper around erlang`s
                                random:uniform method. It allows you to create
                                random strings or numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-helper-random";
            };
          } // packageOverrides)
      ) {};

    misc_random = misc_random_0_2_6;

    misha_cafex_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          consul_1_0_3,
          erlzk_0_6_4
        }:
          buildMix ({
            name = "misha_cafex";
            version = "0.0.6";
            src = fetchHex {
              pkg = "misha_cafex";
              version = "0.0.6";
              sha256 =
                "aeaf472db3ab5750703e784af2c300b3fc1a66cc176ec38e28326c783ab13aa1";
            };
            beamDeps  = [ consul_1_0_3 erlzk_0_6_4 ];

            meta = {
              description = ''Cafex is a pure Elixir implementation of Kafka
                            client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/upyun/cafex";
            };
          } // packageOverrides)
      ) {};

    misha_cafex = misha_cafex_0_0_6;

    mistex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_1_2_0,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mistex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mistex";
              version = "0.1.1";
              sha256 =
                "76a38743ba511c6f60842788c226791b2a79fe0d30e8fef0e766e4e6c506bbf1";
            };
            beamDeps  = [ apex_1_2_0 httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An elixir client for the Misty Robotics
                            Platform'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jodyalbritton/mistex";
            };
          } // packageOverrides)
      ) {};

    mistex = mistex_0_1_1;

    mithril_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_2_1
        }:
          buildMix ({
            name = "mithril";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mithril";
              version = "0.1.0";
              sha256 =
                "f31f360ebd34a3a9ad3e0d26763c0230a7f62ba773fe0f1ba430b04c64c091fd";
            };
            beamDeps  = [ mix_templates_0_2_1 ];

            meta = {
              description = ''An architecture in a box for a back-end
                            webserver.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/mithril";
            };
          } // packageOverrides)
      ) {};

    mithril = mithril_0_1_0;

    mix_bump_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_bump";
            version = "0.0.4";
            src = fetchHex {
              pkg = "mix_bump";
              version = "0.0.4";
              sha256 =
                "6e01ed8c0f8bf28df72957668dd8af029e9e21dff53a741dadba7af7c6b0069c";
            };

            meta = {
              description = ''This is a simple mix task to version bump a mix
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oo6/mix-bump";
            };
          } // packageOverrides)
      ) {};

    mix_bump = mix_bump_0_0_4;

    mix_debeam_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_debeam";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mix_debeam";
              version = "0.1.1";
              sha256 =
                "377e4ee9b9c107e6455227af7e55d37e6936bcc5df6d36bd3f5f67f6efea74fb";
            };

            meta = {
              description = ''MIX task to get Erlang code of Elixir module.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/surik/mix_debeam";
            };
          } // packageOverrides)
      ) {};

    mix_debeam = mix_debeam_0_1_1;

    mix_deps_tree_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_deps_tree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mix_deps_tree";
              version = "0.1.0";
              sha256 =
                "de19ea3eebf578080263f25fdf6a248fdc460aa86e41d582cc0d0379329fa6b6";
            };

            meta = {
              description = ''Mix task to print dependency tree of an
                            application to a terminal'';

              homepage = "https://github.com/liveforeverx/mix_deps_tree";
            };
          } // packageOverrides)
      ) {};

    mix_deps_tree = mix_deps_tree_0_1_0;

    mix_dia_compiler_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_dia_compiler";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mix_dia_compiler";
              version = "0.2.0";
              sha256 =
                "8732996312601c87d61004c7ad60cbe417233cfa81a6e6379e63f84bd72df9e3";
            };

            meta = {
              description = ''Diameter source files compiler for Mix and
                            Elixir.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/xerions/mix_dia_compiler";
            };
          } // packageOverrides)
      ) {};

    mix_dia_compiler = mix_dia_compiler_0_2_0;

    mix_docker_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_1_2 }:
          buildMix ({
            name = "mix_docker";
            version = "0.4.1";
            src = fetchHex {
              pkg = "mix_docker";
              version = "0.4.1";
              sha256 =
                "9938d9c2ec81334a5dc24d022682b1501791ba9205d3a4c7d5c6aa8f0ee72962";
            };
            beamDeps  = [ distillery_1_1_2 ];

            meta = {
              description = ''Put your Elixir app production release inside
                            minimal docker image'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/recruitee/mix_docker";
            };
          } // packageOverrides)
      ) {};

    mix_docker_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "mix_docker";
            version = "0.5.0";
            src = fetchHex {
              pkg = "mix_docker";
              version = "0.5.0";
              sha256 =
                "52bd4dc48e3adb5f38a67aab19b2026c384d5a75dc88d163cd363cdc7aa65cd9";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              description = ''Put your Elixir app production release inside
                            minimal docker image'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/recruitee/mix_docker";
            };
          } // packageOverrides)
      ) {};

    mix_docker = mix_docker_0_5_0;

    mix_erlang_tasks_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_erlang_tasks";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mix_erlang_tasks";
              version = "0.1.0";
              sha256 =
                "95d2839c422c482a70c08a8702da8242f86b773f8ab6e8602a4eb72da8da04ed";
            };

            meta = {
              longDescription = ''This project provides a few Mix tasks that
                                make it more convenient to use Mix as a build
                                tool and package manager when developing
                                applications in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/mix-erlang-tasks";
            };
          } // packageOverrides)
      ) {};

    mix_erlang_tasks = mix_erlang_tasks_0_1_0;

    mix_eunit_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, eunit_formatters_0_5_0
        }:
          buildMix ({
            name = "mix_eunit";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mix_eunit";
              version = "0.3.0";
              sha256 =
                "da776cf400b200992cc1e8240a608eb0969ec505cd4272a16d5f077c3d6922fb";
            };
            beamDeps  = [ eunit_formatters_0_5_0 ];

            meta = {
              description = ''A mix task to run eunit tests, works for umbrella
                            projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/mix_eunit";
            };
          } // packageOverrides)
      ) {};

    mix_eunit = mix_eunit_0_3_0;

    mix_generator_0_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mix_templates_0_2_1,
          private_0_1_1
        }:
          buildMix ({
            name = "mix_generator";
            version = "0.1.9";
            src = fetchHex {
              pkg = "mix_generator";
              version = "0.1.9";
              sha256 =
                "1c4b734a4fc3114b2ad97e133615f22cfee5c535193aeef1df4bf9a9a19997e1";
            };
            beamDeps  = [ mix_templates_0_2_1 private_0_1_1 ];

            meta = {
              longDescription = ''This application adds a `gen` task to mix,
                                which generates project trees. Unlike `mix new`,
                                it can be fully customized. You can create
                                private variants for your own use, and publish
                                public ones that can be shared.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/mix_task_gen";
            };
          } // packageOverrides)
      ) {};

    mix_generator = mix_generator_0_1_9;

    mix_info_0_7_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_info";
            version = "0.7.2";
            src = fetchHex {
              pkg = "mix_info";
              version = "0.7.2";
              sha256 =
                "7b4430ea649bb0c978f3b761403c068b08d9781c3f325c3f0dc57c1b44f395a2";
            };

            meta = {
              longDescription = ''A mix task that counts directories, files,
                                lines of code, modules, functions etc and
                                displays the results.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pskordilakis/mix_info";
            };
          } // packageOverrides)
      ) {};

    mix_info = mix_info_0_7_2;

    mix_lfe_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lfe_1_2_0 }:
          buildMix ({
            name = "mix_lfe";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mix_lfe";
              version = "0.2.0";
              sha256 =
                "b3893fa7bad87ac9a8e72a78d4d4e19af8ca87c5c5d778a6f7e5ffb696b59b6a";
            };
            beamDeps  = [ lfe_1_2_0 ];

            meta = {
              description = ''A LFE compiler for Mix'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/meddle0x53/mix_lfe";
            };
          } // packageOverrides)
      ) {};

    mix_lfe = mix_lfe_0_2_0;

    mix_npm_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_npm";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mix_npm";
              version = "0.3.0";
              sha256 =
                "6ba66f3aa68a579cefa2d9cf2018c11216e60ad35b9a7ea203b1664b089d78d7";
            };

            meta = {
              description = ''Mix tasks to run NPM commands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/verdammelt/mix_npm";
            };
          } // packageOverrides)
      ) {};

    mix_npm = mix_npm_0_3_0;

    mix_script_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_script";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mix_script";
              version = "0.2.0";
              sha256 =
                "3191d3882878f251509ce2b6cc40d049db0d6a69939c1f89c69f5a8df478cda3";
            };

            meta = {
              description = ''A build utility that allows you to to use mix
                            packages in an elixir script.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/mix_script";
            };
          } // packageOverrides)
      ) {};

    mix_script = mix_script_0_2_0;

    mix_task_archive_deps_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_task_archive_deps";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mix_task_archive_deps";
              version = "0.4.0";
              sha256 =
                "9d1d518ff14e66d406e3a114fbe5326cf676a4ee78bb4352c3d969ab089a8db2";
            };

            meta = {
              description = ''Mix task to create archives for a project
                            dependencies and elixir itself'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/hairyhum/mix_task_archive_deps";
            };
          } // packageOverrides)
      ) {};

    mix_task_archive_deps = mix_task_archive_deps_0_4_0;

    mix_templates_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, private_0_1_1 }:
          buildMix ({
            name = "mix_templates";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mix_templates";
              version = "0.2.1";
              sha256 =
                "933318b4b723105d25021b139cebd5cb61f6385ff536a83d1e54fffc57917056";
            };
            beamDeps  = [ private_0_1_1 ];

            meta = {
              longDescription = ''A modular, open templating system, designed
                                for use with `mix gen`. You care about this if:
                                ① you`d like different templates than the ones
                                built in to mix, ② you`d like to create your
                                own templates, or ③ you have created a package
                                such as Phoenix or Nerves that needs its own
                                project setup.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/mix_templates";
            };
          } // packageOverrides)
      ) {};

    mix_templates = mix_templates_0_2_1;

    mix_test_notify_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, notifier_0_1_0 }:
          buildMix ({
            name = "mix_test_notify";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mix_test_notify";
              version = "0.2.1";
              sha256 =
                "47ba7f9bc159750797f3945ef2fee6742141cb49d7dceaf9cba414528166e808";
            };
            beamDeps  = [ notifier_0_1_0 ];

            meta = {
              longDescription = ''OSX notifications for mix test. Best when
                                used with the most excellent mix test.watch.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/apdunston/mix_test_notify";
            };
          } // packageOverrides)
      ) {};

    mix_test_notify = mix_test_notify_0_2_1;

    mix_test_watch_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_2_11_0 }:
          buildMix ({
            name = "mix_test_watch";
            version = "0.2.6";
            src = fetchHex {
              pkg = "mix_test_watch";
              version = "0.2.6";
              sha256 =
                "b7019e9a0eba42bc98f15be9c1402f23c2b0dab7b67e71bba8bc5b337b0ab273";
            };
            beamDeps  = [ fs_2_11_0 ];

            meta = {
              description = ''Automatically run tests when files change'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/mix-test.watch";
            };
          } // packageOverrides)
      ) {};

    mix_test_watch_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_2_11_0 }:
          buildMix ({
            name = "mix_test_watch";
            version = "0.4.1";
            src = fetchHex {
              pkg = "mix_test_watch";
              version = "0.4.1";
              sha256 =
                "2b8d732595cf29b960328744fb46f5592d4b2605ce4f8bebdd12d0ab57d35a41";
            };
            beamDeps  = [ fs_2_11_0 ];

            meta = {
              description = ''Automatically run tests when files change'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/mix-test.watch";
            };
          } // packageOverrides)
      ) {};

    mix_under_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_under";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mix_under";
              version = "0.1.1";
              sha256 =
                "a3ff09405d0763b9643de34a7ce091ceb950ed38f3d66e4022b5f46ca3bc8fc1";
            };

            meta = {
              longDescription = ''Run mix tasks (like test or ecto db.migrate)
                                under specific umbrella applications'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vic/mix_under";
            };
          } // packageOverrides)
      ) {};

    mix_under = mix_under_0_1_1;

    mixeur_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mixeur";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mixeur";
              version = "0.1.0";
              sha256 =
                "251b6368b1c9cfabed32dd0394efa01581570638d5de730799c04df99f78bc6f";
            };

            meta = {
              description = ''Mixin for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wli0503/Mixeur";
            };
          } // packageOverrides)
      ) {};

    mixeur = mixeur_0_1_0;

    mixpanel_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_1_0 }:
          buildMix ({
            name = "mixpanel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mixpanel";
              version = "0.0.3";
              sha256 =
                "7b81d80d3705e5d4451951984bac49d476e3c79131138e9ffb66538f9c51a56e";
            };
            beamDeps  = [ exjsx_3_1_0 ];

            meta = {
              description = ''A client for the Mixpanel HTTP API. See
                            mixpanel.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michihuber/mixpanel_ex";
            };
          } // packageOverrides)
      ) {};

    mixpanel = mixpanel_0_0_3;

    mixpanel_api_ex_0_8_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "mixpanel_api_ex";
            version = "0.8.4";
            src = fetchHex {
              pkg = "mixpanel_api_ex";
              version = "0.8.4";
              sha256 =
                "6a97ccdbddc30ac9e9d8cd460294f9b212f92eb80a199116d3473a46421411f5";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Elixir client for the Mixpanel API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/agevio/mixpanel_api_ex";
            };
          } // packageOverrides)
      ) {};

    mixpanel_api_ex = mixpanel_api_ex_0_8_4;

    mixpanel_data_client_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_3_1
        }:
          buildMix ({
            name = "mixpanel_data_client";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mixpanel_data_client";
              version = "0.0.2";
              sha256 =
                "7f3bbd608ae18153655f27bd50ea01ad85630d6c1cc6ab9ed336e95419f06c86";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_3_1 ];

            meta = {
              description = ''Client library for interacting with the Mixpanel
                            Data API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeregrine/mixpanel_data_client";
            };
          } // packageOverrides)
      ) {};

    mixpanel_data_client = mixpanel_data_client_0_0_2;

    mixunit_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mixunit";
            version = "0.9.2";
            src = fetchHex {
              pkg = "mixunit";
              version = "0.9.2";
              sha256 =
                "2c0e66d10d479ec95c636d2de1db04cba03574282182af0df49c297230b22d43";
            };

            meta = {
              description = ''an eunit task for mix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/mixunit";
            };
          } // packageOverrides)
      ) {};

    mixunit = mixunit_0_9_2;

    mizur_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mizur";
            version = "1.0.1";
            src = fetchHex {
              pkg = "mizur";
              version = "1.0.1";
              sha256 =
                "c2518c04d2c505b4929052a613697187c518d64ca56647d0931e6a1514e65ba0";
            };

            meta = {
              longDescription = ''Mizur is a module for transforming other
                                modules into metric systems. These modules
                                (metric systems) make it possible to use
                                functions to create values enclosed in a metric
                                system and functions to manipulate these
                                values.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/mizur";
            };
          } // packageOverrides)
      ) {};

    mizur = mizur_1_0_1;

    mldht_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bencodex_1_0_0,
          krpc_protocol_0_0_4
        }:
          buildMix ({
            name = "mldht";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mldht";
              version = "0.0.1";
              sha256 =
                "73a68c76776b6f4c094892d647a7ffc6a2c030def69b8236954ad93b4206b7e9";
            };
            beamDeps  = [ bencodex_1_0_0 krpc_protocol_0_0_4 ];

            meta = {
              longDescription = ''Distributed Hash Table (DHT) is a storage and
                                lookup system based on a peer-to-peer (P2P)
                                system. The file sharing protocol BitTorrent
                                makes use of a DHT to find new peers without
                                using a central tracker. MLDHT, in particular,
                                is an elixir package that provides a mainline
                                DHT implementation according to BEP 05.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cit/MLDHT";
            };
          } // packageOverrides)
      ) {};

    mldht = mldht_0_0_1;

    mmExchangeRate_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_1_0_0,
          jsx_2_9_0
        }:
          buildMix ({
            name = "mmExchangeRate";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mmExchangeRate";
              version = "0.0.1";
              sha256 =
                "6daf6e74bf3ce8f9d7cc19b18b023d700201a847dde94a0eef1f263ce65efbac";
            };
            beamDeps  = [ httpotion_1_0_0 jsx_2_9_0 ];

            meta = {
              longDescription = ''A simple exchange rate checker and calculator
                                based on Central Bank of Myanmar Api. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Arkar-Aung/mmExchangeRate";
            };
          } // packageOverrides)
      ) {};

    mmExchangeRate = mmExchangeRate_0_0_1;

    mmath_0_2_25 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mmath";
            version = "0.2.25";
            src = fetchHex {
              pkg = "mmath";
              version = "0.2.25";
              sha256 =
                "e43fbef01138f62aa10b0b82703c3c5c37bd25bd6f06e5eb7e6f013c1ea31811";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''math library for metric sequences and binary
                            arrays.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/mmath";
            };
          } // packageOverrides)
      ) {};

    mmath = mmath_0_2_25;

    mmdb2_decoder_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mmdb2_decoder";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mmdb2_decoder";
              version = "0.2.0";
              sha256 =
                "4bd71f86694df1d2f037c23787bc9c4f4cb5631cbbfa10bf8bc127c90dc9d365";
            };

            meta = {
              description = ''MMDB2 File Format Decoder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-geolix/mmdb2_decoder";
            };
          } // packageOverrides)
      ) {};

    mmdb2_decoder = mmdb2_decoder_0_2_0;

    mnemonex_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, the_fuzz_0_4_0 }:
          buildMix ({
            name = "mnemonex";
            version = "1.2.1";
            src = fetchHex {
              pkg = "mnemonex";
              version = "1.2.1";
              sha256 =
                "0aa3216620c8148b20517fa84724b227aa50bc2f4fde4f8b855ac565ffd3a7f1";
            };
            beamDeps  = [ the_fuzz_0_4_0 ];

            meta = {
              description = ''mnemonicode encoder/decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/mnemonex";
            };
          } // packageOverrides)
      ) {};

    mnemonex = mnemonex_1_2_1;

    mnemonic_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mnemonic";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mnemonic";
              version = "0.2.1";
              sha256 =
                "34b2f1c9f8c341245b6faf6d3f894f99ce7131221b812e61d1e375fb66001ecc";
            };

            meta = {
              longDescription = ''Elixir library for generating deterministic
                                private keys from random words according to
                                BIP39 standard.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/izelnakri/mnemonic";
            };
          } // packageOverrides)
      ) {};

    mnemonic = mnemonic_0_2_1;

    mnemonic_slugs_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mnemonic_slugs";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mnemonic_slugs";
              version = "0.0.3";
              sha256 =
                "d5dc54475a11a62df7bb686fc2983647f789defaeb0ca9fccdc6dd5c3ad40daf";
            };

            meta = {
              description = ''MnemonicSlugs is an Elixir library for generating
                            memorable slugs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/devshane/mnemonic_slugs";
            };
          } // packageOverrides)
      ) {};

    mnemonic_slugs = mnemonic_slugs_0_0_3;

    mnemonics_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fastglobal_1_0_0 }:
          buildMix ({
            name = "mnemonics";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mnemonics";
              version = "0.3.0";
              sha256 =
                "c09784ce1c4b036f352880bae2f057752701ef9ea49c91e4ea691618fa9269b0";
            };
            beamDeps  = [ fastglobal_1_0_0 ];

            meta = {
              longDescription = ''Read only data store for Elixir: fast,
                                concurrently, for large data & hot
                                reloadable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/ne-sachirou/mnemonics";
            };
          } // packageOverrides)
      ) {};

    mnemonics = mnemonics_0_3_0;

    mnemonix_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mnemonix";
            version = "0.10.0";
            src = fetchHex {
              pkg = "mnemonix";
              version = "0.10.0";
              sha256 =
                "2c71dafe46247aba22f399fa35a1ec2aaacae564d09f397da7357edaa95946b6";
            };

            meta = {
              description = ''A unified interface to key/value stores.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christhekeele/mnemonix";
            };
          } // packageOverrides)
      ) {};

    mnemonix = mnemonix_0_10_0;

    mnesiam_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mnesiam";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mnesiam";
              version = "0.1.1";
              sha256 =
                "6e0b12961260aeb7413cc831bfb5458dfd40e0a194911af03f5db2754a6788bc";
            };

            meta = {
              description = ''Mnesiam is a Mnesia db manager for painless
                            Mnesia clustering.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mustafaturan/mnesiam";
            };
          } // packageOverrides)
      ) {};

    mnesiam = mnesiam_0_1_1;

    mobiledoc_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mobiledoc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mobiledoc";
              version = "0.0.2";
              sha256 =
                "2d2f9285c9ac446163bb021e59179f2b336f60ce3089a17d67dc0e3df5a124aa";
            };

            meta = {
              description = ''An HTML renderer for the Mobiledoc format used by
                            the Mobiledoc Kit editor.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zeppelin/mobiledoc-renderer-elixir";
            };
          } // packageOverrides)
      ) {};

    mobiledoc = mobiledoc_0_0_2;

    mobiledoc_text_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mobiledoc_text";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mobiledoc_text";
              version = "0.0.3";
              sha256 =
                "b0dfe0c28925cd9f2833c8c0f6b6e735edb35067a9376dd1662571b5876b09e0";
            };

            meta = {
              description = ''An HTML renderer for the Mobiledoc format used by
                            the Mobiledoc Kit editor.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zkwentz/mobiledoc-text-renderer-elixir";
            };
          } // packageOverrides)
      ) {};

    mobiledoc_text = mobiledoc_text_0_0_3;

    moby_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moby";
            version = "0.1.0";
            src = fetchHex {
              pkg = "moby";
              version = "0.1.0";
              sha256 =
                "b759eca9f097e266dc2efe598dff40a48e50b08bc970e5102c2d3af2315b88ac";
            };

            meta = {
              description = ''Yet Another Docker client for Elixir powered by
                            HTTPoison'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pragmaticivan/elixir-moby";
            };
          } // packageOverrides)
      ) {};

    moby = moby_0_1_0;

    mochiweb_2_15_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mochiweb";
            version = "2.15.0";
            src = fetchHex {
              pkg = "mochiweb";
              version = "2.15.0";
              sha256 =
                "b960d1cbcf40a30963eeee90ab7aeae074cbfa9a238561fb4434add1afc3075c";
            };

            meta = {
              description = ''MochiMedia Web Server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mochi/mochiweb";
            };
          } // packageOverrides)
      ) {};

    mochiweb = mochiweb_2_15_0;

    mochiweb_html_2_15_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mochiweb_html";
            version = "2.15.0";
            src = fetchHex {
              pkg = "mochiweb_html";
              version = "2.15.0";
              sha256 =
                "7651a4ef29bd6d69819b37b6aa12c7616c5cf75e67ccd849cfb499e2bbbf0ce6";
            };

            meta = {
              description = ''Mochiweb HTML parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/mochiweb_html";
            };
          } // packageOverrides)
      ) {};

    mochiweb_html = mochiweb_html_2_15_0;

    mock_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "mock";
            version = "0.1.3";
            src = fetchHex {
              pkg = "mock";
              version = "0.1.3";
              sha256 =
                "bf7cf50d528394d870cdecac4920ab719cec0af98eff95759b57cab0e5ee143e";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {
              longDescription = ''A mocking libary for the Elixir language. We
                                use the Erlang meck library to provide module
                                mocking functionality for Elixir. It uses macros
                                in Elixir to expose the functionality in a
                                convenient manner for integrating in Elixir
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jjh42/mock";
            };
          } // packageOverrides)
      ) {};

    mock_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "mock";
            version = "0.3.1";
            src = fetchHex {
              pkg = "mock";
              version = "0.3.1";
              sha256 =
                "dda3bf758218e7c6179c658b7a12f01271e68b2551c1bfdd70b8ea2178ef8a6e";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {
              longDescription = ''A mocking libary for the Elixir language. We
                                use the Erlang meck library to provide module
                                mocking functionality for Elixir. It uses macros
                                in Elixir to expose the functionality in a
                                convenient manner for integrating in Elixir
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jjh42/mock";
            };
          } // packageOverrides)
      ) {};

    mock = mock_0_3_1;

    mock_behaviour_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mock_behaviour";
            version = "0.1.4";
            src = fetchHex {
              pkg = "mock_behaviour";
              version = "0.1.4";
              sha256 =
                "8c368be3c27d30b407bd83420c2f4edbcd714b577ff9a605ff968d80b948ffae";
            };

            meta = {
              description = ''Generates mocks for your behaviours'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trevoke/mock_behaviour";
            };
          } // packageOverrides)
      ) {};

    mock_behaviour = mock_behaviour_0_1_4;

    mockery_2_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mockery";
            version = "2.2.0";
            src = fetchHex {
              pkg = "mockery";
              version = "2.2.0";
              sha256 =
                "103cd23789f97e607854c22b4b6b598e74753ec36278a767bdba5cfe32ec88c4";
            };

            meta = {
              description = ''Simple mocking library for asynchronous
                            testing.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/appunite/mockery";
            };
          } // packageOverrides)
      ) {};

    mockery = mockery_2_2_0;

    mockgyver_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eunit_addons_0_3_0,
          parse_trans_3_0_0
        }:
          buildRebar3 ({
            name = "mockgyver";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mockgyver";
              version = "1.0.0";
              sha256 =
                "bfc9da2f4f5c965de8505b52de03e7fee5340a77467467ca34513abbf22f5c79";
            };

            beamDeps  = [ eunit_addons_0_3_0 parse_trans_3_0_0 ];

            meta = {
              description = ''Mocking library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/klajo/mockgyver";
            };
          } // packageOverrides)
      ) {};

    mockgyver = mockgyver_1_0_0;

    mockingbird_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_2_0 }:
          buildMix ({
            name = "mockingbird";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mockingbird";
              version = "0.2.0";
              sha256 =
                "931ca762c84d627abc6158467abbb5cb70e52d396b0dcbb584b8959864c33dc9";
            };
            beamDeps  = [ httpoison_1_2_0 ];

            meta = {
              description = ''Mockingbird helps you create API consumers that
                            are easy to test.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Driftrock/mockingbird";
            };
          } // packageOverrides)
      ) {};

    mockingbird = mockingbird_0_2_0;

    mocky_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mocky";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mocky";
              version = "0.1.0";
              sha256 =
                "6146969cb1ba349de49b17204f45b7cba0dcef920d025ae1589339a6824e09a3";
            };

            meta = {
              description = ''Elixir mock library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffhsta/mocky";
            };
          } // packageOverrides)
      ) {};

    mocky = mocky_0_1_0;

    modbus_0_3_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "modbus";
            version = "0.3.7";
            src = fetchHex {
              pkg = "modbus";
              version = "0.3.7";
              sha256 =
                "df9bd4ff52cdac4b78cf425137bbfc438e2ad56b256c0c34da01f6ddf334f0ef";
            };

            meta = {
              description = ''Modbus library with TCP Master & Slave
                            implementation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/modbus/";
            };
          } // packageOverrides)
      ) {};

    modbus = modbus_0_3_7;

    modbus_tcp_server_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "modbus_tcp_server";
            version = "1.1.0";
            src = fetchHex {
              pkg = "modbus_tcp_server";
              version = "1.1.0";
              sha256 =
                "53e4b812497559ab6abf5c22c77636ff0b3f174c55251704f49621590a9b3903";
            };

            meta = {
              description = ''A Modbus TCP Server Implementation'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    modbus_tcp_server = modbus_tcp_server_1_1_0;

    modest_ex_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, nodex_0_1_1 }:
          buildMix ({
            name = "modest_ex";
            version = "1.0.4";
            src = fetchHex {
              pkg = "modest_ex";
              version = "1.0.4";
              sha256 =
                "b9fb0817ddbaac111776808ab6c71574dafd2283c0ae031338d2ca84f1065cae";
            };
            beamDeps  = [ nodex_0_1_1 ];

            meta = {
              longDescription = ''ModestEx - A library to do pipeable
                                transformations on html strings with CSS
                                selectors, e.g. find(), prepend(), append(),
                                replace() etc. Erlang/Elixir binding to
                                Alexander Borisov`s Modest. Binding implemented
                                as a C-Node based on the excellent example of
                                Lukas Rieder`s cnodex.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/f34nk/modest_ex";
            };
          } // packageOverrides)
      ) {};

    modest_ex = modest_ex_1_0_4;

    modglobal_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mox_0_3_2 }:
          buildMix ({
            name = "modglobal";
            version = "0.2.0";
            src = fetchHex {
              pkg = "modglobal";
              version = "0.2.0";
              sha256 =
                "ab14e9eef0989b60a10834d58a2789d8594842826be67d3214870f0f1a59cd82";
            };
            beamDeps  = [ mox_0_3_2 ];

            meta = {
              description = ''Simple stateful key-value store for modules'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AnilRedshift/modglobal";
            };
          } // packageOverrides)
      ) {};

    modglobal = modglobal_0_2_0;

    module_mocker_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "module_mocker";
            version = "0.2.0";
            src = fetchHex {
              pkg = "module_mocker";
              version = "0.2.0";
              sha256 =
                "ce8aa59f0c58ce7d333a1853f6a3a106fe0cbbe79f6f9aeb72370d66ed454f5b";
            };

            meta = {
              longDescription = ''ModuleMocker allows to use different module
                                in development and test environment. It allows
                                convention to mock module for test'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rohanpujaris/module_mocker";
            };
          } // packageOverrides)
      ) {};

    module_mocker = module_mocker_0_2_0;

    moebius_3_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_5_0,
          poison_3_0_0,
          poolboy_1_5_1,
          postgrex_0_13_5
        }:
          buildMix ({
            name = "moebius";
            version = "3.0.1";
            src = fetchHex {
              pkg = "moebius";
              version = "3.0.1";
              sha256 =
                "f9c84ebc8efb864268ad7a0d8de70c577bc7a7f5bd987765d1fccc7d03767dd0";
            };
            beamDeps  = [
                          inflex_1_5_0
                          poison_3_0_0
                          poolboy_1_5_1
                          postgrex_0_13_5
                        ];

            meta = {
              description = ''A functional approach to data access with
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/robconery/moebius";
            };
          } // packageOverrides)
      ) {};

    moebius = moebius_3_0_1;

    mogrify_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mogrify";
            version = "0.5.4";
            src = fetchHex {
              pkg = "mogrify";
              version = "0.5.4";
              sha256 =
                "d3a91bd0041a4ea83443f7c1537aeb6dd3edcc27207a9f796e72a20508828fc4";
            };

            meta = {
              description = ''ImageMagick command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/route/mogrify";
            };
          } // packageOverrides)
      ) {};

    mogrify_0_5_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mogrify";
            version = "0.5.6";
            src = fetchHex {
              pkg = "mogrify";
              version = "0.5.6";
              sha256 =
                "68636c4f736872b2aa7b176f7820b8fe59ee2a11db688cf845410ce1a0260ab3";
            };

            meta = {
              description = ''ImageMagick command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/route/mogrify";
            };
          } // packageOverrides)
      ) {};

    mogrify_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mogrify";
            version = "0.6.1";
            src = fetchHex {
              pkg = "mogrify";
              version = "0.6.1";
              sha256 =
                "3bc928d817974fa10cc11e6c89b9a9361e37e96dbbf3d868c41094ec05745dcd";
            };

            meta = {
              description = ''ImageMagick command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/route/mogrify";
            };
          } // packageOverrides)
      ) {};

    mogrify = mogrify_0_6_1;

    mogrify_draw_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mogrify_0_5_6 }:
          buildMix ({
            name = "mogrify_draw";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mogrify_draw";
              version = "0.1.1";
              sha256 =
                "3f2e05b6cfa8cdef027bbf3ba14a36253694bac7322a0109b5af019b00665238";
            };
            beamDeps  = [ mogrify_0_5_6 ];

            meta = {
              description = ''A wrapper of the imagemagick draw functionality
                            on top of mogrify'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zamith/mogrify_draw";
            };
          } // packageOverrides)
      ) {};

    mogrify_draw = mogrify_draw_0_1_1;

    moip_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "moip";
            version = "0.4.0";
            src = fetchHex {
              pkg = "moip";
              version = "0.4.0";
              sha256 =
                "ec90f841322fcc18dc2ba11f4daff785b8238ca341e757e30e006214ef05aa55";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 secure_random_0_5_1
                      ];

            meta = {
              description = ''Moip Elixir SDK'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/frederico/moip-sdk-elixir";
            };
          } // packageOverrides)
      ) {};

    moip = moip_0_4_0;

    molliex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "molliex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "molliex";
              version = "0.1.0";
              sha256 =
                "34e15112b3b5ee98008238102f8d4678230d127070000e6940223e6b4221c002";
            };

            meta = {
              description = ''Placeholder for Mollie Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/uberous/molliex";
            };
          } // packageOverrides)
      ) {};

    molliex = molliex_0_1_0;

    mom_0_5_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "mom";
            version = "0.5.3";
            src = fetchHex {
              pkg = "mom";
              version = "0.5.3";
              sha256 =
                "de8e8bfb218beea9619abddfee665890e1904f0a3b5e87b6e89496c35ad590e0";
            };
            beamDeps  = [ poison_3_1_0 uuid_1_1_8 ];

            meta = {
              description = ''Message Oriented Middleware for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/serverboards/elixir-mom";
            };
          } // packageOverrides)
      ) {};

    mom = mom_0_5_3;

    moment_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moment";
            version = "0.1.0";
            src = fetchHex {
              pkg = "moment";
              version = "0.1.0";
              sha256 =
                "0cc098c8ba88f768ffd41e4bc4bb45b559d49361a2f8f7a39c686020da3f1842";
            };

            meta = {
              description = ''Parse, validate, manipulate, and display dates in
                            Elixir.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/atabary/moment";
            };
          } // packageOverrides)
      ) {};

    moment = moment_0_1_0;

    momento_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "momento";
            version = "0.1.2";
            src = fetchHex {
              pkg = "momento";
              version = "0.1.2";
              sha256 =
                "31380b7d9f17c8ebb51b274526fedb61d6c220e6e4d6ebe9bdd8bcaa3586677e";
            };

            meta = {
              longDescription = ''Momento is an Elixir port of Moment.js for
                                the purpose of parsing, validating,
                                manipulating, and formatting dates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mathewdgardner/momento";
            };
          } // packageOverrides)
      ) {};

    momento = momento_0_1_2;

    mon_handler_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mon_handler";
            version = "1.0.3";
            src = fetchHex {
              pkg = "mon_handler";
              version = "1.0.3";
              sha256 =
                "3588b49bfd95633c147b9f6edcf915b075e766ed818522fb45eeef664ecaa963";
            };

            meta = {
              longDescription = ''A minimal GenServer that monitors a given
                                GenEvent handler. This server will handle exits
                                of the Handler and attempt to re-add it to the
                                manager when unexpected exits occur. Exits for
                                :normal, :shutdown or :swapped reasons will not
                                attempt a re-add to the manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tattdcodemonkey/mon_handler";
            };
          } // packageOverrides)
      ) {};

    mon_handler = mon_handler_1_0_3;

    monadex_1_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "monadex";
            version = "1.1.3";
            src = fetchHex {
              pkg = "monadex";
              version = "1.1.3";
              sha256 =
                "e1821a1ab179aec4a5cdcbafa88b400933f3e46510ed2fd331ae46e961ef7c79";
            };

            meta = {
              description = ''Improve pipelines with monads.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rob-brown/MonadEx";
            };
          } // packageOverrides)
      ) {};

    monadex = monadex_1_1_3;

    moneris_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_0_0,
          secure_random_0_5_1,
          sweet_xml_0_6_5,
          uuid_1_1_8,
          xml_builder_2_1_0
        }:
          buildMix ({
            name = "moneris";
            version = "0.2.1";
            src = fetchHex {
              pkg = "moneris";
              version = "0.2.1";
              sha256 =
                "12ef9111cabc8fcd86376c2544c9f6ccc15e0b9418fcfe0240ee873cb3780869";
            };
            beamDeps  = [
                          httpoison_1_0_0
                          secure_random_0_5_1
                          sweet_xml_0_6_5
                          uuid_1_1_8
                          xml_builder_2_1_0
                        ];

            meta = {
              description = ''Unofficial Elixir client for processing payments
                            through Moneris eSELECT+.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SoundPays/moneris-elixir";
            };
          } // packageOverrides)
      ) {};

    moneris = moneris_0_2_1;

    monero_0_10_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          httpdigest_0_0_3,
          jsx_2_9_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "monero";
            version = "0.10.0";
            src = fetchHex {
              pkg = "monero";
              version = "0.10.0";
              sha256 =
                "87b1d1f06775eb222ef666126b3158e7d0c18bc0cc1e73bf7976b7632938b392";
            };
            beamDeps  = [
                          hackney_1_13_0 httpdigest_0_0_3 jsx_2_9_0 poison_3_1_0
                        ];

            meta = {
              description = ''Monero API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/libra-ventures/monero";
            };
          } // packageOverrides)
      ) {};

    monero = monero_0_10_0;

    monex_0_1_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "monex";
            version = "0.1.10";
            src = fetchHex {
              pkg = "monex";
              version = "0.1.10";
              sha256 =
                "a1576a201050ce0453565b392d9f3dc09889f8a4e58fdb21954dddeb76d14fb0";
            };

            meta = {
              description = ''Monadic types collection Currently implemented: *
                            Option * Result'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/youroff/monex";
            };
          } // packageOverrides)
      ) {};

    monex = monex_0_1_10;

    moneyex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moneyex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "moneyex";
              version = "0.1.1";
              sha256 =
                "bbaa9ead237a63c88e27997916e617bfb1fc2bc7adba4eecd15dd7ed62ce5fae";
            };

            meta = {
              description = ''A library for working with money in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alvarolizama/moneyex";
            };
          } // packageOverrides)
      ) {};

    moneyex = moneyex_0_1_1;

    mongodb_0_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_3
        }:
          buildMix ({
            name = "mongodb";
            version = "0.4.2";
            src = fetchHex {
              pkg = "mongodb";
              version = "0.4.2";
              sha256 =
                "6b5eae2109a815a66963ffd77202b7396e55f9238b5cecc1a0595b93e3070509";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_3 ];

            meta = {
              description = ''MongoDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ankhers/mongodb";
            };
          } // packageOverrides)
      ) {};

    mongodb_0_4_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_3
        }:
          buildMix ({
            name = "mongodb";
            version = "0.4.6";
            src = fetchHex {
              pkg = "mongodb";
              version = "0.4.6";
              sha256 =
                "593789880ef9ed9f1aacbdd2e381db2547e6479c9b1d611a9e496cdcc9de1e75";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_3 ];

            meta = {
              description = ''MongoDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ankhers/mongodb";
            };
          } // packageOverrides)
      ) {};

    mongodb = mongodb_0_4_6;

    mongoman_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "mongoman";
            version = "0.3.6";
            src = fetchHex {
              pkg = "mongoman";
              version = "0.3.6";
              sha256 =
                "54cd5c5a892945f1078f16956b21d76ec8bf47d3d031c832ee9d7a2dd18f14e5";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Configures and starts local or distributed
                            MongoDB clusters'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vertify/mongoman";
            };
          } // packageOverrides)
      ) {};

    mongoman = mongoman_0_3_6;

    mongooseice_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_2_0_1,
          jerboa_0_3_0,
          mix_docker_0_4_1
        }:
          buildMix ({
            name = "mongooseice";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mongooseice";
              version = "0.4.0";
              sha256 =
                "4c1a1cf3080754f1e1e849e0802e23d3bd67de553d51a676f835f1a15fdd701a";
            };
            beamDeps  = [ confex_2_0_1 jerboa_0_3_0 mix_docker_0_4_1 ];

            meta = {
              description = ''STUN/TURN server'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/mongooseice";
            };
          } // packageOverrides)
      ) {};

    mongooseice = mongooseice_0_4_0;

    mongox_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "mongox";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mongox";
              version = "0.2.0";
              sha256 =
                "be17dc310ba225dc1470b62f71065f2e7298c7ad498341e49f54ed05ffe2cc34";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 ];

            meta = {
              description = ''MongoDB driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/emerleite/mongox";
            };
          } // packageOverrides)
      ) {};

    mongox = mongox_0_2_0;

    monk_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "monk";
            version = "0.1.3";
            src = fetchHex {
              pkg = "monk";
              version = "0.1.3";
              sha256 =
                "35e6a2eea7090612fa25a003fb95ac120f27087f203445bbc33ac18682ddd724";
            };

            meta = {
              description = ''Monk helps to distinguish good from evil with an
                            simple ok/error monad'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/monk";
            };
          } // packageOverrides)
      ) {};

    monk = monk_0_1_3;

    moonsugar_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moonsugar";
            version = "0.1.2";
            src = fetchHex {
              pkg = "moonsugar";
              version = "0.1.2";
              sha256 =
                "570fcb52e628286670bd353bf3f363d81e99712b56b2db32ff59343b241ef892";
            };

            meta = {
              description = ''Addictive utility functions for elixir style data
                            structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bcoop713/moonsugar";
            };
          } // packageOverrides)
      ) {};

    moonsugar = moonsugar_0_1_2;

    mopidy_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "mopidy";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mopidy";
              version = "0.3.0";
              sha256 =
                "5a5d5068d47d42aa950298e515dbe410b58eeecda921604a318523f43c376198";
            };
            beamDeps  = [ httpotion_3_0_3 poison_2_2_0 ];

            meta = {
              description = ''A Mopidy client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trestrantham/mopidy";
            };
          } // packageOverrides)
      ) {};

    mopidy = mopidy_0_3_0;

    morph_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "morph";
            version = "0.1.0";
            src = fetchHex {
              pkg = "morph";
              version = "0.1.0";
              sha256 =
                "a20a6bfda56cb8f2d9904e2ea4b2b0a4159ab2692181919f6eb4fe9f52abf3f2";
            };

            meta = {
              description = ''Lightweight string transformations for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cmoncrief/elixir-morph";
            };
          } // packageOverrides)
      ) {};

    morph = morph_0_1_0;

    morphix_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "morphix";
            version = "0.3.0";
            src = fetchHex {
              pkg = "morphix";
              version = "0.3.0";
              sha256 =
                "ec49744f4f7ce55ab92602e2f9eb9608d21fb36fadbbe0c6c2cbda38cda21bfb";
            };

            meta = {
              longDescription = ''Morphix is a small package of convenience
                                methods for working with Maps, Tuples, and
                                Lists.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philosodad/morphix.git";
            };
          } // packageOverrides)
      ) {};

    morphix = morphix_0_3_0;

    morse_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "morse";
            version = "1.0.1";
            src = fetchHex {
              pkg = "morse";
              version = "1.0.1";
              sha256 =
                "42f8a1cc1817003de0e003dbb57813cb479f0d74d9354ade82463d17dc1bc10e";
            };

            meta = {
              description = ''Morse code encoder and decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/morse";
            };
          } // packageOverrides)
      ) {};

    morse = morse_1_0_1;

    mortgage_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mortgage";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mortgage";
              version = "0.0.2";
              sha256 =
                "fbd6e7dcf2d8213b4b1ab3b00904482a6aadf32625245bdc02eb76b7cd265173";
            };

            meta = {
              description = ''A set of functions for working with mortgages and
                            mortgage notes.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/geolessel/mortgage";
            };
          } // packageOverrides)
      ) {};

    mortgage = mortgage_0_0_2;

    movi_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_1_0_0
        }:
          buildMix ({
            name = "movi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "movi";
              version = "0.1.1";
              sha256 =
                "9816a9d9f066ef55b6cacc73c37efe3054a764fd9dda6e3fd730c19f08476149";
            };
            beamDeps  = [ nerves_uart_1_0_0 ];

            meta = {
              description = ''A library for communicating with the Audeme
                            MOVI™ Voice Control Shield'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/movi";
            };
          } // packageOverrides)
      ) {};

    movi = movi_0_1_1;

    mox_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mox";
            version = "0.3.2";
            src = fetchHex {
              pkg = "mox";
              version = "0.3.2";
              sha256 =
                "3f8cb22d0d3722d0d5c45eafa30a99f0fa4f8624350d06c26048b5332c585683";
            };

            meta = {
              description = ''Mocks and explicit contracts for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/plataformatec/mox";
            };
          } // packageOverrides)
      ) {};

    mox_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mox";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mox";
              version = "0.4.0";
              sha256 =
                "64fca8aca4699cc1acf7db19237ce781cfa46683082a440e9f4e1ac29e290d89";
            };

            meta = {
              description = ''Mocks and explicit contracts for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/plataformatec/mox";
            };
          } // packageOverrides)
      ) {};

    mox = mox_0_4_0;

    moxie_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moxie";
            version = "0.0.1";
            src = fetchHex {
              pkg = "moxie";
              version = "0.0.1";
              sha256 =
                "193e18ce0888f01fe2b43d0dcf79af5f48e50eba3a73609703cb4c04bea2ae46";
            };

            meta = {
               license = stdenv.lib.licenses.free;
              homepage = "https://github.com/molossus/moxie";
            };
          } // packageOverrides)
      ) {};

    moxie = moxie_0_0_1;

    mpgit_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_5_1 }:
          buildRebar3 ({
            name = "mpgit";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mpgit";
              version = "0.1.1";
              sha256 =
                "99daa1bb4389db26bc1c9e2c8377a4086510a87d682f45632ccb63d80d26cc39";
            };

            beamDeps  = [ lager_3_5_1 ];

            meta = {
              description = ''A library for git commands.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mptnt1988/mpgit";
            };
          } // packageOverrides)
      ) {};

    mpgit = mpgit_0_1_1;

    mpinyin_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mpinyin";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mpinyin";
              version = "0.0.2";
              sha256 =
                "1de0911391e6a76a91166f5210d4254165692ea28c00d4f153763d0a5757cb92";
            };

            meta = {
              description = ''Pinyin module for Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hor/mpinyin";
            };
          } // packageOverrides)
      ) {};

    mpinyin = mpinyin_0_0_2;

    mpx_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mpx";
            version = "0.2.2";
            src = fetchHex {
              pkg = "mpx";
              version = "0.2.2";
              sha256 =
                "2beacad4a2f61893b4c57cb65691acd881469b68cacea037a4bee414f96ecba3";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Interact with Ministry Platform`s Rest API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/crdschurch/mpx";
            };
          } // packageOverrides)
      ) {};

    mpx = mpx_0_2_2;

    mqtt_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mqtt";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mqtt";
              version = "0.3.0";
              sha256 =
                "3fc572612ec676e70d84f2c1ce172148576c01d338f97183a0ea0bdc69ec5b16";
            };

            meta = {
              description = ''Erlang/Elixir low level MQTT protocol
                            implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kopera/erlang-mqtt";
            };
          } // packageOverrides)
      ) {};

    mqtt = mqtt_0_3_0;

    mqtt_matcher_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mqtt_matcher";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mqtt_matcher";
              version = "0.1.0";
              sha256 =
                "07d81b6c789b0c2d11412984d9367ee6bad52a1a996ccbb9b209cf7205890bdd";
            };

            meta = {
              description = ''Elixir macro for matching mqtt topics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timbuchwaldt/mqtt_matcher";
            };
          } // packageOverrides)
      ) {};

    mqtt_matcher = mqtt_matcher_0_1_0;

    mqtt_packet_map_1_0_0_alpha3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mqtt_packet_map";
            version = "1.0.0-alpha3";
            src = fetchHex {
              pkg = "mqtt_packet_map";
              version = "1.0.0-alpha3";
              sha256 =
                "0ad6fc4ecf34dc55c93df14f859ac737f140bdef49799fa61d0cdbf3ff2694aa";
            };

            meta = {
              description = ''MQTT v5 packet encoder and decoder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zotonic/mqtt_packet_map";
            };
          } // packageOverrides)
      ) {};

    mqtt_packet_map = mqtt_packet_map_1_0_0_alpha3;

    mr_t_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exfswatch_0_2_1 }:
          buildMix ({
            name = "mr_t";
            version = "0.6.0";
            src = fetchHex {
              pkg = "mr_t";
              version = "0.6.0";
              sha256 =
                "daff99c127ef18ec7687b66978c0a81cd602356d9cbc9f62e8095060f15419c5";
            };
            beamDeps  = [ exfswatch_0_2_1 ];

            meta = {
              description = ''Instant code-reloader and test runner for Elixir
                            in one package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/mr_t";
            };
          } // packageOverrides)
      ) {};

    mr_t = mr_t_0_6_0;

    msgpack_0_3_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "msgpack";
            version = "0.3.5";
            src = fetchHex {
              pkg = "msgpack";
              version = "0.3.5";
              sha256 =
                "7985c0d666853ee553210329e76c3a356d18a7990b5c1f412da0b68100fc1b23";
            };

            meta = {
              description = ''MessagePack serializer/deserializer'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "http://msgpack.org";
            };
          } // packageOverrides)
      ) {};

    msgpack_0_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "msgpack";
            version = "0.6.0";
            src = fetchHex {
              pkg = "msgpack";
              version = "0.6.0";
              sha256 =
                "07d0fdab2f3874fc1a4e41259aff98cc52dac6011e327cf181a07a584f2e4084";
            };

            meta = {
              description = ''MessagePack serializer/deserializer'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "http://msgpack.org";
            };
          } // packageOverrides)
      ) {};

    msgpack_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "msgpack";
            version = "0.7.0";
            src = fetchHex {
              pkg = "msgpack";
              version = "0.7.0";
              sha256 =
                "4649353da003e6f438d105e4b1e0f17757f6f5ec8687a6f30875ff3ac4ce2a51";
            };

            meta = {
              description = ''MessagePack serializer/deserializer'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "http://msgpack.org";
            };
          } // packageOverrides)
      ) {};

    msgpack = msgpack_0_7_0;

    msgpack_rpc_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, msgpax_0_8_2 }:
          buildMix ({
            name = "msgpack_rpc";
            version = "0.1.2";
            src = fetchHex {
              pkg = "msgpack_rpc";
              version = "0.1.2";
              sha256 =
                "34eff7cf53f08141d52fd3d4b8446c3bf620f11ddf82e45d2aea3ce5df4ad4fb";
            };
            beamDeps  = [ msgpax_0_8_2 ];

            meta = {
              description = ''Tiny STDIO port wrapper for Msgpax RPC'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dm1try/msgpack_rpc";
            };
          } // packageOverrides)
      ) {};

    msgpack_rpc = msgpack_rpc_0_1_2;

    msgpax_0_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "msgpax";
            version = "0.8.1";
            src = fetchHex {
              pkg = "msgpax";
              version = "0.8.1";
              sha256 =
                "7a7c8c037660e282933f5c8f9d58f119171910832e314c6d240526ac8ca1bc5c";
            };

            meta = {
              longDescription = ''This library provides an API for serializing
                                and de-serializing Elixir terms using the
                                MessagePack format.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/msgpax";
            };
          } // packageOverrides)
      ) {};

    msgpax_0_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "msgpax";
            version = "0.8.2";
            src = fetchHex {
              pkg = "msgpax";
              version = "0.8.2";
              sha256 =
                "aa0baa382383160d90275a1b5d8f72c457a2feed89cbb1bd080a5c3821389507";
            };

            meta = {
              longDescription = ''This library provides an API for serializing
                                and de-serializing Elixir terms using the
                                MessagePack format.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/msgpax";
            };
          } // packageOverrides)
      ) {};

    mson_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_5 }:
          buildMix ({
            name = "mson";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mson";
              version = "0.1.0";
              sha256 =
                "b96aaa825b091cf95410ec729cce67ac5a2b333579e9e341e36de2e6a00f9c4d";
            };
            beamDeps  = [ earmark_1_2_5 ];

            meta = {
              description = ''Define your structs in Markdown together with
                            documentation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tverlaan/mson";
            };
          } // packageOverrides)
      ) {};

    mson = mson_0_1_0;

    mssqlex_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_3,
          decimal_1_5_0
        }:
          buildMix ({
            name = "mssqlex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "mssqlex";
              version = "1.1.0";
              sha256 =
                "55e1ecfc27435f0280684197602295c4a395cd96c0d42b5096a076d4394088f8";
            };
            beamDeps  = [ db_connection_1_1_3 decimal_1_5_0 ];

            meta = {
              description = ''Adapter to Microsoft SQL Server. Using
                            DBConnection and ODBC.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast-oss/mssqlex";
            };
          } // packageOverrides)
      ) {};

    mssqlex = mssqlex_1_1_0;

    mtg_sdk_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mtg_sdk_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mtg_sdk_ex";
              version = "0.1.0";
              sha256 =
                "2d9a2562281098d5186b2029c68d40189437bdd9554a181a188831b04a4ff441";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              longDescription = ''This is the Magic: The Gathering SDK Elixir
                                implementation. It is a wrapper around the MTG
                                API of magicthegathering.io.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/gheidorn/mtg_sdk_ex";
            };
          } // packageOverrides)
      ) {};

    mtg_sdk_ex = mtg_sdk_ex_0_1_0;

    mtproto_57_3_2_beta = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          tl_23_0_0_beta
        }:
          buildMix ({
            name = "mtproto";
            version = "57.3.2-beta";
            src = fetchHex {
              pkg = "mtproto";
              version = "57.3.2-beta";
              sha256 =
                "d1b6ffa7d911d6caa2e5d2e0d91b815c89658a7c36e63334c366cf3738157725";
            };
            beamDeps  = [ connection_1_0_4 tl_23_0_0_beta ];

            meta = {
              description = ''MTProto transport for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ccsteam/mtproto";
            };
          } // packageOverrides)
      ) {};

    mtproto = mtproto_57_3_2_beta;

    mtx_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mtx";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mtx";
              version = "1.0.0";
              sha256 =
                "3bdcb209fe3cdfc5a6b5b95f619ecd123b7ee1d9203ace2178c8ff73be5bb90f";
            };

            meta = {
              description = ''Metrics Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/mtx";
            };
          } // packageOverrides)
      ) {};

    mtx = mtx_1_0_0;

    multidef_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "multidef";
            version = "0.2.1";
            src = fetchHex {
              pkg = "multidef";
              version = "0.2.1";
              sha256 =
                "719dfdb9206ea34fc7b49c282b30adab752f9d1efb22678907d54fa0b54c50c6";
            };

            meta = {
              longDescription = ''Lets you define multiple heads for the same
                                function: defmodule Test do import MultiDef mdef
                                fred do { :init, val } -> fred {:double, val} {
                                :double, val } -> IO.puts(val*2) a, b -> a+b end
                                end IO.inspect Test.fred 1, 2 #=> 3 IO.inspect
                                Test.fred { :init, 4 } #=> 8 '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/mdef";
            };
          } // packageOverrides)
      ) {};

    multidef = multidef_0_2_1;

    multipartable_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "multipartable";
            version = "0.1.0";
            src = fetchHex {
              pkg = "multipartable";
              version = "0.1.0";
              sha256 =
                "75afb8341c2c51ac24bf6cf8eef4260fd1b22382fbf3815523f6267a363f439b";
            };

            meta = {
              description = ''Build a simple or nested multipart form body'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peiyee/elixir-multipartable";
            };
          } // packageOverrides)
      ) {};

    multipartable = multipartable_0_1_0;

    multipass_ex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jason_1_1_1 }:
          buildMix ({
            name = "multipass_ex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "multipass_ex";
              version = "0.1.2";
              sha256 =
                "b5324c3d68507c67f35da39ccfca6bc4a7ac97b5a82e2da3ed63cd95fa4d9e2a";
            };
            beamDeps  = [ jason_1_1_1 ];

            meta = {
              description = ''Ruby compatible multipass encryption and
                            decryption'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/activeprospect/multipass_ex";
            };
          } // packageOverrides)
      ) {};

    multipass_ex = multipass_ex_0_1_2;

    multiset_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "multiset";
            version = "0.0.4";
            src = fetchHex {
              pkg = "multiset";
              version = "0.0.4";
              sha256 =
                "f713b5102d17963fc516e0017725d716dade0b1fec979f0e3a53b8d203748c45";
            };

            meta = {
              description = ''Multisets for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hilverd/multiset-elixir";
            };
          } // packageOverrides)
      ) {};

    multiset = multiset_0_0_4;

    multitask_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "multitask";
            version = "0.1.0";
            src = fetchHex {
              pkg = "multitask";
              version = "0.1.0";
              sha256 =
                "149f0f0f643e7c610a0fdb3f11f2c1351578fca0d39ddf919b2b7b1f9149e969";
            };

            meta = {
              longDescription = ''Multitasks are processes meant to execute
                                several functions asynchronously, and collect
                                their return values when they are done
                                processing or the error of the first failure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fertapric/multitask";
            };
          } // packageOverrides)
      ) {};

    multitask = multitask_0_1_0;

    mundane_elements_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mundane_elements";
            version = "0.1.2";
            src = fetchHex {
              pkg = "mundane_elements";
              version = "0.1.2";
              sha256 =
                "6fb5ea676a949cc066745c55ce4811201aef8afb5aa6eca67cfc7a7232728b93";
            };

            meta = {
              longDescription = ''Mundane Elements is a system for checking the
                                filetype of a given file using so-called Magic
                                Bytes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bermannoah/mundane_elements";
            };
          } // packageOverrides)
      ) {};

    mundane_elements = mundane_elements_0_1_2;

    muontrap_0_3_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "muontrap";
            version = "0.3.1";
            src = fetchHex {
              pkg = "muontrap";
              version = "0.3.1";
              sha256 =
                "72c7d6847ffd7237099fb30cb5282a1f85fc24b60e5e135acb1b1302a9b289ca";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Keep your ports contained'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/muontrap";
            };
          } // packageOverrides)
      ) {};

    muontrap = muontrap_0_3_1;

    murk_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "murk";
            version = "0.5.1";
            src = fetchHex {
              pkg = "murk";
              version = "0.5.1";
              sha256 =
                "74e4c41b52938759a45926c5f1853242fb6c49985c20b210d6dfe54f917c3347";
            };

            meta = {
              description = ''Murk is an Elixir data type validation
                            library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/kwrooijen/murk";
            };
          } // packageOverrides)
      ) {};

    murk = murk_0_5_1;

    murmur_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "murmur";
            version = "0.2.1";
            src = fetchHex {
              pkg = "murmur";
              version = "0.2.1";
              sha256 =
                "7e38b2f136d4e8039abb88f6cbdf50c939408d3819be4b18b639a968ee9c2bce";
            };

            meta = {
              longDescription = ''Murmur is a pure Elixir implementation of the
                                non-cryptographic hash Murmur3. It aims to
                                implement the x86_32bit, x86_128bit and
                                x64_128bit variants.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/murmur";
            };
          } // packageOverrides)
      ) {};

    murmur_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "murmur";
            version = "1.0.1";
            src = fetchHex {
              pkg = "murmur";
              version = "1.0.1";
              sha256 =
                "1303e80b1a5514a8afe0baf4241903ae31e3ba8b7e9e7c2219a668c065a691a6";
            };

            meta = {
              longDescription = ''Murmur is a pure Elixir implementation of the
                                non-cryptographic hash Murmur3. It aims to
                                implement the x86_32bit, x86_128bit and
                                x64_128bit variants.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/murmur";
            };
          } // packageOverrides)
      ) {};

    murmur = murmur_1_0_1;

    musical_elements_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          id3v2_0_1_3,
          mundane_elements_0_1_2
        }:
          buildMix ({
            name = "musical_elements";
            version = "0.0.1";
            src = fetchHex {
              pkg = "musical_elements";
              version = "0.0.1";
              sha256 =
                "9e4e79bd28b12a2f46df1a0056f8bada46646082d2961c27bb160caa05b41704";
            };
            beamDeps  = [ id3v2_0_1_3 mundane_elements_0_1_2 ];

            meta = {
              longDescription = ''An early stage - use at your own risk -
                                module designed to make it easy to grab metadata
                                from both id3v1 and id3v2 mp3s.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bermannoah/musical_elements";
            };
          } // packageOverrides)
      ) {};

    musical_elements = musical_elements_0_0_1;

    mustache_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mustache";
            version = "0.3.1";
            src = fetchHex {
              pkg = "mustache";
              version = "0.3.1";
              sha256 =
                "8dc92b9b92a0d7449628f4fc981f8018a16a5b8c9907249e59db461482dac143";
            };

            meta = {
              description = ''Mustache templates for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schultyy/Mustache.ex";
            };
          } // packageOverrides)
      ) {};

    mustache = mustache_0_3_1;

    mustache_util_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mustache_util";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mustache_util";
              version = "0.1.0";
              sha256 =
                "7bb959e02327750faadd7b043c8be88e6ab51b413a7bddf2c1c81f91aa3a6214";
            };

            meta = {
              description = ''Mustache for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dev800/mustache_util";
            };
          } // packageOverrides)
      ) {};

    mustache_util = mustache_util_0_1_0;

    mutable_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mutable";
            version = "1.0.3";
            src = fetchHex {
              pkg = "mutable";
              version = "1.0.3";
              sha256 =
                "5f74d79506676e210c41bcf96b658ca73399f8dfebc012fe9dfbfa75fb01b6de";
            };

            meta = {
              description = ''An elixir library that temporarily generates side
                            effects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/melpon/mutable";
            };
          } // packageOverrides)
      ) {};

    mutable = mutable_1_0_3;

    mutant_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mutant";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mutant";
              version = "0.0.3";
              sha256 =
                "25586e3ae1d61e969350154a7c788f8a25234176cb4e2fe6fae8d92771c9f0e6";
            };

            meta = {
              description = ''Now you can create mutable structs, use this with
                            care and only as a last resort'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrkaspa/Mutant";
            };
          } // packageOverrides)
      ) {};

    mutant = mutant_0_0_3;

    mutation_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mutation";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mutation";
              version = "0.1.0";
              sha256 =
                "811a0590dc1eda89fd047097d3b237233935c31e7e6d40fdc5bc5ac96c90fd2a";
            };

            meta = {
              description = ''Mutation testing for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jordipolo/mutation";
            };
          } // packageOverrides)
      ) {};

    mutation = mutation_0_1_0;

    mutex_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mutex";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mutex";
              version = "1.0.2";
              sha256 =
                "914b308c9362db25b1cc83031591aeee983e89cdcfc32bd9fe6b15b418c997d9";
            };

            meta = {
              longDescription = ''This package implements a simple mutex as a
                                GenServer. It allows to await locked keys and
                                handles locking multiple keys without
                                deadlocks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/mutex";
            };
          } // packageOverrides)
      ) {};

    mutex = mutex_1_0_2;

    mux_1_0_0_beta_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jason_1_1_1,
          tesla_1_0_0
        }:
          buildMix ({
            name = "mux";
            version = "1.0.0-beta.0";
            src = fetchHex {
              pkg = "mux";
              version = "1.0.0-beta.0";
              sha256 =
                "c699049fb9ff32b914c38bbb8c1856010202409ed1dae1989e94d34ea7139d53";
            };
            beamDeps  = [ jason_1_1_1 tesla_1_0_0 ];

            meta = {
              description = ''Official Elixir package for interacting with the
                            Mux APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/muxinc/mux-elixir";
            };
          } // packageOverrides)
      ) {};

    mux = mux_1_0_0_beta_0;

    mx_tool_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mx_tool";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mx_tool";
              version = "0.1.0";
              sha256 =
                "8406504ec7ab312611357a56e0f26b2b53beb57dd2215834487d3581e42cdafa";
            };

            meta = {
              description = ''Find the mail exchanger for a given hostname.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/mx_tool";
            };
          } // packageOverrides)
      ) {};

    mx_tool = mx_tool_0_1_0;

    my_arangoex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_0_2,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "my_arangoex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "my_arangoex";
              version = "0.1.0";
              sha256 =
                "959fc0681d98ba9e2388a214b69b0add7a1e5a2198d49b07626e8984d1b332f8";
            };
            beamDeps  = [ exconstructor_1_0_2 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir driver for ArangoDB, version published
                            by mpoeter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpoeter/my_arangoex";
            };
          } // packageOverrides)
      ) {};

    my_arangoex = my_arangoex_0_1_0;

    my_sensors_0_1_0_rc2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          faker_0_10_0,
          nerves_uart_1_0_0
        }:
          buildMix ({
            name = "my_sensors";
            version = "0.1.0-rc2";
            src = fetchHex {
              pkg = "my_sensors";
              version = "0.1.0-rc2";
              sha256 =
                "0fd03b7a95558d0c5493a719a92bca52b5f5e44f8da1509e18446f6115fbe9b2";
            };
            beamDeps  = [ faker_0_10_0 nerves_uart_1_0_0 ];

            meta = {
              longDescription = ''MySensors is an open source hardware and
                                software community focusing on do-it-yourself
                                home automation and Internet of Things.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/connorrigby/my_sensors";
            };
          } // packageOverrides)
      ) {};

    my_sensors = my_sensors_0_1_0_rc2;

    my_sensors_mysgw_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_make_0_4_2,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "my_sensors_mysgw";
            version = "0.1.0";
            src = fetchHex {
              pkg = "my_sensors_mysgw";
              version = "0.1.0";
              sha256 =
                "eb5a37c3c70070fe2400f1868c88ec90d6cdbac883ba4310cc934488a7ec42a0";
            };
            beamDeps  = [ elixir_make_0_4_2 ex_doc_0_18_3 ];

            meta = {
              description = ''Elixir wrapper around
                            [MySensors](https://github.com/mysensors/MySensors)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/connorrigby/my_sensors";
            };
          } // packageOverrides)
      ) {};

    my_sensors_mysgw = my_sensors_mysgw_0_1_0;

    my_sports_feeds_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "my_sports_feeds";
            version = "0.1.2";
            src = fetchHex {
              pkg = "my_sports_feeds";
              version = "0.1.2";
              sha256 =
                "706e9472ed830eccf41d3eec9c959236b2f31bc6ad66945d1a20f0f221639bd6";
            };
            beamDeps  = [ cachex_2_1_0 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A HTTP API wrapper for mysportsfeeds.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dustinsmith1024/my_sports_feeds";
            };
          } // packageOverrides)
      ) {};

    my_sports_feeds = my_sports_feeds_0_1_2;

    myhtmlex_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, nodex_0_1_1 }:
          buildMix ({
            name = "myhtmlex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "myhtmlex";
              version = "0.2.1";
              sha256 =
                "1c22e79731cc492365279d111fcaf7f4f17ca845d2b9660d2285b91c56cbd1c2";
            };
            beamDeps  = [ nodex_0_1_1 ];

            meta = {
              longDescription = ''A module to decode HTML into a tree, porting
                                all properties of the underlying library myhtml,
                                being fast and correct in regards to the html
                                spec.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Overbryd/myhtmlex";
            };
          } // packageOverrides)
      ) {};

    myhtmlex = myhtmlex_0_2_1;

    mysql_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mysql";
            version = "1.3.1";
            src = fetchHex {
              pkg = "mysql";
              version = "1.3.1";
              sha256 =
                "c8a37ee15b971f2e38ea0db5df0f39368420f54f9453e30c8e3a6f2436e9a4d8";
            };

            meta = {
              description = ''MySQL/OTP – MySQL driver for Erlang/OTP'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/mysql-otp/mysql-otp";
            };
          } // packageOverrides)
      ) {};

    mysql = mysql_1_3_1;

    mysqlex_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mysql_1_3_1 }:
          buildMix ({
            name = "mysqlex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mysqlex";
              version = "0.0.2";
              sha256 =
                "e6d721d3571ce2c994b780524290aa7f2efce7995b4b0e84d5886110daff7d21";
            };
            beamDeps  = [ mysql_1_3_1 ];

            meta = {
              longDescription = ''An Ecto-compatible wrapper around the
                                mysql-otp library.
                                https://github.com/mysql-otp/mysql-otp'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tjheeta/mysqlex";
            };
          } // packageOverrides)
      ) {};

    mysqlex = mysqlex_0_0_2;

    mysqlex_pool_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mysqlex_0_0_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "mysqlex_pool";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mysqlex_pool";
              version = "0.2.1";
              sha256 =
                "2822c9dfc30db8e04ef6c961aa0a111dea3e4cf42a4b2ec299a8528ec69527dd";
            };
            beamDeps  = [ mysqlex_0_0_2 poolboy_1_5_1 ];

            meta = {
              description = ''A warpper for mysqlex to add connection pooling
                            with poolboy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpneuried/mysqlex_pool";
            };
          } // packageOverrides)
      ) {};

    mysqlex_pool = mysqlex_pool_0_2_1;

    nabo_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_5,
          jason_1_0_1
        }:
          buildMix ({
            name = "nabo";
            version = "1.0.1";
            src = fetchHex {
              pkg = "nabo";
              version = "1.0.1";
              sha256 =
                "4bada9699dc29c52afbb92eee580a3cf369f8ab1dd649e5020c03c52418c025d";
            };
            beamDeps  = [ earmark_1_2_5 jason_1_0_1 ];

            meta = {
              description = ''A dead simple, extendable and fast blog engine in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qcam/nabo";
            };
          } // packageOverrides)
      ) {};

    nabo = nabo_1_0_1;

    nacha_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nacha";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nacha";
              version = "0.0.1";
              sha256 =
                "dd22ba57d8b4e4de0bb080986e6cbab1bd0dc97aca8293951d29eb70f66cb040";
            };

            meta = {
              longDescription = ''** WIP ** An Elixir library for generating
                                and parsing NACHA files for US ACH and EFT bank
                                transfers.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tokkenops/nacha.ex";
            };
          } // packageOverrides)
      ) {};

    nacha = nacha_0_0_1;

    nadia_0_4_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "nadia";
            version = "0.4.4";
            src = fetchHex {
              pkg = "nadia";
              version = "0.4.4";
              sha256 =
                "93c758c85bd7c4ffb2392a204adff20fa923b328ffc2296c0b546d37b9e68e89";
            };
            beamDeps  = [ httpoison_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''Telegram Bot API Wrapper written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhyu/nadia";
            };
          } // packageOverrides)
      ) {};

    nadia = nadia_0_4_4;

    naive_bayes_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "naive_bayes";
            version = "0.1.3";
            src = fetchHex {
              pkg = "naive_bayes";
              version = "0.1.3";
              sha256 =
                "4b65f199852dcb95ba483b7eeae0afed36931418854aadf6b8235197a985d29e";
            };

            meta = {
              description = ''An Elixir implementation of Naive Bayes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ashleyw/naive_bayes";
            };
          } // packageOverrides)
      ) {};

    naive_bayes = naive_bayes_0_1_3;

    named_args_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "named_args";
            version = "0.1.1";
            src = fetchHex {
              pkg = "named_args";
              version = "0.1.1";
              sha256 =
                "cb289ba74ada4f1d09ee26d509a72bcc4207a703185c1c90fdb366374fe98c00";
            };

            meta = {
              description = ''Ensures default maps and keyword lists have the
                            defaults specified.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/named_args";
            };
          } // packageOverrides)
      ) {};

    named_args = named_args_0_1_1;

    namegen_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "namegen";
            version = "0.1.2";
            src = fetchHex {
              pkg = "namegen";
              version = "0.1.2";
              sha256 =
                "c95a553dcf2a6803e4b80567c9b7a57fcc18265d552fefe183a0d646a07ec013";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Generates a random first and last name output in
                            JSON format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/j-peso/Namegen";
            };
          } // packageOverrides)
      ) {};

    namegen = namegen_0_1_2;

    nameparts_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nameparts";
            version = "0.2.1";
            src = fetchHex {
              pkg = "nameparts";
              version = "0.2.1";
              sha256 =
                "92178723c5dbd33fef3897b4f71908d636e617f27b0b6a38ad43be312ef1fe53";
            };

            meta = {
              description = ''Takes a full name and splits it into individual
                            name parts'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/westonlit/nameparts";
            };
          } // packageOverrides)
      ) {};

    nameparts = nameparts_0_2_1;

    namerx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "namerx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "namerx";
              version = "0.1.0";
              sha256 =
                "a336fe33302883bd59c7740b1d43c53009f44d810421f9ec1305615d73b8e636";
            };

            meta = {
              description = ''A prefixed random computer name generator.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/dabaer/namerx";
            };
          } // packageOverrides)
      ) {};

    namerx = namerx_0_1_0;

    namex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "namex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "namex";
              version = "0.1.0";
              sha256 =
                "bc5c4a58dfab87187cd79abe18cf1dc230030230531aa0601820c92756688fd6";
            };

            meta = {
              description = ''A name parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sgtpepper43/namex";
            };
          } // packageOverrides)
      ) {};

    namex = namex_0_1_0;

    nanoid_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nanoid";
            version = "1.0.1";
            src = fetchHex {
              pkg = "nanoid";
              version = "1.0.1";
              sha256 =
                "0809ff7e0f87d63d23e4f8608a014a2bf734232d7b289ff7809c14453c51cd71";
            };

            meta = {
              longDescription = ''Elixir port of NanoID
                                (https://github.com/ai/nanoid), a tiny, secure
                                URL-friendly unique string ID generator.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/railsmechanic/nanoid";
            };
          } // packageOverrides)
      ) {};

    nanoid = nanoid_1_0_1;

    narciso_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "narciso";
            version = "0.1.0";
            src = fetchHex {
              pkg = "narciso";
              version = "0.1.0";
              sha256 =
                "11a5e20563de070d38532b0cbe6c7258f9c2b602bdca893e9b8388c1b8886752";
            };

            meta = {
              description = ''Narciso is a unique ID generator using a 128
                            random bits.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aruki-delivery/narciso";
            };
          } // packageOverrides)
      ) {};

    narciso = narciso_0_1_0;

    narp_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "narp";
            version = "0.0.1";
            src = fetchHex {
              pkg = "narp";
              version = "0.0.1";
              sha256 =
                "90800be330ed49563b24d891a578678865ce108cd77fa2427e09dbb6b1bac737";
            };

            meta = {
              description = ''Narp is an easy and flexible way to authorize
                            function calls in elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/faber-lotto/narp";
            };
          } // packageOverrides)
      ) {};

    narp = narp_0_0_1;

    nat_set_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nat_set";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nat_set";
              version = "0.0.1";
              sha256 =
                "cc6ed65c754153d7c98c9825370780831cfbe638d162cb4ae2178eadcdd00611";
            };

            meta = {
              description = ''Represent sets of natural numbers compactly in
                            Elixir using bitwise operations'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hilverd/nat-set-elixir";
            };
          } // packageOverrides)
      ) {};

    nat_set = nat_set_0_0_1;

    nat_upnp_0_1_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, inet_ext_0_4_0
        }:
          buildRebar3 ({
            name = "nat_upnp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nat_upnp";
              version = "0.1.0";
              sha256 =
                "b5098fa01cdf15395636831f3dcc812a5a28f7016b64c7c1d8ceccf9bcc2afda";
            };

            beamDeps  = [ inet_ext_0_4_0 ];

            meta = {
              description = ''Erlang library to map your internal port to an
                            external using UNP IGD'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exthereum/nat_upnp";
            };
          } // packageOverrides)
      ) {};

    nat_upnp = nat_upnp_0_1_0;

    nativegen_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nativegen";
            version = "0.4.1";
            src = fetchHex {
              pkg = "nativegen";
              version = "0.4.1";
              sha256 =
                "54c36ca3c0333f04b84f8b15fa028fcecfe77614954c78e87b22ed56e977f46f";
            };

            meta = {
              description = ''Accessible REST API code generator for native
                            app.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yoavlt/nativegen";
            };
          } // packageOverrides)
      ) {};

    nativegen = nativegen_0_4_1;

    nats_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          json_1_2_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "nats";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nats";
              version = "0.0.1";
              sha256 =
                "5568e91f56f65388ad6cb92ddbd70cec5227dadea9d12ec558e93bfe71c9bf78";
            };
            beamDeps  = [ json_1_2_2 poolboy_1_5_1 ];

            meta = {
              description = ''A NATS client written in elixir supporting
                            pub/sub for microservices'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/elixir_nats";
            };
          } // packageOverrides)
      ) {};

    nats = nats_0_0_1;

    nats_ex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "nats_ex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nats_ex";
              version = "0.2.0";
              sha256 =
                "1f5d6f7f018b173a98e3318f4f65370d1d14628fd950adac8f66d96e8d082711";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A pure Elixir Client library for Nats.io
                            messaging system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iamd3vil/nats_ex";
            };
          } // packageOverrides)
      ) {};

    nats_ex = nats_ex_0_2_0;

    nats_msg_0_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nats_msg";
            version = "0.4.1";
            src = fetchHex {
              pkg = "nats_msg";
              version = "0.4.1";
              sha256 =
                "8e21a78bf2ae76d7702bcc03eb87bdddac1b99edebfc99db98e8e94a7a5361c4";
            };

            meta = {
              description = ''Pure Erlang NATS Protocol Message
                            Encoder/Decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/nats_msg";
            };
          } // packageOverrides)
      ) {};

    nats_msg = nats_msg_0_4_1;

    natsio_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "natsio";
            version = "0.1.6";
            src = fetchHex {
              pkg = "natsio";
              version = "0.1.6";
              sha256 =
                "8f62ee5e76c09c716599ff39cc4c01736004d677c585c6a93d706837084aa3a9";
            };

            meta = {
              description = ''NATS framework for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nats-io/elixir-nats";
            };
          } // packageOverrides)
      ) {};

    natsio = natsio_0_1_6;

    natural_sort_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "natural_sort";
            version = "0.3.0";
            src = fetchHex {
              pkg = "natural_sort";
              version = "0.3.0";
              sha256 =
                "6c3476edf395c487a8b55d104458e0f029ca2adb7a0373d12a7a08643f7e7172";
            };

            meta = {
              description = ''Sort a list of strings containing numbers in a
                            natural manner. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DanCouper/natural_sort";
            };
          } // packageOverrides)
      ) {};

    natural_sort = natural_sort_0_3_0;

    navigation_tree_0_4_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "navigation_tree";
            version = "0.4.4";
            src = fetchHex {
              pkg = "navigation_tree";
              version = "0.4.4";
              sha256 =
                "a4e6aad3224ad9c463a1ac0412463a18ac71b7a78ea16303ad72f43f1fb217c6";
            };

            meta = {
              longDescription = ''A navigation tree representation with helpers
                                to generate HTML out of it - depending of
                                userroles. Also creates nice HTML navbars for
                                Bootstrap. Implemented as Agent to hold config
                                state.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/gutschilla/elixir-navigation-tree";
            };
          } // packageOverrides)
      ) {};

    navigation_tree = navigation_tree_0_4_4;

    nbt_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nbt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nbt";
              version = "0.1.0";
              sha256 =
                "6440bd377c605085f6226342f540fcdd6f810186a3a99b7f0ab3704a53069477";
            };

            meta = {
              description = ''Functions for parsing NBT files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Jwashton/nbt";
            };
          } // packageOverrides)
      ) {};

    nbt = nbt_0_1_0;

    nconf_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nconf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nconf";
              version = "0.0.1";
              sha256 =
                "5f8cb9c7b779552861abeddd7985d55b71dafccdbaaa85f9630162082022ca9a";
            };

            meta = {
              description = ''Nested Configuration Manager for Erlang
                            Applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/nconf";
            };
          } // packageOverrides)
      ) {};

    nconf = nconf_0_0_1;

    nd_index_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nd_index";
            version = "1.7.1";
            src = fetchHex {
              pkg = "nd_index";
              version = "1.7.1";
              sha256 =
                "6ff8679385111064b0b1b8eaec1edbc754872a69e02f1131ec5ce17b58c58d1e";
            };

            meta = {
              description = ''Erlang N-dimensional Index Iterator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/nd_index";
            };
          } // packageOverrides)
      ) {};

    nd_index = nd_index_1_7_1;

    nearest_neighbour_algorithm_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nearest_neighbour_algorithm";
            version = "1.0.3";
            src = fetchHex {
              pkg = "nearest_neighbour_algorithm";
              version = "1.0.3";
              sha256 =
                "d1067ac664de719c4e2fcd2ace4dfbf4bb6185fff4b900d36f5ab4f64399c097";
            };

            meta = {
              description = ''Nearest neighbour algorithm written in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/HenrikFricke/elixir-nearest-neighbour-algorithm";
            };
          } // packageOverrides)
      ) {};

    nearest_neighbour_algorithm = nearest_neighbour_algorithm_1_0_3;

    neat_ex_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          json_1_2_2,
          siphash_3_1_3
        }:
          buildMix ({
            name = "neat_ex";
            version = "1.3.0";
            src = fetchHex {
              pkg = "neat_ex";
              version = "1.3.0";
              sha256 =
                "c3442449128c88d2562e86312d61be2e9b0b2a3c4ba873e32a082c77ce9d3812";
            };
            beamDeps  = [ json_1_2_2 siphash_3_1_3 ];

            meta = {
              longDescription = ''This project provides the means to define,
                                simulate, and serialize
                                Artificial-Neural-Networks (ANNs), as well as
                                the means to develop them through use of the
                                Neuro-Evolution of Augmenting Toplogies (NEAT)
                                algorithm created by Dr. Kenneth Stanley.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    neat_ex = neat_ex_1_3_0;

    nebulex_1_0_0_rc_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_shards_0_2_1 }:
          buildMix ({
            name = "nebulex";
            version = "1.0.0-rc.1";
            src = fetchHex {
              pkg = "nebulex";
              version = "1.0.0-rc.1";
              sha256 =
                "c57b36c8cbf73d9c960d75c7684d8eff0c97ebaca28dbc169a77a2e86fa15051";
            };
            beamDeps  = [ ex_shards_0_2_1 ];

            meta = {
              description = ''Fast, flexible and powerful cache wrapper for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/nebulex";
            };
          } // packageOverrides)
      ) {};

    nebulex_1_0_0_rc_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_shards_0_2_1 }:
          buildMix ({
            name = "nebulex";
            version = "1.0.0-rc.3";
            src = fetchHex {
              pkg = "nebulex";
              version = "1.0.0-rc.3";
              sha256 =
                "0a1fdcd6285409fb76a8153b035364a517a9b2708c59375e18cc215e768e5bd4";
            };
            beamDeps  = [ ex_shards_0_2_1 ];

            meta = {
              description = ''Fast, flexible and powerful cache wrapper for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/nebulex";
            };
          } // packageOverrides)
      ) {};

    nebulex = nebulex_1_0_0_rc_3;

    nectar_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nectar";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nectar";
              version = "0.0.1";
              sha256 =
                "dffc5f1c68c83d9eb83ca1c8868d923beaccfdf36ae2e5122dc7bc8edd5665f5";
            };

            meta = {
              description = ''Placeholder package for nectar ecommerce'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    nectar = nectar_0_0_1;

    neonmob_0_0_0_dev0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "neonmob";
            version = "0.0.0-dev0";
            src = fetchHex {
              pkg = "neonmob";
              version = "0.0.0-dev0";
              sha256 =
                "2d85f92c8b099160c343af8389f3ec123c2ea993d0dceb50659f3174718d36a6";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              description = ''An API client for NeonMob.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sgerrand/neonmob.ex";
            };
          } // packageOverrides)
      ) {};

    neonmob = neonmob_0_0_0_dev0;

    neotomex_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "neotomex";
            version = "0.1.7";
            src = fetchHex {
              pkg = "neotomex";
              version = "0.1.7";
              sha256 =
                "4b87b8f614d1cd89dc8ba80ba0e559bedb3ebf6f6d74cd774fcfdd215e861445";
            };

            meta = {
              description = ''A PEG parser/transformer with a pleasant Elixir
                            DSL.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jtmoulia/neotomex";
            };
          } // packageOverrides)
      ) {};

    neotomex = neotomex_0_1_7;

    nerves_bootstrap_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_bootstrap";
            version = "1.0.1";
            src = fetchHex {
              pkg = "nerves_bootstrap";
              version = "1.0.1";
              sha256 =
                "74d26bf8958eefaf16a167d867930f4d6bac3d7eed5a53a0d94f81d86e29568c";
            };

            meta = {
              description = ''Nerves mix integration bootstrap and new project
                            generator'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_bootstrap";
            };
          } // packageOverrides)
      ) {};

    nerves_bootstrap = nerves_bootstrap_1_0_1;

    nerves_dnssd_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mix_eunit_0_3_0,
          system_registry_0_8_0,
          system_registry_term_storage_0_1_1
        }:
          buildMix ({
            name = "nerves_dnssd";
            version = "0.3.1";
            src = fetchHex {
              pkg = "nerves_dnssd";
              version = "0.3.1";
              sha256 =
                "8a5d7d932cdd49f7ba6765e92fef8a09218cfe7223628e9af200809f927b4f2c";
            };
            beamDeps  = [
                          mix_eunit_0_3_0
                          system_registry_0_8_0
                          system_registry_term_storage_0_1_1
                        ];

            meta = {
              description = ''Bonjour/Zeroconf DNS Service Discovery for the
                            Nerves platform'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amolenaar/nerves_dnssd";
            };
          } // packageOverrides)
      ) {};

    nerves_dnssd = nerves_dnssd_0_3_1;

    nerves_firmware_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_firmware";
            version = "0.4.0";
            src = fetchHex {
              pkg = "nerves_firmware";
              version = "0.4.0";
              sha256 =
                "5f7105e32e3adef3465d901c1e440322cdf2855c8a19de03fc595defdf7adafd";
            };

            meta = {
              description = ''Manage and update firmware on a Nerves device'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_firmware";
            };
          } // packageOverrides)
      ) {};

    nerves_firmware = nerves_firmware_0_4_0;

    nerves_hal_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          system_registry_0_8_0
        }:
          buildMix ({
            name = "nerves_hal";
            version = "0.5.0";
            src = fetchHex {
              pkg = "nerves_hal";
              version = "0.5.0";
              sha256 =
                "a5965a18dc2cfc26de7a6785be316e2079d8cad0e267208649b0c3f003e796d5";
            };
            beamDeps  = [ gen_stage_0_14_0 system_registry_0_8_0 ];

            meta = {
              description = ''Hardware Abstraction Layer for Nerves Devices'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/letoteteam/nerves_hal";
            };
          } // packageOverrides)
      ) {};

    nerves_hal = nerves_hal_0_5_0;

    nerves_hostapd_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_hostapd";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nerves_hostapd";
              version = "0.1.0";
              sha256 =
                "947e1e7e630f68f92d6003abccae30324f3480a6ebfcf3185f66f270c05d4ca3";
            };

            meta = {
              description = ''Manage host access points in Nerves.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/connorrigby/nerves_hostapd";
            };
          } // packageOverrides)
      ) {};

    nerves_hostapd = nerves_hostapd_0_1_0;

    nerves_io_neopixel_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_io_neopixel";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nerves_io_neopixel";
              version = "0.2.0";
              sha256 =
                "662ca0af01330399eba9aff9806c086027ec5b3a2e235af4cd909282a6d09afa";
            };

            meta = {
              description = ''Drive WS2812B \"NeoPixel\" RGB LED strips from a
                            Raspberry Pi using Elixir.'';
              license = with stdenv.lib.licenses; [ mit bsd2 ];
              homepage = "https://github.com/GregMefford/nerves_io_neopixel";
            };
          } // packageOverrides)
      ) {};

    nerves_io_neopixel = nerves_io_neopixel_0_2_0;

    nerves_neopixel_0_3_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "nerves_neopixel";
            version = "0.3.2";
            src = fetchHex {
              pkg = "nerves_neopixel";
              version = "0.3.2";
              sha256 =
                "b50f0612413d22a2e9c86d43e6071f0bb1ed041d9ca844e84c43b3fec3f8503e";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Drive WS2812B \"NeoPixel\" RGB LED strips from a
                            Raspberry Pi using Elixir.'';
              license = with stdenv.lib.licenses; [ mit bsd2 ];
              homepage = "https://github.com/GregMefford/nerves_neopixel";
            };
          } // packageOverrides)
      ) {};

    nerves_neopixel = nerves_neopixel_0_3_2;

    nerves_ntp_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_ntp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "nerves_ntp";
              version = "0.1.1";
              sha256 =
                "d718d4fc14f7538793eeb524a5f4ff2987c1eee37bab054e62c4000169f2cfad";
            };

            meta = {
              description = ''OTP application to sync time using busybox `ntpd`
                            command.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/evokly/nerves_ntp";
            };
          } // packageOverrides)
      ) {};

    nerves_ntp = nerves_ntp_0_1_1;

    nerves_runtime_shell_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_runtime_shell";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nerves_runtime_shell";
              version = "0.1.0";
              sha256 =
                "f59a5cada632d6e61f0ac67d8149a8b310258b53af90fd9a51d8e40b6b4e8bb0";
            };

            meta = {
              longDescription = ''A custom shell for debugging and running
                                commands on Nerves devices in a bash-like
                                environment.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_runtime_shell";
            };
          } // packageOverrides)
      ) {};

    nerves_runtime_shell = nerves_runtime_shell_0_1_0;

    nerves_ssdp_client_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_ssdp_client";
            version = "0.1.3";
            src = fetchHex {
              pkg = "nerves_ssdp_client";
              version = "0.1.3";
              sha256 =
                "e970b8a7547c4d11c31ff0e6ab8543795b551659f03b9edc6df0e0720a3cc972";
            };

            meta = {
              description = ''Client for Simple Service Discovery Protocol'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_ssdp_client";
            };
          } // packageOverrides)
      ) {};

    nerves_ssdp_client = nerves_ssdp_client_0_1_3;

    nerves_ssdp_server_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_ssdp_server";
            version = "0.2.2";
            src = fetchHex {
              pkg = "nerves_ssdp_server";
              version = "0.2.2";
              sha256 =
                "701ed559f683a4853c02f5811ed76a01058f349bd1924922ee874363376716a0";
            };

            meta = {
              description = ''Client for Simple Service Discovery Protocol'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_ssdp_server";
            };
          } // packageOverrides)
      ) {};

    nerves_ssdp_server = nerves_ssdp_server_0_2_2;

    nerves_toolchain_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_toolchain";
            version = "0.7.1";
            src = fetchHex {
              pkg = "nerves_toolchain";
              version = "0.7.1";
              sha256 =
                "21a6ed13ae2489f9322381054755926df218bc150c3ac37e34915840944571cc";
            };

            meta = {
              longDescription = ''Elixir compilers and scripts for building
                                Nerves Toolchains. For useable toolchain
                                configurations see nerves_toolchain_*'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_toolchain";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain = nerves_toolchain_0_7_1;

    nerves_uart_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "nerves_uart";
            version = "1.0.0";
            src = fetchHex {
              pkg = "nerves_uart";
              version = "1.0.0";
              sha256 =
                "14810a8c9fff882f09345b8ad04b43ed9c154a841e63d10f008fb75ec898dfd2";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Discover and use UARTs and serial ports in
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_uart";
            };
          } // packageOverrides)
      ) {};

    nerves_uart_1_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "nerves_uart";
            version = "1.1.1";
            src = fetchHex {
              pkg = "nerves_uart";
              version = "1.1.1";
              sha256 =
                "5a651046376447a44ce5d6e067582a113f582c38b71eea12797db5f0c3907532";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Discover and use UARTs and serial ports in
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_uart";
            };
          } // packageOverrides)
      ) {};

    nerves_uart_1_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "nerves_uart";
            version = "1.2.0";
            src = fetchHex {
              pkg = "nerves_uart";
              version = "1.2.0";
              sha256 =
                "0a687f62bc65a021b858809815579571ee7abe5e68ebe737a7f159ff41e9bc9b";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''Discover and use UARTs and serial ports in
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_uart";
            };
          } // packageOverrides)
      ) {};

    nerves_uart = nerves_uart_1_2_0;

    nest_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nest";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nest";
              version = "0.0.1";
              sha256 =
                "4092651c14022a285eb4ffb8b6e9c3d6c5937729644fcc88b43f74324bc3bac3";
            };

            meta = {
              longDescription = ''A library for using the Nest API, allowing
                                integration with Nest Thermostats and other Nest
                                devices.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/nest";
            };
          } // packageOverrides)
      ) {};

    nest = nest_0_0_1;

    nested_filter_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nested_filter";
            version = "1.2.1";
            src = fetchHex {
              pkg = "nested_filter";
              version = "1.2.1";
              sha256 =
                "e1648a77521a5cc694450c7e2b6809da2838688a632bd6077acbd25253585a9e";
            };

            meta = {
              longDescription = ''Drill down into a nested map and filter out
                                keys according to user specified values'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/treble37/nested_filter";
            };
          } // packageOverrides)
      ) {};

    nested_filter = nested_filter_1_2_1;

    nesty_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nesty";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nesty";
              version = "0.1.0";
              sha256 =
                "8b5750836384fcb348bbbed5622572052170b9a543d4208b576ca490f859ec31";
            };

            meta = {
              description = ''Convenient helpers when dealing with nested
                            keywords and maps.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/Nesty";
            };
          } // packageOverrides)
      ) {};

    nesty = nesty_0_1_0;

    netflow_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "netflow";
            version = "1.0.0";
            src = fetchHex {
              pkg = "netflow";
              version = "1.0.0";
              sha256 =
                "34865e12188519ef40477bbfc3c9bd42e90da316e4cd5b2bd56bd97d875a5789";
            };

            meta = {
              description = ''NetFlow/IPFIX decoder/encoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ates/netflow";
            };
          } // packageOverrides)
      ) {};

    netflow = netflow_1_0_0;

    netrc_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "netrc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "netrc";
              version = "0.0.2";
              sha256 =
                "a82b1702d8702a51b17e1756261b316ae3a72ac07bbf04e3a1258cc1210f6000";
            };

            meta = {
              description = ''Read netrc files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/netrcex";
            };
          } // packageOverrides)
      ) {};

    netrc = netrc_0_0_2;

    netstrings_2_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "netstrings";
            version = "2.0.6";
            src = fetchHex {
              pkg = "netstrings";
              version = "2.0.6";
              sha256 =
                "17b014743d0997edc8e9364228d9f59e144e7677fab0e505175b702a01028436";
            };

            meta = {
              description = ''Netstrings implementaton'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/netstrings_ex";
            };
          } // packageOverrides)
      ) {};

    netstrings = netstrings_2_0_6;

    network_logger_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "network_logger";
            version = "0.0.2";
            src = fetchHex {
              pkg = "network_logger";
              version = "0.0.2";
              sha256 =
                "944cc04ee546086959eb1d9604b71bcaec9c7ac4bb3995ed88098dcc06087d15";
            };

            meta = {
              description = ''A simple library for logging over the network.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stocks29/network_logger";
            };
          } // packageOverrides)
      ) {};

    network_logger = network_logger_0_0_2;

    neural_net_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "neural_net";
            version = "1.0.0";
            src = fetchHex {
              pkg = "neural_net";
              version = "1.0.0";
              sha256 =
                "164cead198d6f8e2ba396346c4c4f8ec8c5b6e6ae00d6915eec902c436779239";
            };

            meta = {
              longDescription = ''NeuralNet is an A.I. library that allows for
                                the construction and training of complex
                                recurrent neural networks. Architectures such as
                                LSTM or GRU can be specified in under 20 lines
                                of code. Any neural network that can be built
                                with the NeuralNet DSL can be trainined with
                                automatically implemented BPTT (back-propagation
                                through time).'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    neural_net = neural_net_1_0_0;

    neural_network_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "neural_network";
            version = "0.1.4";
            src = fetchHex {
              pkg = "neural_network";
              version = "0.1.4";
              sha256 =
                "b65047b95ef90b4b032ead4731259971fd96fbc016a1f704cf24f9c46c80bbb6";
            };

            meta = {
              longDescription = ''A neural network made up of layers of neurons
                                connected to each other to form a relationship
                                allowing it to learn.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kblake/neural_network_elixir";
            };
          } // packageOverrides)
      ) {};

    neural_network = neural_network_0_1_4;

    neuron_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "neuron";
            version = "0.7.0";
            src = fetchHex {
              pkg = "neuron";
              version = "0.7.0";
              sha256 =
                "ee901656f61649871cf40a067c2aa0b7c612188475f4ed8a80ac93aa8b324411";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A GraphQL client for elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/uesteibar/neuron";
            };
          } // packageOverrides)
      ) {};

    neuron = neuron_0_7_0;

    neurx_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "neurx";
            version = "0.1.1";
            src = fetchHex {
              pkg = "neurx";
              version = "0.1.1";
              sha256 =
                "ffc941c3908b2ca015bc86fc6a0f7f1728bc4c0309fadac239c2c204421305b6";
            };

            meta = {
              description = ''NN library for Elixir'';
              license = stdenv.lib.licenses.lpgl3;
              homepage = "https://github.com/NeurX/neurx";
            };
          } // packageOverrides)
      ) {};

    neurx = neurx_0_1_1;

    neverbounceex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "neverbounceex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "neverbounceex";
              version = "0.1.0";
              sha256 =
                "b1c10073728b343d8360eee0c366daa84bdd9112a57ab9a7e983c79f84c55396";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper to use NeverBounce API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efrenfuentes/neverbounceex";
            };
          } // packageOverrides)
      ) {};

    neverbounceex = neverbounceex_0_1_0;

    newrelic_insights_1_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ok_1_11_0,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "newrelic_insights";
            version = "1.0.5";
            src = fetchHex {
              pkg = "newrelic_insights";
              version = "1.0.5";
              sha256 =
                "9b051611aa5145fb263d138847538189ce798330c3d37380cfca27fc97882b05";
            };
            beamDeps  = [ ok_1_11_0 poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''A way to publish custom events data to NewRelic
                            Insights data explorer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/renews/newrelic_insights";
            };
          } // packageOverrides)
      ) {};

    newrelic_insights = newrelic_insights_1_0_5;

    news_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "news";
            version = "0.3.0";
            src = fetchHex {
              pkg = "news";
              version = "0.3.0";
              sha256 =
                "b8759a3cb0bb40e86d5a5ea65b911a066da4ec197b097be88fb67f6358838124";
            };

            meta = {
              description = ''Publish elixir and erlang new weekly'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhongwencool/news";
            };
          } // packageOverrides)
      ) {};

    news = news_0_3_0;

    news_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "news_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "news_api";
              version = "0.1.0";
              sha256 =
                "c666f7d2e794e68543f3070b9dc345da130ad38c8eae9d2c21bd050c29bccac5";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''API Wrapper for News API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/radvc/news-api";
            };
          } // packageOverrides)
      ) {};

    news_api = news_api_0_1_0;

    nex_json_schema_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nex_json_schema";
            version = "0.8.0";
            src = fetchHex {
              pkg = "nex_json_schema";
              version = "0.8.0";
              sha256 =
                "6ce0302da0fc4d05513b3a8cf1415af5d085d6c39fe23a52cddf91e3b9662e0b";
            };

            meta = {
              longDescription = ''A JSON Schema validator with full support for
                                the draft 4 specification and zero
                                dependencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nebo15/nex_json_schema";
            };
          } // packageOverrides)
      ) {};

    nex_json_schema = nex_json_schema_0_8_0;

    nexmo_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "nexmo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nexmo";
              version = "0.2.0";
              sha256 =
                "1bc4a33bda5ebc30125ffdd642f79f8b5a0e7580c2499829cf3e4287fc1d3d59";
            };
            beamDeps  = [ httpotion_3_0_3 poison_2_2_0 ];

            meta = {
              description = ''[Work in Progress] Nexmo REST API client for
                            Elixir\"'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cbetta/nexmo-elixir";
            };
          } // packageOverrides)
      ) {};

    nexmo = nexmo_0_2_0;

    nfl_player_searchex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_12_0
        }:
          buildMix ({
            name = "nfl_player_searchex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "nfl_player_searchex";
              version = "0.3.0";
              sha256 =
                "debd5982e4bd580582d76291c08e24f4a8a39a8bfcf488e41c6bc2e6806120a1";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_12_0 ];

            meta = {
              description = ''Unofficial search for NFL players via the
                            official NFL search'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/krmannix/nfl_player_searchex";
            };
          } // packageOverrides)
      ) {};

    nfl_player_searchex = nfl_player_searchex_0_3_0;

    ngram_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ngram";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ngram";
              version = "0.0.1";
              sha256 =
                "13185be68166d8314ae63f70eceb58a4e00b441d3294633450d4f8a7c565e218";
            };

            meta = {
              description = ''n-gram tokenization and distance calculations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ardcore/ngram";
            };
          } // packageOverrides)
      ) {};

    ngram = ngram_0_0_1;

    nif_gen_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nif_gen";
            version = "1.0.0";
            src = fetchHex {
              pkg = "nif_gen";
              version = "1.0.0";
              sha256 =
                "e48d1fcb71b22020b76dd7628d13d945de50c06a1ba3ccd53e025fe3ca00bc29";
            };

            meta = {
              description = ''Generate an Elixir project with a nif.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/connorrigbyy/nif_gen";
            };
          } // packageOverrides)
      ) {};

    nif_gen = nif_gen_1_0_0;

    nifsy_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "nifsy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nifsy";
              version = "0.1.0";
              sha256 =
                "722c681f034495f03ea56fe0e4973aa51e80a39e615a9724c2f23ea1aed80830";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''A nifty NIF for the FS, providing faster
                            filesystem operations.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/nifsy";
            };
          } // packageOverrides)
      ) {};

    nifsy = nifsy_0_1_0;

    nile_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nile";
            version = "0.1.3";
            src = fetchHex {
              pkg = "nile";
              version = "0.1.3";
              sha256 =
                "73a2c8be8507bb39de74eb3fa5ae40e3c40cabef30cd884f67ab6d3400a7bea4";
            };

            meta = {
              description = ''Elixir stream extensions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/nile";
            };
          } // packageOverrides)
      ) {};

    nile = nile_0_1_3;

    nimble_csv_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nimble_csv";
            version = "0.1.1";
            src = fetchHex {
              pkg = "nimble_csv";
              version = "0.1.1";
              sha256 =
                "87d021ac0144dbab7ec0c1535ca9c821e54d50b5990d6f9d8455a64183c87ebf";
            };

            meta = {
              description = ''A simple and fast CSV parsing and dumping
                            library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/plataformatec/nimble_csv";
            };
          } // packageOverrides)
      ) {};

    nimble_csv_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nimble_csv";
            version = "0.4.0";
            src = fetchHex {
              pkg = "nimble_csv";
              version = "0.4.0";
              sha256 =
                "cd3fe640494f13a45f99fcb516f9891ba13a3053f94f10524c29e05ef25aa628";
            };

            meta = {
              description = ''A simple and fast CSV parsing and dumping
                            library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/plataformatec/nimble_csv";
            };
          } // packageOverrides)
      ) {};

    nimble_csv = nimble_csv_0_4_0;

    nimble_parsec_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nimble_parsec";
            version = "0.2.2";
            src = fetchHex {
              pkg = "nimble_parsec";
              version = "0.2.2";
              sha256 =
                "4ababf5c44164f161872704e1cfbecab3935fdebec66c72905abaad0e6e5cef6";
            };

            meta = {
              description = ''A simple and fast library for text-based parser
                            combinators'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/plataformatec/nimble_parsec";
            };
          } // packageOverrides)
      ) {};

    nimble_parsec_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nimble_parsec";
            version = "0.3.2";
            src = fetchHex {
              pkg = "nimble_parsec";
              version = "0.3.2";
              sha256 =
                "0ccc59a6c5be1e0db1f8f49b098da528765ce01d0b80d8a38c64ab35c99fed41";
            };

            meta = {
              description = ''A simple and fast library for text-based parser
                            combinators'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/plataformatec/nimble_parsec";
            };
          } // packageOverrides)
      ) {};

    nimble_parsec = nimble_parsec_0_3_2;

    nine_ball_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nine_ball";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nine_ball";
              version = "0.0.1";
              sha256 =
                "9ca54de485a41dbeecc2a80e068ebd62426e7b48e4384cfda283f1480d8afb4f";
            };

            meta = {
              description = ''nine_ball because eight_ball was taken'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/holyxiaoxin/eight_ball";
            };
          } // packageOverrides)
      ) {};

    nine_ball = nine_ball_0_0_1;

    ninjaproxies_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "ninjaproxies";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ninjaproxies";
              version = "0.2.0";
              sha256 =
                "5524329d00944690b362d30fef9c4032c03c401cc44d0ad9e98e147f5792fade";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_5_2 ];

            meta = {
              description = ''Ninjaproxies client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/ninjaproxies";
            };
          } // packageOverrides)
      ) {};

    ninjaproxies = ninjaproxies_0_2_0;

    nitroglycerin_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nitroglycerin";
            version = "0.2.3";
            src = fetchHex {
              pkg = "nitroglycerin";
              version = "0.2.3";
              sha256 =
                "1a87724d0748ebc37f10f9a82346f029de230826aa95faff5bd631bf51a53939";
            };

            meta = {
              description = ''A library for managing one-time pad encryption'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jphastings/nitroglycerin.ex";
            };
          } // packageOverrides)
      ) {};

    nitroglycerin = nitroglycerin_0_2_3;

    nkfex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nkfex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nkfex";
              version = "0.1.0";
              sha256 =
                "0b12cd837a23bd13430b2305c25400e4a654adb39844e3da57bd712a1c20751e";
            };

            meta = {
              description = ''nkf implemented in NIFs for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tayutayura/nkfex";
            };
          } // packageOverrides)
      ) {};

    nkfex = nkfex_0_1_0;

    no_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "no";
            version = "0.1.0";
            src = fetchHex {
              pkg = "no";
              version = "0.1.0";
              sha256 =
                "850ddfdf52abaa3ff0d38e3fa022ea7251ab3df070d5f8d8d90920f9d13f5d36";
            };

            meta = {
              description = ''This is `no` command that outputs `n` implemented
                            in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tokoyax/no";
            };
          } // packageOverrides)
      ) {};

    no = no_0_1_0;

    noaa_observations_0_4_14 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          io_ansi_table_0_4_13,
          logger_file_backend_0_0_10,
          persist_config_0_2_6
        }:
          buildMix ({
            name = "noaa_observations";
            version = "0.4.14";
            src = fetchHex {
              pkg = "noaa_observations";
              version = "0.4.14";
              sha256 =
                "f28d7031add568db1f508e6b389336015044078509dddc5e217cc7d7f09746bc";
            };
            beamDeps  = [
                          httpoison_1_2_0
                          io_ansi_table_0_4_13
                          logger_file_backend_0_0_10
                          persist_config_0_2_6
                        ];

            meta = {
              description = ''Prints NOAA Observations to STDOUT in a table
                            with borders and colors.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/RaymondLoranger/noaa_observations";
            };
          } // packageOverrides)
      ) {};

    noaa_observations = noaa_observations_0_4_14;

    node_manager_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "node_manager";
            version = "0.1.1";
            src = fetchHex {
              pkg = "node_manager";
              version = "0.1.1";
              sha256 =
                "d39a512c825ba71c0a352f1499bab23e318045002bc622f0e61568de2f522f79";
            };

            meta = {
              description = ''Manage node connections and communications'';

              homepage = "https://github.com/fourkio/node_manager";
            };
          } // packageOverrides)
      ) {};

    node_manager = node_manager_0_1_1;

    nodefinder_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nodefinder";
            version = "1.7.3";
            src = fetchHex {
              pkg = "nodefinder";
              version = "1.7.3";
              sha256 =
                "bf9cbe71040e0e8f9324c1505206aae5c6bb83b22dc983ac41026a85cc1098b2";
            };

            meta = {
              description = ''Strategies For Automatic Node Discovery'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/nodefinder";
            };
          } // packageOverrides)
      ) {};

    nodefinder = nodefinder_1_7_3;

    nodex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nodex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "nodex";
              version = "0.1.1";
              sha256 =
                "0e6804b0138a71e33e99a2e6423019db01de34fe341f765220bce38830779548";
            };

            meta = {
              description = ''Nodex provides helping functionality around
                            distributed Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Overbryd/nodex";
            };
          } // packageOverrides)
      ) {};

    nodex = nodex_0_1_1;

    noise_0_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "noise";
            version = "0.0.5";
            src = fetchHex {
              pkg = "noise";
              version = "0.0.5";
              sha256 =
                "f4150dcb6fe1f69960e5e4636b55f16ce09d02d3cffa342fcb8a85cc30fb6c37";
            };

            meta = {
              description = ''A pseudo-random noise generation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshforisha/noise";
            };
          } // packageOverrides)
      ) {};

    noise = noise_0_0_5;

    nomex_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "nomex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "nomex";
              version = "0.0.4";
              sha256 =
                "a242a40187af9df24c737f7140f216e8a97d13276f904e042896a92392fbfb95";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Unofficial HashiCorp Nomad Client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/d3sw/nomex";
            };
          } // packageOverrides)
      ) {};

    nomex = nomex_0_0_4;

    norma_1_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "norma";
            version = "1.4.2";
            src = fetchHex {
              pkg = "norma";
              version = "1.4.2";
              sha256 =
                "ca11f984bb5014b0acfff24507fd9a40c23c6085ea7adf0892e9102bc428a914";
            };

            meta = {
              description = ''Normalize / sanitize URLs to the format you
                            need.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazingstudio/norma";
            };
          } // packageOverrides)
      ) {};

    norma = norma_1_4_2;

    normalize_email_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, is_email_0_0_2 }:
          buildMix ({
            name = "normalize_email";
            version = "0.0.1";
            src = fetchHex {
              pkg = "normalize_email";
              version = "0.0.1";
              sha256 =
                "ac5864ecf0d002ecbc56f9296bff7c01fc1d7e2e84e2529f7726f1a068f5d584";
            };
            beamDeps  = [ is_email_0_0_2 ];

            meta = {
              description = ''Normalize an email address'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/normalize_email";
            };
          } // packageOverrides)
      ) {};

    normalize_email = normalize_email_0_0_1;

    normalize_url_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "normalize_url";
            version = "0.3.2";
            src = fetchHex {
              pkg = "normalize_url";
              version = "0.3.2";
              sha256 =
                "1dd825d0f1a9fa57c3453409e59073d6c9fddb9a951dd8b1f7ba0a27e45dc034";
            };

            meta = {
              description = ''Normalize a url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/normalize_url";
            };
          } // packageOverrides)
      ) {};

    normalize_url = normalize_url_0_3_2;

    norris_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_9_0
        }:
          buildMix ({
            name = "norris";
            version = "0.1.2";
            src = fetchHex {
              pkg = "norris";
              version = "0.1.2";
              sha256 =
                "efbff3db091987ef0a9cfb8aec9ac5193fee5ed8303c2a6a81acd65e8546261f";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_9_0 ];

            meta = {
              longDescription = ''A small package that accesses the chuck
                                norris API and returns a random chuck norris
                                fact'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/faraazahmad/norris";
            };
          } // packageOverrides)
      ) {};

    norris = norris_0_1_2;

    nostrum_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          httpoison_0_13_0,
          poison_3_1_0,
          websocket_client_1_3_0
        }:
          buildMix ({
            name = "nostrum";
            version = "0.2.1";
            src = fetchHex {
              pkg = "nostrum";
              version = "0.2.1";
              sha256 =
                "4df5cfc73357eaf1057bf580e71a8b1ec1cbb3a6024ce4f0f42db9d300ddff7e";
            };
            beamDeps  = [
                          gen_stage_0_14_0
                          httpoison_0_13_0
                          poison_3_1_0
                          websocket_client_1_3_0
                        ];

            meta = {
              description = ''An elixir Discord library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kraigie/nostrum/";
            };
          } // packageOverrides)
      ) {};

    nostrum = nostrum_0_2_1;

    not_loaded_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "not_loaded";
            version = "0.2.0";
            src = fetchHex {
              pkg = "not_loaded";
              version = "0.2.0";
              sha256 =
                "309675bdc9eac2939e8ee1eb5a93bfacea2765b85f1f53a71460d38bbaf46776";
            };

            meta = {
              description = ''Placeholders for data that isn`t loaded. Inspired
                            by Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aaronrenner/not_loaded";
            };
          } // packageOverrides)
      ) {};

    not_loaded = not_loaded_0_2_0;

    not_markdown_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "not_markdown";
            version = "0.0.1";
            src = fetchHex {
              pkg = "not_markdown";
              version = "0.0.1";
              sha256 =
                "cd99afe4870f8ec3093575f95890ea0d5d2e0c7b1eaceed9258eb8ccd8fe7341";
            };

            meta = {
              description = ''Simple text formatting parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EddyShure/not_markdown";
            };
          } // packageOverrides)
      ) {};

    not_markdown = not_markdown_0_0_1;

    not_qwerty123_2_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_15_0 }:
          buildMix ({
            name = "not_qwerty123";
            version = "2.3.0";
            src = fetchHex {
              pkg = "not_qwerty123";
              version = "2.3.0";
              sha256 =
                "733a3cf10bb48f31cf6a0ce76e4f7d2d271ef56e12284eff72e6ae29c9c90796";
            };
            beamDeps  = [ gettext_0_15_0 ];

            meta = {
              description = ''Library to check password strength and generate
                            random passwords.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/not_qwerty123";
            };
          } // packageOverrides)
      ) {};

    not_qwerty123 = not_qwerty123_2_3_0;

    noti_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "noti";
            version = "0.1.0";
            src = fetchHex {
              pkg = "noti";
              version = "0.1.0";
              sha256 =
                "4399ca1b788cffb89c0e6cbf6569db918ff022158ae1f14435a78326a25556d3";
            };

            meta = {
              description = ''A library for linux desktop notifications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/njichev/noti";
            };
          } // packageOverrides)
      ) {};

    noti = noti_0_1_0;

    notifier_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "notifier";
            version = "0.1.0";
            src = fetchHex {
              pkg = "notifier";
              version = "0.1.0";
              sha256 =
                "6293b4a27be070e47f0b033d0e8fe7eb370c9be2ec9063c40b53278438279c6b";
            };

            meta = {
              description = ''OSX notifications in a pluggable architecture for
                            other kinds of notifications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/apdunston/notifier";
            };
          } // packageOverrides)
      ) {};

    notifier = notifier_0_1_0;

    notify_ex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "notify_ex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "notify_ex";
              version = "0.2.0";
              sha256 =
                "460c5efdd08d7fe128d0c3b70e44217a1f270d95eaac48fcd8f2fe46f84a1a29";
            };

            meta = {
              description = ''Notify_ex is just a simple wrapper around
                            `notify-send` for Unix systems.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aguxez/notify_ex";
            };
          } // packageOverrides)
      ) {};

    notify_ex = notify_ex_0_2_0;

    noun_projex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          oauther_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "noun_projex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "noun_projex";
              version = "0.1.0";
              sha256 =
                "b9b1c0f8da46f454cef36e14643380095184e5e277143c17e378c920f8871439";
            };
            beamDeps  = [ httpoison_0_13_0 oauther_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''Elixir Client for the Noun Project API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/olieidel/noun_projex";
            };
          } // packageOverrides)
      ) {};

    noun_projex = noun_projex_0_1_0;

    nowaythisistaken_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nowaythisistaken";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nowaythisistaken";
              version = "0.1.0";
              sha256 =
                "081cfc5e588af4eaa9f6b596c8217569cfef53b8a9db5a5c216b13d97a1326ad";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/RobStallion/test_hex_package";
            };
          } // packageOverrides)
      ) {};

    nowaythisistaken = nowaythisistaken_0_1_0;

    nox_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "nox";
            version = "0.3.2";
            src = fetchHex {
              pkg = "nox";
              version = "0.3.2";
              sha256 =
                "512418191e19b767b1cb19805b6e3050664a3ed05c6778ecac8c6d5d4e2f27ae";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Embed a safe and reproductible node environment
                            into your Elixir application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kbrw/nox";
            };
          } // packageOverrides)
      ) {};

    nox = nox_0_3_2;

    nprx_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "nprx";
            version = "0.1.3";
            src = fetchHex {
              pkg = "nprx";
              version = "0.1.3";
              sha256 =
                "1992d375c4a14334c3382a3453e266c44842da14523e177e466775f98ca8b6e9";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Interact with the NPR One Rest API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/silbermm/nprx";
            };
          } // packageOverrides)
      ) {};

    nprx = nprx_0_1_3;

    nsoflet_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nsoflet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nsoflet";
              version = "0.1.0";
              sha256 =
                "03b876f49c19d1306cd9b1aa0a42e79ce47e2b367b3cd421eb732b0f4d44317c";
            };

            meta = {
              description = ''Placeholder'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    nsoflet = nsoflet_0_1_0;

    ntru_elixir_0_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_make_0_4_2,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "ntru_elixir";
            version = "0.0.0";
            src = fetchHex {
              pkg = "ntru_elixir";
              version = "0.0.0";
              sha256 =
                "cced0eccc950a4615641d2696887334b653b27b8951cec34457579ae7de3855a";
            };
            beamDeps  = [ elixir_make_0_4_2 ex_doc_0_18_3 ];

            meta = {
              description = ''libntru wrapper for elixir. NTRU is a post
                            quantom cryptography algorithm.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/alisinabh/ntru_elixir";
            };
          } // packageOverrides)
      ) {};

    ntru_elixir = ntru_elixir_0_0_0;

    num_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          complex_num_1_0_3,
          decimal_1_5_0
        }:
          buildMix ({
            name = "num_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "num_ex";
              version = "0.1.0";
              sha256 =
                "883fe598be6d9b12355100b59e37b2ebb082bea078a45ae48445947798e78656";
            };
            beamDeps  = [ complex_num_1_0_3 decimal_1_5_0 ];

            meta = {
              description = ''This is an effort to try and replicate some of
                            the NumPy modules in elixir-lang.'';
              license = with stdenv.lib.licenses; [ free free ];
            };
          } // packageOverrides)
      ) {};

    num_ex = num_ex_0_1_0;

    number_0_5_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_5_0 }:
          buildMix ({
            name = "number";
            version = "0.5.7";
            src = fetchHex {
              pkg = "number";
              version = "0.5.7";
              sha256 =
                "3367f69e6815b24c336bc4ef4496a726306816d2fd35159ad298e496c7333a88";
            };
            beamDeps  = [ decimal_1_5_0 ];

            meta = {
              description = ''Convert numbers to various string formats, such
                            as currency'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/number";
            };
          } // packageOverrides)
      ) {};

    number = number_0_5_7;

    numbers_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numbers";
            version = "2.0.1";
            src = fetchHex {
              pkg = "numbers";
              version = "2.0.1";
              sha256 =
                "f5dd445a70b5549e53456a974d996c0f6bd3a4effbe9e1d22ba41789798db07c";
            };

            meta = {
              longDescription = ''Numbers dispatches on any numeric type that
                                follows the `Numeric` behaviour. This allows you
                                to create composite types working with _any_
                                numeric type (Decimal, Ratio, Tensor,
                                ComplexNum, ???)!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_number/";
            };
          } // packageOverrides)
      ) {};

    numbers_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numbers";
            version = "2.0.3";
            src = fetchHex {
              pkg = "numbers";
              version = "2.0.3";
              sha256 =
                "a30efadb793d3a452f480dffa6cf25760127aaac1a2452179591f94a6514eaf4";
            };

            meta = {
              longDescription = ''Numbers dispatches on any numeric type that
                                follows the `Numeric` behaviour. This allows you
                                to create composite types working with _any_
                                numeric type (Decimal, Ratio, Tensor,
                                ComplexNum, ???)!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_number/";
            };
          } // packageOverrides)
      ) {};

    numbers_5_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          coerce_1_0_1,
          decimal_1_3_1
        }:
          buildMix ({
            name = "numbers";
            version = "5.0.1";
            src = fetchHex {
              pkg = "numbers";
              version = "5.0.1";
              sha256 =
                "98a9e593dbb39a14c6b34e0d0ff7cb671c51c8e2496fb1066a2c57bb7cc072b4";
            };
            beamDeps  = [ coerce_1_0_1 decimal_1_3_1 ];

            meta = {
              longDescription = ''Numbers dispatches on any numeric type that
                                follows the `Numeric` behaviour. This allows you
                                to create composite types working with _any_
                                numeric type (Decimal, Ratio, Tensor,
                                ComplexNum, ???)!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_number/";
            };
          } // packageOverrides)
      ) {};

    numbers_5_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          coerce_1_0_1,
          decimal_1_3_1
        }:
          buildMix ({
            name = "numbers";
            version = "5.1.0";
            src = fetchHex {
              pkg = "numbers";
              version = "5.1.0";
              sha256 =
                "4da7d946f5846732a4f67f9a5c94dc22f9833fd33ce58ab0720e6ce74b8113a6";
            };
            beamDeps  = [ coerce_1_0_1 decimal_1_3_1 ];

            meta = {
              longDescription = ''Numbers dispatches on any numeric type that
                                follows the `Numeric` behaviour. This allows you
                                to create composite types working with _any_
                                numeric type (Decimal, Ratio, Tensor,
                                ComplexNum, ???)!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_number/";
            };
          } // packageOverrides)
      ) {};

    numbers = numbers_5_1_0;

    numerix_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, flow_0_14_0 }:
          buildMix ({
            name = "numerix";
            version = "0.5.1";
            src = fetchHex {
              pkg = "numerix";
              version = "0.5.1";
              sha256 =
                "c9ab7c204c8d0553fdf199766eba76f3cb63b96048d6dc9cc8d4fe366def28b1";
            };
            beamDeps  = [ flow_0_14_0 ];

            meta = {
              longDescription = ''A collection of useful mathematical functions
                                in Elixir with a slant towards statistics,
                                linear algebra and machine learning'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/safwank/Numerix";
            };
          } // packageOverrides)
      ) {};

    numerix = numerix_0_5_1;

    numero_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numero";
            version = "0.3.0";
            src = fetchHex {
              pkg = "numero";
              version = "0.3.0";
              sha256 =
                "1edd0e844553960ce4958034ea50eac1d6ef1c600aeeb902e718e291c73b183b";
            };

            meta = {
              description = ''A micro library for converting non-english
                            digits.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alisinabh/Numero";
            };
          } // packageOverrides)
      ) {};

    numero = numero_0_3_0;

    numex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "numex";
              version = "0.1.0";
              sha256 =
                "909b358f9f294f86f279b696785a7116ea92f3d5719b134b1f457b79292f9212";
            };

            meta = {
              description = ''Collection of mathematical functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ponchomf/postgrex";
            };
          } // packageOverrides)
      ) {};

    numex = numex_0_1_0;

    numexy_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numexy";
            version = "0.1.8";
            src = fetchHex {
              pkg = "numexy";
              version = "0.1.8";
              sha256 =
                "7243af802e03b09d5c04c350211f3a8916a255767b8d567e6c0c6e32ded04471";
            };

            meta = {
              description = ''It is a library for matrix and vector
                            calculation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yujikawa/numexy";
            };
          } // packageOverrides)
      ) {};

    numexy = numexy_0_1_8;

    nz_bank_account_validator_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nz_bank_account_validator";
            version = "1.0.0";
            src = fetchHex {
              pkg = "nz_bank_account_validator";
              version = "1.0.0";
              sha256 =
                "55453002345d401779f854ad004632bed44d1eb713a70dc10c567da435c74f79";
            };

            meta = {
              description = ''Validates NZ bank account numbers'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/fsanggang/nz_bank_account_validator";
            };
          } // packageOverrides)
      ) {};

    nz_bank_account_validator = nz_bank_account_validator_1_0_0;

    nz_ir_validator_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nz_ir_validator";
            version = "1.0.0";
            src = fetchHex {
              pkg = "nz_ir_validator";
              version = "1.0.0";
              sha256 =
                "3aa8b7a8b939018752d81d2a14ae865c17d264a54c0919ba060caf6f45ab7601";
            };

            meta = {
              description = ''Validates NZ IR numbers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fsanggang/nz_ir_validator";
            };
          } // packageOverrides)
      ) {};

    nz_ir_validator = nz_ir_validator_1_0_0;

    oanda_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "oanda_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oanda_api";
              version = "0.1.0";
              sha256 =
                "fcd9a23f31333a8e0af9d2085eab339fb80954d0b548cee05ec40f5d8bb105d4";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Oanda Elixir client wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/danieledangeli/oanda_elixir";
            };
          } // packageOverrides)
      ) {};

    oanda_api = oanda_api_0_1_0;

    oauth2_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "oauth2";
            version = "0.7.0";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.7.0";
              sha256 =
                "93a88d852ec87429a80ea1f395f328a50eb0a9fc552c3929fbf61745a74d3989";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_0_8_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "oauth2";
            version = "0.8.3";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.8.3";
              sha256 =
                "a2ae2391d296fb15c0858a0fe6b5c24aec6ae006f4865ea5b3d8838b2de53f9e";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "oauth2";
            version = "0.9.0";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.9.0";
              sha256 =
                "c314edaebf832671733b646bdb264117287c7bbf1eb2cefa799788d7f4a69009";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_13_0 }:
          buildMix ({
            name = "oauth2";
            version = "0.9.2";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.9.2";
              sha256 =
                "e489a3cd819dddb71b3a9bbb95ff8b53c64fd7cb1990a89d5da6820dfed233a3";
            };
            beamDeps  = [ hackney_1_13_0 ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2 = oauth2_0_9_2;

    oauth2_chatwork_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_2 }:
          buildMix ({
            name = "oauth2_chatwork";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oauth2_chatwork";
              version = "0.1.0";
              sha256 =
                "8b0482270e308a34c575a9bbd2942ce09bec7f4851c0b4aef61fb23ff29a2ed8";
            };
            beamDeps  = [ oauth2_0_9_2 ];

            meta = {
              description = ''A ChatWork OAuth2 Provider for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eiel/oauth2_chatwork";
            };
          } // packageOverrides)
      ) {};

    oauth2_chatwork = oauth2_chatwork_0_1_0;

    oauth2_erlang_0_6_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "oauth2_erlang";
            version = "0.6.1";
            src = fetchHex {
              pkg = "oauth2_erlang";
              version = "0.6.1";
              sha256 =
                "dc60e92de379fd27c3b9296e2368e97797233a092297d41f47f3a72846b2a974";
            };

            meta = {
              description = ''Erlang OAuth 2.0 implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kivra/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_erlang = oauth2_erlang_0_6_1;

    oauth2_facebook_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_2 }:
          buildMix ({
            name = "oauth2_facebook";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oauth2_facebook";
              version = "0.1.0";
              sha256 =
                "b1d27391bf54c20b84a4441ba313f56993ea3d87131990c115280291397bb689";
            };
            beamDeps  = [ oauth2_0_9_2 ];

            meta = {
              description = ''A Facebook OAuth2 Provider for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrislaskey/oauth2_facebook";
            };
          } // packageOverrides)
      ) {};

    oauth2_facebook = oauth2_facebook_0_1_0;

    oauth2_github_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_2 }:
          buildMix ({
            name = "oauth2_github";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oauth2_github";
              version = "0.1.0";
              sha256 =
                "5042801ae9d82d618fce1b98d60218d2f17bc39eaeda02282b3900b4e14a9e65";
            };
            beamDeps  = [ oauth2_0_9_2 ];

            meta = {
              description = ''A GitHub OAuth2 Provider for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrislaskey/oauth2_github";
            };
          } // packageOverrides)
      ) {};

    oauth2_github = oauth2_github_0_1_0;

    oauth_azure_activedirectory_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          json_2_0_0_SNAPSHOT,
          json_web_token_0_2_10,
          oauth2_0_9_2,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "oauth_azure_activedirectory";
            version = "0.1.2";
            src = fetchHex {
              pkg = "oauth_azure_activedirectory";
              version = "0.1.2";
              sha256 =
                "c70f74afc6d51a122a624d89bc9b2b5cfc92952712cbfcaad787aee3ca1fed47";
            };
            beamDeps  = [
                          json_2_0_0_SNAPSHOT
                          json_web_token_0_2_10
                          oauth2_0_9_2
                          secure_random_0_5_1
                        ];

            meta = {
              description = ''Omniauth authentication for Azure Active
                            Directory using JWT.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/onurkucukkece/oauth_azure_activedirectory";
            };
          } // packageOverrides)
      ) {};

    oauth_azure_activedirectory = oauth_azure_activedirectory_0_1_2;

    oauther_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oauther";
            version = "1.0.2";
            src = fetchHex {
              pkg = "oauther";
              version = "1.0.2";
              sha256 =
                "2b65e6408600d5daed7bb1b108533624b6c34491f0278b44013400aa7b551e4d";
            };

            meta = {
              description = ''Library to authenticate with OAuth 1.0
                            protocol.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/oauther";
            };
          } // packageOverrides)
      ) {};

    oauther_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oauther";
            version = "1.1.1";
            src = fetchHex {
              pkg = "oauther";
              version = "1.1.1";
              sha256 =
                "9374f4302045321874cccdc57eb975893643bd69c3b22bf1312dab5f06e5788e";
            };

            meta = {
              description = ''Library to authenticate with OAuth 1.0
                            protocol.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/oauther";
            };
          } // packageOverrides)
      ) {};

    oauther = oauther_1_1_1;

    object_id_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mongodb_0_4_6,
          result_1_1_1
        }:
          buildMix ({
            name = "object_id";
            version = "1.0.2";
            src = fetchHex {
              pkg = "object_id";
              version = "1.0.2";
              sha256 =
                "209056d38d5c10a013090fe0e9b8ecf5c5bc94b904149a2db03750958c85a89b";
            };
            beamDeps  = [ mongodb_0_4_6 result_1_1_1 ];

            meta = {
              description = ''Mongo BSON ObjectID helper functions'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/s-m-i-t-a/object_id";
            };
          } // packageOverrides)
      ) {};

    object_id = object_id_1_0_2;

    observable_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "observable";
            version = "0.2.0";
            src = fetchHex {
              pkg = "observable";
              version = "0.2.0";
              sha256 =
                "55048609208b382b69218862f9691c41e68ea7023a826f1bc8bfae4be7c87ca6";
            };

            meta = {
              description = ''Provides simple tools to implement the
                            \"Observer\" pattern.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/observable";
            };
          } // packageOverrides)
      ) {};

    observable = observable_0_2_0;

    occi_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          occi_types_0_1_2,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "occi";
            version = "0.2.2";
            src = fetchHex {
              pkg = "occi";
              version = "0.2.2";
              sha256 =
                "54583555195ac481dea3d4b9e323693aafafaa79cef6b52347adaa3f682581c0";
            };
            beamDeps  = [ occi_types_0_1_2 poison_3_1_0 uuid_1_1_8 ];

            meta = {
              description = ''exocci provides libs and DSL for designing and
                            manipulating OCCI (meta-)models.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/erocci/exocci";
            };
          } // packageOverrides)
      ) {};

    occi = occi_0_2_2;

    occi_types_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "occi_types";
            version = "0.1.2";
            src = fetchHex {
              pkg = "occi_types";
              version = "0.1.2";
              sha256 =
                "052babc316fb74d947768baacb88f64bdf19457bf91c127846f0ec5609e88d43";
            };

            meta = {
              longDescription = ''OCCI types checker for exocci application. In
                                a separate package as model compilation requires
                                OCCI types at early stage'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/erocci/exocci_types";
            };
          } // packageOverrides)
      ) {};

    occi_types = occi_types_0_1_2;

    octet_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "octet";
            version = "0.0.2";
            src = fetchHex {
              pkg = "octet";
              version = "0.0.2";
              sha256 =
                "12c7d7cff035f48139e7304913e7c227ce5bf95508ad8096ed510328d916ede3";
            };

            meta = {
              description = ''Octet string converter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kiennt/octet";
            };
          } // packageOverrides)
      ) {};

    octet = octet_0_0_2;

    octicons_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "octicons";
            version = "0.5.0";
            src = fetchHex {
              pkg = "octicons";
              version = "0.5.0";
              sha256 =
                "130152ff80501007b5754a7b4b66456ee2a2c3e2affee8eff0a814d071bc8bb3";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Provides the SVG versions of GitHub`s Octicons to
                            an Elixir application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/octicons-ex";
            };
          } // packageOverrides)
      ) {};

    octicons = octicons_0_5_0;

    oddsshark_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "oddsshark";
            version = "0.4.1";
            src = fetchHex {
              pkg = "oddsshark";
              version = "0.4.1";
              sha256 =
                "b45040c3875c430b0c9536c216e95daed13211244a1c5d386f635760f592ddd5";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''OddsShark API wrapper in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/krmannix/oddsshark";
            };
          } // packageOverrides)
      ) {};

    oddsshark = oddsshark_0_4_1;

    odgn_json_pointer_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odgn_json_pointer";
            version = "1.3.1";
            src = fetchHex {
              pkg = "odgn_json_pointer";
              version = "1.3.1";
              sha256 =
                "08abe942367ded78a9b279ea0807f85d820c76f7cf3b08da6f00bcfc5aaa347b";
            };

            meta = {
              description = ''This is an implementation of JSON Pointer (RFC
                            6901) for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/odogono/elixir-jsonpointer";
            };
          } // packageOverrides)
      ) {};

    odgn_json_pointer_2_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odgn_json_pointer";
            version = "2.3.0";
            src = fetchHex {
              pkg = "odgn_json_pointer";
              version = "2.3.0";
              sha256 =
                "e51788bd7904212d5c182625069472c3edb43f25c2416dbb010e087078e93731";
            };

            meta = {
              description = ''This is an implementation of JSON Pointer (RFC
                            6901) for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/odogono/elixir-jsonpointer";
            };
          } // packageOverrides)
      ) {};

    odgn_json_pointer = odgn_json_pointer_2_3_0;

    odi_0_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hex2bin_1_0_0,
          lager_3_5_1,
          small_ints_0_1_0
        }:
          buildRebar3 ({
            name = "odi";
            version = "0.1.0";
            src = fetchHex {
              pkg = "odi";
              version = "0.1.0";
              sha256 =
                "1657195e2a126e045a2ee4eb563f6117b44d487dd98170d187c3945349ba7644";
            };

            beamDeps  = [ hex2bin_1_0_0 lager_3_5_1 small_ints_0_1_0 ];

            meta = {
              description = ''OrientDB Erlang Client'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/pvalsecc/odi";
            };
          } // packageOverrides)
      ) {};

    odi = odi_0_1_0;

    odin_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odin";
            version = "0.0.1";
            src = fetchHex {
              pkg = "odin";
              version = "0.0.1";
              sha256 =
                "17951e0c8c73f10b38e4110e6ecefe507b4ea6203bcea7d55e34320be60b5a4a";
            };

            meta = {
              description = ''elixir toolkit for building command-line
                            interfaces.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plus-eg/odin";
            };
          } // packageOverrides)
      ) {};

    odin = odin_0_0_1;

    odo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "odo";
              version = "0.1.0";
              sha256 =
                "e8b52311c8f5100bfa07876c7afdb49e2be9ba10f3d34781f10be43d1c51573c";
            };

            meta = {
              longDescription = ''Odo is a simple GenServer based token bucket
                                which can be used for communicating with remote
                                APIs. It lets you know when it`s safe to
                                proceed, given a particular rate limit.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nigelsmith/odo";
            };
          } // packageOverrides)
      ) {};

    odo = odo_0_1_0;

    odt_potion_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odt_potion";
            version = "0.0.1";
            src = fetchHex {
              pkg = "odt_potion";
              version = "0.0.1";
              sha256 =
                "f2c429129dc1e636dbd3563750c667315aff650ddfe7aefe06991299f76f35bd";
            };

            meta = {
              description = ''Substitute placeholders in ODT`s with custom
                            information'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/andrewcottage/odt_potion";
            };
          } // packageOverrides)
      ) {};

    odt_potion = odt_potion_0_0_1;

    oembed_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          floki_0_20_3,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "oembed";
            version = "0.2.1";
            src = fetchHex {
              pkg = "oembed";
              version = "0.2.1";
              sha256 =
                "2a4b0274ce9da4fa50c49b0547633c61588397b306ad1edf752408b754d15b77";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          floki_0_20_3
                          httpoison_1_2_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''oEmbed consumer library for Elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/r8/elixir-oembed";
            };
          } // packageOverrides)
      ) {};

    oembed = oembed_0_2_1;

    og_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, apex_1_2_0 }:
          buildMix ({
            name = "og";
            version = "0.2.3";
            src = fetchHex {
              pkg = "og";
              version = "0.2.3";
              sha256 =
                "0f7b1704f0db95c292911318a7486a0cec19137b1ecf605ae9f80d56fcdf9008";
            };
            beamDeps  = [ apex_1_2_0 ];

            meta = {
              description = ''Og is a small collection of debugging functions
                            for use during development.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/og";
            };
          } // packageOverrides)
      ) {};

    og_1_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_1_2_0,
          secure_log_formatter_1_2_0
        }:
          buildMix ({
            name = "og";
            version = "1.1.2";
            src = fetchHex {
              pkg = "og";
              version = "1.1.2";
              sha256 =
                "dc3b4dc3bcf359d07b2db5d0f5f9bab3c7d8fda51789e2931d57fddbf82a7046";
            };
            beamDeps  = [ apex_1_2_0 secure_log_formatter_1_2_0 ];

            meta = {
              description = ''Og is a small collection of debugging functions
                            for use during development.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/og";
            };
          } // packageOverrides)
      ) {};

    og = og_1_1_2;

    ojson_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ojson";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ojson";
              version = "1.0.0";
              sha256 =
                "125088e64d95704194dc8b4b5095502363e0ca870b72712f61929499d3c48d00";
            };

            meta = {
              description = ''Ordered JSON (OJSON) - deterministic or stable
                            serialization'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-ojson";
            };
          } // packageOverrides)
      ) {};

    ojson = ojson_1_0_0;

    ok_1_11_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ok";
            version = "1.11.0";
            src = fetchHex {
              pkg = "ok";
              version = "1.11.0";
              sha256 =
                "726361bef6a75aae43006223a419ec8570c06e4da836930f27ed72ca210dc3c3";
            };

            meta = {
              description = ''Elegant error/exception handling in Elixir, with
                            result monads.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/CrowdHailer/OK";
            };
          } // packageOverrides)
      ) {};

    ok = ok_1_11_0;

    ok_jose_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ok_jose";
            version = "3.0.0";
            src = fetchHex {
              pkg = "ok_jose";
              version = "3.0.0";
              sha256 =
                "e66c6f27d5a1b685a8ae3393c966b9f67de82fb4bae184f351d9706a855cd602";
            };

            meta = {
              description = ''Pipe functions that produce ok/error tuples.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/ok_jose";
            };
          } // packageOverrides)
      ) {};

    ok_jose = ok_jose_3_0_0;

    okasaki_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          extractable_0_2_0,
          fun_land_0_9_2,
          insertable_0_2_0
        }:
          buildMix ({
            name = "okasaki";
            version = "1.0.0";
            src = fetchHex {
              pkg = "okasaki";
              version = "1.0.0";
              sha256 =
                "de879ce6fff6aa234c82c8f16e116a42ca050f94beae20dfd677fea26e961df3";
            };
            beamDeps  = [ extractable_0_2_0 fun_land_0_9_2 insertable_0_2_0
                      ];

            meta = {
              longDescription = ''Well-structured Queues for Elixir, offering a
                                common interface with multiple implementations
                                with varying performance guarantees that can be
                                switched in your configuration.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Qqwy/elixir_okasaki";
            };
          } // packageOverrides)
      ) {};

    okasaki = okasaki_1_0_0;

    ollo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ollo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ollo";
              version = "0.1.0";
              sha256 =
                "84ab506229658c9d90f9777680ae4d1aff041087b371f6d07a512290ea663e84";
            };

            meta = {
              description = ''A lightweight Oauth2 Provider implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshuaballoch/ollo";
            };
          } // packageOverrides)
      ) {};

    ollo = ollo_0_1_0;

    onartsipac_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "onartsipac";
            version = "0.1.0";
            src = fetchHex {
              pkg = "onartsipac";
              version = "0.1.0";
              sha256 =
                "ad6798451f3fa75ab3a1c7f666f66c4acc917c039f96a543680063b2a4d632be";
            };

            meta = {
              description = ''Saithe9v mib4ahVe AeF9aihi eor5zuSh'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    onartsipac = onartsipac_0_1_0;

    onnxs_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, protobuf_0_5_4 }:
          buildMix ({
            name = "onnxs";
            version = "0.2.0";
            src = fetchHex {
              pkg = "onnxs";
              version = "0.2.0";
              sha256 =
                "a3b6fe2ea1cbd63a85f35dcfd5d91e22736899b8e5551ce8259b9ff231070f73";
            };
            beamDeps  = [ protobuf_0_5_4 ];

            meta = {
              description = ''ONNX interop for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffreyksmithjr/onnxs";
            };
          } // packageOverrides)
      ) {};

    onnxs = onnxs_0_2_0;

    oop_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oop";
            version = "0.1.1";
            src = fetchHex {
              pkg = "oop";
              version = "0.1.1";
              sha256 =
                "8cf355eb5c3912ca8381a316bd0ac89f3f144550c0fe4d41eb1486b1f7ebc8d4";
            };

            meta = {
              description = ''OOP in Elixir!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wojtekmach/oop";
            };
          } // packageOverrides)
      ) {};

    oop = oop_0_1_1;

    oops_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oops";
            version = "0.2.0";
            src = fetchHex {
              pkg = "oops";
              version = "0.2.0";
              sha256 =
                "963c0a16bc11f56621339f31d629cfb44c3a665853f65fc717f62d2f233c6e81";
            };

            meta = {
              description = ''oops'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    oops = oops_0_2_0;

    open_cagex_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "open_cagex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "open_cagex";
              version = "0.1.2";
              sha256 =
                "f6b39dd7bcbf008cbe7f5b81a54cc811aef4df2ba9ab01aa6d61542008b16fd0";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An OpenCage Geocoder API wrapper written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dsantosmerino/open-cagex";
            };
          } // packageOverrides)
      ) {};

    open_cagex = open_cagex_0_1_2;

    open_graph_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_2_0 }:
          buildMix ({
            name = "open_graph";
            version = "0.0.3";
            src = fetchHex {
              pkg = "open_graph";
              version = "0.0.3";
              sha256 =
                "ccdc3ecf0c1573e6d1455688949fe1809424c31303b00aae4e72fdb612c733f8";
            };
            beamDeps  = [ httpoison_1_2_0 ];

            meta = {
              description = ''A Elixir wrapper for the Open Graph protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrielfn/open_graph";
            };
          } // packageOverrides)
      ) {};

    open_graph = open_graph_0_0_3;

    open_graph_extended_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_20_3 }:
          buildMix ({
            name = "open_graph_extended";
            version = "0.1.1";
            src = fetchHex {
              pkg = "open_graph_extended";
              version = "0.1.1";
              sha256 =
                "a8187f44ed64b262ec33b517276d1c7048002d8a9b0baaa9dcc1217559e598c1";
            };
            beamDeps  = [ floki_0_20_3 ];

            meta = {
              longDescription = ''A Elixir wrapper for the Open Graph protocol,
                                which supports all properties from the OpenGraph
                                Protocol Originally based on Andriel Nuernberg`s
                                version at
                                https://github.com/andrielfn/open_graph'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    open_graph_extended = open_graph_extended_0_1_1;

    open_scad_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, file_system_0_2_6
        }:
          buildMix ({
            name = "open_scad";
            version = "0.1.0";
            src = fetchHex {
              pkg = "open_scad";
              version = "0.1.0";
              sha256 =
                "887016c4e25972d06f40e0153cca2b1d98a8e9cbde9459373093e626cf092c61";
            };
            beamDeps  = [ file_system_0_2_6 ];

            meta = {
              description = ''An Elixir Library for working with OpenSCAD
                            models.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joedevivo/open_scad";
            };
          } // packageOverrides)
      ) {};

    open_scad = open_scad_0_1_0;

    opencadc_datalink_client_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_1_1,
          opencadc_registry_client_0_3_0
        }:
          buildMix ({
            name = "opencadc_datalink_client";
            version = "0.2.1";
            src = fetchHex {
              pkg = "opencadc_datalink_client";
              version = "0.2.1";
              sha256 =
                "9079320c2a2c5dcab637ec4144754eb32d06b9710480b34a17745874a89c09cf";
            };
            beamDeps  = [ httpoison_1_1_1 opencadc_registry_client_0_3_0 ];

            meta = {
              description = ''IVOA registry client to lookup IVOA services.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/at88mph/opencadc_datalink_client";
            };
          } // packageOverrides)
      ) {};

    opencadc_datalink_client = opencadc_datalink_client_0_2_1;

    opencadc_registry_client_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_1_1 }:
          buildMix ({
            name = "opencadc_registry_client";
            version = "0.3.0";
            src = fetchHex {
              pkg = "opencadc_registry_client";
              version = "0.3.0";
              sha256 =
                "dd328ef3de14ca2181681ca6581966dbcdb01ada010e7a45c3afad21ba07b826";
            };
            beamDeps  = [ httpoison_1_1_1 ];

            meta = {
              description = ''IVOA registry client to lookup IVOA services.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/at88mph/opencadc_registry_client";
            };
          } // packageOverrides)
      ) {};

    opencadc_registry_client = opencadc_registry_client_0_3_0;

    opencadc_vospace_client_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_1_1,
          opencadc_datalink_client_0_2_1,
          opencadc_registry_client_0_3_0
        }:
          buildMix ({
            name = "opencadc_vospace_client";
            version = "0.2.2";
            src = fetchHex {
              pkg = "opencadc_vospace_client";
              version = "0.2.2";
              sha256 =
                "4069344f50490041d2b77be474dc10f133a72cb41fbe369c90e0f76870ce1940";
            };
            beamDeps  = [
                          httpoison_1_1_1
                          opencadc_datalink_client_0_2_1
                          opencadc_registry_client_0_3_0
                        ];

            meta = {
              description = ''IVOA VOSpace client.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/at88mph/opencadc_vospace_client";
            };
          } // packageOverrides)
      ) {};

    opencadc_vospace_client = opencadc_vospace_client_0_2_2;

    openid_connect_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          jason_1_0_1,
          jose_1_8_4
        }:
          buildMix ({
            name = "openid_connect";
            version = "0.1.1";
            src = fetchHex {
              pkg = "openid_connect";
              version = "0.1.1";
              sha256 =
                "be3cfd5233237e30388070b9fe31744f750aba493da41915554e68957dbfe552";
            };
            beamDeps  = [ httpoison_1_2_0 jason_1_0_1 jose_1_8_4 ];

            meta = {
              description = ''OpenID Connect for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/openid_connect";
            };
          } // packageOverrides)
      ) {};

    openid_connect = openid_connect_0_1_1;

    openlibrary_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          isbn_0_1_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "openlibrary";
            version = "0.1.1";
            src = fetchHex {
              pkg = "openlibrary";
              version = "0.1.1";
              sha256 =
                "06d2dedf2f22514f59cd623934960770b5ea480498fde9b4b88032b0e8d89271";
            };
            beamDeps  = [ httpoison_0_13_0 isbn_0_1_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for Open Library REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/openlibrary";
            };
          } // packageOverrides)
      ) {};

    openlibrary = openlibrary_0_1_1;

    openstax_swift_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "openstax_swift";
            version = "0.3.0";
            src = fetchHex {
              pkg = "openstax_swift";
              version = "0.3.0";
              sha256 =
                "99c24d9392600c4ccc35c4758066dd3d31ffb470ab53fafc61003c7872ead950";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''OpenStack Swift client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/openstax_swift";
            };
          } // packageOverrides)
      ) {};

    openstax_swift = openstax_swift_0_3_0;

    openstax_tempauth_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "openstax_tempauth";
            version = "0.1.0";
            src = fetchHex {
              pkg = "openstax_tempauth";
              version = "0.1.0";
              sha256 =
                "7540b19d31ec3279277ef4d5f423a70fb583daf15cd4c45786991c4a94ab9d41";
            };
            beamDeps  = [ connection_1_0_4 httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''OpenStack TempAuth client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/openstax_tempauth";
            };
          } // packageOverrides)
      ) {};

    openstax_tempauth = openstax_tempauth_0_1_0;

    openstex_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          httpipe_0_9_0,
          jason_1_1_1,
          mapail_1_0_2
        }:
          buildMix ({
            name = "openstex";
            version = "0.4.1";
            src = fetchHex {
              pkg = "openstex";
              version = "0.4.1";
              sha256 =
                "0beba3cbd9b917e4e654237d277017576b9bcfc9ef0937afb445409a164c8887";
            };
            beamDeps  = [
                          hackney_1_13_0 httpipe_0_9_0 jason_1_1_1 mapail_1_0_2
                        ];

            meta = {
              description = ''A client in elixir for making requests to
                            openstack compliant apis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/openstex";
            };
          } // packageOverrides)
      ) {};

    openstex = openstex_0_4_1;

    opentype_0_5_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, unicode_data_0_7_0
        }:
          buildMix ({
            name = "opentype";
            version = "0.5.1";
            src = fetchHex {
              pkg = "opentype";
              version = "0.5.1";
              sha256 =
                "1868bfe0729fd0c18add911a169eb18b695cfb5acade210359b92bacec2f23c5";
            };
            beamDeps  = [ unicode_data_0_7_0 ];

            meta = {
              description = ''Provides facilities for working with OpenType
                            fonts.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jbowtie/opentype-elixir";
            };
          } // packageOverrides)
      ) {};

    opentype = opentype_0_5_1;

    operator_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "operator";
            version = "0.2.0";
            src = fetchHex {
              pkg = "operator";
              version = "0.2.0";
              sha256 =
                "cb533c378569053acd021fff5970691e267830818ad70c483331da96197aa784";
            };

            meta = {
              description = ''Helpers for defining operators'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/operator";
            };
          } // packageOverrides)
      ) {};

    operator = operator_0_2_0;

    opq_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_14_0 }:
          buildMix ({
            name = "opq";
            version = "2.0.1";
            src = fetchHex {
              pkg = "opq";
              version = "2.0.1";
              sha256 =
                "bf3e72fa95da2e7a4264b7763f31d38fddd0c9cc1b80f56d320f106862011037";
            };
            beamDeps  = [ gen_stage_0_14_0 ];

            meta = {
              description = ''A simple, in-memory queue with worker pooling and
                            rate limiting in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fredwu/opq";
            };
          } // packageOverrides)
      ) {};

    opq_3_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_14_0 }:
          buildMix ({
            name = "opq";
            version = "3.0.1";
            src = fetchHex {
              pkg = "opq";
              version = "3.0.1";
              sha256 =
                "ffc95c04bdd833b028d4ce9b069692e10776ac9f741e875547f1191538a0f1af";
            };
            beamDeps  = [ gen_stage_0_14_0 ];

            meta = {
              description = ''A simple, in-memory queue with worker pooling and
                            rate limiting in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fredwu/opq";
            };
          } // packageOverrides)
      ) {};

    opq = opq_3_0_1;

    optimal_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "optimal";
            version = "0.3.3";
            src = fetchHex {
              pkg = "optimal";
              version = "0.3.3";
              sha256 =
                "f1e7167755e5534f1bb12ae63718cd9feab142e4a0fbd137bd1596c98c1485da";
            };

            meta = {
              description = ''A schema based `opt` validator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/albert-io/optimal";
            };
          } // packageOverrides)
      ) {};

    optimal = optimal_0_3_3;

    optimus_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_7_0 }:
          buildMix ({
            name = "optimus";
            version = "0.1.8";
            src = fetchHex {
              pkg = "optimus";
              version = "0.1.8";
              sha256 =
                "e6e589c36a5d0a976544d7ecf01e900bc7bcff1750dd33ebfb7538f87d0b64ce";
            };
            beamDeps  = [ yamerl_0_7_0 ];

            meta = {
              description = ''Command line option parser inspired by clap.rs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/savonarola/optimus";
            };
          } // packageOverrides)
      ) {};

    optimus = optimus_0_1_8;

    optipng_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, temp_0_4_5 }:
          buildMix ({
            name = "optipng";
            version = "0.1.0";
            src = fetchHex {
              pkg = "optipng";
              version = "0.1.0";
              sha256 =
                "ef1657313e7b90c3937a7685f9e5b84c59a4f6fbec726b12e536453f9bfc7eb7";
            };
            beamDeps  = [ temp_0_4_5 ];

            meta = {
              description = ''A simple wrapper of `optipng` command line.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qhwa/elixir-optipng";
            };
          } // packageOverrides)
      ) {};

    optipng = optipng_0_1_0;

    optium_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "optium";
            version = "0.3.0";
            src = fetchHex {
              pkg = "optium";
              version = "0.3.0";
              sha256 =
                "e0e84d22d348b201ceec93ccb9d26576786ff8d9d473d056b66765c58311003e";
            };

            meta = {
              description = ''Library for validating arguments passed in
                            keyword lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arkgil/optium";
            };
          } // packageOverrides)
      ) {};

    optium = optium_0_3_0;

    opus_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          graphvix_0_5_0,
          retry_0_10_0
        }:
          buildMix ({
            name = "opus";
            version = "0.5.1";
            src = fetchHex {
              pkg = "opus";
              version = "0.5.1";
              sha256 =
                "e8fd15a4be3fa1233731cd7d2a3fd2a9a6210a286fd15e3fc5524efe93eb8258";
            };
            beamDeps  = [ graphvix_0_5_0 retry_0_10_0 ];

            meta = {
              description = ''Framework for creating pluggable business logic
                            components'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zorbash/opus";
            };
          } // packageOverrides)
      ) {};

    opus = opus_0_5_1;

    ord_map_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ord_map";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ord_map";
              version = "0.1.0";
              sha256 =
                "c3c87eea4f196bf0ab316eb2f089a922fb783c59a2a579bcdea616c06a7faebb";
            };

            meta = {
              description = ''Ordered map for Elixir lang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MartinKavik/ord_map";
            };
          } // packageOverrides)
      ) {};

    ord_map = ord_map_0_1_0;

    ord_map_encoder_poison_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ord_map_0_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ord_map_encoder_poison";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ord_map_encoder_poison";
              version = "0.1.0";
              sha256 =
                "7494e447474bc629efd14dd1d47cd2f035afcb612ecdd374964364d50160192f";
            };
            beamDeps  = [ ord_map_0_1_0 poison_3_1_0 ];

            meta = {
              description = ''OrdMap encoder for Poison'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MartinKavik/ord_map_encoder_poison";
            };
          } // packageOverrides)
      ) {};

    ord_map_encoder_poison = ord_map_encoder_poison_0_1_0;

    order_invariant_compare_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "order_invariant_compare";
            version = "1.0.0";
            src = fetchHex {
              pkg = "order_invariant_compare";
              version = "1.0.0";
              sha256 =
                "e99a9f4c27c09edf6d951029719a84fa959b2df1188eb253427544d63683fdc3";
            };

            meta = {
              longDescription = ''OrderInvariantCompare provides functionality
                                for order invariant equality comparison.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbramson/order_invariant_compare";
            };
          } // packageOverrides)
      ) {};

    order_invariant_compare = order_invariant_compare_1_0_0;

    ordered_list_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ordered_list";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ordered_list";
              version = "0.1.0";
              sha256 =
                "6b6410f35d1bda7335fc0c5f16e2b6f5a6a8c162363073931347dc184521159d";
            };

            meta = {
              description = ''Sorting and reordering positions in a list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarondufall/ordered_list";
            };
          } // packageOverrides)
      ) {};

    ordered_list = ordered_list_0_1_0;

    ordinal_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ordinal";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ordinal";
              version = "0.1.0";
              sha256 =
                "9f3d0a50c285ac99faa9626376e11afa6fc83d42e95166768b37d176cff485a3";
            };

            meta = {
              description = ''Convert numbers to their ordinalized form.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/andrewhao/ordinal";
            };
          } // packageOverrides)
      ) {};

    ordinal = ordinal_0_1_0;

    org_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dialyxir_0_5_1 }:
          buildMix ({
            name = "org";
            version = "0.1.1";
            src = fetchHex {
              pkg = "org";
              version = "0.1.1";
              sha256 =
                "a3d2c90df81d2a1c289e1a785c9cc9f285b21a49e41eca2272f4a5c1b137eca4";
            };
            beamDeps  = [ dialyxir_0_5_1 ];

            meta = {
              description = ''org-mode parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nilclass/elixir_org";
            };
          } // packageOverrides)
      ) {};

    org = org_0_1_1;

    orientex_0_0_13 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, db_connection_1_1_3
        }:
          buildMix ({
            name = "orientex";
            version = "0.0.13";
            src = fetchHex {
              pkg = "orientex";
              version = "0.0.13";
              sha256 =
                "c91fc2aad872ba3d5e80bfda3fb2765d73d9c87d49edcefd0b7248f00242cd67";
            };
            beamDeps  = [ db_connection_1_1_3 ];

            meta = {
              description = ''An OrientDB network binary protocol driver for
                            Elixir 1.3+ using DBConnection.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/orientex";
            };
          } // packageOverrides)
      ) {};

    orientex = orientex_0_0_13;

    os_utils_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "os_utils";
            version = "0.3.0";
            src = fetchHex {
              pkg = "os_utils";
              version = "0.3.0";
              sha256 =
                "b49e32630b3f198b5fe4f6858aa03d1236d659564f98d522c9e646c045e13b64";
            };

            meta = {
              description = ''OS utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/orderthruchaos/os_utils";
            };
          } // packageOverrides)
      ) {};

    os_utils = os_utils_0_3_0;

    osc_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "osc";
            version = "0.1.2";
            src = fetchHex {
              pkg = "osc";
              version = "0.1.2";
              sha256 =
                "8cdd8be5e266bf8d99602a7637d6526380d97f704ec600f32be1b4d71d78f4c8";
            };

            meta = {
              description = ''OSC encoder/decoder for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/osc_ex";
            };
          } // packageOverrides)
      ) {};

    osc = osc_0_1_2;

    osrs_ex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "osrs_ex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "osrs_ex";
              version = "0.1.2";
              sha256 =
                "893c171f561c017a36cb2802abd3bdff13451e647ba351c1c7341b0837a94d3f";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''An elixir interface to the Oldschool Runescape
                            APIs.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    osrs_ex = osrs_ex_0_1_2;

    ot_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ot_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ot_ex";
              version = "0.1.0";
              sha256 =
                "8b66a33554617a6feef8f70e20ce77a46c5c730d213adae6afbf60398ecd1c24";
            };

            meta = {
              longDescription = ''OT provides libraries for operational
                                transformation, which is a method of achieving
                                consistency in a collaborative software
                                system.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/jclem/ot_ex";
            };
          } // packageOverrides)
      ) {};

    ot_ex = ot_ex_0_1_0;

    ot_server_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ot_ex_0_1_0 }:
          buildMix ({
            name = "ot_server";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ot_server";
              version = "0.3.1";
              sha256 =
                "0b96cc1bfca2840a37846fa972efb4cbe8d1af308363aca0893fefd550b7a7cd";
            };
            beamDeps  = [ ot_ex_0_1_0 ];

            meta = {
              longDescription = ''OT.Server provides a generic server for
                                submitting operations in an operational
                                transformation system.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/jclem/ot_server";
            };
          } // packageOverrides)
      ) {};

    ot_server = ot_server_0_3_1;

    otter_0_4_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, otter_lib_0_1_1
        }:
          buildRebar3 ({
            name = "otter";
            version = "0.4.0";
            src = fetchHex {
              pkg = "otter";
              version = "0.4.0";
              sha256 =
                "7c9b65d019c0431c9d762e22e70bced04691fc75184f13a791fa7aef429e1aa0";
            };

            beamDeps  = [ otter_lib_0_1_1 ];

            meta = {
              description = ''OpenTracing Toolkit for ERlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bluehouse-technology/otter";
            };
          } // packageOverrides)
      ) {};

    otter = otter_0_4_0;

    otter_lib_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "otter_lib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "otter_lib";
              version = "0.1.1";
              sha256 =
                "b467b2d0be600bc374a6fea4dbf679b60727152b39b4659ac067fc895cb4d236";
            };

            meta = {
              description = ''Library with otter common functions'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bluehouse-technology/otter_lib";
            };
          } // packageOverrides)
      ) {};

    otter_lib = otter_lib_0_1_1;

    otters_0_2_10 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dynamic_compile_1_0_0,
          ibrowse_4_4_0
        }:
          buildRebar3 ({
            name = "otters";
            version = "0.2.10";
            src = fetchHex {
              pkg = "otters";
              version = "0.2.10";
              sha256 =
                "00d91feef10a02c4ec969beb25b693583839da85ceeb2e5205a638063dd44e7a";
            };

            beamDeps  = [ dynamic_compile_1_0_0 ibrowse_4_4_0 ];

            meta = {
              description = ''OpenTracing Toolkit for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fifo/otters";
            };
          } // packageOverrides)
      ) {};

    otters = otters_0_2_10;

    otterx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, otters_0_2_10 }:
          buildMix ({
            name = "otterx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "otterx";
              version = "0.1.0";
              sha256 =
                "3475ec4b08fbabfdacefa190fccc327a0de244320280b1fccd05c6e97a210cee";
            };
            beamDeps  = [ otters_0_2_10 ];

            meta = {
              description = ''OpenTracing library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/otterx";
            };
          } // packageOverrides)
      ) {};

    otterx = otterx_0_1_0;

    oui_query_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "oui_query";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oui_query";
              version = "0.1.0";
              sha256 =
                "fd6d679b4a5dd15922d316e016fe9e9b7043abbf5183aae75260f4867a01ad4d";
            };
            beamDeps  = [ ex_doc_0_18_3 httpoison_0_13_0 ];

            meta = {
              description = ''Library for downloading & querying the latest
                            Wireshark OUI Database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattneel/oui_query";
            };
          } // packageOverrides)
      ) {};

    oui_query = oui_query_0_1_0;

    outkit_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "outkit";
            version = "0.0.3";
            src = fetchHex {
              pkg = "outkit";
              version = "0.0.3";
              sha256 =
                "af87ccc7dd79a977868c25fb5848068a167a6ec2ba6e34152a71704da03b0af8";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Outkit Elixir client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/outkit/elixir-client";
            };
          } // packageOverrides)
      ) {};

    outkit = outkit_0_0_3;

    overpex_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "overpex";
            version = "0.3.1";
            src = fetchHex {
              pkg = "overpex";
              version = "0.3.1";
              sha256 =
                "25c007d8ec576209fce7b1cabf469e1337bcfb60e750ceb1b9cfd247a529f904";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''Simple wrapper for the Overpass API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/brunoasantos/overpex";
            };
          } // packageOverrides)
      ) {};

    overpex = overpex_0_3_1;

    overseer_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_loader_0_4_1,
          jason_1_1_1,
          nanoid_1_0_1,
          vex_0_6_0
        }:
          buildMix ({
            name = "overseer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "overseer";
              version = "0.1.0";
              sha256 =
                "4b55f70ce14dc3728f8ca61cd02577a3e4f298b35dc85b3c3132e6653c62a283";
            };
            beamDeps  = [ ex_loader_0_4_1 jason_1_1_1 nanoid_1_0_1 vex_0_6_0
                      ];

            meta = {
              description = ''Overseer is similar to OTP Supervisor, but it
                            supervise the erlang/elixir nodes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tyrchen/overseer";
            };
          } // packageOverrides)
      ) {};

    overseer = overseer_0_1_0;

    ox_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ox";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ox";
              version = "0.1.0";
              sha256 =
                "c3a7d27a1334650bc065883cc393dbad10752192eb4b6d8c7a0a14b67f0b4c30";
            };

            meta = {
              description = ''An implementation of Okasaki data structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ckampfe/ox";
            };
          } // packageOverrides)
      ) {};

    ox = ox_0_1_0;

    oxr_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "oxr";
            version = "0.4.0";
            src = fetchHex {
              pkg = "oxr";
              version = "0.4.0";
              sha256 =
                "4671ff764bb7c074295348e3c61d8452f4e10c20cf0df06c8bd707a6da4d127c";
            };
            beamDeps  = [ httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A thin API wrapper for Open Exchange Rates
                            (https://openexchangerates.org)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marksilvis/oxr-elixir";
            };
          } // packageOverrides)
      ) {};

    oxr = oxr_0_4_0;

    oxygen_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gproc_0_6_1 }:
          buildMix ({
            name = "oxygen";
            version = "0.1.2";
            src = fetchHex {
              pkg = "oxygen";
              version = "0.1.2";
              sha256 =
                "9c275014893c3eb813d2a68f5b58ae39eddc4392ce47803b23606c38e7b7ac82";
            };
            beamDeps  = [ gproc_0_6_1 ];

            meta = {
              description = ''Named GenServer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/oxygen";
            };
          } // packageOverrides)
      ) {};

    oxygen = oxygen_0_1_2;

    p_enum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "p_enum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "p_enum";
              version = "0.1.0";
              sha256 =
                "565a0f8ef9a65cf8245542e57f027745dbfae859aaa7c8714e6b2054ce5c107f";
            };

            meta = {
              longDescription = ''Parallel Enum. This library provides a set of
                                functions similar to the ones in the Enum module
                                except that the function argument is executed on
                                each element in parallel.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zfletch/p_enum";
            };
          } // packageOverrides)
      ) {};

    p_enum = p_enum_0_1_0;

    paasaa_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paasaa";
            version = "0.2.2";
            src = fetchHex {
              pkg = "paasaa";
              version = "0.2.2";
              sha256 =
                "8f782587b43090ab256544baea1722b564f58dfe76fb1e1cf284db1d874443f5";
            };

            meta = {
              description = ''Natural language detection'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minibikini/paasaa";
            };
          } // packageOverrides)
      ) {};

    paasaa = paasaa_0_2_2;

    pace_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pace";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pace";
              version = "0.1.1";
              sha256 =
                "0f3a321d43ffea13373fb5e86304a106b894aee8f2e637dd1505d7458a8b4053";
            };

            meta = {
              description = ''Lightweight elixir performance analysis
                            library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/samontea/pace";
            };
          } // packageOverrides)
      ) {};

    pace = pace_0_1_1;

    pachyderm_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pachyderm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pachyderm";
              version = "0.1.0";
              sha256 =
                "cc959a61c88fab6a98528ff1006590c641e49f08aba6cc9cd7eb44d8f4b86313";
            };

            meta = {
              description = ''Immortal(virtual) actors.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/pachyderm";
            };
          } // packageOverrides)
      ) {};

    pachyderm = pachyderm_0_1_0;

    pact_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pact";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pact";
              version = "0.2.0";
              sha256 =
                "a19000dcfd6c6b220e508ed44e9040d83e4814db2f6f74b11de1a4597a8de05e";
            };

            meta = {
              description = ''Elixir dependency registry for better testing and
                            cleaner code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/pact";
            };
          } // packageOverrides)
      ) {};

    pact = pact_0_2_0;

    page_object_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hound_1_0_4,
          inflex_1_7_0
        }:
          buildMix ({
            name = "page_object";
            version = "0.4.0";
            src = fetchHex {
              pkg = "page_object";
              version = "0.4.0";
              sha256 =
                "59ad6c9c8af17fbdae4eef9093a8030ce42fd01ef111fdf56e93efbe4b8fa3da";
            };
            beamDeps  = [ hound_1_0_4 inflex_1_7_0 ];

            meta = {
              longDescription = ''page_object is a DSL implementing a Page
                                Object pattern for automated testing in Elixir.
                                The API for page_object is inspired by
                                ember-cli-page-object. The package relies on
                                hound to provide web page interaction.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/samueljseay/page_object";
            };
          } // packageOverrides)
      ) {};

    page_object = page_object_0_4_0;

    pagerduty_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pagerduty";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pagerduty";
              version = "0.0.1";
              sha256 =
                "5623afee7239a38dfeed365cb6ec42209611d453e9a7a8981fd5bfcf7f5dade5";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/veverkap/pagerduty";
            };
          } // packageOverrides)
      ) {};

    pagerduty = pagerduty_0_0_1;

    pagexduty_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "pagexduty";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pagexduty";
              version = "0.1.0";
              sha256 =
                "7292a63eeb27637ff19f91f50910d2bbbc860e1eb0413aa5a5035ef32b41b232";
            };
            beamDeps  = [ exjsx_3_1_0 httpoison_0_13_0 ];

            meta = {
              description = ''A Pagerduty client for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ride/pagexduty";
            };
          } // packageOverrides)
      ) {};

    pagexduty = pagexduty_0_1_0;

    paginex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paginex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "paginex";
              version = "0.0.1";
              sha256 =
                "4fdc1a0bb02fbd910d24c59caae6d5793fd24a2a29d6498c04a332095e616770";
            };

            meta = {
              description = ''Exposes a pagination struct that can be helpful
                            to render the pagination html.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bhserna/paginex";
            };
          } // packageOverrides)
      ) {};

    paginex = paginex_0_0_1;

    painstaking_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exoddic_1_3_6 }:
          buildMix ({
            name = "painstaking";
            version = "1.0.0";
            src = fetchHex {
              pkg = "painstaking";
              version = "1.0.0";
              sha256 =
                "cddcd22ce3108b8c8bb4f5982ae7bb706a27ff7725ea9aa876a3f01117ff8228";
            };
            beamDeps  = [ exoddic_1_3_6 ];

            meta = {
              description = ''Bet stake sizing recommendations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/painstaking";
            };
          } // packageOverrides)
      ) {};

    painstaking = painstaking_1_0_0;

    pairs_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pairs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pairs";
              version = "0.1.0";
              sha256 =
                "667f01a081771f3e3a89e69a7c29a457d8e71e5c1dc84395f26e74f8e6af2656";
            };

            meta = {
              description = ''Pairs is a small library that makes it easy to
                            create pairs from two lists.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sebastiangeiger/pairs";
            };
          } // packageOverrides)
      ) {};

    pairs = pairs_0_1_0;

    palette_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "palette";
            version = "0.0.2";
            src = fetchHex {
              pkg = "palette";
              version = "0.0.2";
              sha256 =
                "0ad5bbd207b4462078888882b494de937690659bb72ca34ff247b1c9c4784033";
            };

            meta = {
              description = ''A handy library for colouring strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/palette";
            };
          } // packageOverrides)
      ) {};

    palette = palette_0_0_2;

    pandex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pandex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pandex";
              version = "0.1.0";
              sha256 =
                "a9c6b401be16af5f385c4ff8fc7e3eb9686e2829b0855854de428ff2bd23e34f";
            };

            meta = {
              longDescription = ''Pandex is a lightweight Elixir wrapper for
                                [Pandoc](http://pandoc.org). Pandex enables you
                                to convert Markdown, CommonMark, HTML, Latex,
                                json, html to HTML, HTML5, opendocument, rtf,
                                texttile, asciidoc, markdown, json and others.
                                Pandex has no dependencies other than Pandoc
                                itself.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/filterkaapi/pandex";
            };
          } // packageOverrides)
      ) {};

    pandex = pandex_0_1_0;

    pane_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pane";
            version = "0.3.0";
            src = fetchHex {
              pkg = "pane";
              version = "0.3.0";
              sha256 =
                "b7a98234bd8b79a77c6ce491be7ce4220689eba67a89373e20b6cb5da08a49c3";
            };

            meta = {
              description = ''Paginated printer for IEx'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/pane";
            };
          } // packageOverrides)
      ) {};

    pane = pane_0_3_0;

    panex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "panex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "panex";
              version = "0.1.0";
              sha256 =
                "26ecafa3a260845893330958446616fb372b666da57f4895ea64609feb631a8e";
            };

            meta = {
              description = ''An utility library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vthang95/panex";
            };
          } // packageOverrides)
      ) {};

    panex = panex_0_1_0;

    pangu_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pangu";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pangu";
              version = "0.1.0";
              sha256 =
                "2634cc2463421757aca0a76665de83940d4fda12f8ed316ae929bb29f64d06c5";
            };

            meta = {
              description = ''Paranoid text spacing in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cataska/pangu.ex";
            };
          } // packageOverrides)
      ) {};

    pangu = pangu_0_1_0;

    panty_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, benchee_0_12_1 }:
          buildMix ({
            name = "panty";
            version = "0.1.3";
            src = fetchHex {
              pkg = "panty";
              version = "0.1.3";
              sha256 =
                "5b8d4e46ca2464e68e0a6724d1b1bde9a2e5457c4dd1b0e91343bd43d9f1b76b";
            };
            beamDeps  = [ benchee_0_12_1 ];

            meta = {
              description = ''An utility library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vthang95/panty";
            };
          } // packageOverrides)
      ) {};

    panty = panty_0_1_3;

    paracusia_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paracusia";
            version = "0.2.4";
            src = fetchHex {
              pkg = "paracusia";
              version = "0.2.4";
              sha256 =
                "5255d1f053b48d0be1342db8773bf4bb20a5199c4d77159149723f97e267c401";
            };

            meta = {
              description = ''MPD client library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nroi/paracusia";
            };
          } // packageOverrides)
      ) {};

    paracusia = paracusia_0_2_4;

    parallel_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "parallel";
              version = "0.0.3";
              sha256 =
                "d9b5e98c1892f5376b4dfa28c48a3a17029f86a28d1f9ec2f7c1a2747f256a4d";
            };

            meta = {
              description = ''Straightforward parallel processing for Elixir'';

              homepage = "https://github.com/Anonyfox/parallel";
            };
          } // packageOverrides)
      ) {};

    parallel = parallel_0_0_3;

    parallel_enum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallel_enum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "parallel_enum";
              version = "0.1.0";
              sha256 =
                "bda4d45b19ab36df9f51478aa9b7aa6cfe0d1955cfd2710da951eff31274520c";
            };

            meta = {
              description = ''A parallel enum processing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exosite/elixir_parallel_enum";
            };
          } // packageOverrides)
      ) {};

    parallel_enum = parallel_enum_0_1_0;

    parallel_stream_1_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallel_stream";
            version = "1.0.6";
            src = fetchHex {
              pkg = "parallel_stream";
              version = "1.0.6";
              sha256 =
                "639b2e8749e11b87b9eb42f2ad325d161c170b39b288ac8d04c4f31f8f0823eb";
            };

            meta = {
              description = ''Parallel stream operations for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/parallel_stream";
            };
          } // packageOverrides)
      ) {};

    parallel_stream = parallel_stream_1_0_6;

    parallel_task_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallel_task";
            version = "0.1.1";
            src = fetchHex {
              pkg = "parallel_task";
              version = "0.1.1";
              sha256 =
                "06cf5db089fddd264158a3dd7b3b87ace7682df72bb62799d50818c37a468b6d";
            };

            meta = {
              description = ''Run multiple functions in parallel and capture
                            the results'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Fabianlindfors/parallel_task";
            };
          } // packageOverrides)
      ) {};

    parallel_task = parallel_task_0_1_1;

    parallex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "parallex";
              version = "0.1.2";
              sha256 =
                "a3c1c43df32399d8eeaa9dae9b0b0d56ed914fe3f1b7023bacd89ebf1d0c6fb4";
            };

            meta = {
              longDescription = ''Some concurrent versions of common Enum
                                functions. Might be useful if the applied
                                functions are calculation heavy.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/parallex";
            };
          } // packageOverrides)
      ) {};

    parallex = parallex_0_1_2;

    param_pipe_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "param_pipe";
            version = "0.1.4";
            src = fetchHex {
              pkg = "param_pipe";
              version = "0.1.4";
              sha256 =
                "5d124d3635a9bc3fbd01d4c1c1ad0fcf4372c2e2b7727b790d63a10befa74d9e";
            };

            meta = {
              description = ''parameterized pipe in elixir: |n>'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjen07/param_pipe";
            };
          } // packageOverrides)
      ) {};

    param_pipe = param_pipe_0_1_4;

    paratize_2_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paratize";
            version = "2.1.5";
            src = fetchHex {
              pkg = "paratize";
              version = "2.1.5";
              sha256 =
                "042ac549292173843f2244293f34ec57fab345731a92f88226210da161aad2f8";
            };

            meta = {
              description = ''Elixir library providing some handy parallel
                            processing facilities.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-paratize";
            };
          } // packageOverrides)
      ) {};

    paratize = paratize_2_1_5;

    parent_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parent";
            version = "0.3.0";
            src = fetchHex {
              pkg = "parent";
              version = "0.3.0";
              sha256 =
                "d7eff726ef7db3256c3cf87b10cd64e0631465f0c532cc5b0e28df644ce7c04f";
            };

            meta = {
              description = ''Custom parenting of processes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/parent";
            };
          } // packageOverrides)
      ) {};

    parent = parent_0_3_0;

    parse_trans_3_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "parse_trans";
            version = "3.0.0";
            src = fetchHex {
              pkg = "parse_trans";
              version = "3.0.0";
              sha256 =
                "5495a3309051df7f510bc1fdabda92dff5417186a8f66d4419aad6ba0af5f0cb";
            };

            meta = {
              description = ''Parse transform library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/parse_trans";
            };
          } // packageOverrides)
      ) {};

    parse_trans_3_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "parse_trans";
            version = "3.1.0";
            src = fetchHex {
              pkg = "parse_trans";
              version = "3.1.0";
              sha256 =
                "816c49661a6ca0495538d5669eb04383aafb4eec2c3d32557c410cb2b4b2020a";
            };

            meta = {
              description = ''Parse transform library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/parse_trans";
            };
          } // packageOverrides)
      ) {};

    parse_trans_3_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "parse_trans";
            version = "3.2.0";
            src = fetchHex {
              pkg = "parse_trans";
              version = "3.2.0";
              sha256 =
                "578b1d484720749499db5654091ddac818ea0b6d568f2c99c562d2a6dd4aa117";
            };

            meta = {
              description = ''Parse transform library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/parse_trans";
            };
          } // packageOverrides)
      ) {};

    parse_trans = parse_trans_3_2_0;

    parselix_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parselix";
            version = "0.5.0";
            src = fetchHex {
              pkg = "parselix";
              version = "0.5.0";
              sha256 =
                "f37f0c98ae3115bcb6b72ca9da128b1908ab1ec0fb0195a6f0b365ab12ba35d5";
            };

            meta = {
              description = ''A parser combinator library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/Parselix";
            };
          } // packageOverrides)
      ) {};

    parselix = parselix_0_5_0;

    parseus_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parseus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "parseus";
              version = "0.1.0";
              sha256 =
                "8551d4841665a4bb3982cf28505809bbf289fb67b739d1e565dd82a4eb238ea9";
            };

            meta = {
              description = ''Legendary Elixir parser to tame all your input
                            enumerables for good'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/surgeventures/parseus";
            };
          } // packageOverrides)
      ) {};

    parseus = parseus_0_1_0;

    parsexml_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "parsexml";
            version = "1.0.0";
            src = fetchHex {
              pkg = "parsexml";
              version = "1.0.0";
              sha256 =
                "d7f678be0d15a971927d9138c1ce962f81648f16e3233191ca37ba2638c06ac8";
            };

            meta = {
              description = ''Simple DOM XML parser with convenient and very
                            simple API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/maxlapshin/parsexml";
            };
          } // packageOverrides)
      ) {};

    parsexml = parsexml_1_0_0;

    parsey_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parsey";
            version = "0.0.2";
            src = fetchHex {
              pkg = "parsey";
              version = "0.0.2";
              sha256 =
                "1750ddf3a3c99f6bd4635057ec66b5b07209c78dc653c0de439626ddf8c49576";
            };

            meta = {
              description = ''A library to parse non-complex nested inputs with
                            a given ruleset.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/Parsey";
            };
          } // packageOverrides)
      ) {};

    parsey = parsey_0_0_2;

    particle_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_14_0,
          hackney_1_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "particle";
            version = "0.2.0";
            src = fetchHex {
              pkg = "particle";
              version = "0.2.0";
              sha256 =
                "1b74915122f4c2f37de68e8e3fe48ae331fc71887f4518e1a93dcdd0001d2391";
            };
            beamDeps  = [ gen_stage_0_14_0 hackney_1_13_0 poison_3_1_0 ];

            meta = {
              description = ''Client library for the Particle Cloud API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffutter/particle-elixir";
            };
          } // packageOverrides)
      ) {};

    particle = particle_0_2_0;

    pascal_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pascal";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pascal";
              version = "0.1.0";
              sha256 =
                "160235cbcb0ebfce74e3c6b9206a9e1775d149b352cfc6e854ee45d7de3befeb";
            };

            meta = {
              description = ''Provides a set of functions that calculate
                            Pascal`s triangles.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kana-sama/pascal";
            };
          } // packageOverrides)
      ) {};

    pascal = pascal_0_1_0;

    passphrase_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "passphrase";
            version = "0.1.0";
            src = fetchHex {
              pkg = "passphrase";
              version = "0.1.0";
              sha256 =
                "688cc07595bce22b32c4df160408485cc44f3162b411244108f40a1cbc3aef65";
            };

            meta = {
              longDescription = ''Passphrase generates secure, random,
                                easy-to-remember passphrases consisting of
                                space-separated simple English words.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    passphrase = passphrase_0_1_0;

    password_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "password";
            version = "1.1.1";
            src = fetchHex {
              pkg = "password";
              version = "1.1.1";
              sha256 =
                "57ed397e18ed94de793776665674d29a54868ab7e97f3ab69d01b3dccf35b517";
            };

            meta = {
              description = ''Flexible password policies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/heresydev/password";
            };
          } // packageOverrides)
      ) {};

    password = password_1_1_1;

    password_lock_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "password_lock";
            version = "0.1.1";
            src = fetchHex {
              pkg = "password_lock";
              version = "0.1.1";
              sha256 =
                "4cd2ebecb982efeb5420c27d6477c4a077fbe62677dc6e9bbb977633d203e32e";
            };

            meta = {
              description = ''password app'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flowerett/password_lock";
            };
          } // packageOverrides)
      ) {};

    password_lock = password_lock_0_1_1;

    passwordless_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "passwordless";
            version = "0.1.0";
            src = fetchHex {
              pkg = "passwordless";
              version = "0.1.0";
              sha256 =
                "e0b010826572401058bea71f5123870db86a6ef416a7d94d9d9246c2f895a6e0";
            };

            meta = {
              description = ''Token-based authentication library for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/endersstocker/passwordless";
            };
          } // packageOverrides)
      ) {};

    passwordless = passwordless_0_1_0;

    pastry_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pastry";
            version = "0.3.0";
            src = fetchHex {
              pkg = "pastry";
              version = "0.3.0";
              sha256 =
                "77b2376f73112920c36388328c8bb2feccca93f379233219b8494d1fa06dc4fb";
            };

            meta = {
              description = ''Turn maps and keyword lists into query strings'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aguxez/pastry";
            };
          } // packageOverrides)
      ) {};

    pastry = pastry_0_3_0;

    pathway_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "pathway";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pathway";
              version = "0.1.0";
              sha256 =
                "ae734bc8db0d91c0876e15b7e22e8d7616701eff94b1bd2930d2783a1b11c01d";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''A HTTP client library for the Trak.io REST API.
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/novabyte/pathway";
            };
          } // packageOverrides)
      ) {};

    pathway = pathway_0_1_0;

    patiently_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "patiently";
            version = "0.2.0";
            src = fetchHex {
              pkg = "patiently";
              version = "0.2.0";
              sha256 =
                "c08cc5edc27def565647a9b55a0bea8025a5f81a4472e57692f28f2292c44c94";
            };

            meta = {
              description = ''Helpers for waiting on asynchronous events'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/patiently";
            };
          } // packageOverrides)
      ) {};

    patiently = patiently_0_2_0;

    pattern_tap_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pattern_tap";
            version = "0.4.0";
            src = fetchHex {
              pkg = "pattern_tap";
              version = "0.4.0";
              sha256 =
                "c6a6df0d8db17ec54650c58cc864f359fdb63dd43df64cf0d6ff4375945fb024";
            };

            meta = {
              description = ''Macro for tapping into a pattern match while
                            using the pipe operator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/elixir-pattern_tap";
            };
          } // packageOverrides)
      ) {};

    pattern_tap = pattern_tap_0_4_0;

    pavlov_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "pavlov";
            version = "0.2.3";
            src = fetchHex {
              pkg = "pavlov";
              version = "0.2.3";
              sha256 =
                "4d38e96b7581261a49f00d2046603ad3c9af6d52abd26d16bbf6a0a5a82c9643";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {
              longDescription = ''Pavlov is a BDD library for your Elixir
                                projects, allowing you to write expressive unit
                                tests that tell the story of how your
                                application behaves. The syntax tries to follow
                                RSpec`s wherever possible.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sproutapp/pavlov";
            };
          } // packageOverrides)
      ) {};

    pavlov = pavlov_0_2_3;

    pay_day_loan_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pay_day_loan";
            version = "0.5.3";
            src = fetchHex {
              pkg = "pay_day_loan";
              version = "0.5.3";
              sha256 =
                "9e6e8b157e21c7f7e18d8978f9ee534b73cb8f6c45ce34c82466ea2f4b6113f4";
            };

            meta = {
              description = ''Framework for building on-demand caching. Fast
                            cache now!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simplifi/pay_day_loan";
            };
          } // packageOverrides)
      ) {};

    pay_day_loan = pay_day_loan_0_5_3;

    pay_pal_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauth2_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "pay_pal";
            version = "0.0.4";
            src = fetchHex {
              pkg = "pay_pal";
              version = "0.0.4";
              sha256 =
                "6b0b9e1ae60218addd907ebb5df1b2944161d9cc3e08dcea72b95e90f89bf5bd";
            };
            beamDeps  = [ httpoison_0_11_2 oauth2_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir library for working with the PayPal REST
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/paypal";
            };
          } // packageOverrides)
      ) {};

    pay_pal = pay_pal_0_0_4;

    payway_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0,
          uuid_1_1_8
        }:
          buildMix ({
            name = "payway";
            version = "0.1.0";
            src = fetchHex {
              pkg = "payway";
              version = "0.1.0";
              sha256 =
                "a5c0c37422b442642a2ae03603ea7d0f0cb379f587a5588e762ef3b1c86a2508";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 uuid_1_1_8 ];

            meta = {
              description = ''PayWay REST API Elixir wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/myxplor/payway-elixir";
            };
          } // packageOverrides)
      ) {};

    payway = payway_0_1_0;

    pbkdf2_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pbkdf2";
            version = "2.0.0";
            src = fetchHex {
              pkg = "pbkdf2";
              version = "2.0.0";
              sha256 =
                "1e793ce6fdb0576613115714deae9dfc1d1537eaba74f07efb36de139774488d";
            };

            meta = {
              description = ''Erlang PBKDF2 Key Derivation Function'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/erlang-pbkdf2";
            };
          } // packageOverrides)
      ) {};

    pbkdf2 = pbkdf2_2_0_0;

    pbkdf2_elixir_0_12_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pbkdf2_elixir";
            version = "0.12.3";
            src = fetchHex {
              pkg = "pbkdf2_elixir";
              version = "0.12.3";
              sha256 =
                "07506331f84aad96eb437e6d6a809b5c6d15ca081ee77606088717e43b6a1b49";
            };

            meta = {
              description = ''Pbkdf2 password hashing algorithm for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/pbkdf2_elixir";
            };
          } // packageOverrides)
      ) {};

    pbkdf2_elixir = pbkdf2_elixir_0_12_3;

    pc_1_10_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pc";
            version = "1.10.0";
            src = fetchHex {
              pkg = "pc";
              version = "1.10.0";
              sha256 =
                "2fbbd576d56a7124591c4f6e473f5ed3b8ec747e1d09d90ec58267b6b5946b4e";
            };

            meta = {
              description = ''a rebar3 port compiler for native code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blt/port_compiler";
            };
          } // packageOverrides)
      ) {};

    pc = pc_1_10_0;

    pca_predict_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "pca_predict";
            version = "0.2.1";
            src = fetchHex {
              pkg = "pca_predict";
              version = "0.2.1";
              sha256 =
                "b344e5aa441080d4cd14b99404fb15ed04f24b371999637fa74bfc53fb678ecd";
            };
            beamDeps  = [ exconstructor_1_1_0 httpoison_0_11_2 poison_3_1_0
                      ];

            meta = {
              description = ''A PCA Predict API wrapper for Elixir.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/sauce-consultants/pca_predict";
            };
          } // packageOverrides)
      ) {};

    pca_predict = pca_predict_0_2_1;

    pco_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "pco_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pco_api";
              version = "0.1.0";
              sha256 =
                "ce6746e26a93c33accc9965bd3aac18c2e7a144d041e7d4968c7144683139a07";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''An Elixir wrapper for the Planning Center API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/geolessel/pco-api-elixir";
            };
          } // packageOverrides)
      ) {};

    pco_api = pco_api_0_1_0;

    pd_erlzk_0_6_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pd_erlzk";
            version = "0.6.4";
            src = fetchHex {
              pkg = "pd_erlzk";
              version = "0.6.4";
              sha256 =
                "e89aa6a7fa5e7c7e6e60a51f0cd5a813f33fb84a34be767aa3c27c75c564a167";
            };

            meta = {
              description = ''A Pure Erlang ZooKeeper Client (no C
                            dependency)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/huaban/erlzk";
            };
          } // packageOverrides)
      ) {};

    pd_erlzk = pd_erlzk_0_6_4;

    pdf_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pdf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pdf";
              version = "0.0.1";
              sha256 =
                "400a8817cbc3d9ea48bb58f2841c338fb7fdff5b23164c4c222d6ecc54a72f7a";
            };

            meta = {
              description = ''Elixir API for generating PDF documents.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewtimberlake/elixir-pdf";
            };
          } // packageOverrides)
      ) {};

    pdf = pdf_0_0_1;

    pdf2htmlex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pdf2htmlex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pdf2htmlex";
              version = "0.2.0";
              sha256 =
                "50885e995d25362b1f25c74796c0627657147d4d10ccb4be736be3b06b8a44a3";
            };

            meta = {
              description = ''Convert PDF docs to beautiful HTML files without
                            losing text or format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/pdf2htmlex";
            };
          } // packageOverrides)
      ) {};

    pdf2htmlex = pdf2htmlex_0_2_0;

    pdf_generator_0_3_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          misc_random_0_2_6,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "pdf_generator";
            version = "0.3.7";
            src = fetchHex {
              pkg = "pdf_generator";
              version = "0.3.7";
              sha256 =
                "1392edb3f2a0041be2dd5f755b03c9002cedeb6675b550fa151ee0084bfece4d";
            };
            beamDeps  = [ misc_random_0_2_6 porcelain_2_0_3 ];

            meta = {
              longDescription = ''A wrapper for wkhtmltopdf (HTML to PDF) and
                                PDFTK (adds in encryption) for use in Elixir
                                projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-pdf-generator";
            };
          } // packageOverrides)
      ) {};

    pdf_generator = pdf_generator_0_3_7;

    peerage_1_0_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, deferred_config_0_1_1
        }:
          buildMix ({
            name = "peerage";
            version = "1.0.3";
            src = fetchHex {
              pkg = "peerage";
              version = "1.0.3";
              sha256 =
                "c9a3316be955f65da1ec39ef891b4c15f2f13bec7bd8d84ef3cdc9fd633d889b";
            };
            beamDeps  = [ deferred_config_0_1_1 ];

            meta = {
              longDescription = ''Easy clustering, pluggable discovery: via DNS
                                (for Kubernetes, Weave, discoverd, Swarm and
                                others), UDP multicast, or a plain list of
                                nodes. Easy extensibility for custom
                                Providers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/peerage";
            };
          } // packageOverrides)
      ) {};

    peerage = peerage_1_0_3;

    peerage_ec2_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, peerage_1_0_3 }:
          buildMix ({
            name = "peerage_ec2";
            version = "1.2.0";
            src = fetchHex {
              pkg = "peerage_ec2";
              version = "1.2.0";
              sha256 =
                "5b6351d7e8477fa54594fbc25fd86154b2491ed18a9b388a4edb5afbb253f907";
            };
            beamDeps  = [ peerage_1_0_3 ];

            meta = {
              description = ''A Peerage provider for easy clustering on AWS EC2
                            and Elastic Beanstalk'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BoweryFarming/peerage_ec2";
            };
          } // packageOverrides)
      ) {};

    peerage_ec2 = peerage_ec2_1_2_0;

    pelecanus_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, memoize_1_2_7 }:
          buildMix ({
            name = "pelecanus";
            version = "0.3.0";
            src = fetchHex {
              pkg = "pelecanus";
              version = "0.3.0";
              sha256 =
                "4a5da7a42a61c0189d34d979a6b1ddb0b4bef299f8fec3ad4928a8360ccfefbc";
            };
            beamDeps  = [ memoize_1_2_7 ];

            meta = {
              description = ''parser combinator for elixir'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    pelecanus = pelecanus_0_3_0;

    peon_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "peon";
            version = "2.0.0";
            src = fetchHex {
              pkg = "peon";
              version = "2.0.0";
              sha256 =
                "3d87e626f5d014563d1cf319c0fe8576c8eb3f4399ecc9a0d7fb2385a180aaab";
            };

            meta = {
              description = ''Use Elixir maps as a document storage format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/supernintendo/peon";
            };
          } // packageOverrides)
      ) {};

    peon = peon_2_0_0;

    pepper_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "pepper";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pepper";
              version = "0.1.0";
              sha256 =
                "0624f4405ef480e6dee4596e0eb8f6d0b967f51b4425926b925f2b3d70c73adc";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              description = ''A wrapper around Sodium for Elixir with excellent
                            documentation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/scrothers/pepper";
            };
          } // packageOverrides)
      ) {};

    pepper = pepper_0_1_0;

    period_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "period";
            version = "0.1.0";
            src = fetchHex {
              pkg = "period";
              version = "0.1.0";
              sha256 =
                "83100e041bbd4fb21ecbb94f293db3d965347dc95595155f0677827d4ed7f2a1";
            };

            meta = {
              description = ''Period is a library for working with time
                            periods.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/LostKobrakai/period";
            };
          } // packageOverrides)
      ) {};

    period = period_0_1_0;

    permission_ex_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "permission_ex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "permission_ex";
              version = "0.5.0";
              sha256 =
                "a4eec6e36744780cf2e8b550f4612afee264eb3555ee2243f4bb1e9a0f75f3c9";
            };

            meta = {
              description = ''Permission management and checking library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/permission_ex";
            };
          } // packageOverrides)
      ) {};

    permission_ex = permission_ex_0_5_0;

    pers_queue_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, amnesia_0_2_7 }:
          buildMix ({
            name = "pers_queue";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pers_queue";
              version = "0.0.1";
              sha256 =
                "e106df72183fd4e4fa564e7d152de377c35b4ab00dfdc3d37d8ee0d20b81f4a1";
            };
            beamDeps  = [ amnesia_0_2_7 ];

            meta = {
              description = ''The library implements persistent queue for
                            Elixir applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/astorre88/pers_queue";
            };
          } // packageOverrides)
      ) {};

    pers_queue = pers_queue_0_0_1;

    persian_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "persian";
            version = "0.1.3";
            src = fetchHex {
              pkg = "persian";
              version = "0.1.3";
              sha256 =
                "957eaa36c5b1eabe9641044bc73f01d7a8475f7abe658b36dfbb5649b4806e42";
            };

            meta = {
              description = ''Converts Arabic/NonPersian characters to pure
                            Persian.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ourway/ex_persian";
            };
          } // packageOverrides)
      ) {};

    persian = persian_0_1_3;

    persian_calendar_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "persian_calendar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "persian_calendar";
              version = "0.1.0";
              sha256 =
                "06ee83d8b1c56783e40d9db9970f809ce51db05254ba7daba668cf29875d1128";
            };

            meta = {
              longDescription = ''Provides Persian calendar for converting
                                gregorian (milady) date to shamsi date and
                                reverse'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/SalmanAA/PersianCalendar";
            };
          } // packageOverrides)
      ) {};

    persian_calendar = persian_calendar_0_1_0;

    persist_config_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "persist_config";
            version = "0.2.6";
            src = fetchHex {
              pkg = "persist_config";
              version = "0.2.6";
              sha256 =
                "1d229236b2b0f23b9db92f9cdd9accb38772480d886e61d56d4bded7b5b147b4";
            };

            meta = {
              description = ''Persists the configuration file.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/persist_config";
            };
          } // packageOverrides)
      ) {};

    persist_config = persist_config_0_2_6;

    persistent_ets_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "persistent_ets";
            version = "0.1.0";
            src = fetchHex {
              pkg = "persistent_ets";
              version = "0.1.0";
              sha256 =
                "ab0be0f5aa6963f3d6fc712fc37341e75ca7beef46cf46ced2b66af908c9b55f";
            };

            meta = {
              description = ''Ets table backed by a persistence file'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/persistent_ets";
            };
          } // packageOverrides)
      ) {};

    persistent_ets = persistent_ets_0_1_0;

    persistent_settings_3_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          result_1_1_1
        }:
          buildMix ({
            name = "persistent_settings";
            version = "3.0.2";
            src = fetchHex {
              pkg = "persistent_settings";
              version = "3.0.2";
              sha256 =
                "779577bf8197f3d7fbf8aefc20f46250a6e87ca31e7e39e2ed76e0884c8e6742";
            };
            beamDeps  = [ poison_3_1_0 result_1_1_1 ];

            meta = {
              description = ''The settings server.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/s-m-i-t-a/settings";
            };
          } // packageOverrides)
      ) {};

    persistent_settings = persistent_settings_3_0_2;

    persistent_vector_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "persistent_vector";
            version = "0.1.4";
            src = fetchHex {
              pkg = "persistent_vector";
              version = "0.1.4";
              sha256 =
                "4108bd191b93f3307b4e88431826c121d9fb1aeb3f93c12c5491e6541a23074d";
            };

            meta = {
              longDescription = ''PersistentVector is an array-like collection
                                of values indexed by contiguous 0-based integer
                                index and optimized for growing/shrinking at the
                                end.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dimagog/persistent_vector";
            };
          } // packageOverrides)
      ) {};

    persistent_vector = persistent_vector_0_1_4;

    perudox_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "perudox";
            version = "0.1.0";
            src = fetchHex {
              pkg = "perudox";
              version = "0.1.0";
              sha256 =
                "f6b51a0f0229fce9b2e16d1a6327eeb37d97c070a6cae690b791971a73de6616";
            };

            meta = {
              description = ''An implementation of the Perudo / Dudo / Pirate`s
                            Dice game written in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hickscorp/perudox";
            };
          } // packageOverrides)
      ) {};

    perudox = perudox_0_1_0;

    peselx_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "peselx";
            version = "0.2.1";
            src = fetchHex {
              pkg = "peselx";
              version = "0.2.1";
              sha256 =
                "f2388b988c0374fe2ef1c43b96345f72a9b6f0f1f5c1b48ab92a6a95c6420f87";
            };

            meta = {
              description = ''Validator of PESEL number - Polish national ID
                            number. Checks checksum.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Koziolek/peselx";
            };
          } // packageOverrides)
      ) {};

    peselx = peselx_0_2_1;

    pest_0_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pest";
            version = "0.6.0";
            src = fetchHex {
              pkg = "pest";
              version = "0.6.0";
              sha256 =
                "a2d77f7a0e95d6b598d8b24cdbc5e65b87955913b4d95245e277d9f5691ef082";
            };

            meta = {
              description = ''Primitive Erlang Security Tool'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pest";
            };
          } // packageOverrides)
      ) {};

    pest = pest_0_6_0;

    pet_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yomel_0_5_0 }:
          buildMix ({
            name = "pet";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pet";
              version = "0.1.1";
              sha256 =
                "5ec25c6c2337e286919c925dce46ecfa4b09311f516ecd922c71391cd4caa697";
            };
            beamDeps  = [ yomel_0_5_0 ];

            meta = {
              description = ''Account management tool compatible with pit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/pet";
            };
          } // packageOverrides)
      ) {};

    pet = pet_0_1_1;

    petick_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "petick";
            version = "0.0.1";
            src = fetchHex {
              pkg = "petick";
              version = "0.0.1";
              sha256 =
                "77ca306a379109aeb98528fdc5642dccc0b66379e67058814470d0cf30053586";
            };

            meta = {
              description = ''Periodic timer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/petick";
            };
          } // packageOverrides)
      ) {};

    petick = petick_0_0_1;

    petrovich_elixir_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "petrovich_elixir";
            version = "0.1.2";
            src = fetchHex {
              pkg = "petrovich_elixir";
              version = "0.1.2";
              sha256 =
                "b8b606e58eba33c03e05a22121e285dbe1c39e32947bd25aebdbc3f086efb637";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Elixir library to inflect Russian first, last,
                            and middle names.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/petrovich/petrovich_elixir";
            };
          } // packageOverrides)
      ) {};

    petrovich_elixir = petrovich_elixir_0_1_2;

    pewpew_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "pewpew";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pewpew";
              version = "0.1.0";
              sha256 =
                "acee8127f37eea968dd4eaf88bf889277e6922eaa70b37a717f9a0db4aeb2cd4";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A simple mailgun client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mylanconnolly/pewpew";
            };
          } // packageOverrides)
      ) {};

    pewpew = pewpew_0_1_0;

    pex_queue_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pex_queue";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pex_queue";
              version = "0.1.0";
              sha256 =
                "75fe16593cbbd422097885e3d1ca30e2969bef16235989da74bee966aa32391b";
            };

            meta = {
              description = ''A simple FIFO Queue, with optional
                            prioritisation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jackmarchant/pex_queue";
            };
          } // packageOverrides)
      ) {};

    pex_queue = pex_queue_0_1_0;

    pg2_wrap_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pg2_wrap";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pg2_wrap";
              version = "1.0.0";
              sha256 =
                "ebe19f64a74b5076ba604eafd21d2919d452661e24228770fde934ab2a17a3ba";
            };

            meta = {
              description = ''Elixir wrapper for `:pg2` with some
                            conveniences'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/pg2_wrap";
            };
          } // packageOverrides)
      ) {};

    pg2_wrap = pg2_wrap_1_0_0;

    pg2pubsub_0_2_13 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pg2pubsub";
            version = "0.2.13";
            src = fetchHex {
              pkg = "pg2pubsub";
              version = "0.2.13";
              sha256 =
                "a2c3ef4dcf031c71c75781ec49236220f405e836f4ee384bdcfbbf8abd6fc4db";
            };

            meta = {
              description = ''A PubSub implementation for Elixir, using PG2
                            (Erlang process groups).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kbremner/pg2pubsub";
            };
          } // packageOverrides)
      ) {};

    pg2pubsub = pg2pubsub_0_2_13;

    pgpool_1_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgsql_3_4_0,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "pgpool";
            version = "1.1.1";
            src = fetchHex {
              pkg = "pgpool";
              version = "1.1.1";
              sha256 =
                "03ce1758773edadf3ae0df2dcb0b797f04a67d63569cdb55bda47f8341f3883d";
            };

            beamDeps  = [ epgsql_3_4_0 poolboy_1_5_1 ];

            meta = {
              longDescription = ''A PosgreSQL client that automatically uses
                                connection pools and reconnects in case of
                                errors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ostinelli/pgpool";
            };
          } // packageOverrides)
      ) {};

    pgpool = pgpool_1_1_1;

    pgsql_26_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pgsql";
            version = "26.0.2";
            src = fetchHex {
              pkg = "pgsql";
              version = "26.0.2";
              sha256 =
                "1ac82169f4db548dd5ec85299c1d4c3a83b75862f067aec15e463c4dca004038";
            };

            meta = {
              description = ''pgsql driver'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/semiocast/pgsql";
            };
          } // packageOverrides)
      ) {};

    pgsql = pgsql_26_0_2;

    phoenix_admin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_admin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_admin";
              version = "0.1.0";
              sha256 =
                "272871616ed5151e0432f79f9b389561f4d484807411f694c3dc7594dd650970";
            };

            meta = {
              description = ''Admin panel for Phoenix projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "";
            };
          } // packageOverrides)
      ) {};

    phoenix_admin = phoenix_admin_0_1_0;

    phoenix_channel_client_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, websocket_client_1_3_0
        }:
          buildMix ({
            name = "phoenix_channel_client";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_channel_client";
              version = "0.2.0";
              sha256 =
                "881354be926694996d3aa4a62f4a365fa3ffaff330d46365b68dbf9c6d3a3b7a";
            };
            beamDeps  = [ websocket_client_1_3_0 ];

            meta = {
              description = ''Connect to Phoenix Channels from Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/mobileoverlord/phoenix_channel_client";
            };
          } // packageOverrides)
      ) {};

    phoenix_channel_client = phoenix_channel_client_0_2_0;

    phoenix_gen_socket_client_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_gen_socket_client";
            version = "1.1.1";
            src = fetchHex {
              pkg = "phoenix_gen_socket_client";
              version = "1.1.1";
              sha256 =
                "ad8f38ab5e8db512de4a0aedeac2097401406b81353c303c44ac37095f4d0498";
            };

            meta = {
              description = ''Socket client behaviour for phoenix channels.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Aircloak/phoenix_gen_socket_client";
            };
          } // packageOverrides)
      ) {};

    phoenix_generator_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, inflex_1_2_0 }:
          buildMix ({
            name = "phoenix_generator";
            version = "0.2.1";
            src = fetchHex {
              pkg = "phoenix_generator";
              version = "0.2.1";
              sha256 =
                "2be3753fba7b4a9afa461d270ab5111d76d1e5997b8e1587344051d85b6a1a36";
            };
            beamDeps  = [ inflex_1_2_0 ];

            meta = {
              description = ''A collection of boilerplate generators for the
                            Phoenix web framework.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/etufe/phoenix_generator";
            };
          } // packageOverrides)
      ) {};

    phoenix_generator = phoenix_generator_0_2_1;

    phoenix_jiffy_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jiffy_0_15_2 }:
          buildMix ({
            name = "phoenix_jiffy";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_jiffy";
              version = "0.2.0";
              sha256 =
                "9bd4e623532bfa6e055e091d54f63eef83af92eeb37773fc55db9aa369800366";
            };
            beamDeps  = [ jiffy_0_15_2 ];

            meta = {
              description = ''Jiffy adapter for Phoenix projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/take-five/phoenix_jiffy";
            };
          } // packageOverrides)
      ) {};

    phoenix_jiffy = phoenix_jiffy_0_2_0;

    phoenix_jsroutes_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_jsroutes";
            version = "0.0.4";
            src = fetchHex {
              pkg = "phoenix_jsroutes";
              version = "0.0.4";
              sha256 =
                "a3b076936c4807a9297e1e9028dd5f1d184a6c25c9caf04d7d664f9df3e644ae";
            };

            meta = {
              description = ''Brings phoenix router helpers to your javascript
                            code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tiagoengel/phoenix-jsroutes";
            };
          } // packageOverrides)
      ) {};

    phoenix_jsroutes = phoenix_jsroutes_0_0_4;

    phoenix_open_browser_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_open_browser";
            version = "0.1.2";
            src = fetchHex {
              pkg = "phoenix_open_browser";
              version = "0.1.2";
              sha256 =
                "81a40f01ad5d6a09ca0466f04ba9895393d196dbb9d536ee8a7db628c3f30cd3";
            };

            meta = {
              description = ''Opens a Phoenix application in system`s default
                            browser after boot server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gfvcastro/phoenix_open_browser";
            };
          } // packageOverrides)
      ) {};

    phoenix_open_browser = phoenix_open_browser_0_1_2;

    phoenix_pubsub_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_pubsub";
            version = "1.0.2";
            src = fetchHex {
              pkg = "phoenix_pubsub";
              version = "1.0.2";
              sha256 =
                "6f9193364c5de86b85e8d3a80294a134aecf6c5618adcbae668608749e00a7f7";
            };

            meta = {
              description = ''Distributed PubSub and Presence platform'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix_pubsub";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub = phoenix_pubsub_1_0_2;

    phoenix_pubsub_redis_2_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_pubsub_1_0_2,
          poolboy_1_4_0,
          redix_0_6_1,
          redix_pubsub_0_4_2
        }:
          buildMix ({
            name = "phoenix_pubsub_redis";
            version = "2.1.4";
            src = fetchHex {
              pkg = "phoenix_pubsub_redis";
              version = "2.1.4";
              sha256 =
                "9deb1efd2bab11602415323a867f4ee11edfe8b87043a39b129487bf693b8a9d";
            };
            beamDeps  = [
                          phoenix_pubsub_1_0_2
                          poolboy_1_4_0
                          redix_0_6_1
                          redix_pubsub_0_4_2
                        ];

            meta = {
              description = ''The Redis PubSub adapter for the Phoenix
                            framework'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/phoenixframework/phoenix_pubsub_redis";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub_redis = phoenix_pubsub_redis_2_1_4;

    phoenix_pubsub_redis_z_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_pubsub_1_0_2,
          poolboy_1_4_0,
          redix_0_6_1,
          redix_pubsub_0_4_2
        }:
          buildMix ({
            name = "phoenix_pubsub_redis_z";
            version = "0.1.1";
            src = fetchHex {
              pkg = "phoenix_pubsub_redis_z";
              version = "0.1.1";
              sha256 =
                "936164ffd4ab1560db676138e83c4cb0a422eab531d71fceb381b0ff718f5e7a";
            };
            beamDeps  = [
                          phoenix_pubsub_1_0_2
                          poolboy_1_4_0
                          redix_0_6_1
                          redix_pubsub_0_4_2
                        ];

            meta = {
              longDescription = ''Yet another Redis PubSub adapter for Phoenix.
                                Supports sharding across multiple redis
                                nodes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cctiger36/phoenix_pubsub_redis_z";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub_redis_z = phoenix_pubsub_redis_z_0_1_1;

    phoenix_pubsub_vernemq_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_pubsub_vernemq";
            version = "0.0.3";
            src = fetchHex {
              pkg = "phoenix_pubsub_vernemq";
              version = "0.0.3";
              sha256 =
                "92c228aee119d21c68b0b43250414686dee16986cb4d0039608612abd0d22824";
            };

            meta = {
              description = ''The VerneMQ MQTT pubsub adapter for the Phoenix
                            framework'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/larshesel/phoenix_pubsub_vernemq";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub_vernemq = phoenix_pubsub_vernemq_0_0_3;

    phoenix_webpack_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_webpack";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_webpack";
              version = "0.1.0";
              sha256 =
                "9a5b53836b60bfc3baf36e9aa85b48cfc227f004419b81c195e5e08936562ba7";
            };

            meta = {
              description = ''Easily generate webpack configs for phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/phoenix_webpack";
            };
          } // packageOverrides)
      ) {};

    phoenix_webpack = phoenix_webpack_0_1_0;

    phoenixchannelclient_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          flow_0_14_0,
          poison_3_1_0,
          socket_0_3_13
        }:
          buildMix ({
            name = "phoenixchannelclient";
            version = "0.1.4";
            src = fetchHex {
              pkg = "phoenixchannelclient";
              version = "0.1.4";
              sha256 =
                "472893e9c3a9d6d1b7b6a09b3167974d5403739e0d2ab8aafa4cd2460fc232bc";
            };
            beamDeps  = [ flow_0_14_0 poison_3_1_0 socket_0_3_13 ];

            meta = {
              description = ''Phoenix Channel Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/phoenix-channel-client";
            };
          } // packageOverrides)
      ) {};

    phoenixchannelclient = phoenixchannelclient_0_1_4;

    phone_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phone";
            version = "0.4.3";
            src = fetchHex {
              pkg = "phone";
              version = "0.4.3";
              sha256 =
                "358cb4e0dcd6546ac060a9c44695c485dd5c76bdffec0d6ae4e143636ef3db68";
            };

            meta = {
              description = ''Get useful info from telephone numbers.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fcevado/phone";
            };
          } // packageOverrides)
      ) {};

    phone = phone_0_4_3;

    php_assoc_map_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "php_assoc_map";
            version = "0.5.2";
            src = fetchHex {
              pkg = "php_assoc_map";
              version = "0.5.2";
              sha256 =
                "c95f27f74075cdd5908e4217db96887709334a9fe1da30fc98706c225f3ceafd";
            };

            meta = {
              description = ''Library that parses PHP`s associative array into
                            Elixir`s map.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicklayb/php_assoc_map";
            };
          } // packageOverrides)
      ) {};

    php_assoc_map = php_assoc_map_0_5_2;

    php_serializer_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "php_serializer";
            version = "1.0.0";
            src = fetchHex {
              pkg = "php_serializer";
              version = "1.0.0";
              sha256 =
                "13a1f21d08f2c3f71e9ef1a9cf82e56f87bd14c46b29d9e2b77d2901227ea37c";
            };

            meta = {
              description = ''PHP serialize/unserialize support for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zloyrusskiy/php_serializer";
            };
          } // packageOverrides)
      ) {};

    php_serializer = php_serializer_1_0_0;

    phst_transform_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phst_transform";
            version = "1.0.2";
            src = fetchHex {
              pkg = "phst_transform";
              version = "1.0.2";
              sha256 =
                "98a8a153146a8ef0604ca324ce857ff7a2f3e209dd119eb66dad964f69b4597f";
            };

            meta = {
              longDescription = ''An Elixir Protocol and implementation for
                                creating a tranform of any elixir data.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/philosophers-stone/transform";
            };
          } // packageOverrides)
      ) {};

    phst_transform = phst_transform_1_0_2;

    phux_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phux";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phux";
              version = "0.1.0";
              sha256 =
                "220fa43d60cc2e72d8e56d4cce9f467d6ca29e19049e8d680352c433b3ca277d";
            };

            meta = {
              description = ''Phux helpers.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    phux = phux_0_1_0;

    phx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phx";
              version = "0.1.0";
              sha256 =
                "a2b180bda27add365d0fa6b5c0d8f1cd1b8a071c6344026610bba8d49f254bf6";
            };

            meta = {
              description = ''Eventual home for the phoenix installer
                            archive.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phx";
            };
          } // packageOverrides)
      ) {};

    phx = phx_0_1_0;

    phx_ex_ray_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_ray_0_1_4 }:
          buildMix ({
            name = "phx_ex_ray";
            version = "0.1.2";
            src = fetchHex {
              pkg = "phx_ex_ray";
              version = "0.1.2";
              sha256 =
                "0781c27dcc38cfe1e5e16baafc778aca3385c681bc43f62a391e300ded62555a";
            };
            beamDeps  = [ ex_ray_0_1_4 ];

            meta = {
              description = ''Wrapper around ex_ray for OpenTrace in Elixir
                            Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sashman/phx_ex_ray";
            };
          } // packageOverrides)
      ) {};

    phx_ex_ray = phx_ex_ray_0_1_2;

    phx_in_place_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, number_0_5_7 }:
          buildMix ({
            name = "phx_in_place";
            version = "0.1.3";
            src = fetchHex {
              pkg = "phx_in_place";
              version = "0.1.3";
              sha256 =
                "6d5f7ae421efc9e8770a2601207786b76168529a27806c6b00e629cd8b692960";
            };
            beamDeps  = [ number_0_5_7 ];

            meta = {
              description = ''Library for generating inline editable fields
                            with minimal configuration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjwadair/phx_in_place";
            };
          } // packageOverrides)
      ) {};

    phx_in_place = phx_in_place_0_1_3;

    picam_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_2
        }:
          buildMix ({
            name = "picam";
            version = "0.3.0";
            src = fetchHex {
              pkg = "picam";
              version = "0.3.0";
              sha256 =
                "32062fd919784950f543dedb5e937d52de83c995513c74747b09a63bfffc9fc8";
            };
            beamDeps  = [ elixir_make_0_4_2 ];

            meta = {
              longDescription = ''Picam is a library that provides a simple API
                                for streaming MJPEG video and capturing JPEG
                                stills using the camera module on Raspberry Pi
                                devices running Linux.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/electricshaman/picam";
            };
          } // packageOverrides)
      ) {};

    picam = picam_0_3_0;

    pid_file_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pid_file";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pid_file";
              version = "0.1.1";
              sha256 =
                "10bc02c6fde8a51e6c0c8404703fdc63e035dea41d5bc97d518135dd0fa10266";
            };

            meta = {
              description = ''This is a library to create and manage a PID file
                            from the BEAM process.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/pid_file";
            };
          } // packageOverrides)
      ) {};

    pid_file = pid_file_0_1_1;

    pigpiox_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pigpiox";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pigpiox";
              version = "0.1.1";
              sha256 =
                "4d3f657b9ee73bbdfb83a7be50647a74e9924d62e1de462d6072d203aebbf811";
            };

            meta = {
              description = ''Use pigpiod on the Raspberry Pi.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tokafish/pigpiox";
            };
          } // packageOverrides)
      ) {};

    pigpiox = pigpiox_0_1_1;

    piliponi_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "piliponi";
            version = "0.0.1";
            src = fetchHex {
              pkg = "piliponi";
              version = "0.0.1";
              sha256 =
                "1729646601f1f12aff154e0401063298ec54bfd745f9137a64f63384f106a645";
            };

            meta = {
              description = ''Simple mobile phone formatter for the
                            Philippines'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wetoolaguer/piliponi";
            };
          } // packageOverrides)
      ) {};

    piliponi = piliponi_0_0_1;

    pinboardixir_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "pinboardixir";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pinboardixir";
              version = "0.2.0";
              sha256 =
                "360050f089cd50515bf51a5634420beab54bb7ec3b2063d49d91179182e423d7";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''A Pinboard client in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ElaWorkshop/pinboardixir";
            };
          } // packageOverrides)
      ) {};

    pinboardixir = pinboardixir_0_2_0;

    pingboard_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_13_0,
          poison_2_0_1
        }:
          buildMix ({
            name = "pingboard";
            version = "0.0.3";
            src = fetchHex {
              pkg = "pingboard";
              version = "0.0.3";
              sha256 =
                "b5c10bca1dda309567bc8e63286539f5fe56aa4a30c8f4c10bf40d7e099a8980";
            };
            beamDeps  = [ exconstructor_1_1_0 httpoison_0_13_0 poison_2_0_1
                      ];

            meta = {
              longDescription = ''A simple and naïve attempt at an elixir
                                client for the Pingboard
                                API.(http://docs.pingboard.apiary.io/#)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jgchristopher/pingboard-elixir";
            };
          } // packageOverrides)
      ) {};

    pingboard = pingboard_0_0_3;

    pinky_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pinky";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pinky";
              version = "0.2.0";
              sha256 =
                "acb5412a2f01c230a9ac8e40105af04fcd68862fb81bbe832b57f455e1f55844";
            };

            meta = {
              description = ''A promise library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codegram/pinky";
            };
          } // packageOverrides)
      ) {};

    pinky = pinky_0_2_0;

    pinxs_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          httpoison_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "pinxs";
            version = "0.1.3";
            src = fetchHex {
              pkg = "pinxs";
              version = "0.1.3";
              sha256 =
                "804f8cf80b8d55f218cfd639daf1271c9126c4240b7aa8603d9228a2ae3c9066";
            };
            beamDeps  = [ hackney_1_13_0 httpoison_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''Use Pin Payments via Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/htdc/pinxs";
            };
          } // packageOverrides)
      ) {};

    pinxs = pinxs_0_1_3;

    pinyin_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pinyin";
            version = "0.1.4";
            src = fetchHex {
              pkg = "pinyin";
              version = "0.1.4";
              sha256 =
                "e0fc3dc148bc938ad12f5aefabf017620eb314ca4cf045b91ad195c557d5fa96";
            };

            meta = {
              description = ''chinese pinyin library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/pinyin";
            };
          } // packageOverrides)
      ) {};

    pinyin = pinyin_0_1_4;

    pinyin_util_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, progress_bar_1_6_1
        }:
          buildMix ({
            name = "pinyin_util";
            version = "0.1.2";
            src = fetchHex {
              pkg = "pinyin_util";
              version = "0.1.2";
              sha256 =
                "0aae6b5e4255cfcb073c4dfa71943f33eef5e3803320edcac43aff0890e50487";
            };
            beamDeps  = [ progress_bar_1_6_1 ];

            meta = {
              description = ''中文汉字转拼音.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dev800/pinyin_util";
            };
          } // packageOverrides)
      ) {};

    pinyin_util = pinyin_util_0_1_2;

    pip_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pip";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pip";
              version = "0.1.0";
              sha256 =
                "dc5dc1cdc59c2117f36f6157a988384ba0074ed55f7a076b6217ddc150639868";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skpark1987/pipe";
            };
          } // packageOverrides)
      ) {};

    pip = pip_0_1_0;

    pipe_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pipe";
              version = "0.0.2";
              sha256 =
                "ad6d90981606bb04d040c0af49cf493417994214ce6e74ac572dc2ee67e2c064";
            };

            meta = {
              description = ''An Elixir extension that extends the pipe (|>)
                            operator through macros. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/elixir-pipes";
            };
          } // packageOverrides)
      ) {};

    pipe = pipe_0_0_2;

    pipe_func_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_func";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pipe_func";
              version = "0.1.0";
              sha256 =
                "13365ce6c124fd5454091c4cf3a0f87021daf698c3d7617ffc6bdca56ee5f4e2";
            };

            meta = {
              description = ''Execute function through pipe operator without
                            stopping.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/snamiki1212/pipe_func";
            };
          } // packageOverrides)
      ) {};

    pipe_func = pipe_func_0_1_0;

    pipe_here_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_here";
            version = "1.0.1";
            src = fetchHex {
              pkg = "pipe_here";
              version = "1.0.1";
              sha256 =
                "773ebe6cd558bbbc222d60716b9f170c8d4cc163a4da2b43a91f8121fa0b7e3c";
            };

            meta = {
              description = ''An Elixir macro for easily piping arguments at
                            any position.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/pipe_here";
            };
          } // packageOverrides)
      ) {};

    pipe_here = pipe_here_1_0_1;

    pipe_logger_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_logger";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pipe_logger";
              version = "0.1.1";
              sha256 =
                "5980e289e0e3d23818b19420ab603afcf91f679cbb997b41c7f180686fd1b83e";
            };

            meta = {
              description = ''Logging via pipe, not stop.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/snamiki1212/pipe_logger";
            };
          } // packageOverrides)
      ) {};

    pipe_logger = pipe_logger_0_1_1;

    pipe_to_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_to";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pipe_to";
              version = "0.2.0";
              sha256 =
                "543ac136f488b03676e6cd2a9ebadd56005e42156cfde172b5b7331c4309f437";
            };

            meta = {
              longDescription = ''PipeTo operator `~>` is the enhanced pipe
                                operator which can specify the target
                                position.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/taiansu/pipe_to";
            };
          } // packageOverrides)
      ) {};

    pipe_to = pipe_to_0_2_0;

    pipe_while_ok_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_while_ok";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pipe_while_ok";
              version = "0.0.2";
              sha256 =
                "b62708d0a0b82f421f937b99c5ff21a966e21d9a1f42ba75b8788100ac2c6567";
            };

            meta = {
              description = ''PipeWhileOk =========== Moved to
                            https://githib.com/pragdave/exlibris '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/pipe_while_ok";
            };
          } // packageOverrides)
      ) {};

    pipe_while_ok = pipe_while_ok_0_0_2;

    pipelinex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipelinex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pipelinex";
              version = "0.1.0";
              sha256 =
                "3fe32cc783a3633c36b8fc4ba67b351a5854113be7ccc17e5521c1c9157bc589";
            };

            meta = {
              longDescription = ''Pipelinex is a simple library to build data
                                pipelines in a clean and structured way. It`s
                                mainly built for personal usage to help with
                                structuring big data processing flows and
                                automatically apply things like logging, which
                                otherwise would make the code very unclean.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PhillippOhlandt/pipelinex";
            };
          } // packageOverrides)
      ) {};

    pipelinex = pipelinex_0_1_0;

    piper_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "piper";
            version = "0.0.4";
            src = fetchHex {
              pkg = "piper";
              version = "0.0.4";
              sha256 =
                "ddf2a124116d4dd6ba3946737450c572fbff44752f9caf6d92c1f459fc886a57";
            };

            meta = {
              description = ''Simple task router similar to Phoenix.Router and
                            Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appunite/piper";
            };
          } // packageOverrides)
      ) {};

    piper = piper_0_0_4;

    pipes_1_8_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pipes";
            version = "1.8.0";
            src = fetchHex {
              pkg = "pipes";
              version = "1.8.0";
              sha256 =
                "6a57e3e9e793db98cb9046d1ae9005f73534b49adcdcd1db641d78bb4937bcb7";
            };

            meta = {
              description = ''process pipe library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/kfsm/pipe";
            };
          } // packageOverrides)
      ) {};

    pipes = pipes_1_8_0;

    pipet_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipet";
            version = "0.1.4";
            src = fetchHex {
              pkg = "pipet";
              version = "0.1.4";
              sha256 =
                "19aca4a53c1055bd5ad04279a2b53c22c70e1f1ede8ec94279316db833e36242";
            };

            meta = {
              description = ''A library for conditionally chaining data through
                            a series of operations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/urbint/pipet";
            };
          } // packageOverrides)
      ) {};

    pipet = pipet_0_1_4;

    pipette_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mock_0_1_3 }:
          buildMix ({
            name = "pipette";
            version = "0.0.4";
            src = fetchHex {
              pkg = "pipette";
              version = "0.0.4";
              sha256 =
                "8742ea9b115071c3aa7cec4ddacfa161ff63fd647e0491ac442cb118d7198e26";
            };
            beamDeps  = [ mock_0_1_3 ];

            meta = {
              description = ''new_data = pipette(data, template)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liquidz/pipette";
            };
          } // packageOverrides)
      ) {};

    pipette = pipette_0_0_4;

    pipex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pipex";
              version = "0.1.1";
              sha256 =
                "ff6d61cdf137f08b4b2b54eab50048b25ae64431f15ec0b6d14b9e98b8954ec2";
            };

            meta = {
              description = ''Simple Plug like pipeline'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/hl/pipex";
            };
          } // packageOverrides)
      ) {};

    pipex = pipex_0_1_1;

    pipper_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipper";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pipper";
              version = "1.0.0";
              sha256 =
                "a6b5100f6bab060674e5a828dcfb1b7c12e65739186e54809a23320a5550e149";
            };

            meta = {
              description = ''Provides a \"pipe-equals\" operator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewblas/pipper";
            };
          } // packageOverrides)
      ) {};

    pipper = pipper_1_0_0;

    pit_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pit";
            version = "1.2.0";
            src = fetchHex {
              pkg = "pit";
              version = "1.2.0";
              sha256 =
                "7a5922fb8979c12b13fb8e50b931efb6e01a1ad965f5ee1402bdb6858f9b0f5a";
            };

            meta = {
              description = ''Elixir macro for extracting or transforming
                            values inside a pipe flow.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/pit";
            };
          } // packageOverrides)
      ) {};

    pit = pit_1_2_0;

    piton_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlport_0_9_8 }:
          buildMix ({
            name = "piton";
            version = "0.3.0";
            src = fetchHex {
              pkg = "piton";
              version = "0.3.0";
              sha256 =
                "f404182c2c9dd0052ff83462e50d8438ea498d6c96120b712712f603d39e2338";
            };
            beamDeps  = [ erlport_0_9_8 ];

            meta = {
              description = ''Run your Python algorithms in parallel and avoid
                            the GIL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/piton";
            };
          } // packageOverrides)
      ) {};

    piton = piton_0_3_0;

    pkcs5_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pkcs5";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pkcs5";
              version = "1.0.0";
              sha256 =
                "886f69bfc3db23ab0a7b85d3fb574482ff5245f846bff00174fc55e987b8525b";
            };

            meta = {
              description = ''PKCS5 binary padding for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sonttt9/pkcs5.git";
            };
          } // packageOverrides)
      ) {};

    pkcs5 = pkcs5_1_0_0;

    pkcs7_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pkcs7";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pkcs7";
              version = "1.0.2";
              sha256 =
                "0e4faa65411e204b7952712d58f657335109ecbb24cf79163dc96458ba8d6518";
            };

            meta = {
              description = ''PKCS7 binary padding for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/pkcs7.erl";
            };
          } // packageOverrides)
      ) {};

    pkcs7 = pkcs7_1_0_2;

    pkt_0_4_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pkt";
            version = "0.4.5";
            src = fetchHex {
              pkg = "pkt";
              version = "0.4.5";
              sha256 =
                "08dce0fa30219843347f92c743b6ab4fb17c4a0890ac23f29127c98354b4e2b3";
            };

            meta = {
              description = ''Network packet parsing library'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    pkt = pkt_0_4_5;

    placebo_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_11 }:
          buildMix ({
            name = "placebo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "placebo";
              version = "0.2.0";
              sha256 =
                "da8a0580f31ae8afb71f4f5e2f8b72e35b04288be8dc710c9e9fff66819fbc41";
            };
            beamDeps  = [ meck_0_8_11 ];

            meta = {
              description = ''A mocking library for ExUnit inspired by RSpec
                            and based on meck.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bbalser/Placebo";
            };
          } // packageOverrides)
      ) {};

    placebo = placebo_0_2_0;

    plaid_elixir_1_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "plaid_elixir";
            version = "1.1.1";
            src = fetchHex {
              pkg = "plaid_elixir";
              version = "1.1.1";
              sha256 =
                "7def98d635f90dcd06bcce023877f08501a8f2ed98c8efa3c2db42e182e8bbb2";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir Library for Plaid`s V2 API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wfgilman/plaid-elixir";
            };
          } // packageOverrides)
      ) {};

    plaid_elixir = plaid_elixir_1_1_1;

    plaidex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "plaidex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plaidex";
              version = "0.1.0";
              sha256 =
                "d68450de518990ad51f33fd89f702f03ec9d5e1147f5616998154b939f298995";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Plaid client library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/deadkarma/plaidex";
            };
          } // packageOverrides)
      ) {};

    plaidex = plaidex_0_1_0;

    plain_fsm_1_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "plain_fsm";
            version = "1.4.1";
            src = fetchHex {
              pkg = "plain_fsm";
              version = "1.4.1";
              sha256 =
                "6ce2e7efdcdc516eebced22a6ed2b1ab760f8275ee230f7c80b48dd32ae0da39";
            };

            meta = {
              description = ''Plain_fsm library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/plain_fsm";
            };
          } // packageOverrides)
      ) {};

    plain_fsm = plain_fsm_1_4_1;

    plantuml_mix_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plantuml_mix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plantuml_mix";
              version = "0.0.1";
              sha256 =
                "6d064ebc3be722642875ea5e2ce63a5678b95d96353c3605f6e83684651947f0";
            };

            meta = {
              longDescription = ''Add plantuml task to mix. Execute mix
                                plantuml --help for options. Requires that the
                                env var PLANTUML_JAR points to a valid PlantUML
                                jar file. Requires Java > 1.6 installed on the
                                system.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/binarytemple/plantuml_mix";
            };
          } // packageOverrides)
      ) {};

    plantuml_mix = plantuml_mix_0_0_1;

    plasm_ecto_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plasm_ecto";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plasm_ecto";
              version = "0.2.0";
              sha256 =
                "0b55f2445ca3dd8a1aafdf8ab18af6c053a1f79819946c62f54d275e4ff2809c";
            };

            meta = {
              longDescription = ''Plasm generates Ecto models based on existing
                                database tables and populates the fields of the
                                model.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jhartwell/Plasm";
            };
          } // packageOverrides)
      ) {};

    plasm_ecto = plasm_ecto_0_2_0;

    playfab_ex_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dynamic_interfaces_0_2_1,
          poison_3_1_0,
          tesla_1_0_0_beta_1
        }:
          buildMix ({
            name = "playfab_ex";
            version = "0.2.2";
            src = fetchHex {
              pkg = "playfab_ex";
              version = "0.2.2";
              sha256 =
                "2bf496887422ef28caf8d5dfd8a98e2ff370ae9b4ff043a46e9b096814bb119c";
            };
            beamDeps  = [
                          dynamic_interfaces_0_2_1
                          poison_3_1_0
                          tesla_1_0_0_beta_1
                        ];

            meta = {
              description = ''Elixir library for working with playfab'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skylerparr/playfab_ex";
            };
          } // packageOverrides)
      ) {};

    playfab_ex = playfab_ex_0_2_2;

    playlist_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "playlist";
            version = "1.0.0";
            src = fetchHex {
              pkg = "playlist";
              version = "1.0.0";
              sha256 =
                "36eab6242934b4f22da5c413bbf25abaa72d69934a0defd780d9b863f5a5b4ba";
            };

            meta = {
              description = ''Parse playlist files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/playlist";
            };
          } // packageOverrides)
      ) {};

    playlist = playlist_1_0_0;

    plist_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plist";
            version = "0.0.6";
            src = fetchHex {
              pkg = "plist";
              version = "0.0.6";
              sha256 =
                "df6f49e923b84175484d2e4a71961c70154f2517fdb7aef0fe0b6c8aa32b20b5";
            };

            meta = {
              description = ''An Elixir library to parse files in Apple`s
                            property list formats'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciaran/plist";
            };
          } // packageOverrides)
      ) {};

    plist = plist_0_0_6;

    plogger_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plogger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plogger";
              version = "0.1.0";
              sha256 =
                "f327e5aa18704dc5fa3c0a141e84e1a63957e0f0775129cd454f465bd3269ad1";
            };

            meta = {
              longDescription = ''Set of wrapper functions for the built-in
                                Logger functions `info`, `debug`, `warn`,
                                `error`. Because the output of the functions is
                                the same as the input, they can be inserted in a
                                sequence of functions, that are linked with the
                                pipe ( |> ) operator. It works the same as Elm`s
                                Debug.log.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pinx/plogger";
            };
          } // packageOverrides)
      ) {};

    plogger = plogger_0_1_0;

    plsm_2_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mariaex_0_8_4,
          postgrex_0_13_5
        }:
          buildMix ({
            name = "plsm";
            version = "2.2.1";
            src = fetchHex {
              pkg = "plsm";
              version = "2.2.1";
              sha256 =
                "e9d4feeee1be2de015429cf92dd35df436d21dfddc70349fa822507ec391b4b3";
            };
            beamDeps  = [ mariaex_0_8_4 postgrex_0_13_5 ];

            meta = {
              longDescription = ''Plsm generates Ecto models based on existing
                                database tables and populates the fields of the
                                model.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jhartwell/Plsm";
            };
          } // packageOverrides)
      ) {};

    plsm = plsm_2_2_1;

    plug_fprof_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plug_fprof";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_fprof";
              version = "0.0.1";
              sha256 =
                "4c5e6171ab7ebb29b6d473f8c5fd758a11ade5847d31add676c944a302ab006c";
            };

            meta = {
              description = ''A Plug that adds fprof tracing to requests, to
                            allow for easy profiling.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/plug_fprof";
            };
          } // packageOverrides)
      ) {};

    plug_fprof = plug_fprof_0_0_1;

    plug_http_client_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "plug_http_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_http_client";
              version = "0.0.1";
              sha256 =
                "ab6b449d033f166c1854b6811a2463e160c03c28279a7d6d85b96c56bf6c1228";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''HTTP Client Support Functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/silathdiir/plug_http_client";
            };
          } // packageOverrides)
      ) {};

    plug_http_client = plug_http_client_0_0_1;

    plug_range_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plug_range";
            version = "0.0.3";
            src = fetchHex {
              pkg = "plug_range";
              version = "0.0.3";
              sha256 =
                "a97dd4794547ed81dec942f6a51dab2ec6b8159d0c58ee1b1ec2ccdcf3ac55b0";
            };

            meta = {
              description = ''An elixir plug that serves HTTP range requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/TheSquad/plug_range";
            };
          } // packageOverrides)
      ) {};

    plug_range = plug_range_0_0_3;

    plug_session_redis_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_5_1,
          redo_2_0_1
        }:
          buildMix ({
            name = "plug_session_redis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_session_redis";
              version = "0.1.0";
              sha256 =
                "8a101a1e36cb9212153191e44963f052b7478b0bfaff5a85e331afe0ae56dbeb";
            };
            beamDeps  = [ poolboy_1_5_1 redo_2_0_1 ];

            meta = {
              description = ''The Redis Plug.Session adapter for the Phoenix
                            framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aposto/plug_session_redis";
            };
          } // packageOverrides)
      ) {};

    plug_session_redis = plug_session_redis_0_1_0;

    plug_session_redis_store_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_7_1 }:
          buildMix ({
            name = "plug_session_redis_store";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_session_redis_store";
              version = "0.1.0";
              sha256 =
                "c151e1b79c85332b6860195a74908e21577eb1654550a3b740409d745284f0a0";
            };
            beamDeps  = [ redix_0_7_1 ];

            meta = {
              description = ''Extendable Redis store for Plug.Session.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/jobteaser/plug_session_redis_store";
            };
          } // packageOverrides)
      ) {};

    plug_session_redis_store = plug_session_redis_store_0_1_0;

    plug_x_forwarded_for_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plug_x_forwarded_for";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_x_forwarded_for";
              version = "0.1.0";
              sha256 =
                "7a12dff0f850855ae85d70ed0e71aff5ec55dad6c52fc46d6ba21119e6183b33";
            };

            meta = {
              description = ''x-forwarded-for plug middleware'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/plug_x_forwarded_for";
            };
          } // packageOverrides)
      ) {};

    plug_x_forwarded_for = plug_x_forwarded_for_0_1_0;

    plug_zipkin_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plug_zipkin";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_zipkin";
              version = "0.0.1";
              sha256 =
                "891855acafa0c5382fe1f2f16a9de747951c49ef88197e36582c2f4b14c7426e";
            };

            meta = {
              description = ''Plug middleware for tracing via Zipkin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mytrile/plug_zipkin";
            };
          } // packageOverrides)
      ) {};

    plug_zipkin = plug_zipkin_0_0_1;

    plugerl_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "plugerl";
            version = "1.0.0";
            src = fetchHex {
              pkg = "plugerl";
              version = "1.0.0";
              sha256 =
                "e595865a94007243d5ed7a0a4c3d8465ebfea5d5020570306c72a3c6491e5e9d";
            };

            meta = {
              description = ''Most simple plugin system using Erlang
                            behaviours.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/expelledboy/plugerl";
            };
          } // packageOverrides)
      ) {};

    plugerl = plugerl_1_0_0;

    plugin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plugin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plugin";
              version = "0.1.0";
              sha256 =
                "f596a2e9e14081884a841d1805e024d435c6a27e5e38b9c64214017659560fad";
            };

            meta = {
              longDescription = ''Like Plug, only without web-specific logic
                                and without a typed Conn-datastructure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/plugin";
            };
          } // packageOverrides)
      ) {};

    plugin = plugin_0_1_0;

    plugmap_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xml_builder_2_1_0
        }:
          buildMix ({
            name = "plugmap";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plugmap";
              version = "0.2.0";
              sha256 =
                "a5425f276648ba2ff7d5af9e1a83e6337befdaaaf91b80909c809a3491a10532";
            };
            beamDeps  = [ xml_builder_2_1_0 ];

            meta = {
              description = ''Sitemap XML generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nerdslabs/plugmap";
            };
          } // packageOverrides)
      ) {};

    plugmap = plugmap_0_2_0;

    plumber_girl_0_9_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plumber_girl";
            version = "0.9.7";
            src = fetchHex {
              pkg = "plumber_girl";
              version = "0.9.7";
              sha256 =
                "c8101604ff31277d67851e3e19c541eb78e393e47c295f9fce8217b4ab1e524e";
            };

            meta = {
              description = ''PlumberGirl takes care of your Elixir piping
                            issues!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/plumber_girl";
            };
          } // packageOverrides)
      ) {};

    plumber_girl = plumber_girl_0_9_7;

    plumbing_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plumbing";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plumbing";
              version = "0.1.0";
              sha256 =
                "a7d77e196412b972d9e184813c7a3162df10a11ebbd3f9699e9f482df3781d18";
            };

            meta = {
              description = ''Useful functions to work with pipes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelvinst/plumbing";
            };
          } // packageOverrides)
      ) {};

    plumbing = plumbing_0_1_0;

    plus_codes_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plus_codes";
            version = "1.0.0";
            src = fetchHex {
              pkg = "plus_codes";
              version = "1.0.0";
              sha256 =
                "94b9afe578ed2f016a504b66d5992bc85955404c86b9756a8040329d3a40bdb6";
            };

            meta = {
              description = ''An Elixir implemention of Google Open Location
                            Code(Plus+Codes)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/versus-systems/plus_codes";
            };
          } // packageOverrides)
      ) {};

    plus_codes = plus_codes_1_0_0;

    plymio_ast_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_ast";
            version = "1.0.0";
            src = fetchHex {
              pkg = "plymio_ast";
              version = "1.0.0";
              sha256 =
                "a06628840a3aaeef796c9d2b752809cd1ebe668f08f337fa05383693dd177f64";
            };

            meta = {
              description = ''plymio_ast: Utility Functions for ASTs (Quoted
                            Forms)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_ast";
            };
          } // packageOverrides)
      ) {};

    plymio_ast = plymio_ast_1_0_0;

    plymio_ast_vorm_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plymio_ast_1_0_0,
          plymio_option_0_3_0
        }:
          buildMix ({
            name = "plymio_ast_vorm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plymio_ast_vorm";
              version = "0.1.0";
              sha256 =
                "3961ce054124dff713a3de18c97abdda1ba020ba8dc0123063b3f3f7075dfce5";
            };
            beamDeps  = [ plymio_ast_1_0_0 plymio_option_0_3_0 ];

            meta = {
              description = ''plymio_ast_vorm: Managing a Collection of Quoted
                            Forms (Asts)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_ast_vorm";
            };
          } // packageOverrides)
      ) {};

    plymio_ast_vorm = plymio_ast_vorm_0_1_0;

    plymio_codi_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, plymio_vekil_0_1_0
        }:
          buildMix ({
            name = "plymio_codi";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plymio_codi";
              version = "0.2.0";
              sha256 =
                "4a192623fa048b5ece20d5b935a9fa24712a3e89aba6c89372d5dfbcc3ab4a78";
            };
            beamDeps  = [ plymio_vekil_0_1_0 ];

            meta = {
              description = ''plymio_codi: Generating Quoted Forms for Common
                            Code Patterns'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_codi";
            };
          } // packageOverrides)
      ) {};

    plymio_codi_0_3_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, plymio_vekil_0_1_0
        }:
          buildMix ({
            name = "plymio_codi";
            version = "0.3.1";
            src = fetchHex {
              pkg = "plymio_codi";
              version = "0.3.1";
              sha256 =
                "248e2eee1901cd39909e69810e1f77c0bed6ef06ebb31cbd0a1ff2b69c57ee7f";
            };
            beamDeps  = [ plymio_vekil_0_1_0 ];

            meta = {
              description = ''plymio_codi: Generating Quoted Forms for Common
                            Code Patterns'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_codi";
            };
          } // packageOverrides)
      ) {};

    plymio_codi = plymio_codi_0_3_1;

    plymio_enum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_enum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plymio_enum";
              version = "0.1.0";
              sha256 =
                "aa5ae0d54045817ef3c1d0951e1dac6efbaf3c747ba702b15d50211793eabd98";
            };

            meta = {
              description = ''plymio_enum: Utility Functions for Enumerables'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_enum";
            };
          } // packageOverrides)
      ) {};

    plymio_enum = plymio_enum_0_1_0;

    plymio_fontais_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_fontais";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plymio_fontais";
              version = "0.2.0";
              sha256 =
                "6e2634dcb186f2a4eacde6c93eefb5904071206307a97bafbd1c169eaaced3d5";
            };

            meta = {
              description = ''plymio_fontais: Support Package for the Plymio
                            and Harnais Family of Packages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_fontais";
            };
          } // packageOverrides)
      ) {};

    plymio_fontais = plymio_fontais_0_2_0;

    plymio_funcio_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, plymio_fontais_0_2_0
        }:
          buildMix ({
            name = "plymio_funcio";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plymio_funcio";
              version = "0.2.0";
              sha256 =
                "0dea1442742b94a90af33aa2355590195c5f601b48c901f06bda17c84df866b9";
            };
            beamDeps  = [ plymio_fontais_0_2_0 ];

            meta = {
              description = ''plymio_funcio: Function Utilities'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_funcio";
            };
          } // packageOverrides)
      ) {};

    plymio_funcio = plymio_funcio_0_2_0;

    plymio_list_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_list";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plymio_list";
              version = "0.1.0";
              sha256 =
                "30156df0a3ab43176828041000f8e4d313f71481742f43a28df48cecbe64c443";
            };

            meta = {
              longDescription = ''plymio_list: Utility Functions for Lists
                                plymio is a family of utility function
                                packages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_list";
            };
          } // packageOverrides)
      ) {};

    plymio_list = plymio_list_0_1_0;

    plymio_name_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_name";
            version = "0.1.1";
            src = fetchHex {
              pkg = "plymio_name";
              version = "0.1.1";
              sha256 =
                "edd31acbc0fabf6c92056365f85e7446bf58dbec064522d45a2c90b65323ba7d";
            };

            meta = {
              description = ''plymio_name: Utility Functions for Names'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_name";
            };
          } // packageOverrides)
      ) {};

    plymio_name = plymio_name_0_1_1;

    plymio_option_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_option";
            version = "0.3.0";
            src = fetchHex {
              pkg = "plymio_option";
              version = "0.3.0";
              sha256 =
                "387b37c823ed3d81557123e5efb0ac5b01167765876a2867ed1cc6e5e66fdd2f";
            };

            meta = {
              description = ''plymio_option: Utility Functions for Managing
                            (Keyword) Options'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_option";
            };
          } // packageOverrides)
      ) {};

    plymio_option = plymio_option_0_3_0;

    plymio_vekil_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, plymio_funcio_0_2_0
        }:
          buildMix ({
            name = "plymio_vekil";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plymio_vekil";
              version = "0.1.0";
              sha256 =
                "9ef7ebedb7b51291d6e5a6705b7526176170a2bcb9e8f4443b74fa16a9176967";
            };
            beamDeps  = [ plymio_funcio_0_2_0 ];

            meta = {
              description = ''plymio_vekil: A vekil is a collection that
                            associates proxies with foroms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_vekil";
            };
          } // packageOverrides)
      ) {};

    plymio_vekil = plymio_vekil_0_1_0;

    pobox_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pobox";
            version = "1.1.0";
            src = fetchHex {
              pkg = "pobox";
              version = "1.1.0";
              sha256 =
                "b98f827de7cdc37aeae969a32b883fa34550a69f1cec7e2ea3d7f04caec556c5";
            };

            meta = {
              description = ''External buffer processes to protect against
                            mailbox overflow'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/pobox/";
            };
          } // packageOverrides)
      ) {};

    pobox = pobox_1_1_0;

    pocketex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_1_3_1
        }:
          buildMix ({
            name = "pocketex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pocketex";
              version = "0.1.0";
              sha256 =
                "b832df8e3f3102b69892cc5cfab4418de876a6ecc5780805458b9946aa407cbf";
            };
            beamDeps  = [ httpoison_0_13_0 poison_1_3_1 ];

            meta = {
              description = ''Pocketex is an Elixir client for the Pocket read
                            later service (getpocket.com) '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/essenciary/pocketex";
            };
          } // packageOverrides)
      ) {};

    pocketex = pocketex_0_1_0;

    poison_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.3.1";
            src = fetchHex {
              pkg = "poison";
              version = "1.3.1";
              sha256 =
                "fbd78dd3e5abbadc17ddd89905002f6d20a03046f7555a6098d28a9f14feaf58";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.4.0";
            src = fetchHex {
              pkg = "poison";
              version = "1.4.0";
              sha256 =
                "b2715aaeb9f549f4e30739d43993e3c1b1053a4ed69d50c660621bdd1eb96606";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.5.0";
            src = fetchHex {
              pkg = "poison";
              version = "1.5.0";
              sha256 =
                "a31ffdaf77494ff12d6c2c9cb03235d4373596d2faf62ee5b99c1ae479618400";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.5.2";
            src = fetchHex {
              pkg = "poison";
              version = "1.5.2";
              sha256 =
                "4afc59dcadf71be7edc8b934b39f554ec7b31e2b1b1a4767383a663f86958ce3";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "2.0.1";
            src = fetchHex {
              pkg = "poison";
              version = "2.0.1";
              sha256 =
                "7f34906a0839f3b49b9b7647461c5144787611f599e8d743214280761699df2b";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "2.1.0";
            src = fetchHex {
              pkg = "poison";
              version = "2.1.0";
              sha256 =
                "002caaf939b97c84533ef0f621d3ed414ed703fcd03c91ec0dd62043df102c63";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_2_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "2.2.0";
            src = fetchHex {
              pkg = "poison";
              version = "2.2.0";
              sha256 =
                "519bc209e4433961284174c497c8524c001e285b79bdf80212b47a1f898084cc";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "3.0.0";
            src = fetchHex {
              pkg = "poison";
              version = "3.0.0";
              sha256 =
                "813db7909e9aa20b2f4d42692798beef7a430691b424d0e6b08f7cb11727c721";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_3_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "3.1.0";
            src = fetchHex {
              pkg = "poison";
              version = "3.1.0";
              sha256 =
                "fec8660eb7733ee4117b85f55799fd3833eb769a6df71ccf8903e8dc5447cfce";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison = poison_3_1_0;

    poke_lib_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poke_lib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "poke_lib";
              version = "0.1.1";
              sha256 =
                "81c815864ed654c6f9c9116c6b90fe07f62f83540552b8bdac14eb577dc3bf5f";
            };

            meta = {
              longDescription = ''PokeLib - Common library for dealing with
                                generation 1, 2, and 3 binary Pokemon data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/openmons/poke_lib";
            };
          } // packageOverrides)
      ) {};

    poke_lib = poke_lib_0_1_1;

    pokemon_gif_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, credo_0_8_0_rc7 }:
          buildMix ({
            name = "pokemon_gif";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pokemon_gif";
              version = "1.0.2";
              sha256 =
                "200f1900c73072868ea57eae2f1f38ea42340e9e7f7d2aa68e5b59f18be7846a";
            };
            beamDeps  = [ credo_0_8_0_rc7 ];

            meta = {
              description = ''Elixir package to get Pokemon`s gif out of an ID
                            or name.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aguxez/pokemon_gif";
            };
          } // packageOverrides)
      ) {};

    pokemon_gif = pokemon_gif_1_0_2;

    poker_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poker";
            version = "0.0.2";
            src = fetchHex {
              pkg = "poker";
              version = "0.0.2";
              sha256 =
                "9599ef62b0a2e1b15ff2697cb1603dd7be00911d8a613e1d01cfdf8c8b5d63b3";
            };

            meta = {
              description = ''An Elixir library to work with Poker hands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wojtekmach/poker_elixir";
            };
          } // packageOverrides)
      ) {};

    poker = poker_0_0_2;

    poker_validator_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poker_validator";
            version = "0.1.0";
            src = fetchHex {
              pkg = "poker_validator";
              version = "0.1.0";
              sha256 =
                "aa0f6887ae2763b017a9187c0a7de825ac4574709bd9f7190b3243b2ae7a36b0";
            };

            meta = {
              longDescription = ''Elixir validator for Texas Holdem hands, with
                                a given list of cards it returns the best
                                possible hand with its score'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dimun/poker_validator";
            };
          } // packageOverrides)
      ) {};

    poker_validator = poker_validator_0_1_0;

    pokerap_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "pokerap";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pokerap";
              version = "0.1.1";
              sha256 =
                "e07888c5e9b545adac2fb92b3c17f487af244ece42e6d5b34a5f01f4d28c9ad2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Wrapper library for the Pokeapi
                            [http://pokeapi.co](http://pokeapi.co/)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lastcontinue/pokerap";
            };
          } // packageOverrides)
      ) {};

    pokerap = pokerap_0_1_1;

    polish_validators_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "polish_validators";
            version = "0.1.1";
            src = fetchHex {
              pkg = "polish_validators";
              version = "0.1.1";
              sha256 =
                "6cf37b213a1bac4e812d3dc937bfe098aa2a46881a624d49f532ef3eaf8a12c4";
            };

            meta = {
              description = ''Library for validate polish numbers: PESEL, NIP,
                            REGON, IBAN (PL)'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/dbackowski/elixir_polish_validators";
            };
          } // packageOverrides)
      ) {};

    polish_validators = polish_validators_0_1_1;

    pollin_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "pollin";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pollin";
              version = "0.2.0";
              sha256 =
                "d041a7e2233b8e1ea9f64fa4310528386729f0599170dbad9633a493585783f8";
            };
            beamDeps  = [ poison_3_1_0 secure_random_0_5_1 ];

            meta = {
              description = ''Simple queue implementation for webhooks and
                            event sources.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/pollin";
            };
          } // packageOverrides)
      ) {};

    pollin = pollin_0_2_0;

    pollution_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pollution";
            version = "0.9.2";
            src = fetchHex {
              pkg = "pollution";
              version = "0.9.2";
              sha256 =
                "6399fd8ffd97dcc3d9d277f60542a234d644d7bcc0d48c8fda93d6be4801bac2";
            };

            meta = {
              longDescription = ''Construct streams of values by specifying
                                composable generator functions. For example
                                list(tuple(like: {atom, string})) will generate
                                a random length keyword list with random keys
                                and values. Constraints can be applied at all
                                levels.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pragdave/pollution";
            };
          } // packageOverrides)
      ) {};

    pollution = pollution_0_9_2;

    poloniex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_13_0,
          poison_2_2_0,
          vex_0_8_0
        }:
          buildMix ({
            name = "poloniex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "poloniex";
              version = "0.1.1";
              sha256 =
                "d320f6846f4609033899f7e6b6b45a0f110cd303efa69199efa295cd60a8d605";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_0_13_0
                          poison_2_2_0
                          vex_0_8_0
                        ];

            meta = {
              longDescription = ''WIP, not stable Elixir API wrapper for
                                poloniex.com. Provides access to market data
                                including trading pairs between ETH, BTC, DOGE,
                                LTC and others.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/poloniex_ex";
            };
          } // packageOverrides)
      ) {};

    poloniex = poloniex_0_1_1;

    poly1305_0_4_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chacha20_0_3_6,
          equivalex_0_1_4
        }:
          buildMix ({
            name = "poly1305";
            version = "0.4.5";
            src = fetchHex {
              pkg = "poly1305";
              version = "0.4.5";
              sha256 =
                "2a24b02a57d56c2b459f1d6265391843a6f3591137db7400d32b7ea26b9e3ef1";
            };
            beamDeps  = [ chacha20_0_3_6 equivalex_0_1_4 ];

            meta = {
              description = ''Poly1305 message authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/poly1305_ex";
            };
          } // packageOverrides)
      ) {};

    poly1305_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chacha20_1_0_1,
          equivalex_1_0_1
        }:
          buildMix ({
            name = "poly1305";
            version = "1.0.1";
            src = fetchHex {
              pkg = "poly1305";
              version = "1.0.1";
              sha256 =
                "25f551cc023d83bac1f4d482b89290db685a7fc4f2b55b0fa7b4635d18938277";
            };
            beamDeps  = [ chacha20_1_0_1 equivalex_1_0_1 ];

            meta = {
              description = ''Poly1305 message authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/poly1305_ex";
            };
          } // packageOverrides)
      ) {};

    poly1305 = poly1305_1_0_1;

    polyglot_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "polyglot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "polyglot";
              version = "0.0.1";
              sha256 =
                "83aaf990f322ea5c314b469932e87db7175374b0e0b28d078defba60dca0fb78";
            };

            meta = {
              longDescription = ''Polyglot is a localization library for Elixir
                                that provides reusable formatting rules and
                                translations for a large number of languages.'';
              license = with stdenv.lib.licenses; [ mit free ];
              homepage = "https://github.com/padde/polyglot";
            };
          } // packageOverrides)
      ) {};

    polyglot = polyglot_0_0_1;

    polyline_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, vector_0_3_0 }:
          buildMix ({
            name = "polyline";
            version = "1.1.0";
            src = fetchHex {
              pkg = "polyline";
              version = "1.1.0";
              sha256 =
                "6551703c4e36e4398ed7529a86111b871c87403c34979e01f4211968d0e9b73d";
            };
            beamDeps  = [ vector_0_3_0 ];

            meta = {
              description = ''Encoding and decoding of Polylines'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/polyline_ex";
            };
          } // packageOverrides)
      ) {};

    polyline = polyline_1_1_0;

    polymer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "polymer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "polymer";
              version = "0.0.1";
              sha256 =
                "2f2a7917d138f868738086302e7a315c2964254b702b5106e6cd9a891940586f";
            };

            meta = {
              description = ''Better connections'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/suddenrushofsushi/polymer";
            };
          } // packageOverrides)
      ) {};

    polymer = polymer_0_0_1;

    polyvox_id3_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "polyvox_id3";
            version = "0.2.1";
            src = fetchHex {
              pkg = "polyvox_id3";
              version = "0.2.1";
              sha256 =
                "2bb3e3b9edde6630160857563c992f7e9ea56d11d263172c95161b4275f6b48c";
            };

            meta = {
              description = ''A podcast-centric ID3 library for parsing and
                            writing ID3 tags.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/polyvox/polyvox_id3";
            };
          } // packageOverrides)
      ) {};

    polyvox_id3 = polyvox_id3_0_2_1;

    pond_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pond";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pond";
              version = "0.2.0";
              sha256 =
                "01b61e8ee85395098c63b7ca698e87a91437987e3e0a360a3e37aa466a4f515a";
            };

            meta = {
              longDescription = ''Pond is an Elixir library for creating state
                                handling functions without spawning processes.
                                Pond functions are same-process, referentially
                                transparent functions, that let you implement
                                Finite State Machines, Generators, (push/pull)
                                Reactive Streams, etc.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vic/pond";
            };
          } // packageOverrides)
      ) {};

    pond = pond_0_2_0;

    poniverse_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_2 }:
          buildMix ({
            name = "poniverse";
            version = "0.1.3";
            src = fetchHex {
              pkg = "poniverse";
              version = "0.1.3";
              sha256 =
                "f1f373bb4f1362c51017a20e5083f3af9a3caf94985dd0a585c7cc35f41951d9";
            };
            beamDeps  = [ oauth2_0_9_2 ];

            meta = {
              description = ''OAuth2 Strategy to authenticate with
                            Poniverse.net'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Poniverse/elixir-poniverse";
            };
          } // packageOverrides)
      ) {};

    poniverse = poniverse_0_1_3;

    pool_ring_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pool_ring";
            version = "0.1.5";
            src = fetchHex {
              pkg = "pool_ring";
              version = "0.1.5";
              sha256 =
                "a5d965379d8cb05e772e606951ba1b33c45b58a0809ba9f44eff453ea43068ce";
            };

            meta = {
              description = ''create a pool based on a hash ring'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/pool_ring";
            };
          } // packageOverrides)
      ) {};

    pool_ring = pool_ring_0_1_5;

    pool_sup_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, croma_0_9_3 }:
          buildMix ({
            name = "pool_sup";
            version = "0.4.0";
            src = fetchHex {
              pkg = "pool_sup";
              version = "0.4.0";
              sha256 =
                "44d4657d7dda45abf59c2576484713b4d39127493ebec354cbc244b5e34bd21e";
            };
            beamDeps  = [ croma_0_9_3 ];

            meta = {
              description = ''A supervisor specialized to manage pool of
                            workers'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    pool_sup_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, croma_0_9_3 }:
          buildMix ({
            name = "pool_sup";
            version = "0.5.0";
            src = fetchHex {
              pkg = "pool_sup";
              version = "0.5.0";
              sha256 =
                "b31bcdce5d6d6fc1d4cf893255b2644ea54c63a976b5bd835e6f1357884c9f61";
            };
            beamDeps  = [ croma_0_9_3 ];

            meta = {
              description = ''A supervisor specialized to manage pool of
                            workers'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    pool_sup = pool_sup_0_5_0;

    poolboy_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "poolboy";
            version = "1.4.0";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.4.0";
              sha256 =
                "f9f9d2d5ef75bb7a05deaa63833cff84437f3f9e9740c5610be10f5708bd5668";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          } // packageOverrides)
      ) {};

    poolboy_1_4_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "poolboy";
            version = "1.4.2";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.4.2";
              sha256 =
                "6133b67251080f32ffed4f71913cd2998fd6f02fa076677aadf7278b62853938";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          } // packageOverrides)
      ) {};

    poolboy_1_5_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "poolboy";
            version = "1.5.1";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.5.1";
              sha256 =
                "8f7168911120e13419e086e78d20e4d1a6776f1eee2411ac9f790af10813389f";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          } // packageOverrides)
      ) {};

    poolboy = poolboy_1_5_1;

    poolgirl_1_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, doteki_1_0_6 }:
          buildMix ({
            name = "poolgirl";
            version = "1.1.4";
            src = fetchHex {
              pkg = "poolgirl";
              version = "1.1.4";
              sha256 =
                "ca9fbc7f91179547df2e7277328111aad21c6ed3eabc261fb00187ad65feaff1";
            };
            beamDeps  = [ doteki_1_0_6 ];

            meta = {
              description = ''Erlang/Elixir worker pool'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/poolgirl";
            };
          } // packageOverrides)
      ) {};

    poolgirl_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, doteki_1_0_6 }:
          buildMix ({
            name = "poolgirl";
            version = "1.2.0";
            src = fetchHex {
              pkg = "poolgirl";
              version = "1.2.0";
              sha256 =
                "03cbce24aa5de2b0762cded15fb5dd14f26bb21282a5fb667ddf80b9b4903fe2";
            };
            beamDeps  = [ doteki_1_0_6 ];

            meta = {
              description = ''Erlang/Elixir worker pool'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/poolgirl";
            };
          } // packageOverrides)
      ) {};

    poolgirl = poolgirl_1_2_0;

    pop3mail_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pop3mail";
            version = "1.3.0";
            src = fetchHex {
              pkg = "pop3mail";
              version = "1.3.0";
              sha256 =
                "58edb579d0b60c5aaac50a0360aaf89054cfd7377cf4f31801ed5e2fe42e1542";
            };

            meta = {
              longDescription = ''Pop3 client to download email (including
                                attachments) from the inbox. Decodes multipart
                                content, quoted-printables, base64 and
                                encoded-words. Uses an Erlang pop3 client with
                                SSL support derived from the epop package. Add
                                this dependency in mix.exs: {:erlpop, github:
                                \"nico-amsterdam/erlpop\"}'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nico-amsterdam/pop3mail";
            };
          } // packageOverrides)
      ) {};

    pop3mail = pop3mail_1_3_0;

    populator_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "populator";
            version = "0.5.0";
            src = fetchHex {
              pkg = "populator";
              version = "0.5.0";
              sha256 =
                "df39fef61637692354bc65e7b952514f77b229b45a73ba8d897e2c37da796833";
            };

            meta = {
              description = ''Supervisor population control library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/populator";
            };
          } // packageOverrides)
      ) {};

    populator = populator_0_5_0;

    porcelain_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porcelain";
            version = "2.0.3";
            src = fetchHex {
              pkg = "porcelain";
              version = "2.0.3";
              sha256 =
                "dc996ab8fadbc09912c787c7ab8673065e50ea1a6245177b0c24569013d23620";
            };

            meta = {
              longDescription = ''Porcelain implements a saner approach to
                                launching and communicating with external OS
                                processes from Elixir. Built on top of Erlang`s
                                ports, it provides richer functionality and
                                simpler API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/porcelain";
            };
          } // packageOverrides)
      ) {};

    porcelain = porcelain_2_0_3;

    porta_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porta";
            version = "0.2.0";
            src = fetchHex {
              pkg = "porta";
              version = "0.2.0";
              sha256 =
                "78445cbfd6e66835511c72e5a031b07d0959a546707b94ba85a1a0468be9cf62";
            };

            meta = {
              description = ''Utilities for Phoenix and Ecto'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/bopjesvla/porta";
            };
          } // packageOverrides)
      ) {};

    porta = porta_0_2_0;

    porter_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porter";
            version = "0.0.1";
            src = fetchHex {
              pkg = "porter";
              version = "0.0.1";
              sha256 =
                "81ef97a1d6eb495b6a919cdaae4268a49a3591903424d4ed00f67104d09e89dd";
            };

            meta = {
              longDescription = ''Porter provides an OTP application that runs
                                the specified system command using the Erlang
                                Port library and then streams the results back
                                to you.'';

            };
          } // packageOverrides)
      ) {};

    porter = porter_0_0_1;

    porter2_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porter2";
            version = "0.1.0";
            src = fetchHex {
              pkg = "porter2";
              version = "0.1.0";
              sha256 =
                "5e286fc040fc03b45c3871104460d88be8394c860c664c16d88abb1d5690f508";
            };

            meta = {
              description = ''Implementation of the Porter2 stemming algorithm
                            for the english language'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/sriedel/ExPorter2";
            };
          } // packageOverrides)
      ) {};

    porter2 = porter2_0_1_0;

    portnet_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "portnet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "portnet";
              version = "0.1.0";
              sha256 =
                "e3af93b65425d3bf55f18828c287f635e36fc2c44904c132a37b02f951c24dd5";
            };

            meta = {
              description = ''port the net'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/portnet";
            };
          } // packageOverrides)
      ) {};

    portnet = portnet_0_1_0;

    posexional_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "posexional";
            version = "0.4.3";
            src = fetchHex {
              pkg = "posexional";
              version = "0.4.3";
              sha256 =
                "e3ac8b7837952934605851a6fbb87b4b35caf973d7c942e183d9dd42cfbd0217";
            };

            meta = {
              description = ''A library to manage positional files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/primait/posexional";
            };
          } // packageOverrides)
      ) {};

    posexional = posexional_0_4_3;

    positive_13_3_7 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "positive";
            version = "13.3.7";
            src = fetchHex {
              pkg = "positive";
              version = "13.3.7";
              sha256 =
                "516964039cbae4e64226d9e50787f32134f3411bc0ae8cedf26488ba004616be";
            };

            meta = {
              description = ''Library: check if an integer is positive'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jlouis/positive";
            };
          } // packageOverrides)
      ) {};

    positive = positive_13_3_7;

    postal_ex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_2_1_1 }:
          buildMix ({
            name = "postal_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "postal_ex";
              version = "1.0.0";
              sha256 =
                "bea53a50101e808be44b12f814f6f663026177567e97778fdcaf67ffd65fbd09";
            };
            beamDeps  = [ csv_2_1_1 ];

            meta = {
              description = ''Simple postal code lookup on ets table'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jrichocean/postal_ex";
            };
          } // packageOverrides)
      ) {};

    postal_ex = postal_ex_1_0_0;

    postcodeapi_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "postcodeapi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "postcodeapi";
              version = "0.1.1";
              sha256 =
                "d2fbdf4beb45ec87bab75ddd4f68bf7d606a46a9f71d088f438442421dbd8dd2";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Simple api client for
                            https://www.postcodeapi.nu'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    postcodeapi = postcodeapi_0_1_1;

    posterize_0_13_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          postgrex_0_13_5,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "posterize";
            version = "0.13.3";
            src = fetchHex {
              pkg = "posterize";
              version = "0.13.3";
              sha256 =
                "1df3d802e4e2d4deedd0190d36aa738d0deefb7f90ad1a0dcbf3ebf680e6ac19";
            };
            beamDeps  = [ postgrex_0_13_5 sbroker_1_0_0 ];

            meta = {
              description = ''erlang wrapper for the postgrex postgres
                            client'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/posterize";
            };
          } // packageOverrides)
      ) {};

    posterize = posterize_0_13_3;

    postgres_describe_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, private_0_1_1 }:
          buildMix ({
            name = "postgres_describe";
            version = "0.1.4";
            src = fetchHex {
              pkg = "postgres_describe";
              version = "0.1.4";
              sha256 =
                "6d971d08e55a12da7f02bef3c5a95b50474ddd6e530b3bed66f1225137ceaaf7";
            };
            beamDeps  = [ private_0_1_1 ];

            meta = {
              longDescription = ''Library for describing postgres tables and
                                saving that output into a given location in your
                                application source.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/brandonparsons/postgres_describe";
            };
          } // packageOverrides)
      ) {};

    postgres_describe = postgres_describe_0_1_4;

    postgrex_0_13_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_3,
          decimal_1_5_0
        }:
          buildMix ({
            name = "postgrex";
            version = "0.13.5";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.13.5";
              sha256 =
                "a19b61193379cdee04b5b2361bf93d1eb170cd2eec0b18042617b07e1e15fbfb";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_3 decimal_1_5_0
                      ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_cdb_0_13_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_3,
          decimal_1_5_0
        }:
          buildMix ({
            name = "postgrex_cdb";
            version = "0.13.5";
            src = fetchHex {
              pkg = "postgrex_cdb";
              version = "0.13.5";
              sha256 =
                "1a01ba25472ad33bafbac6f042fde2dbab93e23bdaa49ffa3722926165c1052f";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_3 decimal_1_5_0
                      ];

            meta = {
              description = ''PostgreSQL driver for Elixir compatible with
                            CockroachDB'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jumpn/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_cdb = postgrex_cdb_0_13_5;

    pot_0_9_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pot";
            version = "0.9.7";
            src = fetchHex {
              pkg = "pot";
              version = "0.9.7";
              sha256 =
                "a0f288cc24c6f3f01b5dcabb64445d9d2c15678ea88b4af7f5cac0f9c572162d";
            };

            meta = {
              longDescription = ''POT is an Erlang library for generating
                                Google Authenticator compatible one time
                                passwords.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/pot";
            };
          } // packageOverrides)
      ) {};

    pot = pot_0_9_7;

    potion_1_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "potion";
            version = "1.5.2";
            src = fetchHex {
              pkg = "potion";
              version = "1.5.2";
              sha256 =
                "b939a6fcca2b29aa5af7f6cae8f38da3ba25d4b69c4e03e267fd2db991aec896";
            };

            meta = {
              description = ''utility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/su-mi-lab/potion";
            };
          } // packageOverrides)
      ) {};

    potion = potion_1_5_2;

    power_assert_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "power_assert";
            version = "0.1.1";
            src = fetchHex {
              pkg = "power_assert";
              version = "0.1.1";
              sha256 =
                "40e8e4dca847606e6b88a8c71c9b5644b356c37279f1cb33bb5c8880ac98eebc";
            };

            meta = {
              description = ''Power Assert in Elixir. Shows evaluation results
                            each expression.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ma2gedev/power_assert_ex";
            };
          } // packageOverrides)
      ) {};

    power_assert = power_assert_0_1_1;

    powerdnsex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "powerdnsex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "powerdnsex";
              version = "0.1.0";
              sha256 =
                "d7fdc978e692994104bd8aad39dedfafe7961abf53581b832b39deb1627274fe";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''A Client to integrate with PowerDNS API version
                            4'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/digaoddc/power_dnsex";
            };
          } // packageOverrides)
      ) {};

    powerdnsex = powerdnsex_0_1_0;

    pp_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pp";
              version = "0.1.1";
              sha256 =
                "5d7d67a965f627d1caecec470727d5d98a40b0f78d8376826e93bfd7a52ce8db";
            };

            meta = {
              description = ''Pretty printing for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/waj/ex_pp";
            };
          } // packageOverrides)
      ) {};

    pp = pp_0_1_1;

    ppg_0_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, evel_0_1_1 }:
          buildRebar3 ({
            name = "ppg";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ppg";
              version = "0.1.3";
              sha256 =
                "8bbd51b5c1f2e08636839ad6f6151b3ad2a5c46e3fe8bdb1f33f79a2b57d1e13";
            };

            beamDeps  = [ evel_0_1_1 ];

            meta = {
              description = ''Plumtree based Process Group'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/ppg";
            };
          } // packageOverrides)
      ) {};

    ppg = ppg_0_1_3;

    pqueue_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pqueue";
            version = "1.5.4";
            src = fetchHex {
              pkg = "pqueue";
              version = "1.5.4";
              sha256 =
                "3c8cd86c3a9ae51cf051a32026d932ee5f545ee86f023d8a936da669f0e71b85";
            };

            meta = {
              description = ''Erlang Priority Queue Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pqueue";
            };
          } // packageOverrides)
      ) {};

    pqueue_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pqueue";
            version = "1.6.0";
            src = fetchHex {
              pkg = "pqueue";
              version = "1.6.0";
              sha256 =
                "5cbec6684b7257df5322e805082d9155985263a549e879828848cc791083c1de";
            };

            meta = {
              description = ''Erlang Priority Queue Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pqueue";
            };
          } // packageOverrides)
      ) {};

    pqueue_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pqueue";
            version = "1.7.3";
            src = fetchHex {
              pkg = "pqueue";
              version = "1.7.3";
              sha256 =
                "f8e966f767fe393601cfcf79f93e932430d3aca8b27550ab58ee5375c5665c02";
            };

            meta = {
              description = ''Erlang Priority Queue Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pqueue";
            };
          } // packageOverrides)
      ) {};

    pqueue = pqueue_1_7_3;

    pqueue2_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pqueue_1_7_3 }:
          buildMix ({
            name = "pqueue2";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pqueue2";
              version = "0.2.0";
              sha256 =
                "ded9c503b8c684cca940694be1dcb30e6ca7e971f342e101d8cd0c8c6e339cc5";
            };
            beamDeps  = [ pqueue_1_7_3 ];

            meta = {
              description = ''Priority queue that wraps pqueue2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ne-sachirou/pqueue2";
            };
          } // packageOverrides)
      ) {};

    pqueue2 = pqueue2_0_2_0;

    practical_elixir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "practical_elixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "practical_elixir";
              version = "0.1.0";
              sha256 =
                "4854bbfd260a1fac20f21ec99b48a86c0727332175ed34626125aee274a2c896";
            };

            meta = {
              description = ''Practical elixir codes and examples'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kminwoog/practical-elixir";
            };
          } // packageOverrides)
      ) {};

    practical_elixir = practical_elixir_0_1_0;

    pragmatic_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pragmatic";
            version = "0.1.8";
            src = fetchHex {
              pkg = "pragmatic";
              version = "0.1.8";
              sha256 =
                "41ea5c0038fbeb5ef784a32dd1b466c0b23109935664d186c0752335ea558838";
            };

            meta = {
              longDescription = ''A small, simple library to deal with the
                                practical issues arising from using Elixir on
                                Windows'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OnorioCatenacci/pragmatic";
            };
          } // packageOverrides)
      ) {};

    pragmatic = pragmatic_0_1_8;

    pre_commit_0_3_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pre_commit";
            version = "0.3.4";
            src = fetchHex {
              pkg = "pre_commit";
              version = "0.3.4";
              sha256 =
                "16f684ba4f1fed1cba6b19e082b0f8d696e6f1c679285fedf442296617ba5f4e";
            };

            meta = {
              description = ''A module which sets up a configurable pre-commit
                            hook using elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://www.github.com/dwyl/elixir-pre-commit";
            };
          } // packageOverrides)
      ) {};

    pre_commit = pre_commit_0_3_4;

    predicate_sigil_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "predicate_sigil";
            version = "0.1.0";
            src = fetchHex {
              pkg = "predicate_sigil";
              version = "0.1.0";
              sha256 =
                "ca6e6adb617ac510d08ebc3bd339c10f7c1197cd0aa59169d5dba0d8b2770feb";
            };

            meta = {
              description = ''~p sigil for predicate shorthand. `~p(expr) ~> fn
                            expr -> true; _ -> false end`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/predicate_sigil";
            };
          } // packageOverrides)
      ) {};

    predicate_sigil = predicate_sigil_0_1_0;

    predicator_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "predicator";
            version = "0.4.0";
            src = fetchHex {
              pkg = "predicator";
              version = "0.4.0";
              sha256 =
                "80bff2575c3b1cfff852c4e30dd7c524eaa8e4cc103c98e19740fef00bfa9286";
            };

            meta = {
              description = ''Predicator Evaluator in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/predicator/predicator_elixir";
            };
          } // packageOverrides)
      ) {};

    predicator = predicator_0_4_0;

    prefecture_jp_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prefecture_jp";
            version = "0.0.3";
            src = fetchHex {
              pkg = "prefecture_jp";
              version = "0.0.3";
              sha256 =
                "b6a61c44faeb1e3ef6998d34791d00144d110ea140a5d3209943824ae15c5723";
            };

            meta = {
              description = ''PrefectureJp is a library for Japanese
                            prefecture.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ymmtmsys/prefecture_jp";
            };
          } // packageOverrides)
      ) {};

    prefecture_jp = prefecture_jp_0_0_3;

    prefix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prefix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "prefix";
              version = "0.1.0";
              sha256 =
                "e7f07087fc35929dbb8056347f8d47cf57a26b12212c2bae613b6c693fa8d61c";
            };

            meta = {
              description = ''∀ Q, ∃h, ∀ f, g ∈ Q, s.t h(f, g) \"then\"
                            f ≡ g + f'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjen07/prefix";
            };
          } // packageOverrides)
      ) {};

    prefix = prefix_0_1_0;

    pregao_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pregao";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pregao";
              version = "0.1.0";
              sha256 =
                "efe3f8742064ef6b8b07c4cbb495ce10ad8874d84a66a2a6f3c7849b86db2b74";
            };

            meta = {
              description = ''An elixir parser for the BM&F Bovespa BDI file
                            format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/potz/pregao";
            };
          } // packageOverrides)
      ) {};

    pregao = pregao_0_1_0;

    prelude_0_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, etude_1_0_0_beta_0
        }:
          buildMix ({
            name = "prelude";
            version = "0.0.1";
            src = fetchHex {
              pkg = "prelude";
              version = "0.0.1";
              sha256 =
                "805c5a43a043864b4793f4aeff574b88e9eaac18e49d93cb71cbd6270283bde9";
            };
            beamDeps  = [ etude_1_0_0_beta_0 ];

            meta = {
              description = ''a preprocessor/compiler toolset for erlang and
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/prelude";
            };
          } // packageOverrides)
      ) {};

    prelude = prelude_0_0_1;

    presence_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "presence";
            version = "0.9.1";
            src = fetchHex {
              pkg = "presence";
              version = "0.9.1";
              sha256 =
                "f1044e36c3080524eec7bf56729366d7e6435fa03e6cb6833c5c7551c867bd8c";
            };

            meta = {
              description = ''This a small Elixir library to check if a value
                            is blank or not.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wnuqui/presence";
            };
          } // packageOverrides)
      ) {};

    presence = presence_0_9_1;

    presentex_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "presentex";
            version = "0.0.10";
            src = fetchHex {
              pkg = "presentex";
              version = "0.0.10";
              sha256 =
                "86479a0b79146dadc3f224d2023d06d7f4f87fd455a3267bbd11759ebde1404c";
            };

            meta = {
              description = ''An Elixir -> HTML/JavaScript presentation
                            generation tool. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Cobenian/Presentex";
            };
          } // packageOverrides)
      ) {};

    presentex = presentex_0_0_10;

    pretty_console_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pretty_console";
            version = "0.2.2";
            src = fetchHex {
              pkg = "pretty_console";
              version = "0.2.2";
              sha256 =
                "416f848a6f85fb03757381f3c7905026c3e5891c3ab91813a238c872fc1fd174";
            };

            meta = {
              description = ''A slightly more pleasant Logger console
                            backend.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/pretty_console";
            };
          } // packageOverrides)
      ) {};

    pretty_console = pretty_console_0_2_2;

    pretty_hex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pretty_hex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pretty_hex";
              version = "0.0.1";
              sha256 =
                "ab91a38480049af4811ffdaf15dbee9370acb9b20cdc870281d2006a8fe928b4";
            };

            meta = {
              description = ''A binary hex dumping library in Elixir. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polsab/pretty_hex";
            };
          } // packageOverrides)
      ) {};

    pretty_hex = pretty_hex_0_0_1;

    prevayler_iex_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prevayler_iex";
            version = "0.1.7";
            src = fetchHex {
              pkg = "prevayler_iex";
              version = "0.1.7";
              sha256 =
                "c1fcb7487e0d7547745342c6268f69d23a1f0707c0c1b585ef7d7f5ed1e6c342";
            };

            meta = {
              longDescription = ''Simple implementation of prevalence in
                                Elixir, this project is based on prevayler
                                project
                                (https://github.com/jsampson/prevayler.git).'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    prevayler_iex = prevayler_iex_0_1_7;

    prex_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "prex";
            version = "0.0.3";
            src = fetchHex {
              pkg = "prex";
              version = "0.0.3";
              sha256 =
                "41b2eb6ed9fb23224d4f9ec0967a8d8931503379dd6d7476453d8996237bfa93";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Prex is a REST API client code generator for
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alisinabh/prex";
            };
          } // packageOverrides)
      ) {};

    prex = prex_0_0_3;

    printex_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "printex";
            version = "0.1.3";
            src = fetchHex {
              pkg = "printex";
              version = "0.1.3";
              sha256 =
                "d83a7402b40e3c18a6989029240e484d4141fcbbeacf616d7b9b7a5739bedd73";
            };

            meta = {
              description = ''Console Printing with colors and backgrounds'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/printex";
            };
          } // packageOverrides)
      ) {};

    printex = printex_0_1_3;

    prioqueue_0_2_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          extractable_0_2_0,
          fun_land_0_9_2,
          insertable_0_2_0
        }:
          buildMix ({
            name = "prioqueue";
            version = "0.2.6";
            src = fetchHex {
              pkg = "prioqueue";
              version = "0.2.6";
              sha256 =
                "883baa579b0407d9ff44b29da7ec65d541d645054b7f540b2ce05d6471dd8402";
            };
            beamDeps  = [ extractable_0_2_0 fun_land_0_9_2 insertable_0_2_0
                      ];

            meta = {
              longDescription = ''Well-structured Priority Queues for Elixir,
                                offering a common interface with multiple
                                implementations with varying performance
                                guarantees that can be switched in your
                                configuration.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Qqwy/elixir-prioqueue";
            };
          } // packageOverrides)
      ) {};

    prioqueue = prioqueue_0_2_6;

    priority_queue_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "priority_queue";
            version = "1.0.0";
            src = fetchHex {
              pkg = "priority_queue";
              version = "1.0.0";
              sha256 =
                "ba3dc420a5898d863803455c05ad870c6b6f3adb12b50ebea6cd6aeed1b358b7";
            };

            meta = {
              description = ''Priority Queue for Elixir. Heap implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir_priority_queue";
            };
          } // packageOverrides)
      ) {};

    priority_queue = priority_queue_1_0_0;

    private_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "private";
            version = "0.1.1";
            src = fetchHex {
              pkg = "private";
              version = "0.1.1";
              sha256 =
                "f58264a3b092922b8ce190b728c707e699517fcad12c141e35ca9f2b826ba1b8";
            };

            meta = {
              description = ''Make private functions public if Mix.env is
                            :test'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/private";
            };
          } // packageOverrides)
      ) {};

    private = private_0_1_1;

    privilegex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "privilegex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "privilegex";
              version = "0.1.2";
              sha256 =
                "63dfa7e13b097c8a4299e420f284b9605d615163c64efd709b3aac411d66a6d2";
            };

            meta = {
              longDescription = ''Privilegex is a library for changing an
                                elixir process`s privileges(setuid/setgid) from
                                the inside'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plus3x/privilegex";
            };
          } // packageOverrides)
      ) {};

    privilegex = privilegex_0_1_2;

    probe_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "probe";
            version = "1.0.1";
            src = fetchHex {
              pkg = "probe";
              version = "1.0.1";
              sha256 =
                "ace066442b83ee2719f52a2c1761c75b6574a1a7f6ef2a1f6a8745a4691372c9";
            };

            meta = {
              description = ''A super-powered version of `IO.inspect` for
                            better print debugging.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/strobe-audio/probe";
            };
          } // packageOverrides)
      ) {};

    probe = probe_1_0_1;

    process_tree_dictionary_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "process_tree_dictionary";
            version = "1.0.2";
            src = fetchHex {
              pkg = "process_tree_dictionary";
              version = "1.0.2";
              sha256 =
                "beb75832e88fc941e0b1f42cacc6af08e150c152cf7520a686e91e5c91e89865";
            };

            meta = {
              description = ''Implements a dictionary that is scoped to a
                            process tree for Erlang and Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seomoz/process_tree_dictionary";
            };
          } // packageOverrides)
      ) {};

    process_tree_dictionary = process_tree_dictionary_1_0_2;

    procrastinator_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "procrastinator";
            version = "0.1.2";
            src = fetchHex {
              pkg = "procrastinator";
              version = "0.1.2";
              sha256 =
                "6dea8b0108e3fcb938621e3a1be8827c6e459cff4b30c7a4a4ea2f6e6ddf81d9";
            };

            meta = {
              longDescription = ''Procrastinates work until the last second or
                                until the work load has gotten so big that it
                                has to do it. Just like people!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Podium/procrastinator";
            };
          } // packageOverrides)
      ) {};

    procrastinator = procrastinator_0_1_2;

    profitbricks_api_wrapper_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_1_2_0,
          poison_3_1_0,
          tesla_0_10_0
        }:
          buildMix ({
            name = "profitbricks_api_wrapper";
            version = "0.1.1";
            src = fetchHex {
              pkg = "profitbricks_api_wrapper";
              version = "0.1.1";
              sha256 =
                "1a9783acefc788b4642c3d8aec62e84bde589f82736a531b13c5d05d74806526";
            };
            beamDeps  = [ apex_1_2_0 poison_3_1_0 tesla_0_10_0 ];

            meta = {
              description = ''Dead simple Elixir wrapper for the ProfitBricks
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stirlab/elixir-profitbricks";
            };
          } // packageOverrides)
      ) {};

    profitbricks_api_wrapper = profitbricks_api_wrapper_0_1_1;

    progress_bar_1_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "progress_bar";
            version = "1.6.1";
            src = fetchHex {
              pkg = "progress_bar";
              version = "1.6.1";
              sha256 =
                "5ab5df6a707b97bb30f141845c2c3a5347c9b77bde780d34edfe866a70734d9e";
            };

            meta = {
              description = ''Command-line progress bars and spinners.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/progress_bar";
            };
          } // packageOverrides)
      ) {};

    progress_bar = progress_bar_1_6_1;

    project2501_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "project2501";
            version = "0.1.0";
            src = fetchHex {
              pkg = "project2501";
              version = "0.1.0";
              sha256 =
                "6477ef65e9fed747bb0a2313ad787cb4aea6e4b1114b7c6248143f8792799617";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''An Elixir client for Firefox`s Marionette.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evuez/project2501";
            };
          } // packageOverrides)
      ) {};

    project2501 = project2501_0_1_0;

    project_info_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "project_info";
            version = "1.0.0";
            src = fetchHex {
              pkg = "project_info";
              version = "1.0.0";
              sha256 =
                "749553b710d363e5b900a6d3d37da7c461b8f7a977c9da814124f5862cf209a0";
            };

            meta = {
              longDescription = ''A mix task to get info about the current mix
                                project such as name or version number. Useful
                                to automate tasks using a CI server or a build
                                script.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nubleer/project_info";
            };
          } // packageOverrides)
      ) {};

    project_info = project_info_1_0_0;

    prolly_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, array_vector_0_3_0
        }:
          buildMix ({
            name = "prolly";
            version = "0.2.0";
            src = fetchHex {
              pkg = "prolly";
              version = "0.2.0";
              sha256 =
                "4ae805b93c8930dd89750db8844367496cac53a65bf383825ec93529ad9914d1";
            };
            beamDeps  = [ array_vector_0_3_0 ];

            meta = {
              description = ''Probabilistic data structures for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ckampfe/prolly";
            };
          } // packageOverrides)
      ) {};

    prolly = prolly_0_2_0;

    prometheus_3_4_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prometheus";
            version = "3.4.6";
            src = fetchHex {
              pkg = "prometheus";
              version = "3.4.6";
              sha256 =
                "4db35381e0e53f05bbab940424f6510e93deac5e3b064aa5de6945ec6732aeb8";
            };

            meta = {
              description = ''Prometheus monitoring system and time series
                            database client in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.erl";
            };
          } // packageOverrides)
      ) {};

    prometheus_3_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prometheus";
            version = "3.5.1";
            src = fetchHex {
              pkg = "prometheus";
              version = "3.5.1";
              sha256 =
                "fd3cb12a4b7661f9eb613ab2b68691e3607287d727eb69a6e619eefc7cfd52c3";
            };

            meta = {
              description = ''Prometheus monitoring system and time series
                            database client in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.erl";
            };
          } // packageOverrides)
      ) {};

    prometheus_4_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prometheus";
            version = "4.2.0";
            src = fetchHex {
              pkg = "prometheus";
              version = "4.2.0";
              sha256 =
                "286536224ed4fdaca44d230d0b3c65e862e04971b8564443ef1f54ee07aa4328";
            };

            meta = {
              description = ''Prometheus monitoring system and time series
                            database client in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.erl";
            };
          } // packageOverrides)
      ) {};

    prometheus = prometheus_4_2_0;

    prometheus_cowboy_0_1_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          prometheus_httpd_2_1_8
        }:
          buildRebar3 ({
            name = "prometheus_cowboy";
            version = "0.1.4";
            src = fetchHex {
              pkg = "prometheus_cowboy";
              version = "0.1.4";
              sha256 =
                "09c609cc9770746e54f710e63efb2422392d8747ca699fd9040fab7b29f455ee";
            };

            beamDeps  = [ prometheus_httpd_2_1_8 ];

            meta = {
              description = ''Prometheus instrumenters and handlers for Cowboy
                            1&2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus_cowboy";
            };
          } // packageOverrides)
      ) {};

    prometheus_cowboy = prometheus_cowboy_0_1_4;

    prometheus_ex_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, prometheus_3_5_1 }:
          buildMix ({
            name = "prometheus_ex";
            version = "1.1.1";
            src = fetchHex {
              pkg = "prometheus_ex";
              version = "1.1.1";
              sha256 =
                "09f2cf0c31ce6a9bf9a8e798f0fe213d4dd558409f0e2dcd150c614cfc3684aa";
            };
            beamDeps  = [ prometheus_3_5_1 ];

            meta = {
              description = ''Elixir-friendly Prometheus monitoring system
                            client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.ex";
            };
          } // packageOverrides)
      ) {};

    prometheus_ex_1_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, prometheus_3_5_1 }:
          buildMix ({
            name = "prometheus_ex";
            version = "1.4.1";
            src = fetchHex {
              pkg = "prometheus_ex";
              version = "1.4.1";
              sha256 =
                "0ae7e2370628fdc0d56f0ce09f48f5c32f1d0213a250e6d923f7582750035209";
            };
            beamDeps  = [ prometheus_3_5_1 ];

            meta = {
              description = ''Elixir-friendly Prometheus monitoring system
                            client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.ex";
            };
          } // packageOverrides)
      ) {};

    prometheus_ex_3_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, prometheus_4_2_0 }:
          buildMix ({
            name = "prometheus_ex";
            version = "3.0.1";
            src = fetchHex {
              pkg = "prometheus_ex";
              version = "3.0.1";
              sha256 =
                "31dc8465fd312082f6abfc5822a1878927d68b683ad8fe4e62691864570c0080";
            };
            beamDeps  = [ prometheus_4_2_0 ];

            meta = {
              description = ''Elixir-friendly Prometheus monitoring system
                            client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.ex";
            };
          } // packageOverrides)
      ) {};

    prometheus_ex = prometheus_ex_3_0_1;

    prometheus_httpd_2_1_8 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          accept_0_3_3,
          prometheus_3_5_1
        }:
          buildRebar3 ({
            name = "prometheus_httpd";
            version = "2.1.8";
            src = fetchHex {
              pkg = "prometheus_httpd";
              version = "2.1.8";
              sha256 =
                "e36ca3558ae7b2e8d653012251f303e3b917fe72b04bcd007626913ea5deef4c";
            };

            beamDeps  = [ accept_0_3_3 prometheus_3_5_1 ];

            meta = {
              description = ''Prometheus.io inets httpd exporter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus_httpd";
            };
          } // packageOverrides)
      ) {};

    prometheus_httpd = prometheus_httpd_2_1_8;

    prometheus_push_0_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, prometheus_ex_1_4_1
        }:
          buildMix ({
            name = "prometheus_push";
            version = "0.0.1";
            src = fetchHex {
              pkg = "prometheus_push";
              version = "0.0.1";
              sha256 =
                "a7b93699260fa8337dcc3d7ae36a0212c9890b022039d855fc2bdba991f2431a";
            };
            beamDeps  = [ prometheus_ex_1_4_1 ];

            meta = {
              description = ''Prometheus Pushgateway client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus-push";
            };
          } // packageOverrides)
      ) {};

    prometheus_push = prometheus_push_0_0_1;

    promexp_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "promexp";
            version = "0.4.3";
            src = fetchHex {
              pkg = "promexp";
              version = "0.4.3";
              sha256 =
                "deeeda72ec33e729c5b4ccfc90762b870914a14afe774449ea44fa2ecdccb682";
            };

            meta = {
              description = ''Prometheus exporter for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tomaon/promexp";
            };
          } // packageOverrides)
      ) {};

    promexp = promexp_0_4_3;

    promise_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "promise";
            version = "0.1.0";
            src = fetchHex {
              pkg = "promise";
              version = "0.1.0";
              sha256 =
                "b706dd42f6b215324b2f07d810b47e4f2b83ad7e4276af95a017a28f03036705";
            };

            meta = {
              description = ''Promise implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ertgl/promise";
            };
          } // packageOverrides)
      ) {};

    promise = promise_0_1_0;

    promisepay_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "promisepay_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "promisepay_ex";
              version = "0.1.0";
              sha256 =
                "a9174572de240dafcbd4c71f2b4386053c89e57cb54ac516955f4702493d90be";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Promisepay client library for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/psyfear/promisepay_ex";
            };
          } // packageOverrides)
      ) {};

    promisepay_ex = promisepay_ex_0_1_0;

    proof_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proof";
            version = "0.0.1";
            src = fetchHex {
              pkg = "proof";
              version = "0.0.1";
              sha256 =
                "f2dd18e53c1af6fa644ab78b888b5fab61d66bbbf0c48c20c23730bb048c1f5e";
            };

            meta = {
              description = ''CLI to query scryfall.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kosmotaur/proof";
            };
          } // packageOverrides)
      ) {};

    proof = proof_0_0_1;

    prop_types_0_0_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tipo_0_0_6 }:
          buildMix ({
            name = "prop_types";
            version = "0.0.11";
            src = fetchHex {
              pkg = "prop_types";
              version = "0.0.11";
              sha256 =
                "d786fbef06701e21871f39c9c1bb3354966f24cd606d1b1fd7bff1cc97d2873f";
            };
            beamDeps  = [ tipo_0_0_6 ];

            meta = {
              description = ''Property Type validations and checkers for elixir
                            apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bakasho/prop_types";
            };
          } // packageOverrides)
      ) {};

    prop_types = prop_types_0_0_11;

    propcheck_1_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, proper_1_2_0 }:
          buildMix ({
            name = "propcheck";
            version = "1.0.6";
            src = fetchHex {
              pkg = "propcheck";
              version = "1.0.6";
              sha256 =
                "0efb396bf99e0a81e097e9902cfb79a2b237bb221dfd16c197dcf8ecd454aa04";
            };
            beamDeps  = [ proper_1_2_0 ];

            meta = {
              longDescription = ''PropCheck provides property based testing and
                                is an Elixir layer around PropEr. It is also
                                inspired by Quvic`s QuickCheck Elixir
                                library.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/alfert/propcheck";
            };
          } // packageOverrides)
      ) {};

    propcheck = propcheck_1_0_6;

    proper_1_1_1_beta = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "proper";
            version = "1.1.1-beta";
            src = fetchHex {
              pkg = "proper";
              version = "1.1.1-beta";
              sha256 =
                "bde5c0fef0f8d804a7c06aab4f293d19f42149e5880b3412b75efa608e86d342";
            };

            meta = {
              description = ''QuickCheck-inspired property-based testing tool
                            for Erlang.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/manopapad/proper";
            };
          } // packageOverrides)
      ) {};

    proper_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proper";
            version = "1.2.0";
            src = fetchHex {
              pkg = "proper";
              version = "1.2.0";
              sha256 =
                "cbc3766c08337806741343d330bf4bcb826155d2141be8514c4b02858aa19fd3";
            };

            meta = {
              description = ''QuickCheck-inspired property-based testing tool
                            for Erlang.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/manopapad/proper";
            };
          } // packageOverrides)
      ) {};

    proper = proper_1_2_0;

    proper_case_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proper_case";
            version = "1.0.2";
            src = fetchHex {
              pkg = "proper_case";
              version = "1.0.2";
              sha256 =
                "c59d144a9dd2a0176e9036986503dd6518428f24a2db231d0afea0974fe40542";
            };

            meta = {
              longDescription = ''An Elixir library that converts keys in maps
                                between `snake_case` and `camel_case`. Useful as
                                a plug in Phoenix for converting incoming params
                                from JavaScript`s `camelCase` to Elixir`s
                                `snake_case`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnnyji/proper_case";
            };
          } // packageOverrides)
      ) {};

    proplist_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proplist";
            version = "1.1.0";
            src = fetchHex {
              pkg = "proplist";
              version = "1.1.0";
              sha256 =
                "6fc73362d15b4810f4979ddf72ec53c1efc020657a57b7cdd1f682bd38c08298";
            };

            meta = {
              description = ''Proplist provides the complete Keyword API, but
                            for Proplists.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/proplist";
            };
          } // packageOverrides)
      ) {};

    proplist = proplist_1_1_0;

    proquint_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proquint";
            version = "1.0.1";
            src = fetchHex {
              pkg = "proquint";
              version = "1.0.1";
              sha256 =
                "bbfd7f8bd9f5ad8597767e9265f02b2ccf0f8da18fb6c503c544f466e5a226d3";
            };

            meta = {
              longDescription = ''An elixir package that converts ids to
                                proquints, Identifiers that are Readable,
                                Spellable, and Pronounceable. More info about
                                proquints can be found at:
                                https://arxiv.org/html/0901.4016'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/proquint";
            };
          } // packageOverrides)
      ) {};

    proquint = proquint_1_0_1;

    proto_def_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          estree_2_6_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "proto_def";
            version = "0.0.4";
            src = fetchHex {
              pkg = "proto_def";
              version = "0.0.4";
              sha256 =
                "155b17cd62296cc1d5ee0333a87df4b25616a6dff7863a8e7ad219437db5a37e";
            };
            beamDeps  = [ estree_2_6_1 poison_2_2_0 ];

            meta = {
              longDescription = ''ProtoDef compiler for Elixir. (mostly)
                                Compatible with
                                https://github.com/ProtoDef-io/ProtoDef.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ProtoDef-io/elixir-protodef";
            };
          } // packageOverrides)
      ) {};

    proto_def = proto_def_0_0_4;

    protobuf_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "protobuf";
            version = "0.5.4";
            src = fetchHex {
              pkg = "protobuf";
              version = "0.5.4";
              sha256 =
                "994348a4592408bc99c132603b0fdb686a2b5df0321a8eb1a582ec2bd3495886";
            };

            meta = {
              description = ''A pure Elixir implementation of Google
                            Protobuf.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tony612/protobuf-elixir";
            };
          } // packageOverrides)
      ) {};

    protobuf = protobuf_0_5_4;

    protocol_ex_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "protocol_ex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "protocol_ex";
              version = "0.4.0";
              sha256 =
                "2173009a4d1f81ecc85b4ec972f9723c139c5de5c40e1cf5ecf01066320ca61a";
            };

            meta = {
              description = ''Extended Protocol library using Matchers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/protocol_ex";
            };
          } // packageOverrides)
      ) {};

    protocol_ex = protocol_ex_0_4_0;

    protox_0_17_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "protox";
            version = "0.17.0";
            src = fetchHex {
              pkg = "protox";
              version = "0.17.0";
              sha256 =
                "2fa919ae417c70dd661b49a08f76896d9f143bff965fdc969c80d835ddbc0524";
            };

            meta = {
              description = ''A library for Protocol Buffers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EasyMile/protox";
            };
          } // packageOverrides)
      ) {};

    protox = protox_0_17_0;

    provider_asn1_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "provider_asn1";
            version = "0.2.3";
            src = fetchHex {
              pkg = "provider_asn1";
              version = "0.2.3";
              sha256 =
                "e6d24906da043c47fc1123678929f6183385ed310cc3fdd42422ccefb1a2ca78";
            };

            meta = {
              description = ''Compile ASN.1 with Rebar3'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/knusbaum/provider_asn1";
            };
          } // packageOverrides)
      ) {};

    provider_asn1 = provider_asn1_0_2_3;

    providers_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, getopt_0_8_2 }:
          buildRebar3 ({
            name = "providers";
            version = "1.6.0";
            src = fetchHex {
              pkg = "providers";
              version = "1.6.0";
              sha256 =
                "0f6876529a613d34224de8c61d3660388eb981142360f2699486d8536050ce2f";
            };

            beamDeps  = [ getopt_0_8_2 ];

            meta = {
              description = ''Providers provider.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/providers";
            };
          } // packageOverrides)
      ) {};

    providers_1_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, getopt_1_0_1 }:
          buildRebar3 ({
            name = "providers";
            version = "1.7.0";
            src = fetchHex {
              pkg = "providers";
              version = "1.7.0";
              sha256 =
                "8be66129ca85c2fa74efd8737cdaedd31c1c1af51dd2fd601495a6def4cae4a6";
            };

            beamDeps  = [ getopt_1_0_1 ];

            meta = {
              description = ''Providers provider.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/providers";
            };
          } // packageOverrides)
      ) {};

    providers = providers_1_7_0;

    prowl_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_18_3,
          floki_0_20_3,
          httpoison_1_2_0
        }:
          buildMix ({
            name = "prowl";
            version = "0.1.0";
            src = fetchHex {
              pkg = "prowl";
              version = "0.1.0";
              sha256 =
                "c8cd588f4087bc9b6597aa35de37f4152ae56fe977d900d1bfb8065b007cc963";
            };
            beamDeps  = [ ex_doc_0_18_3 floki_0_20_3 httpoison_1_2_0 ];

            meta = {
              longDescription = ''Elixir application for sending notifications
                                to [Prowl](https://www.prowlapp.com/).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zanderxyz/elixir-prowl";
            };
          } // packageOverrides)
      ) {};

    prowl = prowl_0_1_0;

    proxy_protocol_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proxy_protocol";
            version = "0.0.1";
            src = fetchHex {
              pkg = "proxy_protocol";
              version = "0.0.1";
              sha256 =
                "3d2f4e69193ff1cd5b5b4b8f875f1f1a72edf4377292b2eba61a60af692deef0";
            };

            meta = {
              description = ''A parser for version 1 and 2 of HAProxy`s proxy
                            protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tomciopp/proxy-protocol";
            };
          } // packageOverrides)
      ) {};

    proxy_protocol = proxy_protocol_0_0_1;

    pru_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pru";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pru";
              version = "0.1.0";
              sha256 =
                "1c472d0fe83c88b5919bc018e9ece4f34e9d0b7be24282251e2eaab300d893a7";
            };

            meta = {
              longDescription = ''Basic library that enables easy interaction
                                with the PRU cores present in the BeagleBone
                                Black.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nuclearcanary/pru";
            };
          } // packageOverrides)
      ) {};

    pru = pru_0_1_0;

    psq_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "psq";
            version = "0.1.0";
            src = fetchHex {
              pkg = "psq";
              version = "0.1.0";
              sha256 =
                "56c8ab450e26ce20d4cd819022658c66302795b2217aa3f3550942a3ab9d226a";
            };

            meta = {
              description = ''A priority search queue implementation for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shosti/psq";
            };
          } // packageOverrides)
      ) {};

    psq = psq_0_1_0;

    public_suffix_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, idna_5_1_2 }:
          buildMix ({
            name = "public_suffix";
            version = "0.6.0";
            src = fetchHex {
              pkg = "public_suffix";
              version = "0.6.0";
              sha256 =
                "663f29209e7930680cb1656cf144cc7484b37fe261f4417fec280d9a20363bfc";
            };
            beamDeps  = [ idna_5_1_2 ];

            meta = {
              longDescription = ''Operate on domain names using the public
                                suffix rules provided by
                                https://publicsuffix.org/.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seomoz/publicsuffix-elixir";
            };
          } // packageOverrides)
      ) {};

    public_suffix = public_suffix_0_6_0;

    publicist_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "publicist";
            version = "1.1.0";
            src = fetchHex {
              pkg = "publicist";
              version = "1.1.0";
              sha256 =
                "7ed86a54e87e48b7f2fb2d6bb365f0a5e46e987f843494c860dee61c357e2953";
            };

            meta = {
              description = ''Publicist allows developers to test private
                            (defp) functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TeachersPayTeachers/publicist";
            };
          } // packageOverrides)
      ) {};

    publicist = publicist_1_1_0;

    publicsuffix_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "publicsuffix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "publicsuffix";
              version = "0.0.1";
              sha256 =
                "c20351c883ab00a424c6eace4adb23726fbf242240bc63f583f4c07cbe0a824b";
            };

            meta = {
              description = ''Domain name parser for Elixir based on the Public
                            Suffix List.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/weppos/publicsuffix-elixir";
            };
          } // packageOverrides)
      ) {};

    publicsuffix = publicsuffix_0_0_1;

    publish_plus_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "publish_plus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "publish_plus";
              version = "0.1.0";
              sha256 =
                "ebabe6bee1afeb2b13cb77e62dc0cad91d0d9b8a8418e1b624eab43798606afd";
            };

            meta = {
              description = ''PublishPlus is an opinionated package publisher
                            for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wojtekmach/publish_plus";
            };
          } // packageOverrides)
      ) {};

    publish_plus = publish_plus_0_1_0;

    pubnux_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_1_0_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "pubnux";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pubnux";
              version = "0.2.0";
              sha256 =
                "4a7138ca4f75d6580dcc9ecac15a045fd7fbfd72d8df2021804bbd7b82071401";
            };
            beamDeps  = [ httpoison_1_0_0 poison_3_1_0 ];

            meta = {
              description = ''A wrapper for PubNub`s API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liftitapp/pubnux";
            };
          } // packageOverrides)
      ) {};

    pubnux = pubnux_0_2_0;

    pubsub_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pubsub";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pubsub";
              version = "0.0.2";
              sha256 =
                "2072bf67d5d4b6d41c81f0e89697d72ca323c5640e883b0d0cec7d43cf6c8ae8";
            };

            meta = {
              description = ''Publish-Subscribe utility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simonewebdesign/elixir_pubsub";
            };
          } // packageOverrides)
      ) {};

    pubsub_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pubsub";
            version = "1.1.0";
            src = fetchHex {
              pkg = "pubsub";
              version = "1.1.0";
              sha256 =
                "5a058dd686f91757b1c098126e4241eb83ac4ce555c0cc453c3cb870c3432321";
            };

            meta = {
              description = ''Publish-Subscribe utility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simonewebdesign/elixir_pubsub";
            };
          } // packageOverrides)
      ) {};

    pubsub = pubsub_1_1_0;

    pubsub_plus_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pubsub_0_0_2 }:
          buildMix ({
            name = "pubsub_plus";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pubsub_plus";
              version = "0.0.1";
              sha256 =
                "1f0669631b6efebc581ef599c62d9e822162a93ba56daeb63414bec60af5e72d";
            };
            beamDeps  = [ pubsub_0_0_2 ];

            meta = {
              description = ''Pubsub library with nested topic support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marconi/elixir_pubsub_plus";
            };
          } // packageOverrides)
      ) {};

    pubsub_plus = pubsub_plus_0_0_1;

    pulsar_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pulsar";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pulsar";
              version = "0.2.0";
              sha256 =
                "4311cba9f08f5c9955bf9dd43c55b323bd51f3d5c2a66764f173c836a1a94780";
            };

            meta = {
              longDescription = ''A text-based, dynamic dashboard. Jobs update
                                in place, using xterm command codes.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/walmartlabs/pulsar";
            };
          } // packageOverrides)
      ) {};

    pulsar = pulsar_0_2_0;

    pulse_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sonic_0_1_3 }:
          buildMix ({
            name = "pulse";
            version = "0.1.3";
            src = fetchHex {
              pkg = "pulse";
              version = "0.1.3";
              sha256 =
                "8d9ab6b8f5b3e8da2feedb32062b97243bfc8c250ad5bab09fd61944e51e6aa0";
            };
            beamDeps  = [ sonic_0_1_3 ];

            meta = {
              longDescription = ''Service registration and discovery library
                                for Elixir. Relies on etcd as an external
                                service registry.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/heroiclabs/pulse";
            };
          } // packageOverrides)
      ) {};

    pulse = pulse_0_1_3;

    puppeteer_pdf_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, briefly_0_3_0 }:
          buildMix ({
            name = "puppeteer_pdf";
            version = "0.1.1";
            src = fetchHex {
              pkg = "puppeteer_pdf";
              version = "0.1.1";
              sha256 =
                "485c88c921c2d406a8a58637b2ed7179fc2a51a23afce4ee1b2783973f920c37";
            };
            beamDeps  = [ briefly_0_3_0 ];

            meta = {
              longDescription = ''Wrapper for Puppeteer-pdf, a node module that
                                use Puppeteer to convert HTML pages to PDF.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coletiv/puppeteer-pdf";
            };
          } // packageOverrides)
      ) {};

    puppeteer_pdf = puppeteer_pdf_0_1_1;

    pure_http_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "pure_http";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pure_http";
              version = "0.1.0";
              sha256 =
                "d258f10b7401ce61d66c72b1795f4a46e713bed0a915629b8e0a9c4e6e88271a";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              longDescription = ''Wrapper around HTTPPoison building requests
                                and handling responses with pure functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aaronrenner/pure_http";
            };
          } // packageOverrides)
      ) {};

    pure_http = pure_http_0_1_0;

    pusher_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          httpoison_1_2_0,
          signaturex_1_3_0
        }:
          buildMix ({
            name = "pusher";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pusher";
              version = "1.0.0";
              sha256 =
                "61dbe1f2f540d9da8a06af3592284b2802cdf19ed2379c0a74240f5358d02f06";
            };
            beamDeps  = [ exjsx_4_0_0 httpoison_1_2_0 signaturex_1_3_0 ];

            meta = {
              description = ''Pusher HTTP client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/pusher";
            };
          } // packageOverrides)
      ) {};

    pusher = pusher_1_0_0;

    pushest_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gun_1_0_0_pre_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "pushest";
            version = "0.2.2";
            src = fetchHex {
              pkg = "pushest";
              version = "0.2.2";
              sha256 =
                "1b19aed326def476aabda311d6bd0c3d160d868105ff807f6e2270e9036da667";
            };
            beamDeps  = [ gun_1_0_0_pre_5 poison_3_1_0 ];

            meta = {
              description = ''Bidirectional Pusher client in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stepnivlk/pushest";
            };
          } // packageOverrides)
      ) {};

    pushest = pushest_0_2_2;

    pwned_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_1_2_0 }:
          buildMix ({
            name = "pwned";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pwned";
              version = "1.0.2";
              sha256 =
                "73856309b1427b8c450b8d4ab4318c59da06488e6c855e658c3b1065e055670a";
            };
            beamDeps  = [ httpoison_1_2_0 ];

            meta = {
              description = ''Check if your password has been pwned.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/thiamsantos/pwned";
            };
          } // packageOverrides)
      ) {};

    pwned = pwned_1_0_2;

    qdate_localtime_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "qdate_localtime";
            version = "1.1.0";
            src = fetchHex {
              pkg = "qdate_localtime";
              version = "1.1.0";
              sha256 =
                "91928e066da6bcc745ff18b7c368347457caf9250ad00950e9da18e129d49ec5";
            };

            meta = {
              longDescription = ''Erlang library for conversion from one local
                                time to another (forked specifically for qdate
                                compatibility)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/choptastic/qdate_localtime";
            };
          } // packageOverrides)
      ) {};

    qdate_localtime = qdate_localtime_1_1_0;

    qdbg_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qdbg";
            version = "0.1.0";
            src = fetchHex {
              pkg = "qdbg";
              version = "0.1.0";
              sha256 =
                "348ee99eee58c8452a67f281447eb184da03cbf927c6e9ee47b1ad254bb667ee";
            };

            meta = {
              description = ''Quick and dirty debugging output for elixir
                            programmers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mandarvaze/q";
            };
          } // packageOverrides)
      ) {};

    qdbg = qdbg_0_1_0;

    qex_0_3_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qex";
            version = "0.3.4";
            src = fetchHex {
              pkg = "qex";
              version = "0.3.4";
              sha256 =
                "a249d5e79a58d76f5a85626d0bb6891b5754b9a51c33c310286452834c7f7543";
            };

            meta = {
              longDescription = ''A `:queue` wrapper with improvements in API
                                and addition of Protocol implementations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/elixir-queue";
            };
          } // packageOverrides)
      ) {};

    qex = qex_0_3_4;

    qiita_ex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "qiita_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "qiita_ex";
              version = "0.0.2";
              sha256 =
                "0bb9a5535c0915c426ff13350b907cbd2b455bb99d8bcb8324ffadb6c9bcf1eb";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_13_0 ];

            meta = {
              description = ''Qiita API v2 Interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/qiita_ex";
            };
          } // packageOverrides)
      ) {};

    qiita_ex = qiita_ex_0_0_2;

    qiitex_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_json_schema_0_5_7,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "qiitex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "qiitex";
              version = "0.2.1";
              sha256 =
                "8fd3de7ee2ee580f4de2738b788ec4216ea92c884e21d151ee241607b4c672e3";
            };
            beamDeps  = [ ex_json_schema_0_5_7 httpoison_0_13_0 poison_3_1_0
                      ];

            meta = {
              description = ''Simple API wrapper for Qiita API v2'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tamanugi/qiitex";
            };
          } // packageOverrides)
      ) {};

    qiitex = qiitex_0_2_1;

    qiniu_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "qiniu";
            version = "0.4.0";
            src = fetchHex {
              pkg = "qiniu";
              version = "0.4.0";
              sha256 =
                "746393224653a36d0619b72c5779b792a02f796401b653af64e6589776b0d8c8";
            };
            beamDeps  = [ httpoison_0_13_0 poison_2_2_0 ];

            meta = {
              description = ''Qiniu Resource (Cloud) Storage SDK for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tony612/qiniu";
            };
          } // packageOverrides)
      ) {};

    qiniu = qiniu_0_4_0;

    qlc_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qlc";
            version = "1.0.1";
            src = fetchHex {
              pkg = "qlc";
              version = "1.0.1";
              sha256 =
                "575f2697f2fe13a0e978c903155aa2bc4818c5ac5a1c514e4066ceace2d891d1";
            };

            meta = {
              description = ''QLC interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/k1complete/qlc";
            };
          } // packageOverrides)
      ) {};

    qlc = qlc_1_0_1;

    qq_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qq";
            version = "0.1.2";
            src = fetchHex {
              pkg = "qq";
              version = "0.1.2";
              sha256 =
                "861e4c754268372f85a0b6aefed0c5543d785b1f489a28fdd8306aed92e27553";
            };

            meta = {
              description = ''Quick and dirty debugging output for elixir
                            programmers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mandarvaze/q";
            };
          } // packageOverrides)
      ) {};

    qq = qq_0_1_2;

    qr_code_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qr_code";
            version = "0.1.0";
            src = fetchHex {
              pkg = "qr_code";
              version = "0.1.0";
              sha256 =
                "51052c2c33d8857322ac3b741e78b831aa337b8dda9d3baea9661293feae8794";
            };

            meta = {
              description = ''QR Code library allows you to create QR codes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GildedHonour/qr_code";
            };
          } // packageOverrides)
      ) {};

    qr_code = qr_code_0_1_0;

    qrcode_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qrcode";
            version = "0.1.4";
            src = fetchHex {
              pkg = "qrcode";
              version = "0.1.4";
              sha256 =
                "3742792963ad255b78551c0d4f8060f9b4f38a198635157f30ee1b84036cb0e9";
            };

            meta = {
              description = ''Generate qrcode utils'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/qrcode";
            };
          } // packageOverrides)
      ) {};

    qrcode = qrcode_0_1_4;

    quadratic_equation_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quadratic_equation";
            version = "0.1.0";
            src = fetchHex {
              pkg = "quadratic_equation";
              version = "0.1.0";
              sha256 =
                "47e0658d9bd274e7e020e600d15758a500f5da21453900b3d12c816b6d89d894";
            };

            meta = {
              description = ''Example of creating a Mix-application - from
                            initialization to publication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/folklore/quadratic_equation";
            };
          } // packageOverrides)
      ) {};

    quadratic_equation = quadratic_equation_0_1_0;

    quadtree_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_5_3 }:
          buildMix ({
            name = "quadtree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "quadtree";
              version = "0.1.0";
              sha256 =
                "d8638fa46f06020fa0e84f318fe0b0af4a2d328cde74bf12c22db52850fc0855";
            };
            beamDeps  = [ distillery_1_5_3 ];

            meta = {
              description = ''An implementation of quadtrees in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Zubry/quadtreex";
            };
          } // packageOverrides)
      ) {};

    quadtree = quadtree_0_1_0;

    quaff_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          aleppo_0_9_0,
          meck_0_8_11
        }:
          buildMix ({
            name = "quaff";
            version = "1.0.0";
            src = fetchHex {
              pkg = "quaff";
              version = "1.0.0";
              sha256 =
                "e24bd8b0188217fad752157f4c977aa6583cff3d625d3ede4d0a942d7313a698";
            };
            beamDeps  = [ aleppo_0_9_0 meck_0_8_11 ];

            meta = {
              longDescription = ''Quaff is a set of tools for integrating
                                Elixir into erlang applications (or vice
                                versa).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aruki-delivery/quaff";
            };
          } // packageOverrides)
      ) {};

    quaff = quaff_1_0_0;

    quantex_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          math_0_3_0,
          numexy_0_1_8
        }:
          buildMix ({
            name = "quantex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "quantex";
              version = "0.0.4";
              sha256 =
                "a09696334a33b7ddfa5ff9ad4321d4cb6cf8596013160204e29be9c0fe86ac27";
            };
            beamDeps  = [ math_0_3_0 numexy_0_1_8 ];

            meta = {
              description = ''Quantum computer system environment and libraries
                            in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/piacere-ex/quantex";
            };
          } // packageOverrides)
      ) {};

    quantex = quantex_0_0_4;

    quark_2_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quark";
            version = "2.3.0";
            src = fetchHex {
              pkg = "quark";
              version = "2.3.0";
              sha256 =
                "6314742f5810b791b776d0682decd042d4407889e8f4e53ebfe12d1bbfbe018d";
            };

            meta = {
              description = ''Common combinators for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/quark";
            };
          } // packageOverrides)
      ) {};

    quark = quark_2_3_0;

    quetelet_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_5,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "quetelet";
            version = "0.1.2";
            src = fetchHex {
              pkg = "quetelet";
              version = "0.1.2";
              sha256 =
                "90cf48a8cf38cf8670118e50e7564660501f01f41dc199f498f658f75e6ca0be";
            };
            beamDeps  = [ earmark_1_2_5 ex_doc_0_18_3 ];

            meta = {
              description = ''Statistics modules in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kenju/elixir_quetelet";
            };
          } // packageOverrides)
      ) {};

    quetelet = quetelet_0_1_2;

    queue_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "queue";
            version = "0.0.1";
            src = fetchHex {
              pkg = "queue";
              version = "0.0.1";
              sha256 =
                "a383d4b4a64e7639e66f314ae9e38e387453bcce6c96173e3d90b497c82bed9b";
            };

            meta = {
              description = ''Elixir wrapper for erlang double sided FIFO
                            queue'';

            };
          } // packageOverrides)
      ) {};

    queue = queue_0_0_1;

    queuex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "queuex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "queuex";
              version = "0.2.0";
              sha256 =
                "e40b25befc34ecff962c92536e6a520967dd2d6031cb70a58be62269a6aec623";
            };

            meta = {
              description = ''Priority Queue'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/queuex";
            };
          } // packageOverrides)
      ) {};

    queuex = queuex_0_2_0;

    quick_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quick";
            version = "0.0.1";
            src = fetchHex {
              pkg = "quick";
              version = "0.0.1";
              sha256 =
                "33face2d96bb04a56e831027cf271623be407ed013f030abdcd4f16a14e6d1d0";
            };

            meta = {
              description = ''JSON-optimized web server for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AnilRedshift/quick";
            };
          } // packageOverrides)
      ) {};

    quick = quick_0_0_1;

    quick_alias_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quick_alias";
            version = "0.1.0";
            src = fetchHex {
              pkg = "quick_alias";
              version = "0.1.0";
              sha256 =
                "04ec05426722c1f3d810ebf246ecdf8fa33b6ef56a0ffdff1bca7a8fce844086";
            };

            meta = {
              description = ''Quick aliases for .iex.exs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thoughtbot/quick_alias";
            };
          } // packageOverrides)
      ) {};

    quick_alias = quick_alias_0_1_0;

    quick_chex_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quick_chex";
            version = "0.4.1";
            src = fetchHex {
              pkg = "quick_chex";
              version = "0.4.1";
              sha256 =
                "be71cd4b4019bbd1aee993184465d8ef367f6e5c3e46f2a15eb23f9e29c853e8";
            };

            meta = {
              description = ''property based testing for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matteosister/quick_chex";
            };
          } // packageOverrides)
      ) {};

    quick_chex = quick_chex_0_4_1;

    quickrand_1_5_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "quickrand";
            version = "1.5.3";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.5.3";
              sha256 =
                "64a2aed255170981538d423c695917fdc56a7fafd6a32633fa5d6d646e27b05a";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/quickrand";
            };
          } // packageOverrides)
      ) {};

    quickrand_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "quickrand";
            version = "1.5.4";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.5.4";
              sha256 =
                "2657dca4544bf98ec44328f95f2c94a07accece452195c599e43799a760b28b0";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/quickrand";
            };
          } // packageOverrides)
      ) {};

    quickrand_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "quickrand";
            version = "1.6.0";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.6.0";
              sha256 =
                "f47160c4c7c0b53cb03d85442360216c40842df6e0b65eebc43d746bb6e2dde2";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/quickrand";
            };
          } // packageOverrides)
      ) {};

    quickrand_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "quickrand";
            version = "1.7.3";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.7.3";
              sha256 =
                "e05ee94a9da317b4b7d9c453638e592d002fe8f2109a0357b0a54f966edbba90";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/quickrand";
            };
          } // packageOverrides)
      ) {};

    quickrand = quickrand_1_7_3;

    quinn_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quinn";
            version = "1.0.2";
            src = fetchHex {
              pkg = "quinn";
              version = "1.0.2";
              sha256 =
                "d7f1fd1a0f2aed1379abcc2ca95bf35575fcac5f83aa7be6b233a5d262e44d73";
            };

            meta = {
              description = ''Quinn is a simple XML parser mainly used to parse
                            rss/atom feeds.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/nhu313/Quinn";
            };
          } // packageOverrides)
      ) {};

    quinn_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quinn";
            version = "1.1.2";
            src = fetchHex {
              pkg = "quinn";
              version = "1.1.2";
              sha256 =
                "0d79c317431ff57df841bb7bcea37476467faf750fa7afcc39543bd8ebf7e6e8";
            };

            meta = {
              description = ''Quinn is a simple XML parser mainly used to parse
                            rss/atom feeds.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/nhu313/Quinn";
            };
          } // packageOverrides)
      ) {};

    quinn = quinn_1_1_2;

    quintana_0_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, folsom_0_8_5 }:
          buildRebar3 ({
            name = "quintana";
            version = "0.2.2";
            src = fetchHex {
              pkg = "quintana";
              version = "0.2.2";
              sha256 =
                "8894655210cc0b2420cc3f13d284dd86ee28cf213c88b8a35a80488af8fe51c6";
            };

            beamDeps  = [ folsom_0_8_5 ];

            meta = {
              description = ''Wrapper around some Folsom functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/puzza007/quintana";
            };
          } // packageOverrides)
      ) {};

    quintana = quintana_0_2_2;

    quixir_0_9_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pollution_0_9_2 }:
          buildMix ({
            name = "quixir";
            version = "0.9.3";
            src = fetchHex {
              pkg = "quixir";
              version = "0.9.3";
              sha256 =
                "4f3a1fe7c82b767d935b3f7b94cf34b91ef78bb487ef256b303d77417fc7d589";
            };
            beamDeps  = [ pollution_0_9_2 ];

            meta = {
              description = ''A simple property-based testing framework written
                            in pure Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/quixir";
            };
          } // packageOverrides)
      ) {};

    quixir = quixir_0_9_3;

    ra_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ra";
            version = "0.3.3";
            src = fetchHex {
              pkg = "ra";
              version = "0.3.3";
              sha256 =
                "f44c53d90b89c89d9b601949cdb3d0c015c67fa07f1563041d551d65c16eaddc";
            };

            meta = {
              description = ''Ra is a framework for building command line
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NobbZ/ra";
            };
          } // packageOverrides)
      ) {};

    ra = ra_0_3_3;

    rabbitElixir_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_1_0 }:
          buildMix ({
            name = "rabbitElixir";
            version = "1.0.1";
            src = fetchHex {
              pkg = "rabbitElixir";
              version = "1.0.1";
              sha256 =
                "bc0ddae7fa0b869a6688db2e5d909d375ff0692a959aa768eed586bcfd2d0a2f";
            };
            beamDeps  = [ exjsx_3_1_0 ];

            meta = {
              description = ''Another Zawgyi <=> Unicode Converter '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Rabbit-Converter/Rabbit-Elixir";
            };
          } // packageOverrides)
      ) {};

    rabbitElixir = rabbitElixir_1_0_1;

    rabbit_common_3_5_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rabbit_common";
            version = "3.5.6";
            src = fetchHex {
              pkg = "rabbit_common";
              version = "3.5.6";
              sha256 =
                "9335ab3ebc4e8e140d7bc9b1b0e7ee99c0aa87d0a746b704184121ba35c04f1c";
            };

            meta = {
              description = ''Modules shared by rabbitmq-server and
                            rabbitmq-erlang-client'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "http://www.rabbitmq.com/";
            };
          } // packageOverrides)
      ) {};

    radio_thermostat_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "radio_thermostat";
            version = "0.1.1";
            src = fetchHex {
              pkg = "radio_thermostat";
              version = "0.1.1";
              sha256 =
                "223cb4b3795d5ab18ed6e086b8094c978d948cce8d4a2b66d558aed97fe889aa";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Communicate with a Radio Thermostat over the
                            LAN'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/radio_thermostat";
            };
          } // packageOverrides)
      ) {};

    radio_thermostat = radio_thermostat_0_1_1;

    raft_fleet_0_8_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          croma_0_9_3,
          rafted_value_0_9_2
        }:
          buildMix ({
            name = "raft_fleet";
            version = "0.8.2";
            src = fetchHex {
              pkg = "raft_fleet";
              version = "0.8.2";
              sha256 =
                "22ae36272c569b7413131f30a404020ce9642e7bd9252392874350ce2390fadb";
            };
            beamDeps  = [ croma_0_9_3 rafted_value_0_9_2 ];

            meta = {
              description = ''A fleet of Raft consensus groups'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    raft_fleet = raft_fleet_0_8_2;

    raft_kv_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          croma_0_9_3,
          raft_fleet_0_8_2,
          rafted_value_0_9_2
        }:
          buildMix ({
            name = "raft_kv";
            version = "0.2.0";
            src = fetchHex {
              pkg = "raft_kv";
              version = "0.2.0";
              sha256 =
                "18832c8a4f558791e5d5c94ccc5258ae49b8ebe27eb958c2d557fe8ff38f72e9";
            };
            beamDeps  = [ croma_0_9_3 raft_fleet_0_8_2 rafted_value_0_9_2 ];

            meta = {
              longDescription = ''An Elixir library to store key-value pairs in
                                a distributed, fault-tolerant, self-adjusting
                                data structure.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    raft_kv = raft_kv_0_2_0;

    rafted_value_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, croma_0_9_3 }:
          buildMix ({
            name = "rafted_value";
            version = "0.9.2";
            src = fetchHex {
              pkg = "rafted_value";
              version = "0.9.2";
              sha256 =
                "474cf469a2fc4130134ed4d7e2f9274bb81837bd1a1a6241ad3e6f0e009db699";
            };
            beamDeps  = [ croma_0_9_3 ];

            meta = {
              description = ''Replicated and synchronized values wrapped by
                            processes'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    rafted_value = rafted_value_0_9_2;

    rai_ex_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          blake2_1_0_1,
          decimal_1_5_0,
          ed25519_1_3_0,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "rai_ex";
            version = "0.3.1";
            src = fetchHex {
              pkg = "rai_ex";
              version = "0.3.1";
              sha256 =
                "f50875a41547275e6923877cb57f08ff3ca79b94111b75f23330ef6d9e42d4d6";
            };
            beamDeps  = [
                          blake2_1_0_1
                          decimal_1_5_0
                          ed25519_1_3_0
                          httpoison_0_13_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''An Elixir client for managing a RaiBlocks
                            node.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/willHol/rai_ex";
            };
          } // packageOverrides)
      ) {};

    rai_ex = rai_ex_0_3_1;

    rails_to_iana_tz_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "rails_to_iana_tz";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rails_to_iana_tz";
              version = "0.1.0";
              sha256 =
                "e06e572999ea96b068b9f976cd120e8841958144d837cfc5f6598fa03fc12c25";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              description = ''converts rails US timezones to the iana
                            equivalent which is useful for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/newshipt/rails_to_iana_tz";
            };
          } // packageOverrides)
      ) {};

    rails_to_iana_tz = rails_to_iana_tz_0_1_0;

    ralitobu_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ralitobu";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ralitobu";
              version = "0.1.0";
              sha256 =
                "c131ef38e9f9e438e7479ba34430c7c874d1646670d6636a8cc98db2f113d075";
            };

            meta = {
              description = ''The Rate Limiter with Token Bucket algorithm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/ralitobu";
            };
          } // packageOverrides)
      ) {};

    ralitobu = ralitobu_0_1_0;

    ramen_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          focus_0_3_5,
          httpoison_1_2_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ramen";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ramen";
              version = "0.1.6";
              sha256 =
                "80c2d3db8305a85318a60628622f385a46ba3ab8c703324cbd3d5910e241e915";
            };
            beamDeps  = [ focus_0_3_5 httpoison_1_2_0 poison_3_1_0 ];

            meta = {
              description = ''A Richer GitHub API Client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MarcusSky/ramen";
            };
          } // packageOverrides)
      ) {};

    ramen = ramen_0_1_6;

    ranch_1_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ranch";
              version = "1.1.0";
              sha256 =
                "98ade939e63e6567da5dec5bc5bd93cbdc53d53f8b1aa998adec60dc4057f048";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_2_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.2.1";
            src = fetchHex {
              pkg = "ranch";
              version = "1.2.1";
              sha256 =
                "f602d057615ce737945c239e9c8155d3f5300fc5b1255abf81f2a9d0d08e5b04";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_3_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.3.2";
            src = fetchHex {
              pkg = "ranch";
              version = "1.3.2";
              sha256 =
                "6e56493a862433fccc3aca3025c946d6720d8eedf6e3e6fb911952a7071c357f";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_4_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.4.0";
            src = fetchHex {
              pkg = "ranch";
              version = "1.4.0";
              sha256 =
                "53ad9c80918ea2b6d11e0c225d4396473c288d02c44c9ca5eb0aa2e1c85fecba";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_5_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.5.0";
            src = fetchHex {
              pkg = "ranch";
              version = "1.5.0";
              sha256 =
                "86d40fc42aa47bcb6952ddf1dbfd3da04b5ba69afb65c322c99845913250b11f";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch = ranch_1_5_0;

    ranch_proxy_protocol_1_4_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, ranch_1_3_2 }:
          buildRebar3 ({
            name = "ranch_proxy_protocol";
            version = "1.4.2";
            src = fetchHex {
              pkg = "ranch_proxy_protocol";
              version = "1.4.2";
              sha256 =
                "54f1314ca8e947499a0ce8fdeadd10d994a796dbebcc5313dd86cb8dbb704016";
            };

            beamDeps  = [ ranch_1_3_2 ];

            meta = {
              description = ''Ranch Proxy Protocol Transport'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/heroku/ranch_proxy_protocol";
            };
          } // packageOverrides)
      ) {};

    ranch_proxy_protocol_1_4_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, ranch_1_4_0 }:
          buildRebar3 ({
            name = "ranch_proxy_protocol";
            version = "1.4.4";
            src = fetchHex {
              pkg = "ranch_proxy_protocol";
              version = "1.4.4";
              sha256 =
                "c29bfc8c42c7f613b604ae0ed14dab6f99fc0a1bef9e5844ae606295c94dc907";
            };

            beamDeps  = [ ranch_1_4_0 ];

            meta = {
              description = ''Ranch Proxy Protocol Transport'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/heroku/ranch_proxy_protocol";
            };
          } // packageOverrides)
      ) {};

    ranch_proxy_protocol_1_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, ranch_1_5_0 }:
          buildRebar3 ({
            name = "ranch_proxy_protocol";
            version = "1.5.0";
            src = fetchHex {
              pkg = "ranch_proxy_protocol";
              version = "1.5.0";
              sha256 =
                "dc64b548aa4698e5a6f33ab125f5f60f60590f63e42cf84900ef7d4e978bf970";
            };

            beamDeps  = [ ranch_1_5_0 ];

            meta = {
              description = ''Ranch Proxy Protocol Transport'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/heroku/ranch_proxy_protocol";
            };
          } // packageOverrides)
      ) {};

    ranch_proxy_protocol = ranch_proxy_protocol_1_5_0;

    rand_compat_0_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rand_compat";
            version = "0.0.3";
            src = fetchHex {
              pkg = "rand_compat";
              version = "0.0.3";
              sha256 =
                "cdf7be2b17308ec245b912c45fe55741f93b6e4f1a24ba6074f7137b0cc09bf4";
            };

            meta = {
              description = ''Erlang 18 random compatibility library.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lasp-lang/rand_compat";
            };
          } // packageOverrides)
      ) {};

    rand_compat = rand_compat_0_0_3;

    rand_pcg_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rand_pcg";
            version = "0.1.2";
            src = fetchHex {
              pkg = "rand_pcg";
              version = "0.1.2";
              sha256 =
                "fb10d261b85fb1fe5bf8b7622725655d54d97e0b811b2b22eaa8092af5bad114";
            };

            meta = {
              longDescription = ''Elixir implementation of the PCG Random
                                Number Algorithm (http://www.pcg-random.org/)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/wilwade/rand_pcg";
            };
          } // packageOverrides)
      ) {};

    rand_pcg = rand_pcg_0_1_2;

    rand_str_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rand_str";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rand_str";
              version = "1.0.0";
              sha256 =
                "a35d9b180b81b17cc14fd9498138ae76f31de4e626195fd5e00e7ff652741a23";
            };

            meta = {
              description = ''OTP library for generating random strings'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ClicaAi/rand_str";
            };
          } // packageOverrides)
      ) {};

    rand_str = rand_str_1_0_0;

    random_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tinymt_0_3_2 }:
          buildMix ({
            name = "random";
            version = "0.2.4";
            src = fetchHex {
              pkg = "random";
              version = "0.2.4";
              sha256 =
                "836f7aa84f9d3ca8c4c161332ab1597c4e68e2bf9180b8cfd5e60e06b7012928";
            };
            beamDeps  = [ tinymt_0_3_2 ];

            meta = {
              longDescription = ''This module contains pseudo-random number
                                generators for various distributions ported from
                                Python 3 random module for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/random";
            };
          } // packageOverrides)
      ) {};

    random = random_0_2_4;

    random_bytes_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_bytes";
            version = "1.0.0";
            src = fetchHex {
              pkg = "random_bytes";
              version = "1.0.0";
              sha256 =
                "f7ee489fd5ff040ce1c84090032ef3ce6b7fc295ae056e6028e801731d0ed9b5";
            };

            meta = {
              description = ''Generate random strings in a few different
                            formats.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/duff/random_bytes";
            };
          } // packageOverrides)
      ) {};

    random_bytes = random_bytes_1_0_0;

    random_puppy_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_3,
          json_1_2_2
        }:
          buildMix ({
            name = "random_puppy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "random_puppy";
              version = "0.1.0";
              sha256 =
                "4b18f2d0efe3753db4f922eae5f4d845c5c467780f8c5c86b92b042cd8069d10";
            };
            beamDeps  = [ httpotion_3_0_3 json_1_2_2 ];

            meta = {
              description = ''Get a URL to a random puppy image.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/melvinsh/random_puppy";
            };
          } // packageOverrides)
      ) {};

    random_puppy = random_puppy_0_1_0;

    random_string_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_string";
            version = "0.3.0";
            src = fetchHex {
              pkg = "random_string";
              version = "0.3.0";
              sha256 =
                "58dea1bb9919b887548cced9e90fb4878d1f5fab6a832879caf8258f3ad823c4";
            };

            meta = {
              description = ''Generates random string (or a stream of
                            characters) of desired character sets.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sylph01/random_string";
            };
          } // packageOverrides)
      ) {};

    random_string = random_string_0_3_0;

    random_string_generator_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_string_generator";
            version = "0.1.1";
            src = fetchHex {
              pkg = "random_string_generator";
              version = "0.1.1";
              sha256 =
                "01ea06f7b74d04c392beae4f30b5c35551b8e0c6842a49b0f3a19e85e7c3356a";
            };

            meta = {
              description = ''Generate a random string based on a given string
                            pattern.'';
              license = stdenv.lib.licenses.free;
              homepage =
                "https://github.com/caioceccon/random_string_generator";
            };
          } // packageOverrides)
      ) {};

    random_string_generator = random_string_generator_0_1_1;

    random_user_0_3_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "random_user";
            version = "0.3.4";
            src = fetchHex {
              pkg = "random_user";
              version = "0.3.4";
              sha256 =
                "1ecac6e0bc56ab73f9b90d07ef0fff3f3abf5f5aed75b4ed068f235a5b0809c1";
            };
            beamDeps  = [ httpotion_3_1_0 poison_3_1_0 ];

            meta = {
              description = ''Random User API client for Elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/katgironpe/random_user";
            };
          } // packageOverrides)
      ) {};

    random_user = random_user_0_3_4;

    random_username_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_username";
            version = "0.1.0";
            src = fetchHex {
              pkg = "random_username";
              version = "0.1.0";
              sha256 =
                "77df4478b6821990f69fe3de817be18be43b27c6cc5f016b139b5d8c7878ec75";
            };

            meta = {
              description = ''Generates random usernames'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/mynameisrufus/random_username";
            };
          } // packageOverrides)
      ) {};

    random_username = random_username_0_1_0;

    randomuser_ex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "randomuser_ex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "randomuser_ex";
              version = "0.1.1";
              sha256 =
                "9b1ea6c25c9d9ff0db34cbf77281bdd57e0ce11a4d17a09c72c6978c2e54c595";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper to consume randomuser.me API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dreamingechoes/randomuser_ex";
            };
          } // packageOverrides)
      ) {};

    randomuser_ex = randomuser_ex_0_1_1;

    randpass_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "randpass";
            version = "0.0.1";
            src = fetchHex {
              pkg = "randpass";
              version = "0.0.1";
              sha256 =
                "922f993068244c9679863389bdaa0196670d87ff393237145ed0edf0275eac58";
            };

            meta = {
              description = ''A simple password generation lib'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Mechasparrow/elixirpasswordgen";
            };
          } // packageOverrides)
      ) {};

    randpass = randpass_0_0_1;

    range_extras_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "range_extras";
            version = "0.1.0";
            src = fetchHex {
              pkg = "range_extras";
              version = "0.1.0";
              sha256 =
                "edc50d31341e1370d009df8b51d7d0e355a966068520ff38e88b8b542953e15c";
            };

            meta = {
              description = ''Elixir range utilities: constant-time random
                            sampling and set operations.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lnikkila/elixir-range-extras";
            };
          } // packageOverrides)
      ) {};

    range_extras = range_extras_0_1_0;

    rangex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rangex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rangex";
              version = "0.1.0";
              sha256 =
                "e046a8fc8fb7aaf82d14f4c4d7bb0fd4d0d5bb4a99ed70c48016cafa90e80098";
            };

            meta = {
              description = ''Range manipulation library'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/openapi-ro/rangex";
            };
          } // packageOverrides)
      ) {};

    rangex = rangex_0_1_0;

    ranjith965_statistics_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ranjith965_statistics";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ranjith965_statistics";
              version = "0.1.0";
              sha256 =
                "4b0d5e592a4f5d99e2dff0f00d5932752321f9e15b97fbd4d4dc31855bec37c7";
            };

            meta = {
              description = ''This is my first project'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    ranjith965_statistics = ranjith965_statistics_0_1_0;

    rat_error_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rat_error";
            version = "0.0.2";
            src = fetchHex {
              pkg = "rat_error";
              version = "0.0.2";
              sha256 =
                "acfabb6b361b2bd123e0fbcf662d38c9d201b60a862be4e6692690e1319fa5c5";
            };

            meta = {
              description = ''Helper functions for error handling'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/silathdiir/rat_error";
            };
          } // packageOverrides)
      ) {};

    rat_error = rat_error_0_0_2;

    ratekeeper_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ratekeeper";
            version = "0.2.3";
            src = fetchHex {
              pkg = "ratekeeper";
              version = "0.2.3";
              sha256 =
                "5324ff84a44117f6a9bd22a0b63f185bfbd47a729ebb45f795276d2d516ac923";
            };

            meta = {
              description = ''Ratekeeper is a library for scheduling
                            rate-limited actions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whitered/ratekeeper";
            };
          } // packageOverrides)
      ) {};

    ratekeeper = ratekeeper_0_2_3;

    raterl_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "raterl";
            version = "0.2.0";
            src = fetchHex {
              pkg = "raterl";
              version = "0.2.0";
              sha256 =
                "bcd9261b0522638968fe22568d850b07ab45b78670477ce4b519b74da44eefd5";
            };

            meta = {
              description = ''Erlang flow control'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lrascao/raterl";
            };
          } // packageOverrides)
      ) {};

    raterl = raterl_0_2_0;

    ratio_1_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, numbers_2_0_3 }:
          buildMix ({
            name = "ratio";
            version = "1.2.4";
            src = fetchHex {
              pkg = "ratio";
              version = "1.2.4";
              sha256 =
                "0239e2c186fab64fe626cb6cabc16be6cfe85ca8c631f01ca7c2d2b6ebe08732";
            };
            beamDeps  = [ numbers_2_0_3 ];

            meta = {
              longDescription = ''This library allows you to use Rational
                                numbers in Elixir, to enable exact calculations
                                with all numbers big and small.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir-rational";
            };
          } // packageOverrides)
      ) {};

    ratio_2_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          numbers_5_0_1
        }:
          buildMix ({
            name = "ratio";
            version = "2.2.0";
            src = fetchHex {
              pkg = "ratio";
              version = "2.2.0";
              sha256 =
                "7e98659f1f3eab9e96121033162ca8efa2b8b2657da4bb4e23454b589e5ba935";
            };
            beamDeps  = [ decimal_1_3_1 numbers_5_0_1 ];

            meta = {
              longDescription = ''This library allows you to use Rational
                                numbers in Elixir, to enable exact calculations
                                with all numbers big and small.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir-rational";
            };
          } // packageOverrides)
      ) {};

    ratio = ratio_2_2_0;

    rational_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_5 }:
          buildMix ({
            name = "rational";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rational";
              version = "0.2.0";
              sha256 =
                "640093486afd882e5283d4269d9ab624369239016fed67e3b8038845322107b7";
            };
            beamDeps  = [ earmark_1_2_5 ];

            meta = {
              longDescription = ''Rational is a module for exact representation
                                and manipulation of rational fractions, that is,
                                those fractions that can be exactly represented
                                by a ratio of integers (e.g., 1/3 or
                                4176/22687).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-rational.git";
            };
          } // packageOverrides)
      ) {};

    rational = rational_0_2_0;

    ratx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ratx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ratx";
              version = "0.1.0";
              sha256 =
                "fbf933ff32fdc127200880f5b567820bf03504ade1bd697ffbc0535dbafc23d6";
            };

            meta = {
              description = ''Rate limiter and overload protection for erlang
                            and elixir applications. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liveforeverx/ratx";
            };
          } // packageOverrides)
      ) {};

    ratx = ratx_0_1_0;

    ravel_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ravel";
            version = "0.0.6";
            src = fetchHex {
              pkg = "ravel";
              version = "0.0.6";
              sha256 =
                "a8fc97393216e2c4429982deefb77b48031ca7feca1f81835451af8977d4932e";
            };

            meta = {
              description = ''Extendable validation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/revati/ravel";
            };
          } // packageOverrides)
      ) {};

    ravel = ravel_0_0_6;

    raven_smcd_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_uart_1_0_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "raven_smcd";
            version = "0.2.1";
            src = fetchHex {
              pkg = "raven_smcd";
              version = "0.2.1";
              sha256 =
                "96062818f0bd3f50665e0cd6ad4e69d9e206b24f685ff2ef326ccc1add70a048";
            };
            beamDeps  = [ nerves_uart_1_0_0 sweet_xml_0_6_5 ];

            meta = {
              longDescription = ''A Client for the Rainforest Automation Raven
                                USB SMCD (Smart Meter Connected Device)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/raven";
            };
          } // packageOverrides)
      ) {};

    raven_smcd = raven_smcd_0_2_1;

    ravenx_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ravenx";
            version = "2.0.0";
            src = fetchHex {
              pkg = "ravenx";
              version = "2.0.0";
              sha256 =
                "e50405171140162bd05af22008c53852dc8826192d32c81e0f7becc471e282d0";
            };

            meta = {
              description = ''Notification dispatch library for Elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/acutario/ravenx";
            };
          } // packageOverrides)
      ) {};

    ravenx = ravenx_2_0_0;

    raxx_0_14_14 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cookie_0_1_1,
          uuid_1_1_8
        }:
          buildMix ({
            name = "raxx";
            version = "0.14.14";
            src = fetchHex {
              pkg = "raxx";
              version = "0.14.14";
              sha256 =
                "2f6fd8dc3c3ba6f86a212e74964e4acaae544d9f2907b1243d9a5d4e33f75eeb";
            };
            beamDeps  = [ cookie_0_1_1 uuid_1_1_8 ];

            meta = {
              description = ''Interface for HTTP webservers, frameworks and
                            clients.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx_0_14_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "raxx";
            version = "0.14.9";
            src = fetchHex {
              pkg = "raxx";
              version = "0.14.9";
              sha256 =
                "4c6490dd96695eae1778dda72cd0e4d824a2e484969873a4cbd7cbb2c1a947b7";
            };

            meta = {
              description = ''Interface for HTTP webservers, frameworks and
                            clients.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx_0_15_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cookie_0_1_1 }:
          buildMix ({
            name = "raxx";
            version = "0.15.4";
            src = fetchHex {
              pkg = "raxx";
              version = "0.15.4";
              sha256 =
                "9b0381a14c450ad23ef30df4508de4657ff4bf6f3b7a03fa0119c92441bb6e6a";
            };
            beamDeps  = [ cookie_0_1_1 ];

            meta = {
              description = ''Interface for HTTP webservers, frameworks and
                            clients.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx_1_0_0_rc_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "raxx";
            version = "1.0.0-rc.2";
            src = fetchHex {
              pkg = "raxx";
              version = "1.0.0-rc.2";
              sha256 =
                "bef74327c4abf96e4b2894970053a499a684eb2a2268815c4f393fa1ccef2b32";
            };

            meta = {
              description = ''Interface for HTTP webservers, frameworks and
                            clients.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx = raxx_1_0_0_rc_2;

    raxx_api_blueprint_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, raxx_0_15_4 }:
          buildMix ({
            name = "raxx_api_blueprint";
            version = "0.1.1";
            src = fetchHex {
              pkg = "raxx_api_blueprint";
              version = "0.1.1";
              sha256 =
                "a4e03a3f0de5ae18a6ea10e3a7f4f95de2dfba0d8df234d81d4f4b8609bccf89";
            };
            beamDeps  = [ raxx_0_15_4 ];

            meta = {
              description = ''Raxx middleware for routing requests based on an
                            API Blueprint.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx_api_blueprint";
            };
          } // packageOverrides)
      ) {};

    raxx_api_blueprint = raxx_api_blueprint_0_1_1;

    raxx_cookie_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "raxx_cookie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "raxx_cookie";
              version = "0.1.0";
              sha256 =
                "43c14a71c02d712d5cb25e744014433481cccd7d111acc37cdd73e2975ea77ea";
            };

            meta = {
              description = ''Manage cookies in Raxx applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_cookie";
            };
          } // packageOverrides)
      ) {};

    raxx_cookie = raxx_cookie_0_1_0;

    raxx_elli_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elli_1_0_5,
          raxx_0_14_9
        }:
          buildMix ({
            name = "raxx_elli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "raxx_elli";
              version = "0.1.0";
              sha256 =
                "20d48f639b38431c50764a7e7cc69d2a470a1dcdf78b58babb769222c8623fd8";
            };
            beamDeps  = [ elli_1_0_5 raxx_0_14_9 ];

            meta = {
              description = ''Elli adapter for the Raxx webserver interface'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_elli";
            };
          } // packageOverrides)
      ) {};

    raxx_elli = raxx_elli_0_1_0;

    raxx_kit_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "raxx_kit";
            version = "0.5.3";
            src = fetchHex {
              pkg = "raxx_kit";
              version = "0.5.3";
              sha256 =
                "b45c87b849f7c7b3f487a71d9a04e9733163cd49a2b290c0ca6248adff13e521";
            };

            meta = {
              description = ''Framework for web applications with Raxx and
                            Ace'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx_kit";
            };
          } // packageOverrides)
      ) {};

    raxx_kit = raxx_kit_0_5_3;

    raxx_method_override_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, raxx_0_14_14 }:
          buildMix ({
            name = "raxx_method_override";
            version = "0.3.0";
            src = fetchHex {
              pkg = "raxx_method_override";
              version = "0.3.0";
              sha256 =
                "cd7cba37145f889f8e1b3de080da7f1eae1149eaf1ee736f729fb7d2301bf0b3";
            };
            beamDeps  = [ raxx_0_14_14 ];

            meta = {
              longDescription = ''Raxx middleware to override a request`s POST
                                method with value declared in _method query
                                parameter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx_method_override = raxx_method_override_0_3_0;

    raxx_static_0_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mime_1_3_0,
          raxx_0_15_4
        }:
          buildMix ({
            name = "raxx_static";
            version = "0.6.1";
            src = fetchHex {
              pkg = "raxx_static";
              version = "0.6.1";
              sha256 =
                "10f869fefe043e88794ee36b38249c8eb2b64347944fa4a81a7e42a5a5e4a068";
            };
            beamDeps  = [ mime_1_3_0 raxx_0_15_4 ];

            meta = {
              description = ''Raxx middleware for serving static content.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx_static";
            };
          } // packageOverrides)
      ) {};

    raxx_static = raxx_static_0_6_1;

    raxx_verify_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_13_0 }:
          buildMix ({
            name = "raxx_verify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "raxx_verify";
              version = "0.1.0";
              sha256 =
                "c83dc9950d9a250ef3e4add329d16e61518aa40e82882a92fc6ad6b3ecf14de9";
            };
            beamDeps  = [ httpoison_0_13_0 ];

            meta = {
              description = ''Cowboy adapter for the Raxx webserver
                            interface'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_cowboy";
            };
          } // packageOverrides)
      ) {};

    raxx_verify = raxx_verify_0_1_0;

    razorpay_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_13_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "razorpay";
            version = "0.5.0";
            src = fetchHex {
              pkg = "razorpay";
              version = "0.5.0";
              sha256 =
                "c58e545ef1d4e54523ffff84beb5144b0b5561628dc63c8d32b1d8e5fa24637c";
            };
            beamDeps  = [ hackney_1_13_0 poison_2_2_0 ];

            meta = {
              description = ''Elixir bindings for the Razorpay API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/razorpay-elixir";
            };
          } // packageOverrides)
      ) {};

    razorpay = razorpay_0_5_0;

    rbtree_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rbtree";
            version = "0.1.6";
            src = fetchHex {
              pkg = "rbtree";
              version = "0.1.6";
              sha256 =
                "1505eb0c055dff4c2a5a5b6fbceeddddd19231ee7e410bb252dff7524652f7a1";
            };

            meta = {
              description = ''This implements red black tree in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rickyhan/rbtree";
            };
          } // packageOverrides)
      ) {};

    rbtree = rbtree_0_1_6;

    rcon_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rcon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rcon";
              version = "0.1.0";
              sha256 =
                "bdf4365dfff0f3b2775315c07a4731644574e8087344e639097d74db6fe36d56";
            };

            meta = {
              description = ''Source compatible RCON implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avitex/elixir-rcon";
            };
          } // packageOverrides)
      ) {};

    rcon = rcon_0_1_0;

    rdb_parser_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lzf_0_1_3 }:
          buildMix ({
            name = "rdb_parser";
            version = "0.3.1";
            src = fetchHex {
              pkg = "rdb_parser";
              version = "0.3.1";
              sha256 =
                "af1620682a5cb44862977e7e391cacdeac493eb319f1e5419a57525760dfc11a";
            };
            beamDeps  = [ lzf_0_1_3 ];

            meta = {
              longDescription = ''Parses an Redis dump backup file (.rdb file)
                                and extracts entries into a Stream for out of
                                band processing of data stored in redis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshuawscott/rdb_parser";
            };
          } // packageOverrides)
      ) {};

    rdb_parser = rdb_parser_0_3_1;

    rdf_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rdf";
            version = "0.4.1";
            src = fetchHex {
              pkg = "rdf";
              version = "0.4.1";
              sha256 =
                "0ca53f559c3b08085d7cc0098cf08429509729cd5c9f5835f7067d8556a5f142";
            };

            meta = {
              description = ''An implementation of RDF for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marcelotto/rdf-ex";
            };
          } // packageOverrides)
      ) {};

    rdf = rdf_0_4_1;

    rdf_vocab_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rdf_0_4_1 }:
          buildMix ({
            name = "rdf_vocab";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rdf_vocab";
              version = "0.2.0";
              sha256 =
                "d725d715e8d2b733e0dafc7f4283578e1a160c5ab118370ff387882312d0af48";
            };
            beamDeps  = [ rdf_0_4_1 ];

            meta = {
              description = ''A collection of RDF.ex namespaces for various
                            vocabularies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marcelotto/rdf_vocab";
            };
          } // packageOverrides)
      ) {};

    rdf_vocab = rdf_vocab_0_2_0;

    rdtype_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_7_1 }:
          buildMix ({
            name = "rdtype";
            version = "0.5.1";
            src = fetchHex {
              pkg = "rdtype";
              version = "0.5.1";
              sha256 =
                "24c5e099dc2735787ad5254a244f0e1f95a28b2e7e3800df22559e54728cbe25";
            };
            beamDeps  = [ redix_0_7_1 ];

            meta = {
              description = ''Calling Redis Data Types in easily way'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/rdtype";
            };
          } // packageOverrides)
      ) {};

    rdtype = rdtype_0_5_1;

    react_on_elixir_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_1_5_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "react_on_elixir";
            version = "0.0.4";
            src = fetchHex {
              pkg = "react_on_elixir";
              version = "0.0.4";
              sha256 =
                "5747938079acd15a39768a77ab013b199d429d725397fcd1e8313abf6eeb7c3b";
            };
            beamDeps  = [ poison_1_5_2 poolboy_1_5_1 ];

            meta = {
              description = ''Server render react components from Elixir'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/gauravtiwari/react_on_elixir";
            };
          } // packageOverrides)
      ) {};

    react_on_elixir = react_on_elixir_0_0_4;

    react_render_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jason_1_1_1 }:
          buildMix ({
            name = "react_render";
            version = "1.0.0";
            src = fetchHex {
              pkg = "react_render";
              version = "1.0.0";
              sha256 =
                "6768e2f42827b7913c23a2f4c5bc8d8b8a655539324923635960640ae37d404d";
            };
            beamDeps  = [ jason_1_1_1 ];

            meta = {
              description = ''Renders React components as HTML'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/revelrylabs/elixir_react_render";
            };
          } // packageOverrides)
      ) {};

    react_render = react_render_1_0_0;

    reactivity_0_6_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reactivity";
            version = "0.6.2";
            src = fetchHex {
              pkg = "reactivity";
              version = "0.6.2";
              sha256 =
                "668c192d1c07e675e3564ab02207c9e011de811e5e17e7b82e23d9c83609f63e";
            };

            meta = {
              longDescription = ''A reactive programming library for Elixir.
                                The purpose of this library is to experiment in
                                an academic context.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/m1dnight/reactive-elixir";
            };
          } // packageOverrides)
      ) {};

    reactivity = reactivity_0_6_2;

    read_doc_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_18_3 }:
          buildMix ({
            name = "read_doc";
            version = "0.1.1";
            src = fetchHex {
              pkg = "read_doc";
              version = "0.1.1";
              sha256 =
                "7904659a5115ed812d95af5e799d72e277414ad8f169a811cf9ddb7be60d58a4";
            };
            beamDeps  = [ ex_doc_0_18_3 ];

            meta = {
              longDescription = ''A simple tool to insert docstrings into files
                                (typically markdown files like README.md)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/RobertDober/read_doc";
            };
          } // packageOverrides)
      ) {};

    read_doc = read_doc_0_1_1;

    read_repos_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "read_repos";
            version = "0.0.1";
            src = fetchHex {
              pkg = "read_repos";
              version = "0.0.1";
              sha256 =
                "f981ea689d21956e1470d947ba24c5480e808fdf1a9da4cd148e5a4e1247e8b4";
            };

            meta = {
              description = ''Simple master-slave library for Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-aktsk/read_repos";
            };
          } // packageOverrides)
      ) {};

    read_repos = read_repos_0_0_1;

    readability_0_9_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_18_1,
          httpoison_0_13_0
        }:
          buildMix ({
            name = "readability";
            version = "0.9.1";
            src = fetchHex {
              pkg = "readability";
              version = "0.9.1";
              sha256 =
                "eb24ad0dd00a16bc3a0352d8fe4d840b5ae2e398669debd71447ae970ddbfa65";
            };
            beamDeps  = [ floki_0_18_1 httpoison_0_13_0 ];

            meta = {
              description = ''Readability library for extracting and curating
                            articles.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/keepcosmos/readability";
            };
          } // packageOverrides)
      ) {};

    readability = readability_0_9_1;

    readit_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_13_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "readit";
            version = "0.1.0";
            src = fetchHex {
              pkg = "readit";
              version = "0.1.0";
              sha256 =
                "8306eaf0ebff0fed82de715e0657468db57ceb337aafc0dbf167f4d307d0a05b";
            };
            beamDeps  = [ httpoison_0_13_0 poison_3_1_0 ];

            meta = {
              description = ''A Simple Read-Only Reddit API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/readit";
            };
          } // packageOverrides)
      ) {};

    readit = readit_0_1_0;

    readly_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "readly";
            version = "0.1.1";
            src = fetchHex {
              pkg = "readly";
              version = "0.1.1";
              sha256 =
                "7cce4c4392ebe1cca07b5dbabb74764b0bcee01e77976e66bdd864d36fa7acd2";
            };

            meta = {
              longDescription = ''Readly is a simple module that allow you to
                                create readonly datasource module easily.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igrs/readly";
            };
          } // packageOverrides)
      ) {};

    readly = readly_0_1_1;

    readme_md_doc_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          argument_parser_0_1_3,
          ex_doc_0_18_3
        }:
          buildMix ({
            name = "readme_md_doc";
            version = "0.1.2";
            src = fetchHex {
              pkg = "readme_md_doc";
              version = "0.1.2";
              sha256 =
                "3353e8598991afbaa8d12344212fdd9c85413d1664b026a7ee1036573c6f536c";
            };
            beamDeps  = [ argument_parser_0_1_3 ex_doc_0_18_3 ];

            meta = {
              description = ''README.md generation tool for small Elixir
                            project'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jisaacstone/readme_md_docgen";
            };
          } // packageOverrides)
      ) {};

    readme_md_doc = readme_md_doc_0_1_2;

    reagent_0_1_14 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exts_0_3_4,
          socket_0_3_13
        }:
          buildMix ({
            name = "reagent";
            version = "0.1.14";
            src = fetchHex {
              pkg = "reagent";
              version = "0.1.14";
              sha256 =
                "6d40dc48c6068f81aee3f6d461d6139942b22e407cdd854bb4a71972e02b121d";
            };
            beamDeps  = [ exts_0_3_4 socket_0_3_13 ];

            meta = {
              description = ''You need more reagents to conjure this server'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/reagent";
            };
          } // packageOverrides)
      ) {};

    reagent = reagent_0_1_14;

    reap_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsex_2_0_0 }:
          buildMix ({
            name = "reap";
            version = "0.1.3";
            src = fetchHex {
              pkg = "reap";
              version = "0.1.3";
              sha256 =
                "e260540500a29ac9945db512a550cd9b56ba4295b4aa3c1b408ad62720e7807b";
            };
            beamDeps  = [ jsex_2_0_0 ];

            meta = {
              description = ''A library for working with the refheap API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Raynes/reap";
            };
          } // packageOverrides)
      ) {};

    reap = reap_0_1_3;

    reaxive_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reaxive";
            version = "0.1.0";
            src = fetchHex {
              pkg = "reaxive";
              version = "0.1.0";
              sha256 =
                "d185c80da34499999000f6aaab3ab891cdff34cb3a2079835e8e6f5b4e813fa2";
            };

            meta = {
              longDescription = ''Reaxive is a library inspired by Reactive
                                Extensions and ELM to provide functional
                                reactive programming to Elixir. It allows for
                                active sequences of events and a set of
                                stream-reducer like transformations such as map
                                or filter. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/alfert/reaxive";
            };
          } // packageOverrides)
      ) {};

    reaxive = reaxive_0_1_0;

    rebar3_appup_plugin_2_4_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          bbmustache_1_5_0,
          string_compat_0_0_1
        }:
          buildRebar3 ({
            name = "rebar3_appup_plugin";
            version = "2.4.1";
            src = fetchHex {
              pkg = "rebar3_appup_plugin";
              version = "2.4.1";
              sha256 =
                "0ebdf7dd12c9cfdff7081f9af520aa5a00e4d83105224bcb9e324fd65dd3d722";
            };

            beamDeps  = [ bbmustache_1_5_0 string_compat_0_0_1 ];

            meta = {
              description = ''A rebar3 plugin for handling .appup files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lrascao/rebar3_appup_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_appup_plugin = rebar3_appup_plugin_2_4_1;

    rebar3_asn1_compiler_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_asn1_compiler";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rebar3_asn1_compiler";
              version = "1.0.0";
              sha256 =
                "25ec1d5c97393195650ac8c7a06a267a886a1479950ee047c43b5228c07b30b9";
            };

            meta = {
              description = ''Compile ASN.1 modules with Rebar3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pyykkis/rebar3_asn1_compiler";
            };
          } // packageOverrides)
      ) {};

    rebar3_asn1_compiler = rebar3_asn1_compiler_1_0_0;

  };
in stdenv.lib.fix' (stdenv.lib.extends overrides packages)